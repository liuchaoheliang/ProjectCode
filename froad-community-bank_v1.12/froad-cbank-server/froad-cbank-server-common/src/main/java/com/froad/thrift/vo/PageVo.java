/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * PageVo 分页基础
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-14")
public class PageVo implements org.apache.thrift.TBase<PageVo, PageVo._Fields>, java.io.Serializable, Cloneable, Comparable<PageVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageVo");

  private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BEG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPageNumber", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FIRST_RECORD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstRecordTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_RECORD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRecordTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageVoTupleSchemeFactory());
  }

  /**
   * 当前页码
   */
  public int pageNumber; // required
  /**
   * 每页记录数
   */
  public int pageSize; // required
  /**
   * 总记录数
   */
  public int totalCount; // required
  /**
   * 总页数
   */
  public int pageCount; // required
  /**
   * 开始日期
   */
  public long begDate; // required
  /**
   * 结束日期
   */
  public long endDate; // required
  /**
   * 上次查询页码
   */
  public int lastPageNumber; // required
  /**
   * 当前页第一条记录时间
   */
  public long firstRecordTime; // required
  /**
   * 当前页最后一条记录时间
   */
  public long lastRecordTime; // required
  /**
   * 是否还有下一页
   */
  public boolean hasNext; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 当前页码
     */
    PAGE_NUMBER((short)1, "pageNumber"),
    /**
     * 每页记录数
     */
    PAGE_SIZE((short)2, "pageSize"),
    /**
     * 总记录数
     */
    TOTAL_COUNT((short)3, "totalCount"),
    /**
     * 总页数
     */
    PAGE_COUNT((short)4, "pageCount"),
    /**
     * 开始日期
     */
    BEG_DATE((short)5, "begDate"),
    /**
     * 结束日期
     */
    END_DATE((short)6, "endDate"),
    /**
     * 上次查询页码
     */
    LAST_PAGE_NUMBER((short)7, "lastPageNumber"),
    /**
     * 当前页第一条记录时间
     */
    FIRST_RECORD_TIME((short)8, "firstRecordTime"),
    /**
     * 当前页最后一条记录时间
     */
    LAST_RECORD_TIME((short)9, "lastRecordTime"),
    /**
     * 是否还有下一页
     */
    HAS_NEXT((short)10, "hasNext");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_NUMBER
          return PAGE_NUMBER;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 4: // PAGE_COUNT
          return PAGE_COUNT;
        case 5: // BEG_DATE
          return BEG_DATE;
        case 6: // END_DATE
          return END_DATE;
        case 7: // LAST_PAGE_NUMBER
          return LAST_PAGE_NUMBER;
        case 8: // FIRST_RECORD_TIME
          return FIRST_RECORD_TIME;
        case 9: // LAST_RECORD_TIME
          return LAST_RECORD_TIME;
        case 10: // HAS_NEXT
          return HAS_NEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENUMBER_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __TOTALCOUNT_ISSET_ID = 2;
  private static final int __PAGECOUNT_ISSET_ID = 3;
  private static final int __BEGDATE_ISSET_ID = 4;
  private static final int __ENDDATE_ISSET_ID = 5;
  private static final int __LASTPAGENUMBER_ISSET_ID = 6;
  private static final int __FIRSTRECORDTIME_ISSET_ID = 7;
  private static final int __LASTRECORDTIME_ISSET_ID = 8;
  private static final int __HASNEXT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEG_DATE, new org.apache.thrift.meta_data.FieldMetaData("begDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lastPageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_RECORD_TIME, new org.apache.thrift.meta_data.FieldMetaData("firstRecordTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_RECORD_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastRecordTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageVo.class, metaDataMap);
  }

  public PageVo() {
    this.pageNumber = 1;

    this.pageSize = 20;

    this.totalCount = 0;

    this.pageCount = 0;

  }

  public PageVo(
    int pageNumber,
    int pageSize,
    int totalCount,
    int pageCount,
    long begDate,
    long endDate,
    int lastPageNumber,
    long firstRecordTime,
    long lastRecordTime,
    boolean hasNext)
  {
    this();
    this.pageNumber = pageNumber;
    setPageNumberIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.begDate = begDate;
    setBegDateIsSet(true);
    this.endDate = endDate;
    setEndDateIsSet(true);
    this.lastPageNumber = lastPageNumber;
    setLastPageNumberIsSet(true);
    this.firstRecordTime = firstRecordTime;
    setFirstRecordTimeIsSet(true);
    this.lastRecordTime = lastRecordTime;
    setLastRecordTimeIsSet(true);
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageVo(PageVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageNumber = other.pageNumber;
    this.pageSize = other.pageSize;
    this.totalCount = other.totalCount;
    this.pageCount = other.pageCount;
    this.begDate = other.begDate;
    this.endDate = other.endDate;
    this.lastPageNumber = other.lastPageNumber;
    this.firstRecordTime = other.firstRecordTime;
    this.lastRecordTime = other.lastRecordTime;
    this.hasNext = other.hasNext;
  }

  public PageVo deepCopy() {
    return new PageVo(this);
  }

  @Override
  public void clear() {
    this.pageNumber = 1;

    this.pageSize = 20;

    this.totalCount = 0;

    this.pageCount = 0;

    setBegDateIsSet(false);
    this.begDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    setLastPageNumberIsSet(false);
    this.lastPageNumber = 0;
    setFirstRecordTimeIsSet(false);
    this.firstRecordTime = 0;
    setLastRecordTimeIsSet(false);
    this.lastRecordTime = 0;
    setHasNextIsSet(false);
    this.hasNext = false;
  }

  /**
   * 当前页码
   */
  public int getPageNumber() {
    return this.pageNumber;
  }

  /**
   * 当前页码
   */
  public PageVo setPageNumber(int pageNumber) {
    this.pageNumber = pageNumber;
    setPageNumberIsSet(true);
    return this;
  }

  public void unsetPageNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
  }

  /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
  }

  public void setPageNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
  }

  /**
   * 每页记录数
   */
  public int getPageSize() {
    return this.pageSize;
  }

  /**
   * 每页记录数
   */
  public PageVo setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  /**
   * 总记录数
   */
  public int getTotalCount() {
    return this.totalCount;
  }

  /**
   * 总记录数
   */
  public PageVo setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 总页数
   */
  public int getPageCount() {
    return this.pageCount;
  }

  /**
   * 总页数
   */
  public PageVo setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  /**
   * 开始日期
   */
  public long getBegDate() {
    return this.begDate;
  }

  /**
   * 开始日期
   */
  public PageVo setBegDate(long begDate) {
    this.begDate = begDate;
    setBegDateIsSet(true);
    return this;
  }

  public void unsetBegDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  /** Returns true if field begDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  public void setBegDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATE_ISSET_ID, value);
  }

  /**
   * 结束日期
   */
  public long getEndDate() {
    return this.endDate;
  }

  /**
   * 结束日期
   */
  public PageVo setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
  }

  /**
   * 上次查询页码
   */
  public int getLastPageNumber() {
    return this.lastPageNumber;
  }

  /**
   * 上次查询页码
   */
  public PageVo setLastPageNumber(int lastPageNumber) {
    this.lastPageNumber = lastPageNumber;
    setLastPageNumberIsSet(true);
    return this;
  }

  public void unsetLastPageNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPAGENUMBER_ISSET_ID);
  }

  /** Returns true if field lastPageNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPageNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPAGENUMBER_ISSET_ID);
  }

  public void setLastPageNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPAGENUMBER_ISSET_ID, value);
  }

  /**
   * 当前页第一条记录时间
   */
  public long getFirstRecordTime() {
    return this.firstRecordTime;
  }

  /**
   * 当前页第一条记录时间
   */
  public PageVo setFirstRecordTime(long firstRecordTime) {
    this.firstRecordTime = firstRecordTime;
    setFirstRecordTimeIsSet(true);
    return this;
  }

  public void unsetFirstRecordTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTRECORDTIME_ISSET_ID);
  }

  /** Returns true if field firstRecordTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstRecordTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTRECORDTIME_ISSET_ID);
  }

  public void setFirstRecordTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTRECORDTIME_ISSET_ID, value);
  }

  /**
   * 当前页最后一条记录时间
   */
  public long getLastRecordTime() {
    return this.lastRecordTime;
  }

  /**
   * 当前页最后一条记录时间
   */
  public PageVo setLastRecordTime(long lastRecordTime) {
    this.lastRecordTime = lastRecordTime;
    setLastRecordTimeIsSet(true);
    return this;
  }

  public void unsetLastRecordTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTRECORDTIME_ISSET_ID);
  }

  /** Returns true if field lastRecordTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRecordTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTRECORDTIME_ISSET_ID);
  }

  public void setLastRecordTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTRECORDTIME_ISSET_ID, value);
  }

  /**
   * 是否还有下一页
   */
  public boolean isHasNext() {
    return this.hasNext;
  }

  /**
   * 是否还有下一页
   */
  public PageVo setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_NUMBER:
      if (value == null) {
        unsetPageNumber();
      } else {
        setPageNumber((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;

    case BEG_DATE:
      if (value == null) {
        unsetBegDate();
      } else {
        setBegDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case LAST_PAGE_NUMBER:
      if (value == null) {
        unsetLastPageNumber();
      } else {
        setLastPageNumber((Integer)value);
      }
      break;

    case FIRST_RECORD_TIME:
      if (value == null) {
        unsetFirstRecordTime();
      } else {
        setFirstRecordTime((Long)value);
      }
      break;

    case LAST_RECORD_TIME:
      if (value == null) {
        unsetLastRecordTime();
      } else {
        setLastRecordTime((Long)value);
      }
      break;

    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_NUMBER:
      return Integer.valueOf(getPageNumber());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case PAGE_COUNT:
      return Integer.valueOf(getPageCount());

    case BEG_DATE:
      return Long.valueOf(getBegDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case LAST_PAGE_NUMBER:
      return Integer.valueOf(getLastPageNumber());

    case FIRST_RECORD_TIME:
      return Long.valueOf(getFirstRecordTime());

    case LAST_RECORD_TIME:
      return Long.valueOf(getLastRecordTime());

    case HAS_NEXT:
      return Boolean.valueOf(isHasNext());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_NUMBER:
      return isSetPageNumber();
    case PAGE_SIZE:
      return isSetPageSize();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case PAGE_COUNT:
      return isSetPageCount();
    case BEG_DATE:
      return isSetBegDate();
    case END_DATE:
      return isSetEndDate();
    case LAST_PAGE_NUMBER:
      return isSetLastPageNumber();
    case FIRST_RECORD_TIME:
      return isSetFirstRecordTime();
    case LAST_RECORD_TIME:
      return isSetLastRecordTime();
    case HAS_NEXT:
      return isSetHasNext();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageVo)
      return this.equals((PageVo)that);
    return false;
  }

  public boolean equals(PageVo that) {
    if (that == null)
      return false;

    boolean this_present_pageNumber = true;
    boolean that_present_pageNumber = true;
    if (this_present_pageNumber || that_present_pageNumber) {
      if (!(this_present_pageNumber && that_present_pageNumber))
        return false;
      if (this.pageNumber != that.pageNumber)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_begDate = true;
    boolean that_present_begDate = true;
    if (this_present_begDate || that_present_begDate) {
      if (!(this_present_begDate && that_present_begDate))
        return false;
      if (this.begDate != that.begDate)
        return false;
    }

    boolean this_present_endDate = true;
    boolean that_present_endDate = true;
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_lastPageNumber = true;
    boolean that_present_lastPageNumber = true;
    if (this_present_lastPageNumber || that_present_lastPageNumber) {
      if (!(this_present_lastPageNumber && that_present_lastPageNumber))
        return false;
      if (this.lastPageNumber != that.lastPageNumber)
        return false;
    }

    boolean this_present_firstRecordTime = true;
    boolean that_present_firstRecordTime = true;
    if (this_present_firstRecordTime || that_present_firstRecordTime) {
      if (!(this_present_firstRecordTime && that_present_firstRecordTime))
        return false;
      if (this.firstRecordTime != that.firstRecordTime)
        return false;
    }

    boolean this_present_lastRecordTime = true;
    boolean that_present_lastRecordTime = true;
    if (this_present_lastRecordTime || that_present_lastRecordTime) {
      if (!(this_present_lastRecordTime && that_present_lastRecordTime))
        return false;
      if (this.lastRecordTime != that.lastRecordTime)
        return false;
    }

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pageNumber = true;
    list.add(present_pageNumber);
    if (present_pageNumber)
      list.add(pageNumber);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_pageCount = true;
    list.add(present_pageCount);
    if (present_pageCount)
      list.add(pageCount);

    boolean present_begDate = true;
    list.add(present_begDate);
    if (present_begDate)
      list.add(begDate);

    boolean present_endDate = true;
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_lastPageNumber = true;
    list.add(present_lastPageNumber);
    if (present_lastPageNumber)
      list.add(lastPageNumber);

    boolean present_firstRecordTime = true;
    list.add(present_firstRecordTime);
    if (present_firstRecordTime)
      list.add(firstRecordTime);

    boolean present_lastRecordTime = true;
    list.add(present_lastRecordTime);
    if (present_lastRecordTime)
      list.add(lastRecordTime);

    boolean present_hasNext = true;
    list.add(present_hasNext);
    if (present_hasNext)
      list.add(hasNext);

    return list.hashCode();
  }

  @Override
  public int compareTo(PageVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegDate()).compareTo(other.isSetBegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDate, other.begDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPageNumber()).compareTo(other.isSetLastPageNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPageNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPageNumber, other.lastPageNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstRecordTime()).compareTo(other.isSetFirstRecordTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstRecordTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstRecordTime, other.firstRecordTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastRecordTime()).compareTo(other.isSetLastRecordTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRecordTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRecordTime, other.lastRecordTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageVo(");
    boolean first = true;

    sb.append("pageNumber:");
    sb.append(this.pageNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("begDate:");
    sb.append(this.begDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    sb.append(this.endDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPageNumber:");
    sb.append(this.lastPageNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstRecordTime:");
    sb.append(this.firstRecordTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastRecordTime:");
    sb.append(this.lastRecordTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageVoStandardSchemeFactory implements SchemeFactory {
    public PageVoStandardScheme getScheme() {
      return new PageVoStandardScheme();
    }
  }

  private static class PageVoStandardScheme extends StandardScheme<PageVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNumber = iprot.readI32();
              struct.setPageNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDate = iprot.readI64();
              struct.setBegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDate = iprot.readI64();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_PAGE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastPageNumber = iprot.readI32();
              struct.setLastPageNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIRST_RECORD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstRecordTime = iprot.readI64();
              struct.setFirstRecordTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_RECORD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastRecordTime = iprot.readI64();
              struct.setLastRecordTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.pageNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEG_DATE_FIELD_DESC);
      oprot.writeI64(struct.begDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_DATE_FIELD_DESC);
      oprot.writeI64(struct.endDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PAGE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.lastPageNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_RECORD_TIME_FIELD_DESC);
      oprot.writeI64(struct.firstRecordTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_RECORD_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastRecordTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(struct.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageVoTupleSchemeFactory implements SchemeFactory {
    public PageVoTupleScheme getScheme() {
      return new PageVoTupleScheme();
    }
  }

  private static class PageVoTupleScheme extends TupleScheme<PageVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageNumber()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(2);
      }
      if (struct.isSetPageCount()) {
        optionals.set(3);
      }
      if (struct.isSetBegDate()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      if (struct.isSetLastPageNumber()) {
        optionals.set(6);
      }
      if (struct.isSetFirstRecordTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastRecordTime()) {
        optionals.set(8);
      }
      if (struct.isSetHasNext()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPageNumber()) {
        oprot.writeI32(struct.pageNumber);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetBegDate()) {
        oprot.writeI64(struct.begDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeI64(struct.endDate);
      }
      if (struct.isSetLastPageNumber()) {
        oprot.writeI32(struct.lastPageNumber);
      }
      if (struct.isSetFirstRecordTime()) {
        oprot.writeI64(struct.firstRecordTime);
      }
      if (struct.isSetLastRecordTime()) {
        oprot.writeI64(struct.lastRecordTime);
      }
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pageNumber = iprot.readI32();
        struct.setPageNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.begDate = iprot.readI64();
        struct.setBegDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readI64();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastPageNumber = iprot.readI32();
        struct.setLastPageNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.firstRecordTime = iprot.readI64();
        struct.setFirstRecordTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastRecordTime = iprot.readI64();
        struct.setLastRecordTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
    }
  }

}

