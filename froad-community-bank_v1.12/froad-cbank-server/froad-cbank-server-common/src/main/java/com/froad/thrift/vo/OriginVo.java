/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 源对象信息(包含平台,操作ip,操作员id等...)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-30")
public class OriginVo implements org.apache.thrift.TBase<OriginVo, OriginVo._Fields>, java.io.Serializable, Cloneable, Comparable<OriginVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OriginVo");

  private static final org.apache.thrift.protocol.TField PLAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATOR_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorUserName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATOR_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorIp", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OriginVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OriginVoTupleSchemeFactory());
  }

  /**
   * 平台代码
   * 
   * @see PlatType
   */
  public PlatType platType; // required
  /**
   * 操作员id(说明:如果是个人操作则传用户id;如果是银行操作则传银行操作员id;如果是商户用户操作则传商户用户id)
   */
  public long operatorId; // required
  /**
   * 操作员username(说明:如果是个人操作则传用户名;如果是银行操作则传银行操作员用户名;如果是商户用户操作则传商户用户名)
   */
  public String operatorUserName; // required
  /**
   * 终端ip
   */
  public String operatorIp; // required
  /**
   * 操作说明
   */
  public String description; // optional
  /**
   * 客户端Id
   */
  public String clientId; // required
  /**
   * 操作人角色id
   */
  public String roleId; // optional
  /**
   * 操作人所属组织(说明:如果是个人操作则传空;如果是银行操作则传银行操作员所在orgCode;如果是商户用户操作则传商户id;如果是门店用户操作则传门店id;)
   */
  public String orgId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 平台代码
     * 
     * @see PlatType
     */
    PLAT_TYPE((short)1, "platType"),
    /**
     * 操作员id(说明:如果是个人操作则传用户id;如果是银行操作则传银行操作员id;如果是商户用户操作则传商户用户id)
     */
    OPERATOR_ID((short)2, "operatorId"),
    /**
     * 操作员username(说明:如果是个人操作则传用户名;如果是银行操作则传银行操作员用户名;如果是商户用户操作则传商户用户名)
     */
    OPERATOR_USER_NAME((short)3, "operatorUserName"),
    /**
     * 终端ip
     */
    OPERATOR_IP((short)4, "operatorIp"),
    /**
     * 操作说明
     */
    DESCRIPTION((short)5, "description"),
    /**
     * 客户端Id
     */
    CLIENT_ID((short)6, "clientId"),
    /**
     * 操作人角色id
     */
    ROLE_ID((short)7, "roleId"),
    /**
     * 操作人所属组织(说明:如果是个人操作则传空;如果是银行操作则传银行操作员所在orgCode;如果是商户用户操作则传商户id;如果是门店用户操作则传门店id;)
     */
    ORG_ID((short)8, "orgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAT_TYPE
          return PLAT_TYPE;
        case 2: // OPERATOR_ID
          return OPERATOR_ID;
        case 3: // OPERATOR_USER_NAME
          return OPERATOR_USER_NAME;
        case 4: // OPERATOR_IP
          return OPERATOR_IP;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        case 6: // CLIENT_ID
          return CLIENT_ID;
        case 7: // ROLE_ID
          return ROLE_ID;
        case 8: // ORG_ID
          return ORG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRIPTION,_Fields.ROLE_ID,_Fields.ORG_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlatType.class)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATOR_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_IP, new org.apache.thrift.meta_data.FieldMetaData("operatorIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OriginVo.class, metaDataMap);
  }

  public OriginVo() {
  }

  public OriginVo(
    PlatType platType,
    long operatorId,
    String operatorUserName,
    String operatorIp,
    String clientId)
  {
    this();
    this.platType = platType;
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    this.operatorUserName = operatorUserName;
    this.operatorIp = operatorIp;
    this.clientId = clientId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OriginVo(OriginVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlatType()) {
      this.platType = other.platType;
    }
    this.operatorId = other.operatorId;
    if (other.isSetOperatorUserName()) {
      this.operatorUserName = other.operatorUserName;
    }
    if (other.isSetOperatorIp()) {
      this.operatorIp = other.operatorIp;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetRoleId()) {
      this.roleId = other.roleId;
    }
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
  }

  public OriginVo deepCopy() {
    return new OriginVo(this);
  }

  @Override
  public void clear() {
    this.platType = null;
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    this.operatorUserName = null;
    this.operatorIp = null;
    this.description = null;
    this.clientId = null;
    this.roleId = null;
    this.orgId = null;
  }

  /**
   * 平台代码
   * 
   * @see PlatType
   */
  public PlatType getPlatType() {
    return this.platType;
  }

  /**
   * 平台代码
   * 
   * @see PlatType
   */
  public OriginVo setPlatType(PlatType platType) {
    this.platType = platType;
    return this;
  }

  public void unsetPlatType() {
    this.platType = null;
  }

  /** Returns true if field platType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatType() {
    return this.platType != null;
  }

  public void setPlatTypeIsSet(boolean value) {
    if (!value) {
      this.platType = null;
    }
  }

  /**
   * 操作员id(说明:如果是个人操作则传用户id;如果是银行操作则传银行操作员id;如果是商户用户操作则传商户用户id)
   */
  public long getOperatorId() {
    return this.operatorId;
  }

  /**
   * 操作员id(说明:如果是个人操作则传用户id;如果是银行操作则传银行操作员id;如果是商户用户操作则传商户用户id)
   */
  public OriginVo setOperatorId(long operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  /**
   * 操作员username(说明:如果是个人操作则传用户名;如果是银行操作则传银行操作员用户名;如果是商户用户操作则传商户用户名)
   */
  public String getOperatorUserName() {
    return this.operatorUserName;
  }

  /**
   * 操作员username(说明:如果是个人操作则传用户名;如果是银行操作则传银行操作员用户名;如果是商户用户操作则传商户用户名)
   */
  public OriginVo setOperatorUserName(String operatorUserName) {
    this.operatorUserName = operatorUserName;
    return this;
  }

  public void unsetOperatorUserName() {
    this.operatorUserName = null;
  }

  /** Returns true if field operatorUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorUserName() {
    return this.operatorUserName != null;
  }

  public void setOperatorUserNameIsSet(boolean value) {
    if (!value) {
      this.operatorUserName = null;
    }
  }

  /**
   * 终端ip
   */
  public String getOperatorIp() {
    return this.operatorIp;
  }

  /**
   * 终端ip
   */
  public OriginVo setOperatorIp(String operatorIp) {
    this.operatorIp = operatorIp;
    return this;
  }

  public void unsetOperatorIp() {
    this.operatorIp = null;
  }

  /** Returns true if field operatorIp is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorIp() {
    return this.operatorIp != null;
  }

  public void setOperatorIpIsSet(boolean value) {
    if (!value) {
      this.operatorIp = null;
    }
  }

  /**
   * 操作说明
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 操作说明
   */
  public OriginVo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 客户端Id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端Id
   */
  public OriginVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 操作人角色id
   */
  public String getRoleId() {
    return this.roleId;
  }

  /**
   * 操作人角色id
   */
  public OriginVo setRoleId(String roleId) {
    this.roleId = roleId;
    return this;
  }

  public void unsetRoleId() {
    this.roleId = null;
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return this.roleId != null;
  }

  public void setRoleIdIsSet(boolean value) {
    if (!value) {
      this.roleId = null;
    }
  }

  /**
   * 操作人所属组织(说明:如果是个人操作则传空;如果是银行操作则传银行操作员所在orgCode;如果是商户用户操作则传商户id;如果是门店用户操作则传门店id;)
   */
  public String getOrgId() {
    return this.orgId;
  }

  /**
   * 操作人所属组织(说明:如果是个人操作则传空;如果是银行操作则传银行操作员所在orgCode;如果是商户用户操作则传商户id;如果是门店用户操作则传门店id;)
   */
  public OriginVo setOrgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAT_TYPE:
      if (value == null) {
        unsetPlatType();
      } else {
        setPlatType((PlatType)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Long)value);
      }
      break;

    case OPERATOR_USER_NAME:
      if (value == null) {
        unsetOperatorUserName();
      } else {
        setOperatorUserName((String)value);
      }
      break;

    case OPERATOR_IP:
      if (value == null) {
        unsetOperatorIp();
      } else {
        setOperatorIp((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAT_TYPE:
      return getPlatType();

    case OPERATOR_ID:
      return Long.valueOf(getOperatorId());

    case OPERATOR_USER_NAME:
      return getOperatorUserName();

    case OPERATOR_IP:
      return getOperatorIp();

    case DESCRIPTION:
      return getDescription();

    case CLIENT_ID:
      return getClientId();

    case ROLE_ID:
      return getRoleId();

    case ORG_ID:
      return getOrgId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAT_TYPE:
      return isSetPlatType();
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATOR_USER_NAME:
      return isSetOperatorUserName();
    case OPERATOR_IP:
      return isSetOperatorIp();
    case DESCRIPTION:
      return isSetDescription();
    case CLIENT_ID:
      return isSetClientId();
    case ROLE_ID:
      return isSetRoleId();
    case ORG_ID:
      return isSetOrgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OriginVo)
      return this.equals((OriginVo)that);
    return false;
  }

  public boolean equals(OriginVo that) {
    if (that == null)
      return false;

    boolean this_present_platType = true && this.isSetPlatType();
    boolean that_present_platType = true && that.isSetPlatType();
    if (this_present_platType || that_present_platType) {
      if (!(this_present_platType && that_present_platType))
        return false;
      if (!this.platType.equals(that.platType))
        return false;
    }

    boolean this_present_operatorId = true;
    boolean that_present_operatorId = true;
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_operatorUserName = true && this.isSetOperatorUserName();
    boolean that_present_operatorUserName = true && that.isSetOperatorUserName();
    if (this_present_operatorUserName || that_present_operatorUserName) {
      if (!(this_present_operatorUserName && that_present_operatorUserName))
        return false;
      if (!this.operatorUserName.equals(that.operatorUserName))
        return false;
    }

    boolean this_present_operatorIp = true && this.isSetOperatorIp();
    boolean that_present_operatorIp = true && that.isSetOperatorIp();
    if (this_present_operatorIp || that_present_operatorIp) {
      if (!(this_present_operatorIp && that_present_operatorIp))
        return false;
      if (!this.operatorIp.equals(that.operatorIp))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_roleId = true && this.isSetRoleId();
    boolean that_present_roleId = true && that.isSetRoleId();
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (!this.roleId.equals(that.roleId))
        return false;
    }

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_platType = true && (isSetPlatType());
    list.add(present_platType);
    if (present_platType)
      list.add(platType.getValue());

    boolean present_operatorId = true;
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_operatorUserName = true && (isSetOperatorUserName());
    list.add(present_operatorUserName);
    if (present_operatorUserName)
      list.add(operatorUserName);

    boolean present_operatorIp = true && (isSetOperatorIp());
    list.add(present_operatorIp);
    if (present_operatorIp)
      list.add(operatorIp);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_roleId = true && (isSetRoleId());
    list.add(present_roleId);
    if (present_roleId)
      list.add(roleId);

    boolean present_orgId = true && (isSetOrgId());
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OriginVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatType()).compareTo(other.isSetPlatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platType, other.platType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorUserName()).compareTo(other.isSetOperatorUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorUserName, other.operatorUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorIp()).compareTo(other.isSetOperatorIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorIp, other.operatorIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OriginVo(");
    boolean first = true;

    sb.append("platType:");
    if (this.platType == null) {
      sb.append("null");
    } else {
      sb.append(this.platType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorId:");
    sb.append(this.operatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorUserName:");
    if (this.operatorUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorIp:");
    if (this.operatorIp == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorIp);
    }
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (isSetRoleId()) {
      if (!first) sb.append(", ");
      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
    }
    if (isSetOrgId()) {
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OriginVoStandardSchemeFactory implements SchemeFactory {
    public OriginVoStandardScheme getScheme() {
      return new OriginVoStandardScheme();
    }
  }

  private static class OriginVoStandardScheme extends StandardScheme<OriginVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OriginVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platType = com.froad.thrift.vo.PlatType.findByValue(iprot.readI32());
              struct.setPlatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operatorId = iprot.readI64();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATOR_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorUserName = iprot.readString();
              struct.setOperatorUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATOR_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorIp = iprot.readString();
              struct.setOperatorIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleId = iprot.readString();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OriginVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platType != null) {
        oprot.writeFieldBegin(PLAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.platType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeI64(struct.operatorId);
      oprot.writeFieldEnd();
      if (struct.operatorUserName != null) {
        oprot.writeFieldBegin(OPERATOR_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.operatorUserName);
        oprot.writeFieldEnd();
      }
      if (struct.operatorIp != null) {
        oprot.writeFieldBegin(OPERATOR_IP_FIELD_DESC);
        oprot.writeString(struct.operatorIp);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.roleId != null) {
        if (struct.isSetRoleId()) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgId != null) {
        if (struct.isSetOrgId()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OriginVoTupleSchemeFactory implements SchemeFactory {
    public OriginVoTupleScheme getScheme() {
      return new OriginVoTupleScheme();
    }
  }

  private static class OriginVoTupleScheme extends TupleScheme<OriginVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OriginVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatType()) {
        optionals.set(0);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(1);
      }
      if (struct.isSetOperatorUserName()) {
        optionals.set(2);
      }
      if (struct.isSetOperatorIp()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      if (struct.isSetClientId()) {
        optionals.set(5);
      }
      if (struct.isSetRoleId()) {
        optionals.set(6);
      }
      if (struct.isSetOrgId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPlatType()) {
        oprot.writeI32(struct.platType.getValue());
      }
      if (struct.isSetOperatorId()) {
        oprot.writeI64(struct.operatorId);
      }
      if (struct.isSetOperatorUserName()) {
        oprot.writeString(struct.operatorUserName);
      }
      if (struct.isSetOperatorIp()) {
        oprot.writeString(struct.operatorIp);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetRoleId()) {
        oprot.writeString(struct.roleId);
      }
      if (struct.isSetOrgId()) {
        oprot.writeString(struct.orgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OriginVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.platType = com.froad.thrift.vo.PlatType.findByValue(iprot.readI32());
        struct.setPlatTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operatorId = iprot.readI64();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operatorUserName = iprot.readString();
        struct.setOperatorUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operatorIp = iprot.readString();
        struct.setOperatorIpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.roleId = iprot.readString();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orgId = iprot.readString();
        struct.setOrgIdIsSet(true);
      }
    }
  }

}

