/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportMerchantInfoService {

  /**
   * 商户信息统计
   */
  public interface Iface {

    /**
     * 商户走势图
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.MerchantTrendResVo getMerchantTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getMerchantTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户业务占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getMerchantBussinessPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户信息统计详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantDetailResVo getMerchantDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户业务统计信息
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantBussinessResVo getMerchantBussinessList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户信息统计详情列表(分页)
     * 
     * @param pageVo
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantDetailPageVo getMerchantDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户门店信息导出
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantOutletResVo getMerchantOutletList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMerchantTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantBussinessPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantBussinessList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantOutletList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.report.MerchantTrendResVo getMerchantTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantTrend(commonParamVo);
      return recv_getMerchantTrend();
    }

    public void send_getMerchantTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantTrend_args args = new getMerchantTrend_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantTrend", args);
    }

    public com.froad.thrift.vo.report.MerchantTrendResVo recv_getMerchantTrend() throws org.apache.thrift.TException
    {
      getMerchantTrend_result result = new getMerchantTrend_result();
      receiveBase(result, "getMerchantTrend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantTrend failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getMerchantTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantTypePercent(commonParamVo);
      return recv_getMerchantTypePercent();
    }

    public void send_getMerchantTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantTypePercent_args args = new getMerchantTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getMerchantTypePercent() throws org.apache.thrift.TException
    {
      getMerchantTypePercent_result result = new getMerchantTypePercent_result();
      receiveBase(result, "getMerchantTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getMerchantBussinessPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantBussinessPercent(commonParamVo);
      return recv_getMerchantBussinessPercent();
    }

    public void send_getMerchantBussinessPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantBussinessPercent_args args = new getMerchantBussinessPercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantBussinessPercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getMerchantBussinessPercent() throws org.apache.thrift.TException
    {
      getMerchantBussinessPercent_result result = new getMerchantBussinessPercent_result();
      receiveBase(result, "getMerchantBussinessPercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantBussinessPercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailResVo getMerchantDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantDetailList(commonParamVo);
      return recv_getMerchantDetailList();
    }

    public void send_getMerchantDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantDetailList_args args = new getMerchantDetailList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantDetailList", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailResVo recv_getMerchantDetailList() throws org.apache.thrift.TException
    {
      getMerchantDetailList_result result = new getMerchantDetailList_result();
      receiveBase(result, "getMerchantDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantDetailList failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantBussinessResVo getMerchantBussinessList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantBussinessList(commonParamVo);
      return recv_getMerchantBussinessList();
    }

    public void send_getMerchantBussinessList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantBussinessList_args args = new getMerchantBussinessList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantBussinessList", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantBussinessResVo recv_getMerchantBussinessList() throws org.apache.thrift.TException
    {
      getMerchantBussinessList_result result = new getMerchantBussinessList_result();
      receiveBase(result, "getMerchantBussinessList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantBussinessList failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailPageVo getMerchantDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantDetailListByPage(pageVo, commonParamVo);
      return recv_getMerchantDetailListByPage();
    }

    public void send_getMerchantDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantDetailListByPage_args args = new getMerchantDetailListByPage_args();
      args.setPageVo(pageVo);
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantDetailListByPage", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailPageVo recv_getMerchantDetailListByPage() throws org.apache.thrift.TException
    {
      getMerchantDetailListByPage_result result = new getMerchantDetailListByPage_result();
      receiveBase(result, "getMerchantDetailListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantDetailListByPage failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantOutletResVo getMerchantOutletList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantOutletList(commonParamVo);
      return recv_getMerchantOutletList();
    }

    public void send_getMerchantOutletList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantOutletList_args args = new getMerchantOutletList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantOutletList", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantOutletResVo recv_getMerchantOutletList() throws org.apache.thrift.TException
    {
      getMerchantOutletList_result result = new getMerchantOutletList_result();
      receiveBase(result, "getMerchantOutletList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantOutletList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMerchantTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantTrend_call method_call = new getMerchantTrend_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantTrend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantTrend_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantTrend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantTrend_args args = new getMerchantTrend_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.MerchantTrendResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantTrend();
      }
    }

    public void getMerchantTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantTypePercent_call method_call = new getMerchantTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantTypePercent_args args = new getMerchantTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantTypePercent();
      }
    }

    public void getMerchantBussinessPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantBussinessPercent_call method_call = new getMerchantBussinessPercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantBussinessPercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantBussinessPercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantBussinessPercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantBussinessPercent_args args = new getMerchantBussinessPercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantBussinessPercent();
      }
    }

    public void getMerchantDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantDetailList_call method_call = new getMerchantDetailList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantDetailList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantDetailList_args args = new getMerchantDetailList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantDetailList();
      }
    }

    public void getMerchantBussinessList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantBussinessList_call method_call = new getMerchantBussinessList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantBussinessList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantBussinessList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantBussinessList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantBussinessList_args args = new getMerchantBussinessList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantBussinessResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantBussinessList();
      }
    }

    public void getMerchantDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantDetailListByPage_call method_call = new getMerchantDetailListByPage_call(pageVo, commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantDetailListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantDetailListByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantDetailListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantDetailListByPage_args args = new getMerchantDetailListByPage_args();
        args.setPageVo(pageVo);
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantDetailPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantDetailListByPage();
      }
    }

    public void getMerchantOutletList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantOutletList_call method_call = new getMerchantOutletList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantOutletList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantOutletList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantOutletList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantOutletList_args args = new getMerchantOutletList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantOutletResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantOutletList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMerchantTrend", new getMerchantTrend());
      processMap.put("getMerchantTypePercent", new getMerchantTypePercent());
      processMap.put("getMerchantBussinessPercent", new getMerchantBussinessPercent());
      processMap.put("getMerchantDetailList", new getMerchantDetailList());
      processMap.put("getMerchantBussinessList", new getMerchantBussinessList());
      processMap.put("getMerchantDetailListByPage", new getMerchantDetailListByPage());
      processMap.put("getMerchantOutletList", new getMerchantOutletList());
      return processMap;
    }

    public static class getMerchantTrend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantTrend_args> {
      public getMerchantTrend() {
        super("getMerchantTrend");
      }

      public getMerchantTrend_args getEmptyArgsInstance() {
        return new getMerchantTrend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantTrend_result getResult(I iface, getMerchantTrend_args args) throws org.apache.thrift.TException {
        getMerchantTrend_result result = new getMerchantTrend_result();
        result.success = iface.getMerchantTrend(args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantTypePercent_args> {
      public getMerchantTypePercent() {
        super("getMerchantTypePercent");
      }

      public getMerchantTypePercent_args getEmptyArgsInstance() {
        return new getMerchantTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantTypePercent_result getResult(I iface, getMerchantTypePercent_args args) throws org.apache.thrift.TException {
        getMerchantTypePercent_result result = new getMerchantTypePercent_result();
        result.success = iface.getMerchantTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantBussinessPercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantBussinessPercent_args> {
      public getMerchantBussinessPercent() {
        super("getMerchantBussinessPercent");
      }

      public getMerchantBussinessPercent_args getEmptyArgsInstance() {
        return new getMerchantBussinessPercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantBussinessPercent_result getResult(I iface, getMerchantBussinessPercent_args args) throws org.apache.thrift.TException {
        getMerchantBussinessPercent_result result = new getMerchantBussinessPercent_result();
        result.success = iface.getMerchantBussinessPercent(args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantDetailList_args> {
      public getMerchantDetailList() {
        super("getMerchantDetailList");
      }

      public getMerchantDetailList_args getEmptyArgsInstance() {
        return new getMerchantDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantDetailList_result getResult(I iface, getMerchantDetailList_args args) throws org.apache.thrift.TException {
        getMerchantDetailList_result result = new getMerchantDetailList_result();
        result.success = iface.getMerchantDetailList(args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantBussinessList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantBussinessList_args> {
      public getMerchantBussinessList() {
        super("getMerchantBussinessList");
      }

      public getMerchantBussinessList_args getEmptyArgsInstance() {
        return new getMerchantBussinessList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantBussinessList_result getResult(I iface, getMerchantBussinessList_args args) throws org.apache.thrift.TException {
        getMerchantBussinessList_result result = new getMerchantBussinessList_result();
        result.success = iface.getMerchantBussinessList(args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantDetailListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantDetailListByPage_args> {
      public getMerchantDetailListByPage() {
        super("getMerchantDetailListByPage");
      }

      public getMerchantDetailListByPage_args getEmptyArgsInstance() {
        return new getMerchantDetailListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantDetailListByPage_result getResult(I iface, getMerchantDetailListByPage_args args) throws org.apache.thrift.TException {
        getMerchantDetailListByPage_result result = new getMerchantDetailListByPage_result();
        result.success = iface.getMerchantDetailListByPage(args.pageVo, args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantOutletList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantOutletList_args> {
      public getMerchantOutletList() {
        super("getMerchantOutletList");
      }

      public getMerchantOutletList_args getEmptyArgsInstance() {
        return new getMerchantOutletList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantOutletList_result getResult(I iface, getMerchantOutletList_args args) throws org.apache.thrift.TException {
        getMerchantOutletList_result result = new getMerchantOutletList_result();
        result.success = iface.getMerchantOutletList(args.commonParamVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getMerchantTrend", new getMerchantTrend());
      processMap.put("getMerchantTypePercent", new getMerchantTypePercent());
      processMap.put("getMerchantBussinessPercent", new getMerchantBussinessPercent());
      processMap.put("getMerchantDetailList", new getMerchantDetailList());
      processMap.put("getMerchantBussinessList", new getMerchantBussinessList());
      processMap.put("getMerchantDetailListByPage", new getMerchantDetailListByPage());
      processMap.put("getMerchantOutletList", new getMerchantOutletList());
      return processMap;
    }

    public static class getMerchantTrend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantTrend_args, com.froad.thrift.vo.report.MerchantTrendResVo> {
      public getMerchantTrend() {
        super("getMerchantTrend");
      }

      public getMerchantTrend_args getEmptyArgsInstance() {
        return new getMerchantTrend_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.MerchantTrendResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.MerchantTrendResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.MerchantTrendResVo o) {
            getMerchantTrend_result result = new getMerchantTrend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantTrend_result result = new getMerchantTrend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantTrend_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.MerchantTrendResVo> resultHandler) throws TException {
        iface.getMerchantTrend(args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getMerchantTypePercent() {
        super("getMerchantTypePercent");
      }

      public getMerchantTypePercent_args getEmptyArgsInstance() {
        return new getMerchantTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getMerchantTypePercent_result result = new getMerchantTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantTypePercent_result result = new getMerchantTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getMerchantTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantBussinessPercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantBussinessPercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getMerchantBussinessPercent() {
        super("getMerchantBussinessPercent");
      }

      public getMerchantBussinessPercent_args getEmptyArgsInstance() {
        return new getMerchantBussinessPercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getMerchantBussinessPercent_result result = new getMerchantBussinessPercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantBussinessPercent_result result = new getMerchantBussinessPercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantBussinessPercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getMerchantBussinessPercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantDetailList_args, com.froad.thrift.vo.report.ReportMerchantDetailResVo> {
      public getMerchantDetailList() {
        super("getMerchantDetailList");
      }

      public getMerchantDetailList_args getEmptyArgsInstance() {
        return new getMerchantDetailList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantDetailResVo o) {
            getMerchantDetailList_result result = new getMerchantDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantDetailList_result result = new getMerchantDetailList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailResVo> resultHandler) throws TException {
        iface.getMerchantDetailList(args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantBussinessList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantBussinessList_args, com.froad.thrift.vo.report.ReportMerchantBussinessResVo> {
      public getMerchantBussinessList() {
        super("getMerchantBussinessList");
      }

      public getMerchantBussinessList_args getEmptyArgsInstance() {
        return new getMerchantBussinessList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantBussinessResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantBussinessResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantBussinessResVo o) {
            getMerchantBussinessList_result result = new getMerchantBussinessList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantBussinessList_result result = new getMerchantBussinessList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantBussinessList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantBussinessResVo> resultHandler) throws TException {
        iface.getMerchantBussinessList(args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantDetailListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantDetailListByPage_args, com.froad.thrift.vo.report.ReportMerchantDetailPageVo> {
      public getMerchantDetailListByPage() {
        super("getMerchantDetailListByPage");
      }

      public getMerchantDetailListByPage_args getEmptyArgsInstance() {
        return new getMerchantDetailListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailPageVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantDetailPageVo o) {
            getMerchantDetailListByPage_result result = new getMerchantDetailListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantDetailListByPage_result result = new getMerchantDetailListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantDetailListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantDetailPageVo> resultHandler) throws TException {
        iface.getMerchantDetailListByPage(args.pageVo, args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantOutletList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantOutletList_args, com.froad.thrift.vo.report.ReportMerchantOutletResVo> {
      public getMerchantOutletList() {
        super("getMerchantOutletList");
      }

      public getMerchantOutletList_args getEmptyArgsInstance() {
        return new getMerchantOutletList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantOutletResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantOutletResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantOutletResVo o) {
            getMerchantOutletList_result result = new getMerchantOutletList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantOutletList_result result = new getMerchantOutletList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantOutletList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantOutletResVo> resultHandler) throws TException {
        iface.getMerchantOutletList(args.commonParamVo,resultHandler);
      }
    }

  }

  public static class getMerchantTrend_args implements org.apache.thrift.TBase<getMerchantTrend_args, getMerchantTrend_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTrend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTrend_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTrend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTrend_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTrend_args.class, metaDataMap);
    }

    public getMerchantTrend_args() {
    }

    public getMerchantTrend_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTrend_args(getMerchantTrend_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantTrend_args deepCopy() {
      return new getMerchantTrend_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantTrend_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTrend_args)
        return this.equals((getMerchantTrend_args)that);
      return false;
    }

    public boolean equals(getMerchantTrend_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTrend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTrend_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTrend_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantTrend_argsStandardScheme getScheme() {
        return new getMerchantTrend_argsStandardScheme();
      }
    }

    private static class getMerchantTrend_argsStandardScheme extends StandardScheme<getMerchantTrend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTrend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTrend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTrend_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantTrend_argsTupleScheme getScheme() {
        return new getMerchantTrend_argsTupleScheme();
      }
    }

    private static class getMerchantTrend_argsTupleScheme extends TupleScheme<getMerchantTrend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantTrend_result implements org.apache.thrift.TBase<getMerchantTrend_result, getMerchantTrend_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTrend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTrend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTrend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTrend_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.MerchantTrendResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.MerchantTrendResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTrend_result.class, metaDataMap);
    }

    public getMerchantTrend_result() {
    }

    public getMerchantTrend_result(
      com.froad.thrift.vo.report.MerchantTrendResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTrend_result(getMerchantTrend_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.MerchantTrendResVo(other.success);
      }
    }

    public getMerchantTrend_result deepCopy() {
      return new getMerchantTrend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.MerchantTrendResVo getSuccess() {
      return this.success;
    }

    public getMerchantTrend_result setSuccess(com.froad.thrift.vo.report.MerchantTrendResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.MerchantTrendResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTrend_result)
        return this.equals((getMerchantTrend_result)that);
      return false;
    }

    public boolean equals(getMerchantTrend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTrend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTrend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTrend_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantTrend_resultStandardScheme getScheme() {
        return new getMerchantTrend_resultStandardScheme();
      }
    }

    private static class getMerchantTrend_resultStandardScheme extends StandardScheme<getMerchantTrend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTrend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.MerchantTrendResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTrend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTrend_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantTrend_resultTupleScheme getScheme() {
        return new getMerchantTrend_resultTupleScheme();
      }
    }

    private static class getMerchantTrend_resultTupleScheme extends TupleScheme<getMerchantTrend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.MerchantTrendResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantTypePercent_args implements org.apache.thrift.TBase<getMerchantTypePercent_args, getMerchantTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTypePercent_args.class, metaDataMap);
    }

    public getMerchantTypePercent_args() {
    }

    public getMerchantTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTypePercent_args(getMerchantTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantTypePercent_args deepCopy() {
      return new getMerchantTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTypePercent_args)
        return this.equals((getMerchantTypePercent_args)that);
      return false;
    }

    public boolean equals(getMerchantTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantTypePercent_argsStandardScheme getScheme() {
        return new getMerchantTypePercent_argsStandardScheme();
      }
    }

    private static class getMerchantTypePercent_argsStandardScheme extends StandardScheme<getMerchantTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantTypePercent_argsTupleScheme getScheme() {
        return new getMerchantTypePercent_argsTupleScheme();
      }
    }

    private static class getMerchantTypePercent_argsTupleScheme extends TupleScheme<getMerchantTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantTypePercent_result implements org.apache.thrift.TBase<getMerchantTypePercent_result, getMerchantTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTypePercent_result.class, metaDataMap);
    }

    public getMerchantTypePercent_result() {
    }

    public getMerchantTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTypePercent_result(getMerchantTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getMerchantTypePercent_result deepCopy() {
      return new getMerchantTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getMerchantTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTypePercent_result)
        return this.equals((getMerchantTypePercent_result)that);
      return false;
    }

    public boolean equals(getMerchantTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantTypePercent_resultStandardScheme getScheme() {
        return new getMerchantTypePercent_resultStandardScheme();
      }
    }

    private static class getMerchantTypePercent_resultStandardScheme extends StandardScheme<getMerchantTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantTypePercent_resultTupleScheme getScheme() {
        return new getMerchantTypePercent_resultTupleScheme();
      }
    }

    private static class getMerchantTypePercent_resultTupleScheme extends TupleScheme<getMerchantTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBussinessPercent_args implements org.apache.thrift.TBase<getMerchantBussinessPercent_args, getMerchantBussinessPercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBussinessPercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBussinessPercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBussinessPercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBussinessPercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBussinessPercent_args.class, metaDataMap);
    }

    public getMerchantBussinessPercent_args() {
    }

    public getMerchantBussinessPercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBussinessPercent_args(getMerchantBussinessPercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantBussinessPercent_args deepCopy() {
      return new getMerchantBussinessPercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantBussinessPercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBussinessPercent_args)
        return this.equals((getMerchantBussinessPercent_args)that);
      return false;
    }

    public boolean equals(getMerchantBussinessPercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBussinessPercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBussinessPercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBussinessPercent_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantBussinessPercent_argsStandardScheme getScheme() {
        return new getMerchantBussinessPercent_argsStandardScheme();
      }
    }

    private static class getMerchantBussinessPercent_argsStandardScheme extends StandardScheme<getMerchantBussinessPercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBussinessPercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBussinessPercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBussinessPercent_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantBussinessPercent_argsTupleScheme getScheme() {
        return new getMerchantBussinessPercent_argsTupleScheme();
      }
    }

    private static class getMerchantBussinessPercent_argsTupleScheme extends TupleScheme<getMerchantBussinessPercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBussinessPercent_result implements org.apache.thrift.TBase<getMerchantBussinessPercent_result, getMerchantBussinessPercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBussinessPercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBussinessPercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBussinessPercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBussinessPercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBussinessPercent_result.class, metaDataMap);
    }

    public getMerchantBussinessPercent_result() {
    }

    public getMerchantBussinessPercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBussinessPercent_result(getMerchantBussinessPercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getMerchantBussinessPercent_result deepCopy() {
      return new getMerchantBussinessPercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getMerchantBussinessPercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBussinessPercent_result)
        return this.equals((getMerchantBussinessPercent_result)that);
      return false;
    }

    public boolean equals(getMerchantBussinessPercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBussinessPercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBussinessPercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBussinessPercent_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantBussinessPercent_resultStandardScheme getScheme() {
        return new getMerchantBussinessPercent_resultStandardScheme();
      }
    }

    private static class getMerchantBussinessPercent_resultStandardScheme extends StandardScheme<getMerchantBussinessPercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBussinessPercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBussinessPercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBussinessPercent_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantBussinessPercent_resultTupleScheme getScheme() {
        return new getMerchantBussinessPercent_resultTupleScheme();
      }
    }

    private static class getMerchantBussinessPercent_resultTupleScheme extends TupleScheme<getMerchantBussinessPercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantDetailList_args implements org.apache.thrift.TBase<getMerchantDetailList_args, getMerchantDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantDetailList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantDetailList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantDetailList_args.class, metaDataMap);
    }

    public getMerchantDetailList_args() {
    }

    public getMerchantDetailList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantDetailList_args(getMerchantDetailList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantDetailList_args deepCopy() {
      return new getMerchantDetailList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantDetailList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantDetailList_args)
        return this.equals((getMerchantDetailList_args)that);
      return false;
    }

    public boolean equals(getMerchantDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantDetailList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantDetailList_argsStandardScheme getScheme() {
        return new getMerchantDetailList_argsStandardScheme();
      }
    }

    private static class getMerchantDetailList_argsStandardScheme extends StandardScheme<getMerchantDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantDetailList_argsTupleScheme getScheme() {
        return new getMerchantDetailList_argsTupleScheme();
      }
    }

    private static class getMerchantDetailList_argsTupleScheme extends TupleScheme<getMerchantDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantDetailList_result implements org.apache.thrift.TBase<getMerchantDetailList_result, getMerchantDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantDetailList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantDetailList_result.class, metaDataMap);
    }

    public getMerchantDetailList_result() {
    }

    public getMerchantDetailList_result(
      com.froad.thrift.vo.report.ReportMerchantDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantDetailList_result(getMerchantDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantDetailResVo(other.success);
      }
    }

    public getMerchantDetailList_result deepCopy() {
      return new getMerchantDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailResVo getSuccess() {
      return this.success;
    }

    public getMerchantDetailList_result setSuccess(com.froad.thrift.vo.report.ReportMerchantDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantDetailList_result)
        return this.equals((getMerchantDetailList_result)that);
      return false;
    }

    public boolean equals(getMerchantDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantDetailList_resultStandardScheme getScheme() {
        return new getMerchantDetailList_resultStandardScheme();
      }
    }

    private static class getMerchantDetailList_resultStandardScheme extends StandardScheme<getMerchantDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantDetailList_resultTupleScheme getScheme() {
        return new getMerchantDetailList_resultTupleScheme();
      }
    }

    private static class getMerchantDetailList_resultTupleScheme extends TupleScheme<getMerchantDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBussinessList_args implements org.apache.thrift.TBase<getMerchantBussinessList_args, getMerchantBussinessList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBussinessList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBussinessList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBussinessList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBussinessList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBussinessList_args.class, metaDataMap);
    }

    public getMerchantBussinessList_args() {
    }

    public getMerchantBussinessList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBussinessList_args(getMerchantBussinessList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantBussinessList_args deepCopy() {
      return new getMerchantBussinessList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantBussinessList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBussinessList_args)
        return this.equals((getMerchantBussinessList_args)that);
      return false;
    }

    public boolean equals(getMerchantBussinessList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBussinessList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBussinessList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBussinessList_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantBussinessList_argsStandardScheme getScheme() {
        return new getMerchantBussinessList_argsStandardScheme();
      }
    }

    private static class getMerchantBussinessList_argsStandardScheme extends StandardScheme<getMerchantBussinessList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBussinessList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBussinessList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBussinessList_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantBussinessList_argsTupleScheme getScheme() {
        return new getMerchantBussinessList_argsTupleScheme();
      }
    }

    private static class getMerchantBussinessList_argsTupleScheme extends TupleScheme<getMerchantBussinessList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBussinessList_result implements org.apache.thrift.TBase<getMerchantBussinessList_result, getMerchantBussinessList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBussinessList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBussinessList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBussinessList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBussinessList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantBussinessResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantBussinessResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBussinessList_result.class, metaDataMap);
    }

    public getMerchantBussinessList_result() {
    }

    public getMerchantBussinessList_result(
      com.froad.thrift.vo.report.ReportMerchantBussinessResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBussinessList_result(getMerchantBussinessList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantBussinessResVo(other.success);
      }
    }

    public getMerchantBussinessList_result deepCopy() {
      return new getMerchantBussinessList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantBussinessResVo getSuccess() {
      return this.success;
    }

    public getMerchantBussinessList_result setSuccess(com.froad.thrift.vo.report.ReportMerchantBussinessResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantBussinessResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBussinessList_result)
        return this.equals((getMerchantBussinessList_result)that);
      return false;
    }

    public boolean equals(getMerchantBussinessList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBussinessList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBussinessList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBussinessList_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantBussinessList_resultStandardScheme getScheme() {
        return new getMerchantBussinessList_resultStandardScheme();
      }
    }

    private static class getMerchantBussinessList_resultStandardScheme extends StandardScheme<getMerchantBussinessList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBussinessList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantBussinessResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBussinessList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBussinessList_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantBussinessList_resultTupleScheme getScheme() {
        return new getMerchantBussinessList_resultTupleScheme();
      }
    }

    private static class getMerchantBussinessList_resultTupleScheme extends TupleScheme<getMerchantBussinessList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBussinessList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantBussinessResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantDetailListByPage_args implements org.apache.thrift.TBase<getMerchantDetailListByPage_args, getMerchantDetailListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantDetailListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantDetailListByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantDetailListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantDetailListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      COMMON_PARAM_VO((short)2, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantDetailListByPage_args.class, metaDataMap);
    }

    public getMerchantDetailListByPage_args() {
    }

    public getMerchantDetailListByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.pageVo = pageVo;
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantDetailListByPage_args(getMerchantDetailListByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantDetailListByPage_args deepCopy() {
      return new getMerchantDetailListByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getMerchantDetailListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantDetailListByPage_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantDetailListByPage_args)
        return this.equals((getMerchantDetailListByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantDetailListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantDetailListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantDetailListByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantDetailListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantDetailListByPage_argsStandardScheme getScheme() {
        return new getMerchantDetailListByPage_argsStandardScheme();
      }
    }

    private static class getMerchantDetailListByPage_argsStandardScheme extends StandardScheme<getMerchantDetailListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantDetailListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantDetailListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantDetailListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantDetailListByPage_argsTupleScheme getScheme() {
        return new getMerchantDetailListByPage_argsTupleScheme();
      }
    }

    private static class getMerchantDetailListByPage_argsTupleScheme extends TupleScheme<getMerchantDetailListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetCommonParamVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantDetailListByPage_result implements org.apache.thrift.TBase<getMerchantDetailListByPage_result, getMerchantDetailListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantDetailListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantDetailListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantDetailListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantDetailListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantDetailPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantDetailListByPage_result.class, metaDataMap);
    }

    public getMerchantDetailListByPage_result() {
    }

    public getMerchantDetailListByPage_result(
      com.froad.thrift.vo.report.ReportMerchantDetailPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantDetailListByPage_result(getMerchantDetailListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantDetailPageVo(other.success);
      }
    }

    public getMerchantDetailListByPage_result deepCopy() {
      return new getMerchantDetailListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantDetailPageVo getSuccess() {
      return this.success;
    }

    public getMerchantDetailListByPage_result setSuccess(com.froad.thrift.vo.report.ReportMerchantDetailPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantDetailPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantDetailListByPage_result)
        return this.equals((getMerchantDetailListByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantDetailListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantDetailListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantDetailListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantDetailListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantDetailListByPage_resultStandardScheme getScheme() {
        return new getMerchantDetailListByPage_resultStandardScheme();
      }
    }

    private static class getMerchantDetailListByPage_resultStandardScheme extends StandardScheme<getMerchantDetailListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantDetailListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantDetailPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantDetailListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantDetailListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantDetailListByPage_resultTupleScheme getScheme() {
        return new getMerchantDetailListByPage_resultTupleScheme();
      }
    }

    private static class getMerchantDetailListByPage_resultTupleScheme extends TupleScheme<getMerchantDetailListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantDetailPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletList_args implements org.apache.thrift.TBase<getMerchantOutletList_args, getMerchantOutletList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletList_args.class, metaDataMap);
    }

    public getMerchantOutletList_args() {
    }

    public getMerchantOutletList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletList_args(getMerchantOutletList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantOutletList_args deepCopy() {
      return new getMerchantOutletList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantOutletList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletList_args)
        return this.equals((getMerchantOutletList_args)that);
      return false;
    }

    public boolean equals(getMerchantOutletList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletList_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletList_argsStandardScheme getScheme() {
        return new getMerchantOutletList_argsStandardScheme();
      }
    }

    private static class getMerchantOutletList_argsStandardScheme extends StandardScheme<getMerchantOutletList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletList_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletList_argsTupleScheme getScheme() {
        return new getMerchantOutletList_argsTupleScheme();
      }
    }

    private static class getMerchantOutletList_argsTupleScheme extends TupleScheme<getMerchantOutletList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletList_result implements org.apache.thrift.TBase<getMerchantOutletList_result, getMerchantOutletList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantOutletResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantOutletResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletList_result.class, metaDataMap);
    }

    public getMerchantOutletList_result() {
    }

    public getMerchantOutletList_result(
      com.froad.thrift.vo.report.ReportMerchantOutletResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletList_result(getMerchantOutletList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantOutletResVo(other.success);
      }
    }

    public getMerchantOutletList_result deepCopy() {
      return new getMerchantOutletList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantOutletResVo getSuccess() {
      return this.success;
    }

    public getMerchantOutletList_result setSuccess(com.froad.thrift.vo.report.ReportMerchantOutletResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantOutletResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletList_result)
        return this.equals((getMerchantOutletList_result)that);
      return false;
    }

    public boolean equals(getMerchantOutletList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletList_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletList_resultStandardScheme getScheme() {
        return new getMerchantOutletList_resultStandardScheme();
      }
    }

    private static class getMerchantOutletList_resultStandardScheme extends StandardScheme<getMerchantOutletList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantOutletResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletList_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletList_resultTupleScheme getScheme() {
        return new getMerchantOutletList_resultTupleScheme();
      }
    }

    private static class getMerchantOutletList_resultTupleScheme extends TupleScheme<getMerchantOutletList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantOutletResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
