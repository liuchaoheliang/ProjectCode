/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 1.创建订单请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AddOrderVoReq implements org.apache.thrift.TBase<AddOrderVoReq, AddOrderVoReq._Fields>, java.io.Serializable, Cloneable, Comparable<AddOrderVoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddOrderVoReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("isVip", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField MEMBER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("memberLevel", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RECV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recvId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ADD_MERCHANT_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("addMerchantVoList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRequestType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BANK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoint", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField IS_SHOPPING_CART_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isShoppingCartOrder", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FFT_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField RED_PACKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redPacketId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CASH_COUPON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCouponId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField POINT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pointMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRate", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddOrderVoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddOrderVoReqTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 会员号
   */
  public long memberCode; // required
  /**
   * 会员名称
   */
  public String memberName; // required
  /**
   * 是否为会员
   */
  public boolean isVip; // optional
  /**
   * 会员等级
   */
  public int memberLevel; // optional
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 接收券和短信的手机号
   */
  public String phone; // optional
  /**
   * 提货信息编号
   */
  public String deliverId; // optional
  /**
   * 收货信息编号
   */
  public String recvId; // optional
  /**
   * 银行卡号（线下积分兑换时必须）
   */
  public String cardNo; // optional
  /**
   * 备注
   */
  public String remark; // optional
  /**
   * 商户信息
   */
  public List<AddMerchantVo> addMerchantVoList; // required
  /**
   * 订单请求类型：["1":"线下积分兑换订单","3":"在线积分兑换订单","2":其他订单]
   */
  public String orderRequestType; // required
  /**
   * 银行积分（线下积分兑换时必须）
   */
  public int bankPoint; // optional
  /**
   * ip地址
   */
  public String ip; // optional
  /**
   * 是否购物车订单（true:购物车下单；false:立即购买下单）
   */
  public boolean isShoppingCartOrder; // optional
  /**
   * 银行操作员ID(线下积分兑换)
   */
  public String operatorId; // optional
  /**
   * 银行操作员名(线下积分兑换)
   */
  public String operatorName; // optional
  /**
   * 方付通积分（收银台改造后，可以传积分）
   */
  public double fftPoint; // optional
  /**
   * 红包ID
   */
  public String redPacketId; // optional
  /**
   * 现金券ID
   */
  public String cashCouponId; // optional
  /**
   * 积分对应的现金
   */
  public double pointMoney; // optional
  /**
   * 积分比例
   */
  public long pointRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 会员名称
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 是否为会员
     */
    IS_VIP((short)4, "isVip"),
    /**
     * 会员等级
     */
    MEMBER_LEVEL((short)5, "memberLevel"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)6, "createSource"),
    /**
     * 接收券和短信的手机号
     */
    PHONE((short)7, "phone"),
    /**
     * 提货信息编号
     */
    DELIVER_ID((short)8, "deliverId"),
    /**
     * 收货信息编号
     */
    RECV_ID((short)9, "recvId"),
    /**
     * 银行卡号（线下积分兑换时必须）
     */
    CARD_NO((short)10, "cardNo"),
    /**
     * 备注
     */
    REMARK((short)11, "remark"),
    /**
     * 商户信息
     */
    ADD_MERCHANT_VO_LIST((short)12, "addMerchantVoList"),
    /**
     * 订单请求类型：["1":"线下积分兑换订单","3":"在线积分兑换订单","2":其他订单]
     */
    ORDER_REQUEST_TYPE((short)13, "orderRequestType"),
    /**
     * 银行积分（线下积分兑换时必须）
     */
    BANK_POINT((short)14, "bankPoint"),
    /**
     * ip地址
     */
    IP((short)15, "ip"),
    /**
     * 是否购物车订单（true:购物车下单；false:立即购买下单）
     */
    IS_SHOPPING_CART_ORDER((short)16, "isShoppingCartOrder"),
    /**
     * 银行操作员ID(线下积分兑换)
     */
    OPERATOR_ID((short)17, "operatorId"),
    /**
     * 银行操作员名(线下积分兑换)
     */
    OPERATOR_NAME((short)18, "operatorName"),
    /**
     * 方付通积分（收银台改造后，可以传积分）
     */
    FFT_POINT((short)19, "fftPoint"),
    /**
     * 红包ID
     */
    RED_PACKET_ID((short)20, "redPacketId"),
    /**
     * 现金券ID
     */
    CASH_COUPON_ID((short)21, "cashCouponId"),
    /**
     * 积分对应的现金
     */
    POINT_MONEY((short)22, "pointMoney"),
    /**
     * 积分比例
     */
    POINT_RATE((short)23, "pointRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // IS_VIP
          return IS_VIP;
        case 5: // MEMBER_LEVEL
          return MEMBER_LEVEL;
        case 6: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 7: // PHONE
          return PHONE;
        case 8: // DELIVER_ID
          return DELIVER_ID;
        case 9: // RECV_ID
          return RECV_ID;
        case 10: // CARD_NO
          return CARD_NO;
        case 11: // REMARK
          return REMARK;
        case 12: // ADD_MERCHANT_VO_LIST
          return ADD_MERCHANT_VO_LIST;
        case 13: // ORDER_REQUEST_TYPE
          return ORDER_REQUEST_TYPE;
        case 14: // BANK_POINT
          return BANK_POINT;
        case 15: // IP
          return IP;
        case 16: // IS_SHOPPING_CART_ORDER
          return IS_SHOPPING_CART_ORDER;
        case 17: // OPERATOR_ID
          return OPERATOR_ID;
        case 18: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 19: // FFT_POINT
          return FFT_POINT;
        case 20: // RED_PACKET_ID
          return RED_PACKET_ID;
        case 21: // CASH_COUPON_ID
          return CASH_COUPON_ID;
        case 22: // POINT_MONEY
          return POINT_MONEY;
        case 23: // POINT_RATE
          return POINT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __ISVIP_ISSET_ID = 1;
  private static final int __MEMBERLEVEL_ISSET_ID = 2;
  private static final int __BANKPOINT_ISSET_ID = 3;
  private static final int __ISSHOPPINGCARTORDER_ISSET_ID = 4;
  private static final int __FFTPOINT_ISSET_ID = 5;
  private static final int __POINTMONEY_ISSET_ID = 6;
  private static final int __POINTRATE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_VIP,_Fields.MEMBER_LEVEL,_Fields.PHONE,_Fields.DELIVER_ID,_Fields.RECV_ID,_Fields.CARD_NO,_Fields.REMARK,_Fields.BANK_POINT,_Fields.IP,_Fields.IS_SHOPPING_CART_ORDER,_Fields.OPERATOR_ID,_Fields.OPERATOR_NAME,_Fields.FFT_POINT,_Fields.RED_PACKET_ID,_Fields.CASH_COUPON_ID,_Fields.POINT_MONEY,_Fields.POINT_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VIP, new org.apache.thrift.meta_data.FieldMetaData("isVip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEMBER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("memberLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("deliverId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_ID, new org.apache.thrift.meta_data.FieldMetaData("recvId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_MERCHANT_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("addMerchantVoList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddMerchantVo.class))));
    tmpMap.put(_Fields.ORDER_REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderRequestType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_POINT, new org.apache.thrift.meta_data.FieldMetaData("bankPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SHOPPING_CART_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isShoppingCartOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FFT_POINT, new org.apache.thrift.meta_data.FieldMetaData("fftPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RED_PACKET_ID, new org.apache.thrift.meta_data.FieldMetaData("redPacketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_COUPON_ID, new org.apache.thrift.meta_data.FieldMetaData("cashCouponId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("pointMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pointRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddOrderVoReq.class, metaDataMap);
  }

  public AddOrderVoReq() {
  }

  public AddOrderVoReq(
    String clientId,
    long memberCode,
    String memberName,
    String createSource,
    List<AddMerchantVo> addMerchantVoList,
    String orderRequestType)
  {
    this();
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberName = memberName;
    this.createSource = createSource;
    this.addMerchantVoList = addMerchantVoList;
    this.orderRequestType = orderRequestType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddOrderVoReq(AddOrderVoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    this.isVip = other.isVip;
    this.memberLevel = other.memberLevel;
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetDeliverId()) {
      this.deliverId = other.deliverId;
    }
    if (other.isSetRecvId()) {
      this.recvId = other.recvId;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetAddMerchantVoList()) {
      List<AddMerchantVo> __this__addMerchantVoList = new ArrayList<AddMerchantVo>(other.addMerchantVoList.size());
      for (AddMerchantVo other_element : other.addMerchantVoList) {
        __this__addMerchantVoList.add(new AddMerchantVo(other_element));
      }
      this.addMerchantVoList = __this__addMerchantVoList;
    }
    if (other.isSetOrderRequestType()) {
      this.orderRequestType = other.orderRequestType;
    }
    this.bankPoint = other.bankPoint;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.isShoppingCartOrder = other.isShoppingCartOrder;
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    this.fftPoint = other.fftPoint;
    if (other.isSetRedPacketId()) {
      this.redPacketId = other.redPacketId;
    }
    if (other.isSetCashCouponId()) {
      this.cashCouponId = other.cashCouponId;
    }
    this.pointMoney = other.pointMoney;
    this.pointRate = other.pointRate;
  }

  public AddOrderVoReq deepCopy() {
    return new AddOrderVoReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.memberName = null;
    setIsVipIsSet(false);
    this.isVip = false;
    setMemberLevelIsSet(false);
    this.memberLevel = 0;
    this.createSource = null;
    this.phone = null;
    this.deliverId = null;
    this.recvId = null;
    this.cardNo = null;
    this.remark = null;
    this.addMerchantVoList = null;
    this.orderRequestType = null;
    setBankPointIsSet(false);
    this.bankPoint = 0;
    this.ip = null;
    setIsShoppingCartOrderIsSet(false);
    this.isShoppingCartOrder = false;
    this.operatorId = null;
    this.operatorName = null;
    setFftPointIsSet(false);
    this.fftPoint = 0.0;
    this.redPacketId = null;
    this.cashCouponId = null;
    setPointMoneyIsSet(false);
    this.pointMoney = 0.0;
    setPointRateIsSet(false);
    this.pointRate = 0;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public AddOrderVoReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 会员号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public AddOrderVoReq setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 会员名称
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名称
   */
  public AddOrderVoReq setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 是否为会员
   */
  public boolean isIsVip() {
    return this.isVip;
  }

  /**
   * 是否为会员
   */
  public AddOrderVoReq setIsVip(boolean isVip) {
    this.isVip = isVip;
    setIsVipIsSet(true);
    return this;
  }

  public void unsetIsVip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVIP_ISSET_ID);
  }

  /** Returns true if field isVip is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVip() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVIP_ISSET_ID);
  }

  public void setIsVipIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVIP_ISSET_ID, value);
  }

  /**
   * 会员等级
   */
  public int getMemberLevel() {
    return this.memberLevel;
  }

  /**
   * 会员等级
   */
  public AddOrderVoReq setMemberLevel(int memberLevel) {
    this.memberLevel = memberLevel;
    setMemberLevelIsSet(true);
    return this;
  }

  public void unsetMemberLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  /** Returns true if field memberLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  public void setMemberLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID, value);
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public AddOrderVoReq setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 接收券和短信的手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 接收券和短信的手机号
   */
  public AddOrderVoReq setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 提货信息编号
   */
  public String getDeliverId() {
    return this.deliverId;
  }

  /**
   * 提货信息编号
   */
  public AddOrderVoReq setDeliverId(String deliverId) {
    this.deliverId = deliverId;
    return this;
  }

  public void unsetDeliverId() {
    this.deliverId = null;
  }

  /** Returns true if field deliverId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverId() {
    return this.deliverId != null;
  }

  public void setDeliverIdIsSet(boolean value) {
    if (!value) {
      this.deliverId = null;
    }
  }

  /**
   * 收货信息编号
   */
  public String getRecvId() {
    return this.recvId;
  }

  /**
   * 收货信息编号
   */
  public AddOrderVoReq setRecvId(String recvId) {
    this.recvId = recvId;
    return this;
  }

  public void unsetRecvId() {
    this.recvId = null;
  }

  /** Returns true if field recvId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvId() {
    return this.recvId != null;
  }

  public void setRecvIdIsSet(boolean value) {
    if (!value) {
      this.recvId = null;
    }
  }

  /**
   * 银行卡号（线下积分兑换时必须）
   */
  public String getCardNo() {
    return this.cardNo;
  }

  /**
   * 银行卡号（线下积分兑换时必须）
   */
  public AddOrderVoReq setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public AddOrderVoReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getAddMerchantVoListSize() {
    return (this.addMerchantVoList == null) ? 0 : this.addMerchantVoList.size();
  }

  public java.util.Iterator<AddMerchantVo> getAddMerchantVoListIterator() {
    return (this.addMerchantVoList == null) ? null : this.addMerchantVoList.iterator();
  }

  public void addToAddMerchantVoList(AddMerchantVo elem) {
    if (this.addMerchantVoList == null) {
      this.addMerchantVoList = new ArrayList<AddMerchantVo>();
    }
    this.addMerchantVoList.add(elem);
  }

  /**
   * 商户信息
   */
  public List<AddMerchantVo> getAddMerchantVoList() {
    return this.addMerchantVoList;
  }

  /**
   * 商户信息
   */
  public AddOrderVoReq setAddMerchantVoList(List<AddMerchantVo> addMerchantVoList) {
    this.addMerchantVoList = addMerchantVoList;
    return this;
  }

  public void unsetAddMerchantVoList() {
    this.addMerchantVoList = null;
  }

  /** Returns true if field addMerchantVoList is set (has been assigned a value) and false otherwise */
  public boolean isSetAddMerchantVoList() {
    return this.addMerchantVoList != null;
  }

  public void setAddMerchantVoListIsSet(boolean value) {
    if (!value) {
      this.addMerchantVoList = null;
    }
  }

  /**
   * 订单请求类型：["1":"线下积分兑换订单","3":"在线积分兑换订单","2":其他订单]
   */
  public String getOrderRequestType() {
    return this.orderRequestType;
  }

  /**
   * 订单请求类型：["1":"线下积分兑换订单","3":"在线积分兑换订单","2":其他订单]
   */
  public AddOrderVoReq setOrderRequestType(String orderRequestType) {
    this.orderRequestType = orderRequestType;
    return this;
  }

  public void unsetOrderRequestType() {
    this.orderRequestType = null;
  }

  /** Returns true if field orderRequestType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRequestType() {
    return this.orderRequestType != null;
  }

  public void setOrderRequestTypeIsSet(boolean value) {
    if (!value) {
      this.orderRequestType = null;
    }
  }

  /**
   * 银行积分（线下积分兑换时必须）
   */
  public int getBankPoint() {
    return this.bankPoint;
  }

  /**
   * 银行积分（线下积分兑换时必须）
   */
  public AddOrderVoReq setBankPoint(int bankPoint) {
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    return this;
  }

  public void unsetBankPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  /** Returns true if field bankPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  public void setBankPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINT_ISSET_ID, value);
  }

  /**
   * ip地址
   */
  public String getIp() {
    return this.ip;
  }

  /**
   * ip地址
   */
  public AddOrderVoReq setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  /**
   * 是否购物车订单（true:购物车下单；false:立即购买下单）
   */
  public boolean isIsShoppingCartOrder() {
    return this.isShoppingCartOrder;
  }

  /**
   * 是否购物车订单（true:购物车下单；false:立即购买下单）
   */
  public AddOrderVoReq setIsShoppingCartOrder(boolean isShoppingCartOrder) {
    this.isShoppingCartOrder = isShoppingCartOrder;
    setIsShoppingCartOrderIsSet(true);
    return this;
  }

  public void unsetIsShoppingCartOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSHOPPINGCARTORDER_ISSET_ID);
  }

  /** Returns true if field isShoppingCartOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsShoppingCartOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSHOPPINGCARTORDER_ISSET_ID);
  }

  public void setIsShoppingCartOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSHOPPINGCARTORDER_ISSET_ID, value);
  }

  /**
   * 银行操作员ID(线下积分兑换)
   */
  public String getOperatorId() {
    return this.operatorId;
  }

  /**
   * 银行操作员ID(线下积分兑换)
   */
  public AddOrderVoReq setOperatorId(String operatorId) {
    this.operatorId = operatorId;
    return this;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public void setOperatorIdIsSet(boolean value) {
    if (!value) {
      this.operatorId = null;
    }
  }

  /**
   * 银行操作员名(线下积分兑换)
   */
  public String getOperatorName() {
    return this.operatorName;
  }

  /**
   * 银行操作员名(线下积分兑换)
   */
  public AddOrderVoReq setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  /**
   * 方付通积分（收银台改造后，可以传积分）
   */
  public double getFftPoint() {
    return this.fftPoint;
  }

  /**
   * 方付通积分（收银台改造后，可以传积分）
   */
  public AddOrderVoReq setFftPoint(double fftPoint) {
    this.fftPoint = fftPoint;
    setFftPointIsSet(true);
    return this;
  }

  public void unsetFftPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINT_ISSET_ID);
  }

  /** Returns true if field fftPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINT_ISSET_ID);
  }

  public void setFftPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINT_ISSET_ID, value);
  }

  /**
   * 红包ID
   */
  public String getRedPacketId() {
    return this.redPacketId;
  }

  /**
   * 红包ID
   */
  public AddOrderVoReq setRedPacketId(String redPacketId) {
    this.redPacketId = redPacketId;
    return this;
  }

  public void unsetRedPacketId() {
    this.redPacketId = null;
  }

  /** Returns true if field redPacketId is set (has been assigned a value) and false otherwise */
  public boolean isSetRedPacketId() {
    return this.redPacketId != null;
  }

  public void setRedPacketIdIsSet(boolean value) {
    if (!value) {
      this.redPacketId = null;
    }
  }

  /**
   * 现金券ID
   */
  public String getCashCouponId() {
    return this.cashCouponId;
  }

  /**
   * 现金券ID
   */
  public AddOrderVoReq setCashCouponId(String cashCouponId) {
    this.cashCouponId = cashCouponId;
    return this;
  }

  public void unsetCashCouponId() {
    this.cashCouponId = null;
  }

  /** Returns true if field cashCouponId is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCouponId() {
    return this.cashCouponId != null;
  }

  public void setCashCouponIdIsSet(boolean value) {
    if (!value) {
      this.cashCouponId = null;
    }
  }

  /**
   * 积分对应的现金
   */
  public double getPointMoney() {
    return this.pointMoney;
  }

  /**
   * 积分对应的现金
   */
  public AddOrderVoReq setPointMoney(double pointMoney) {
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    return this;
  }

  public void unsetPointMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  /** Returns true if field pointMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPointMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  public void setPointMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTMONEY_ISSET_ID, value);
  }

  /**
   * 积分比例
   */
  public long getPointRate() {
    return this.pointRate;
  }

  /**
   * 积分比例
   */
  public AddOrderVoReq setPointRate(long pointRate) {
    this.pointRate = pointRate;
    setPointRateIsSet(true);
    return this;
  }

  public void unsetPointRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTRATE_ISSET_ID);
  }

  /** Returns true if field pointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRate() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTRATE_ISSET_ID);
  }

  public void setPointRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case IS_VIP:
      if (value == null) {
        unsetIsVip();
      } else {
        setIsVip((Boolean)value);
      }
      break;

    case MEMBER_LEVEL:
      if (value == null) {
        unsetMemberLevel();
      } else {
        setMemberLevel((Integer)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case DELIVER_ID:
      if (value == null) {
        unsetDeliverId();
      } else {
        setDeliverId((String)value);
      }
      break;

    case RECV_ID:
      if (value == null) {
        unsetRecvId();
      } else {
        setRecvId((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ADD_MERCHANT_VO_LIST:
      if (value == null) {
        unsetAddMerchantVoList();
      } else {
        setAddMerchantVoList((List<AddMerchantVo>)value);
      }
      break;

    case ORDER_REQUEST_TYPE:
      if (value == null) {
        unsetOrderRequestType();
      } else {
        setOrderRequestType((String)value);
      }
      break;

    case BANK_POINT:
      if (value == null) {
        unsetBankPoint();
      } else {
        setBankPoint((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case IS_SHOPPING_CART_ORDER:
      if (value == null) {
        unsetIsShoppingCartOrder();
      } else {
        setIsShoppingCartOrder((Boolean)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case FFT_POINT:
      if (value == null) {
        unsetFftPoint();
      } else {
        setFftPoint((Double)value);
      }
      break;

    case RED_PACKET_ID:
      if (value == null) {
        unsetRedPacketId();
      } else {
        setRedPacketId((String)value);
      }
      break;

    case CASH_COUPON_ID:
      if (value == null) {
        unsetCashCouponId();
      } else {
        setCashCouponId((String)value);
      }
      break;

    case POINT_MONEY:
      if (value == null) {
        unsetPointMoney();
      } else {
        setPointMoney((Double)value);
      }
      break;

    case POINT_RATE:
      if (value == null) {
        unsetPointRate();
      } else {
        setPointRate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_NAME:
      return getMemberName();

    case IS_VIP:
      return Boolean.valueOf(isIsVip());

    case MEMBER_LEVEL:
      return Integer.valueOf(getMemberLevel());

    case CREATE_SOURCE:
      return getCreateSource();

    case PHONE:
      return getPhone();

    case DELIVER_ID:
      return getDeliverId();

    case RECV_ID:
      return getRecvId();

    case CARD_NO:
      return getCardNo();

    case REMARK:
      return getRemark();

    case ADD_MERCHANT_VO_LIST:
      return getAddMerchantVoList();

    case ORDER_REQUEST_TYPE:
      return getOrderRequestType();

    case BANK_POINT:
      return Integer.valueOf(getBankPoint());

    case IP:
      return getIp();

    case IS_SHOPPING_CART_ORDER:
      return Boolean.valueOf(isIsShoppingCartOrder());

    case OPERATOR_ID:
      return getOperatorId();

    case OPERATOR_NAME:
      return getOperatorName();

    case FFT_POINT:
      return Double.valueOf(getFftPoint());

    case RED_PACKET_ID:
      return getRedPacketId();

    case CASH_COUPON_ID:
      return getCashCouponId();

    case POINT_MONEY:
      return Double.valueOf(getPointMoney());

    case POINT_RATE:
      return Long.valueOf(getPointRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case IS_VIP:
      return isSetIsVip();
    case MEMBER_LEVEL:
      return isSetMemberLevel();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case PHONE:
      return isSetPhone();
    case DELIVER_ID:
      return isSetDeliverId();
    case RECV_ID:
      return isSetRecvId();
    case CARD_NO:
      return isSetCardNo();
    case REMARK:
      return isSetRemark();
    case ADD_MERCHANT_VO_LIST:
      return isSetAddMerchantVoList();
    case ORDER_REQUEST_TYPE:
      return isSetOrderRequestType();
    case BANK_POINT:
      return isSetBankPoint();
    case IP:
      return isSetIp();
    case IS_SHOPPING_CART_ORDER:
      return isSetIsShoppingCartOrder();
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case FFT_POINT:
      return isSetFftPoint();
    case RED_PACKET_ID:
      return isSetRedPacketId();
    case CASH_COUPON_ID:
      return isSetCashCouponId();
    case POINT_MONEY:
      return isSetPointMoney();
    case POINT_RATE:
      return isSetPointRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddOrderVoReq)
      return this.equals((AddOrderVoReq)that);
    return false;
  }

  public boolean equals(AddOrderVoReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_isVip = true && this.isSetIsVip();
    boolean that_present_isVip = true && that.isSetIsVip();
    if (this_present_isVip || that_present_isVip) {
      if (!(this_present_isVip && that_present_isVip))
        return false;
      if (this.isVip != that.isVip)
        return false;
    }

    boolean this_present_memberLevel = true && this.isSetMemberLevel();
    boolean that_present_memberLevel = true && that.isSetMemberLevel();
    if (this_present_memberLevel || that_present_memberLevel) {
      if (!(this_present_memberLevel && that_present_memberLevel))
        return false;
      if (this.memberLevel != that.memberLevel)
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_deliverId = true && this.isSetDeliverId();
    boolean that_present_deliverId = true && that.isSetDeliverId();
    if (this_present_deliverId || that_present_deliverId) {
      if (!(this_present_deliverId && that_present_deliverId))
        return false;
      if (!this.deliverId.equals(that.deliverId))
        return false;
    }

    boolean this_present_recvId = true && this.isSetRecvId();
    boolean that_present_recvId = true && that.isSetRecvId();
    if (this_present_recvId || that_present_recvId) {
      if (!(this_present_recvId && that_present_recvId))
        return false;
      if (!this.recvId.equals(that.recvId))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_addMerchantVoList = true && this.isSetAddMerchantVoList();
    boolean that_present_addMerchantVoList = true && that.isSetAddMerchantVoList();
    if (this_present_addMerchantVoList || that_present_addMerchantVoList) {
      if (!(this_present_addMerchantVoList && that_present_addMerchantVoList))
        return false;
      if (!this.addMerchantVoList.equals(that.addMerchantVoList))
        return false;
    }

    boolean this_present_orderRequestType = true && this.isSetOrderRequestType();
    boolean that_present_orderRequestType = true && that.isSetOrderRequestType();
    if (this_present_orderRequestType || that_present_orderRequestType) {
      if (!(this_present_orderRequestType && that_present_orderRequestType))
        return false;
      if (!this.orderRequestType.equals(that.orderRequestType))
        return false;
    }

    boolean this_present_bankPoint = true && this.isSetBankPoint();
    boolean that_present_bankPoint = true && that.isSetBankPoint();
    if (this_present_bankPoint || that_present_bankPoint) {
      if (!(this_present_bankPoint && that_present_bankPoint))
        return false;
      if (this.bankPoint != that.bankPoint)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_isShoppingCartOrder = true && this.isSetIsShoppingCartOrder();
    boolean that_present_isShoppingCartOrder = true && that.isSetIsShoppingCartOrder();
    if (this_present_isShoppingCartOrder || that_present_isShoppingCartOrder) {
      if (!(this_present_isShoppingCartOrder && that_present_isShoppingCartOrder))
        return false;
      if (this.isShoppingCartOrder != that.isShoppingCartOrder)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_fftPoint = true && this.isSetFftPoint();
    boolean that_present_fftPoint = true && that.isSetFftPoint();
    if (this_present_fftPoint || that_present_fftPoint) {
      if (!(this_present_fftPoint && that_present_fftPoint))
        return false;
      if (this.fftPoint != that.fftPoint)
        return false;
    }

    boolean this_present_redPacketId = true && this.isSetRedPacketId();
    boolean that_present_redPacketId = true && that.isSetRedPacketId();
    if (this_present_redPacketId || that_present_redPacketId) {
      if (!(this_present_redPacketId && that_present_redPacketId))
        return false;
      if (!this.redPacketId.equals(that.redPacketId))
        return false;
    }

    boolean this_present_cashCouponId = true && this.isSetCashCouponId();
    boolean that_present_cashCouponId = true && that.isSetCashCouponId();
    if (this_present_cashCouponId || that_present_cashCouponId) {
      if (!(this_present_cashCouponId && that_present_cashCouponId))
        return false;
      if (!this.cashCouponId.equals(that.cashCouponId))
        return false;
    }

    boolean this_present_pointMoney = true && this.isSetPointMoney();
    boolean that_present_pointMoney = true && that.isSetPointMoney();
    if (this_present_pointMoney || that_present_pointMoney) {
      if (!(this_present_pointMoney && that_present_pointMoney))
        return false;
      if (this.pointMoney != that.pointMoney)
        return false;
    }

    boolean this_present_pointRate = true && this.isSetPointRate();
    boolean that_present_pointRate = true && that.isSetPointRate();
    if (this_present_pointRate || that_present_pointRate) {
      if (!(this_present_pointRate && that_present_pointRate))
        return false;
      if (this.pointRate != that.pointRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_isVip = true && (isSetIsVip());
    list.add(present_isVip);
    if (present_isVip)
      list.add(isVip);

    boolean present_memberLevel = true && (isSetMemberLevel());
    list.add(present_memberLevel);
    if (present_memberLevel)
      list.add(memberLevel);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_deliverId = true && (isSetDeliverId());
    list.add(present_deliverId);
    if (present_deliverId)
      list.add(deliverId);

    boolean present_recvId = true && (isSetRecvId());
    list.add(present_recvId);
    if (present_recvId)
      list.add(recvId);

    boolean present_cardNo = true && (isSetCardNo());
    list.add(present_cardNo);
    if (present_cardNo)
      list.add(cardNo);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_addMerchantVoList = true && (isSetAddMerchantVoList());
    list.add(present_addMerchantVoList);
    if (present_addMerchantVoList)
      list.add(addMerchantVoList);

    boolean present_orderRequestType = true && (isSetOrderRequestType());
    list.add(present_orderRequestType);
    if (present_orderRequestType)
      list.add(orderRequestType);

    boolean present_bankPoint = true && (isSetBankPoint());
    list.add(present_bankPoint);
    if (present_bankPoint)
      list.add(bankPoint);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_isShoppingCartOrder = true && (isSetIsShoppingCartOrder());
    list.add(present_isShoppingCartOrder);
    if (present_isShoppingCartOrder)
      list.add(isShoppingCartOrder);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_fftPoint = true && (isSetFftPoint());
    list.add(present_fftPoint);
    if (present_fftPoint)
      list.add(fftPoint);

    boolean present_redPacketId = true && (isSetRedPacketId());
    list.add(present_redPacketId);
    if (present_redPacketId)
      list.add(redPacketId);

    boolean present_cashCouponId = true && (isSetCashCouponId());
    list.add(present_cashCouponId);
    if (present_cashCouponId)
      list.add(cashCouponId);

    boolean present_pointMoney = true && (isSetPointMoney());
    list.add(present_pointMoney);
    if (present_pointMoney)
      list.add(pointMoney);

    boolean present_pointRate = true && (isSetPointRate());
    list.add(present_pointRate);
    if (present_pointRate)
      list.add(pointRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddOrderVoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVip()).compareTo(other.isSetIsVip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVip, other.isVip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberLevel()).compareTo(other.isSetMemberLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberLevel, other.memberLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverId()).compareTo(other.isSetDeliverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverId, other.deliverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvId()).compareTo(other.isSetRecvId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvId, other.recvId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddMerchantVoList()).compareTo(other.isSetAddMerchantVoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddMerchantVoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addMerchantVoList, other.addMerchantVoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRequestType()).compareTo(other.isSetOrderRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRequestType, other.orderRequestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoint()).compareTo(other.isSetBankPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoint, other.bankPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsShoppingCartOrder()).compareTo(other.isSetIsShoppingCartOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShoppingCartOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isShoppingCartOrder, other.isShoppingCartOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPoint()).compareTo(other.isSetFftPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPoint, other.fftPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedPacketId()).compareTo(other.isSetRedPacketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedPacketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redPacketId, other.redPacketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCouponId()).compareTo(other.isSetCashCouponId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCouponId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCouponId, other.cashCouponId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointMoney()).compareTo(other.isSetPointMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointMoney, other.pointMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRate()).compareTo(other.isSetPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRate, other.pointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddOrderVoReq(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (isSetIsVip()) {
      if (!first) sb.append(", ");
      sb.append("isVip:");
      sb.append(this.isVip);
      first = false;
    }
    if (isSetMemberLevel()) {
      if (!first) sb.append(", ");
      sb.append("memberLevel:");
      sb.append(this.memberLevel);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetDeliverId()) {
      if (!first) sb.append(", ");
      sb.append("deliverId:");
      if (this.deliverId == null) {
        sb.append("null");
      } else {
        sb.append(this.deliverId);
      }
      first = false;
    }
    if (isSetRecvId()) {
      if (!first) sb.append(", ");
      sb.append("recvId:");
      if (this.recvId == null) {
        sb.append("null");
      } else {
        sb.append(this.recvId);
      }
      first = false;
    }
    if (isSetCardNo()) {
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("addMerchantVoList:");
    if (this.addMerchantVoList == null) {
      sb.append("null");
    } else {
      sb.append(this.addMerchantVoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderRequestType:");
    if (this.orderRequestType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderRequestType);
    }
    first = false;
    if (isSetBankPoint()) {
      if (!first) sb.append(", ");
      sb.append("bankPoint:");
      sb.append(this.bankPoint);
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetIsShoppingCartOrder()) {
      if (!first) sb.append(", ");
      sb.append("isShoppingCartOrder:");
      sb.append(this.isShoppingCartOrder);
      first = false;
    }
    if (isSetOperatorId()) {
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
    }
    if (isSetOperatorName()) {
      if (!first) sb.append(", ");
      sb.append("operatorName:");
      if (this.operatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorName);
      }
      first = false;
    }
    if (isSetFftPoint()) {
      if (!first) sb.append(", ");
      sb.append("fftPoint:");
      sb.append(this.fftPoint);
      first = false;
    }
    if (isSetRedPacketId()) {
      if (!first) sb.append(", ");
      sb.append("redPacketId:");
      if (this.redPacketId == null) {
        sb.append("null");
      } else {
        sb.append(this.redPacketId);
      }
      first = false;
    }
    if (isSetCashCouponId()) {
      if (!first) sb.append(", ");
      sb.append("cashCouponId:");
      if (this.cashCouponId == null) {
        sb.append("null");
      } else {
        sb.append(this.cashCouponId);
      }
      first = false;
    }
    if (isSetPointMoney()) {
      if (!first) sb.append(", ");
      sb.append("pointMoney:");
      sb.append(this.pointMoney);
      first = false;
    }
    if (isSetPointRate()) {
      if (!first) sb.append(", ");
      sb.append("pointRate:");
      sb.append(this.pointRate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clientId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'memberCode' because it's a primitive and you chose the non-beans generator.
    if (memberName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberName' was not present! Struct: " + toString());
    }
    if (createSource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createSource' was not present! Struct: " + toString());
    }
    if (addMerchantVoList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addMerchantVoList' was not present! Struct: " + toString());
    }
    if (orderRequestType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderRequestType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddOrderVoReqStandardSchemeFactory implements SchemeFactory {
    public AddOrderVoReqStandardScheme getScheme() {
      return new AddOrderVoReqStandardScheme();
    }
  }

  private static class AddOrderVoReqStandardScheme extends StandardScheme<AddOrderVoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddOrderVoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isVip = iprot.readBool();
              struct.setIsVipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMBER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberLevel = iprot.readI32();
              struct.setMemberLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliverId = iprot.readString();
              struct.setDeliverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECV_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvId = iprot.readString();
              struct.setRecvIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADD_MERCHANT_VO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.addMerchantVoList = new ArrayList<AddMerchantVo>(_list40.size);
                AddMerchantVo _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new AddMerchantVo();
                  _elem41.read(iprot);
                  struct.addMerchantVoList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setAddMerchantVoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER_REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderRequestType = iprot.readString();
              struct.setOrderRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BANK_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankPoint = iprot.readI32();
              struct.setBankPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_SHOPPING_CART_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isShoppingCartOrder = iprot.readBool();
              struct.setIsShoppingCartOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorId = iprot.readString();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FFT_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPoint = iprot.readDouble();
              struct.setFftPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RED_PACKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redPacketId = iprot.readString();
              struct.setRedPacketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CASH_COUPON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashCouponId = iprot.readString();
              struct.setCashCouponIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POINT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointMoney = iprot.readDouble();
              struct.setPointMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pointRate = iprot.readI64();
              struct.setPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemberCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddOrderVoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsVip()) {
        oprot.writeFieldBegin(IS_VIP_FIELD_DESC);
        oprot.writeBool(struct.isVip);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemberLevel()) {
        oprot.writeFieldBegin(MEMBER_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.memberLevel);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliverId != null) {
        if (struct.isSetDeliverId()) {
          oprot.writeFieldBegin(DELIVER_ID_FIELD_DESC);
          oprot.writeString(struct.deliverId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recvId != null) {
        if (struct.isSetRecvId()) {
          oprot.writeFieldBegin(RECV_ID_FIELD_DESC);
          oprot.writeString(struct.recvId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardNo != null) {
        if (struct.isSetCardNo()) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.addMerchantVoList != null) {
        oprot.writeFieldBegin(ADD_MERCHANT_VO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.addMerchantVoList.size()));
          for (AddMerchantVo _iter43 : struct.addMerchantVoList)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orderRequestType != null) {
        oprot.writeFieldBegin(ORDER_REQUEST_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderRequestType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBankPoint()) {
        oprot.writeFieldBegin(BANK_POINT_FIELD_DESC);
        oprot.writeI32(struct.bankPoint);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsShoppingCartOrder()) {
        oprot.writeFieldBegin(IS_SHOPPING_CART_ORDER_FIELD_DESC);
        oprot.writeBool(struct.isShoppingCartOrder);
        oprot.writeFieldEnd();
      }
      if (struct.operatorId != null) {
        if (struct.isSetOperatorId()) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operatorName != null) {
        if (struct.isSetOperatorName()) {
          oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.operatorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFftPoint()) {
        oprot.writeFieldBegin(FFT_POINT_FIELD_DESC);
        oprot.writeDouble(struct.fftPoint);
        oprot.writeFieldEnd();
      }
      if (struct.redPacketId != null) {
        if (struct.isSetRedPacketId()) {
          oprot.writeFieldBegin(RED_PACKET_ID_FIELD_DESC);
          oprot.writeString(struct.redPacketId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cashCouponId != null) {
        if (struct.isSetCashCouponId()) {
          oprot.writeFieldBegin(CASH_COUPON_ID_FIELD_DESC);
          oprot.writeString(struct.cashCouponId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPointMoney()) {
        oprot.writeFieldBegin(POINT_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.pointMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointRate()) {
        oprot.writeFieldBegin(POINT_RATE_FIELD_DESC);
        oprot.writeI64(struct.pointRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddOrderVoReqTupleSchemeFactory implements SchemeFactory {
    public AddOrderVoReqTupleScheme getScheme() {
      return new AddOrderVoReqTupleScheme();
    }
  }

  private static class AddOrderVoReqTupleScheme extends TupleScheme<AddOrderVoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientId);
      oprot.writeI64(struct.memberCode);
      oprot.writeString(struct.memberName);
      oprot.writeString(struct.createSource);
      {
        oprot.writeI32(struct.addMerchantVoList.size());
        for (AddMerchantVo _iter44 : struct.addMerchantVoList)
        {
          _iter44.write(oprot);
        }
      }
      oprot.writeString(struct.orderRequestType);
      BitSet optionals = new BitSet();
      if (struct.isSetIsVip()) {
        optionals.set(0);
      }
      if (struct.isSetMemberLevel()) {
        optionals.set(1);
      }
      if (struct.isSetPhone()) {
        optionals.set(2);
      }
      if (struct.isSetDeliverId()) {
        optionals.set(3);
      }
      if (struct.isSetRecvId()) {
        optionals.set(4);
      }
      if (struct.isSetCardNo()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      if (struct.isSetBankPoint()) {
        optionals.set(7);
      }
      if (struct.isSetIp()) {
        optionals.set(8);
      }
      if (struct.isSetIsShoppingCartOrder()) {
        optionals.set(9);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(10);
      }
      if (struct.isSetOperatorName()) {
        optionals.set(11);
      }
      if (struct.isSetFftPoint()) {
        optionals.set(12);
      }
      if (struct.isSetRedPacketId()) {
        optionals.set(13);
      }
      if (struct.isSetCashCouponId()) {
        optionals.set(14);
      }
      if (struct.isSetPointMoney()) {
        optionals.set(15);
      }
      if (struct.isSetPointRate()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetIsVip()) {
        oprot.writeBool(struct.isVip);
      }
      if (struct.isSetMemberLevel()) {
        oprot.writeI32(struct.memberLevel);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetDeliverId()) {
        oprot.writeString(struct.deliverId);
      }
      if (struct.isSetRecvId()) {
        oprot.writeString(struct.recvId);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetBankPoint()) {
        oprot.writeI32(struct.bankPoint);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetIsShoppingCartOrder()) {
        oprot.writeBool(struct.isShoppingCartOrder);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeString(struct.operatorId);
      }
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
      if (struct.isSetFftPoint()) {
        oprot.writeDouble(struct.fftPoint);
      }
      if (struct.isSetRedPacketId()) {
        oprot.writeString(struct.redPacketId);
      }
      if (struct.isSetCashCouponId()) {
        oprot.writeString(struct.cashCouponId);
      }
      if (struct.isSetPointMoney()) {
        oprot.writeDouble(struct.pointMoney);
      }
      if (struct.isSetPointRate()) {
        oprot.writeI64(struct.pointRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientId = iprot.readString();
      struct.setClientIdIsSet(true);
      struct.memberCode = iprot.readI64();
      struct.setMemberCodeIsSet(true);
      struct.memberName = iprot.readString();
      struct.setMemberNameIsSet(true);
      struct.createSource = iprot.readString();
      struct.setCreateSourceIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.addMerchantVoList = new ArrayList<AddMerchantVo>(_list45.size);
        AddMerchantVo _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = new AddMerchantVo();
          _elem46.read(iprot);
          struct.addMerchantVoList.add(_elem46);
        }
      }
      struct.setAddMerchantVoListIsSet(true);
      struct.orderRequestType = iprot.readString();
      struct.setOrderRequestTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.isVip = iprot.readBool();
        struct.setIsVipIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memberLevel = iprot.readI32();
        struct.setMemberLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deliverId = iprot.readString();
        struct.setDeliverIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recvId = iprot.readString();
        struct.setRecvIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankPoint = iprot.readI32();
        struct.setBankPointIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isShoppingCartOrder = iprot.readBool();
        struct.setIsShoppingCartOrderIsSet(true);
      }
      if (incoming.get(10)) {
        struct.operatorId = iprot.readString();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.fftPoint = iprot.readDouble();
        struct.setFftPointIsSet(true);
      }
      if (incoming.get(13)) {
        struct.redPacketId = iprot.readString();
        struct.setRedPacketIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cashCouponId = iprot.readString();
        struct.setCashCouponIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pointMoney = iprot.readDouble();
        struct.setPointMoneyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pointRate = iprot.readI64();
        struct.setPointRateIsSet(true);
      }
    }
  }

}

