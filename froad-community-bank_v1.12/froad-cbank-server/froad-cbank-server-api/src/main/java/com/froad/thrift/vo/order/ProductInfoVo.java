/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商品信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductInfoVo implements org.apache.thrift.TBase<ProductInfoVo, ProductInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductInfoVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("productImage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField IS_OUTLET_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isOutletComment", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TAKE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("takeCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementStatus", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementNumber", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CONSUME_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeStatus", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REFUND_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundNumber", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SURPLUS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("surplusNumber", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CHECK_CODE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkCodeTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField REAL_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField REFUND_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("refundReason", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TAKE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("takeNumber", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TAKE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("takeTime", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField REFUND_APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundApplyTime", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField REFUND_SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundSuccessTime", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField REFUNDING_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundingNumber", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField VIP_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipQuantity", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField VIP_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductInfoVoTupleSchemeFactory());
  }

  public String productName; // required
  public String productImage; // required
  public int quantity; // required
  public double money; // required
  public double subTotalMoney; // required
  public boolean isOutletComment; // required
  public String takeCode; // required
  public String deliverState; // required
  public String settlementStatus; // required
  public String settlementNumber; // required
  /**
   * 预售-开始时间-预售为提货时间段， 团购为有效时间段
   */
  public long startTime; // required
  /**
   * 预售-结束时间
   */
  public long endTime; // required
  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public String consumeStatus; // required
  /**
   * 运费-新增
   */
  public double deliveryMoney; // required
  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 退款数量
   */
  public int refundNumber; // required
  /**
   * 剩余数量
   */
  public int surplusNumber; // required
  /**
   * 配送方式
   */
  public String deliveryOption; // required
  /**
   * 验码时间
   */
  public long checkCodeTime; // required
  /**
   * 消费门店
   */
  public String outletName; // required
  /**
   * 操作员
   */
  public long merchantUserId; // required
  /**
   * 实付款
   */
  public double realTotalMoney; // required
  /**
   * 退款原因
   */
  public String refundReason; // required
  /**
   * 已提货数量
   */
  public int takeNumber; // required
  /**
   * 提货时间
   */
  public long takeTime; // required
  /**
   * 退款申请时间
   */
  public long refundApplyTime; // required
  /**
   * 退款成功时间
   */
  public long refundSuccessTime; // required
  /**
   * 退款状态
   */
  public String refundState; // required
  /**
   * 退款中数量
   */
  public int refundingNumber; // required
  public int vipQuantity; // required
  public double vipMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_NAME((short)1, "productName"),
    PRODUCT_IMAGE((short)2, "productImage"),
    QUANTITY((short)3, "quantity"),
    MONEY((short)4, "money"),
    SUB_TOTAL_MONEY((short)5, "subTotalMoney"),
    IS_OUTLET_COMMENT((short)6, "isOutletComment"),
    TAKE_CODE((short)7, "takeCode"),
    DELIVER_STATE((short)8, "deliverState"),
    SETTLEMENT_STATUS((short)9, "settlementStatus"),
    SETTLEMENT_NUMBER((short)10, "settlementNumber"),
    /**
     * 预售-开始时间-预售为提货时间段， 团购为有效时间段
     */
    START_TIME((short)11, "startTime"),
    /**
     * 预售-结束时间
     */
    END_TIME((short)12, "endTime"),
    /**
     * 提货状态-1.未消费，2.已消费，3.部分消费
     */
    CONSUME_STATUS((short)13, "consumeStatus"),
    /**
     * 运费-新增
     */
    DELIVERY_MONEY((short)14, "deliveryMoney"),
    /**
     * 商品ID
     */
    PRODUCT_ID((short)15, "productId"),
    /**
     * 退款数量
     */
    REFUND_NUMBER((short)16, "refundNumber"),
    /**
     * 剩余数量
     */
    SURPLUS_NUMBER((short)17, "surplusNumber"),
    /**
     * 配送方式
     */
    DELIVERY_OPTION((short)18, "deliveryOption"),
    /**
     * 验码时间
     */
    CHECK_CODE_TIME((short)19, "checkCodeTime"),
    /**
     * 消费门店
     */
    OUTLET_NAME((short)20, "outletName"),
    /**
     * 操作员
     */
    MERCHANT_USER_ID((short)21, "merchantUserId"),
    /**
     * 实付款
     */
    REAL_TOTAL_MONEY((short)22, "realTotalMoney"),
    /**
     * 退款原因
     */
    REFUND_REASON((short)23, "refundReason"),
    /**
     * 已提货数量
     */
    TAKE_NUMBER((short)24, "takeNumber"),
    /**
     * 提货时间
     */
    TAKE_TIME((short)25, "takeTime"),
    /**
     * 退款申请时间
     */
    REFUND_APPLY_TIME((short)26, "refundApplyTime"),
    /**
     * 退款成功时间
     */
    REFUND_SUCCESS_TIME((short)27, "refundSuccessTime"),
    /**
     * 退款状态
     */
    REFUND_STATE((short)28, "refundState"),
    /**
     * 退款中数量
     */
    REFUNDING_NUMBER((short)29, "refundingNumber"),
    VIP_QUANTITY((short)30, "vipQuantity"),
    VIP_MONEY((short)31, "vipMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 2: // PRODUCT_IMAGE
          return PRODUCT_IMAGE;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // MONEY
          return MONEY;
        case 5: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 6: // IS_OUTLET_COMMENT
          return IS_OUTLET_COMMENT;
        case 7: // TAKE_CODE
          return TAKE_CODE;
        case 8: // DELIVER_STATE
          return DELIVER_STATE;
        case 9: // SETTLEMENT_STATUS
          return SETTLEMENT_STATUS;
        case 10: // SETTLEMENT_NUMBER
          return SETTLEMENT_NUMBER;
        case 11: // START_TIME
          return START_TIME;
        case 12: // END_TIME
          return END_TIME;
        case 13: // CONSUME_STATUS
          return CONSUME_STATUS;
        case 14: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 15: // PRODUCT_ID
          return PRODUCT_ID;
        case 16: // REFUND_NUMBER
          return REFUND_NUMBER;
        case 17: // SURPLUS_NUMBER
          return SURPLUS_NUMBER;
        case 18: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 19: // CHECK_CODE_TIME
          return CHECK_CODE_TIME;
        case 20: // OUTLET_NAME
          return OUTLET_NAME;
        case 21: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        case 22: // REAL_TOTAL_MONEY
          return REAL_TOTAL_MONEY;
        case 23: // REFUND_REASON
          return REFUND_REASON;
        case 24: // TAKE_NUMBER
          return TAKE_NUMBER;
        case 25: // TAKE_TIME
          return TAKE_TIME;
        case 26: // REFUND_APPLY_TIME
          return REFUND_APPLY_TIME;
        case 27: // REFUND_SUCCESS_TIME
          return REFUND_SUCCESS_TIME;
        case 28: // REFUND_STATE
          return REFUND_STATE;
        case 29: // REFUNDING_NUMBER
          return REFUNDING_NUMBER;
        case 30: // VIP_QUANTITY
          return VIP_QUANTITY;
        case 31: // VIP_MONEY
          return VIP_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITY_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private static final int __SUBTOTALMONEY_ISSET_ID = 2;
  private static final int __ISOUTLETCOMMENT_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __ENDTIME_ISSET_ID = 5;
  private static final int __DELIVERYMONEY_ISSET_ID = 6;
  private static final int __REFUNDNUMBER_ISSET_ID = 7;
  private static final int __SURPLUSNUMBER_ISSET_ID = 8;
  private static final int __CHECKCODETIME_ISSET_ID = 9;
  private static final int __MERCHANTUSERID_ISSET_ID = 10;
  private static final int __REALTOTALMONEY_ISSET_ID = 11;
  private static final int __TAKENUMBER_ISSET_ID = 12;
  private static final int __TAKETIME_ISSET_ID = 13;
  private static final int __REFUNDAPPLYTIME_ISSET_ID = 14;
  private static final int __REFUNDSUCCESSTIME_ISSET_ID = 15;
  private static final int __REFUNDINGNUMBER_ISSET_ID = 16;
  private static final int __VIPQUANTITY_ISSET_ID = 17;
  private static final int __VIPMONEY_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("productImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_OUTLET_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("isOutletComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TAKE_CODE, new org.apache.thrift.meta_data.FieldMetaData("takeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVER_STATE, new org.apache.thrift.meta_data.FieldMetaData("deliverState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settlementStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("settlementNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONSUME_STATUS, new org.apache.thrift.meta_data.FieldMetaData("consumeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("refundNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURPLUS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("surplusNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_CODE_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkCodeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_REASON, new org.apache.thrift.meta_data.FieldMetaData("refundReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAKE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("takeNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAKE_TIME, new org.apache.thrift.meta_data.FieldMetaData("takeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundApplyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundSuccessTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUNDING_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("refundingNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("vipQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductInfoVo.class, metaDataMap);
  }

  public ProductInfoVo() {
  }

  public ProductInfoVo(
    String productName,
    String productImage,
    int quantity,
    double money,
    double subTotalMoney,
    boolean isOutletComment,
    String takeCode,
    String deliverState,
    String settlementStatus,
    String settlementNumber,
    long startTime,
    long endTime,
    String consumeStatus,
    double deliveryMoney,
    String productId,
    int refundNumber,
    int surplusNumber,
    String deliveryOption,
    long checkCodeTime,
    String outletName,
    long merchantUserId,
    double realTotalMoney,
    String refundReason,
    int takeNumber,
    long takeTime,
    long refundApplyTime,
    long refundSuccessTime,
    String refundState,
    int refundingNumber,
    int vipQuantity,
    double vipMoney)
  {
    this();
    this.productName = productName;
    this.productImage = productImage;
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.money = money;
    setMoneyIsSet(true);
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.isOutletComment = isOutletComment;
    setIsOutletCommentIsSet(true);
    this.takeCode = takeCode;
    this.deliverState = deliverState;
    this.settlementStatus = settlementStatus;
    this.settlementNumber = settlementNumber;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.consumeStatus = consumeStatus;
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    this.productId = productId;
    this.refundNumber = refundNumber;
    setRefundNumberIsSet(true);
    this.surplusNumber = surplusNumber;
    setSurplusNumberIsSet(true);
    this.deliveryOption = deliveryOption;
    this.checkCodeTime = checkCodeTime;
    setCheckCodeTimeIsSet(true);
    this.outletName = outletName;
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    this.realTotalMoney = realTotalMoney;
    setRealTotalMoneyIsSet(true);
    this.refundReason = refundReason;
    this.takeNumber = takeNumber;
    setTakeNumberIsSet(true);
    this.takeTime = takeTime;
    setTakeTimeIsSet(true);
    this.refundApplyTime = refundApplyTime;
    setRefundApplyTimeIsSet(true);
    this.refundSuccessTime = refundSuccessTime;
    setRefundSuccessTimeIsSet(true);
    this.refundState = refundState;
    this.refundingNumber = refundingNumber;
    setRefundingNumberIsSet(true);
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductInfoVo(ProductInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetProductImage()) {
      this.productImage = other.productImage;
    }
    this.quantity = other.quantity;
    this.money = other.money;
    this.subTotalMoney = other.subTotalMoney;
    this.isOutletComment = other.isOutletComment;
    if (other.isSetTakeCode()) {
      this.takeCode = other.takeCode;
    }
    if (other.isSetDeliverState()) {
      this.deliverState = other.deliverState;
    }
    if (other.isSetSettlementStatus()) {
      this.settlementStatus = other.settlementStatus;
    }
    if (other.isSetSettlementNumber()) {
      this.settlementNumber = other.settlementNumber;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetConsumeStatus()) {
      this.consumeStatus = other.consumeStatus;
    }
    this.deliveryMoney = other.deliveryMoney;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.refundNumber = other.refundNumber;
    this.surplusNumber = other.surplusNumber;
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    this.checkCodeTime = other.checkCodeTime;
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    this.merchantUserId = other.merchantUserId;
    this.realTotalMoney = other.realTotalMoney;
    if (other.isSetRefundReason()) {
      this.refundReason = other.refundReason;
    }
    this.takeNumber = other.takeNumber;
    this.takeTime = other.takeTime;
    this.refundApplyTime = other.refundApplyTime;
    this.refundSuccessTime = other.refundSuccessTime;
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    this.refundingNumber = other.refundingNumber;
    this.vipQuantity = other.vipQuantity;
    this.vipMoney = other.vipMoney;
  }

  public ProductInfoVo deepCopy() {
    return new ProductInfoVo(this);
  }

  @Override
  public void clear() {
    this.productName = null;
    this.productImage = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    setMoneyIsSet(false);
    this.money = 0.0;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    setIsOutletCommentIsSet(false);
    this.isOutletComment = false;
    this.takeCode = null;
    this.deliverState = null;
    this.settlementStatus = null;
    this.settlementNumber = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.consumeStatus = null;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    this.productId = null;
    setRefundNumberIsSet(false);
    this.refundNumber = 0;
    setSurplusNumberIsSet(false);
    this.surplusNumber = 0;
    this.deliveryOption = null;
    setCheckCodeTimeIsSet(false);
    this.checkCodeTime = 0;
    this.outletName = null;
    setMerchantUserIdIsSet(false);
    this.merchantUserId = 0;
    setRealTotalMoneyIsSet(false);
    this.realTotalMoney = 0.0;
    this.refundReason = null;
    setTakeNumberIsSet(false);
    this.takeNumber = 0;
    setTakeTimeIsSet(false);
    this.takeTime = 0;
    setRefundApplyTimeIsSet(false);
    this.refundApplyTime = 0;
    setRefundSuccessTimeIsSet(false);
    this.refundSuccessTime = 0;
    this.refundState = null;
    setRefundingNumberIsSet(false);
    this.refundingNumber = 0;
    setVipQuantityIsSet(false);
    this.vipQuantity = 0;
    setVipMoneyIsSet(false);
    this.vipMoney = 0.0;
  }

  public String getProductName() {
    return this.productName;
  }

  public ProductInfoVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getProductImage() {
    return this.productImage;
  }

  public ProductInfoVo setProductImage(String productImage) {
    this.productImage = productImage;
    return this;
  }

  public void unsetProductImage() {
    this.productImage = null;
  }

  /** Returns true if field productImage is set (has been assigned a value) and false otherwise */
  public boolean isSetProductImage() {
    return this.productImage != null;
  }

  public void setProductImageIsSet(boolean value) {
    if (!value) {
      this.productImage = null;
    }
  }

  public int getQuantity() {
    return this.quantity;
  }

  public ProductInfoVo setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public double getMoney() {
    return this.money;
  }

  public ProductInfoVo setMoney(double money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  public ProductInfoVo setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  public boolean isIsOutletComment() {
    return this.isOutletComment;
  }

  public ProductInfoVo setIsOutletComment(boolean isOutletComment) {
    this.isOutletComment = isOutletComment;
    setIsOutletCommentIsSet(true);
    return this;
  }

  public void unsetIsOutletComment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOUTLETCOMMENT_ISSET_ID);
  }

  /** Returns true if field isOutletComment is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOutletComment() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOUTLETCOMMENT_ISSET_ID);
  }

  public void setIsOutletCommentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOUTLETCOMMENT_ISSET_ID, value);
  }

  public String getTakeCode() {
    return this.takeCode;
  }

  public ProductInfoVo setTakeCode(String takeCode) {
    this.takeCode = takeCode;
    return this;
  }

  public void unsetTakeCode() {
    this.takeCode = null;
  }

  /** Returns true if field takeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeCode() {
    return this.takeCode != null;
  }

  public void setTakeCodeIsSet(boolean value) {
    if (!value) {
      this.takeCode = null;
    }
  }

  public String getDeliverState() {
    return this.deliverState;
  }

  public ProductInfoVo setDeliverState(String deliverState) {
    this.deliverState = deliverState;
    return this;
  }

  public void unsetDeliverState() {
    this.deliverState = null;
  }

  /** Returns true if field deliverState is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverState() {
    return this.deliverState != null;
  }

  public void setDeliverStateIsSet(boolean value) {
    if (!value) {
      this.deliverState = null;
    }
  }

  public String getSettlementStatus() {
    return this.settlementStatus;
  }

  public ProductInfoVo setSettlementStatus(String settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

  public void unsetSettlementStatus() {
    this.settlementStatus = null;
  }

  /** Returns true if field settlementStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementStatus() {
    return this.settlementStatus != null;
  }

  public void setSettlementStatusIsSet(boolean value) {
    if (!value) {
      this.settlementStatus = null;
    }
  }

  public String getSettlementNumber() {
    return this.settlementNumber;
  }

  public ProductInfoVo setSettlementNumber(String settlementNumber) {
    this.settlementNumber = settlementNumber;
    return this;
  }

  public void unsetSettlementNumber() {
    this.settlementNumber = null;
  }

  /** Returns true if field settlementNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementNumber() {
    return this.settlementNumber != null;
  }

  public void setSettlementNumberIsSet(boolean value) {
    if (!value) {
      this.settlementNumber = null;
    }
  }

  /**
   * 预售-开始时间-预售为提货时间段， 团购为有效时间段
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 预售-开始时间-预售为提货时间段， 团购为有效时间段
   */
  public ProductInfoVo setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 预售-结束时间
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 预售-结束时间
   */
  public ProductInfoVo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public String getConsumeStatus() {
    return this.consumeStatus;
  }

  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public ProductInfoVo setConsumeStatus(String consumeStatus) {
    this.consumeStatus = consumeStatus;
    return this;
  }

  public void unsetConsumeStatus() {
    this.consumeStatus = null;
  }

  /** Returns true if field consumeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeStatus() {
    return this.consumeStatus != null;
  }

  public void setConsumeStatusIsSet(boolean value) {
    if (!value) {
      this.consumeStatus = null;
    }
  }

  /**
   * 运费-新增
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费-新增
   */
  public ProductInfoVo setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public ProductInfoVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 退款数量
   */
  public int getRefundNumber() {
    return this.refundNumber;
  }

  /**
   * 退款数量
   */
  public ProductInfoVo setRefundNumber(int refundNumber) {
    this.refundNumber = refundNumber;
    setRefundNumberIsSet(true);
    return this;
  }

  public void unsetRefundNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID);
  }

  /** Returns true if field refundNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID);
  }

  public void setRefundNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID, value);
  }

  /**
   * 剩余数量
   */
  public int getSurplusNumber() {
    return this.surplusNumber;
  }

  /**
   * 剩余数量
   */
  public ProductInfoVo setSurplusNumber(int surplusNumber) {
    this.surplusNumber = surplusNumber;
    setSurplusNumberIsSet(true);
    return this;
  }

  public void unsetSurplusNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID);
  }

  /** Returns true if field surplusNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSurplusNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID);
  }

  public void setSurplusNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID, value);
  }

  /**
   * 配送方式
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 配送方式
   */
  public ProductInfoVo setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 验码时间
   */
  public long getCheckCodeTime() {
    return this.checkCodeTime;
  }

  /**
   * 验码时间
   */
  public ProductInfoVo setCheckCodeTime(long checkCodeTime) {
    this.checkCodeTime = checkCodeTime;
    setCheckCodeTimeIsSet(true);
    return this;
  }

  public void unsetCheckCodeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKCODETIME_ISSET_ID);
  }

  /** Returns true if field checkCodeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckCodeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKCODETIME_ISSET_ID);
  }

  public void setCheckCodeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKCODETIME_ISSET_ID, value);
  }

  /**
   * 消费门店
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 消费门店
   */
  public ProductInfoVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 操作员
   */
  public long getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 操作员
   */
  public ProductInfoVo setMerchantUserId(long merchantUserId) {
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    return this;
  }

  public void unsetMerchantUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  public void setMerchantUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID, value);
  }

  /**
   * 实付款
   */
  public double getRealTotalMoney() {
    return this.realTotalMoney;
  }

  /**
   * 实付款
   */
  public ProductInfoVo setRealTotalMoney(double realTotalMoney) {
    this.realTotalMoney = realTotalMoney;
    setRealTotalMoneyIsSet(true);
    return this;
  }

  public void unsetRealTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field realTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID);
  }

  public void setRealTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 退款原因
   */
  public String getRefundReason() {
    return this.refundReason;
  }

  /**
   * 退款原因
   */
  public ProductInfoVo setRefundReason(String refundReason) {
    this.refundReason = refundReason;
    return this;
  }

  public void unsetRefundReason() {
    this.refundReason = null;
  }

  /** Returns true if field refundReason is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundReason() {
    return this.refundReason != null;
  }

  public void setRefundReasonIsSet(boolean value) {
    if (!value) {
      this.refundReason = null;
    }
  }

  /**
   * 已提货数量
   */
  public int getTakeNumber() {
    return this.takeNumber;
  }

  /**
   * 已提货数量
   */
  public ProductInfoVo setTakeNumber(int takeNumber) {
    this.takeNumber = takeNumber;
    setTakeNumberIsSet(true);
    return this;
  }

  public void unsetTakeNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAKENUMBER_ISSET_ID);
  }

  /** Returns true if field takeNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TAKENUMBER_ISSET_ID);
  }

  public void setTakeNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAKENUMBER_ISSET_ID, value);
  }

  /**
   * 提货时间
   */
  public long getTakeTime() {
    return this.takeTime;
  }

  /**
   * 提货时间
   */
  public ProductInfoVo setTakeTime(long takeTime) {
    this.takeTime = takeTime;
    setTakeTimeIsSet(true);
    return this;
  }

  public void unsetTakeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAKETIME_ISSET_ID);
  }

  /** Returns true if field takeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TAKETIME_ISSET_ID);
  }

  public void setTakeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAKETIME_ISSET_ID, value);
  }

  /**
   * 退款申请时间
   */
  public long getRefundApplyTime() {
    return this.refundApplyTime;
  }

  /**
   * 退款申请时间
   */
  public ProductInfoVo setRefundApplyTime(long refundApplyTime) {
    this.refundApplyTime = refundApplyTime;
    setRefundApplyTimeIsSet(true);
    return this;
  }

  public void unsetRefundApplyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID);
  }

  /** Returns true if field refundApplyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundApplyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID);
  }

  public void setRefundApplyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID, value);
  }

  /**
   * 退款成功时间
   */
  public long getRefundSuccessTime() {
    return this.refundSuccessTime;
  }

  /**
   * 退款成功时间
   */
  public ProductInfoVo setRefundSuccessTime(long refundSuccessTime) {
    this.refundSuccessTime = refundSuccessTime;
    setRefundSuccessTimeIsSet(true);
    return this;
  }

  public void unsetRefundSuccessTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID);
  }

  /** Returns true if field refundSuccessTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundSuccessTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID);
  }

  public void setRefundSuccessTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID, value);
  }

  /**
   * 退款状态
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 退款状态
   */
  public ProductInfoVo setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 退款中数量
   */
  public int getRefundingNumber() {
    return this.refundingNumber;
  }

  /**
   * 退款中数量
   */
  public ProductInfoVo setRefundingNumber(int refundingNumber) {
    this.refundingNumber = refundingNumber;
    setRefundingNumberIsSet(true);
    return this;
  }

  public void unsetRefundingNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID);
  }

  /** Returns true if field refundingNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundingNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID);
  }

  public void setRefundingNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID, value);
  }

  public int getVipQuantity() {
    return this.vipQuantity;
  }

  public ProductInfoVo setVipQuantity(int vipQuantity) {
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    return this;
  }

  public void unsetVipQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  /** Returns true if field vipQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetVipQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  public void setVipQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID, value);
  }

  public double getVipMoney() {
    return this.vipMoney;
  }

  public ProductInfoVo setVipMoney(double vipMoney) {
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    return this;
  }

  public void unsetVipMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  /** Returns true if field vipMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  public void setVipMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_IMAGE:
      if (value == null) {
        unsetProductImage();
      } else {
        setProductImage((String)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Double)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case IS_OUTLET_COMMENT:
      if (value == null) {
        unsetIsOutletComment();
      } else {
        setIsOutletComment((Boolean)value);
      }
      break;

    case TAKE_CODE:
      if (value == null) {
        unsetTakeCode();
      } else {
        setTakeCode((String)value);
      }
      break;

    case DELIVER_STATE:
      if (value == null) {
        unsetDeliverState();
      } else {
        setDeliverState((String)value);
      }
      break;

    case SETTLEMENT_STATUS:
      if (value == null) {
        unsetSettlementStatus();
      } else {
        setSettlementStatus((String)value);
      }
      break;

    case SETTLEMENT_NUMBER:
      if (value == null) {
        unsetSettlementNumber();
      } else {
        setSettlementNumber((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case CONSUME_STATUS:
      if (value == null) {
        unsetConsumeStatus();
      } else {
        setConsumeStatus((String)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case REFUND_NUMBER:
      if (value == null) {
        unsetRefundNumber();
      } else {
        setRefundNumber((Integer)value);
      }
      break;

    case SURPLUS_NUMBER:
      if (value == null) {
        unsetSurplusNumber();
      } else {
        setSurplusNumber((Integer)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case CHECK_CODE_TIME:
      if (value == null) {
        unsetCheckCodeTime();
      } else {
        setCheckCodeTime((Long)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((Long)value);
      }
      break;

    case REAL_TOTAL_MONEY:
      if (value == null) {
        unsetRealTotalMoney();
      } else {
        setRealTotalMoney((Double)value);
      }
      break;

    case REFUND_REASON:
      if (value == null) {
        unsetRefundReason();
      } else {
        setRefundReason((String)value);
      }
      break;

    case TAKE_NUMBER:
      if (value == null) {
        unsetTakeNumber();
      } else {
        setTakeNumber((Integer)value);
      }
      break;

    case TAKE_TIME:
      if (value == null) {
        unsetTakeTime();
      } else {
        setTakeTime((Long)value);
      }
      break;

    case REFUND_APPLY_TIME:
      if (value == null) {
        unsetRefundApplyTime();
      } else {
        setRefundApplyTime((Long)value);
      }
      break;

    case REFUND_SUCCESS_TIME:
      if (value == null) {
        unsetRefundSuccessTime();
      } else {
        setRefundSuccessTime((Long)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case REFUNDING_NUMBER:
      if (value == null) {
        unsetRefundingNumber();
      } else {
        setRefundingNumber((Integer)value);
      }
      break;

    case VIP_QUANTITY:
      if (value == null) {
        unsetVipQuantity();
      } else {
        setVipQuantity((Integer)value);
      }
      break;

    case VIP_MONEY:
      if (value == null) {
        unsetVipMoney();
      } else {
        setVipMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_IMAGE:
      return getProductImage();

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case MONEY:
      return Double.valueOf(getMoney());

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case IS_OUTLET_COMMENT:
      return Boolean.valueOf(isIsOutletComment());

    case TAKE_CODE:
      return getTakeCode();

    case DELIVER_STATE:
      return getDeliverState();

    case SETTLEMENT_STATUS:
      return getSettlementStatus();

    case SETTLEMENT_NUMBER:
      return getSettlementNumber();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case CONSUME_STATUS:
      return getConsumeStatus();

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case PRODUCT_ID:
      return getProductId();

    case REFUND_NUMBER:
      return Integer.valueOf(getRefundNumber());

    case SURPLUS_NUMBER:
      return Integer.valueOf(getSurplusNumber());

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case CHECK_CODE_TIME:
      return Long.valueOf(getCheckCodeTime());

    case OUTLET_NAME:
      return getOutletName();

    case MERCHANT_USER_ID:
      return Long.valueOf(getMerchantUserId());

    case REAL_TOTAL_MONEY:
      return Double.valueOf(getRealTotalMoney());

    case REFUND_REASON:
      return getRefundReason();

    case TAKE_NUMBER:
      return Integer.valueOf(getTakeNumber());

    case TAKE_TIME:
      return Long.valueOf(getTakeTime());

    case REFUND_APPLY_TIME:
      return Long.valueOf(getRefundApplyTime());

    case REFUND_SUCCESS_TIME:
      return Long.valueOf(getRefundSuccessTime());

    case REFUND_STATE:
      return getRefundState();

    case REFUNDING_NUMBER:
      return Integer.valueOf(getRefundingNumber());

    case VIP_QUANTITY:
      return Integer.valueOf(getVipQuantity());

    case VIP_MONEY:
      return Double.valueOf(getVipMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_IMAGE:
      return isSetProductImage();
    case QUANTITY:
      return isSetQuantity();
    case MONEY:
      return isSetMoney();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case IS_OUTLET_COMMENT:
      return isSetIsOutletComment();
    case TAKE_CODE:
      return isSetTakeCode();
    case DELIVER_STATE:
      return isSetDeliverState();
    case SETTLEMENT_STATUS:
      return isSetSettlementStatus();
    case SETTLEMENT_NUMBER:
      return isSetSettlementNumber();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case CONSUME_STATUS:
      return isSetConsumeStatus();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case PRODUCT_ID:
      return isSetProductId();
    case REFUND_NUMBER:
      return isSetRefundNumber();
    case SURPLUS_NUMBER:
      return isSetSurplusNumber();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case CHECK_CODE_TIME:
      return isSetCheckCodeTime();
    case OUTLET_NAME:
      return isSetOutletName();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    case REAL_TOTAL_MONEY:
      return isSetRealTotalMoney();
    case REFUND_REASON:
      return isSetRefundReason();
    case TAKE_NUMBER:
      return isSetTakeNumber();
    case TAKE_TIME:
      return isSetTakeTime();
    case REFUND_APPLY_TIME:
      return isSetRefundApplyTime();
    case REFUND_SUCCESS_TIME:
      return isSetRefundSuccessTime();
    case REFUND_STATE:
      return isSetRefundState();
    case REFUNDING_NUMBER:
      return isSetRefundingNumber();
    case VIP_QUANTITY:
      return isSetVipQuantity();
    case VIP_MONEY:
      return isSetVipMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductInfoVo)
      return this.equals((ProductInfoVo)that);
    return false;
  }

  public boolean equals(ProductInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productImage = true && this.isSetProductImage();
    boolean that_present_productImage = true && that.isSetProductImage();
    if (this_present_productImage || that_present_productImage) {
      if (!(this_present_productImage && that_present_productImage))
        return false;
      if (!this.productImage.equals(that.productImage))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_isOutletComment = true;
    boolean that_present_isOutletComment = true;
    if (this_present_isOutletComment || that_present_isOutletComment) {
      if (!(this_present_isOutletComment && that_present_isOutletComment))
        return false;
      if (this.isOutletComment != that.isOutletComment)
        return false;
    }

    boolean this_present_takeCode = true && this.isSetTakeCode();
    boolean that_present_takeCode = true && that.isSetTakeCode();
    if (this_present_takeCode || that_present_takeCode) {
      if (!(this_present_takeCode && that_present_takeCode))
        return false;
      if (!this.takeCode.equals(that.takeCode))
        return false;
    }

    boolean this_present_deliverState = true && this.isSetDeliverState();
    boolean that_present_deliverState = true && that.isSetDeliverState();
    if (this_present_deliverState || that_present_deliverState) {
      if (!(this_present_deliverState && that_present_deliverState))
        return false;
      if (!this.deliverState.equals(that.deliverState))
        return false;
    }

    boolean this_present_settlementStatus = true && this.isSetSettlementStatus();
    boolean that_present_settlementStatus = true && that.isSetSettlementStatus();
    if (this_present_settlementStatus || that_present_settlementStatus) {
      if (!(this_present_settlementStatus && that_present_settlementStatus))
        return false;
      if (!this.settlementStatus.equals(that.settlementStatus))
        return false;
    }

    boolean this_present_settlementNumber = true && this.isSetSettlementNumber();
    boolean that_present_settlementNumber = true && that.isSetSettlementNumber();
    if (this_present_settlementNumber || that_present_settlementNumber) {
      if (!(this_present_settlementNumber && that_present_settlementNumber))
        return false;
      if (!this.settlementNumber.equals(that.settlementNumber))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_consumeStatus = true && this.isSetConsumeStatus();
    boolean that_present_consumeStatus = true && that.isSetConsumeStatus();
    if (this_present_consumeStatus || that_present_consumeStatus) {
      if (!(this_present_consumeStatus && that_present_consumeStatus))
        return false;
      if (!this.consumeStatus.equals(that.consumeStatus))
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_refundNumber = true;
    boolean that_present_refundNumber = true;
    if (this_present_refundNumber || that_present_refundNumber) {
      if (!(this_present_refundNumber && that_present_refundNumber))
        return false;
      if (this.refundNumber != that.refundNumber)
        return false;
    }

    boolean this_present_surplusNumber = true;
    boolean that_present_surplusNumber = true;
    if (this_present_surplusNumber || that_present_surplusNumber) {
      if (!(this_present_surplusNumber && that_present_surplusNumber))
        return false;
      if (this.surplusNumber != that.surplusNumber)
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_checkCodeTime = true;
    boolean that_present_checkCodeTime = true;
    if (this_present_checkCodeTime || that_present_checkCodeTime) {
      if (!(this_present_checkCodeTime && that_present_checkCodeTime))
        return false;
      if (this.checkCodeTime != that.checkCodeTime)
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_merchantUserId = true;
    boolean that_present_merchantUserId = true;
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (this.merchantUserId != that.merchantUserId)
        return false;
    }

    boolean this_present_realTotalMoney = true;
    boolean that_present_realTotalMoney = true;
    if (this_present_realTotalMoney || that_present_realTotalMoney) {
      if (!(this_present_realTotalMoney && that_present_realTotalMoney))
        return false;
      if (this.realTotalMoney != that.realTotalMoney)
        return false;
    }

    boolean this_present_refundReason = true && this.isSetRefundReason();
    boolean that_present_refundReason = true && that.isSetRefundReason();
    if (this_present_refundReason || that_present_refundReason) {
      if (!(this_present_refundReason && that_present_refundReason))
        return false;
      if (!this.refundReason.equals(that.refundReason))
        return false;
    }

    boolean this_present_takeNumber = true;
    boolean that_present_takeNumber = true;
    if (this_present_takeNumber || that_present_takeNumber) {
      if (!(this_present_takeNumber && that_present_takeNumber))
        return false;
      if (this.takeNumber != that.takeNumber)
        return false;
    }

    boolean this_present_takeTime = true;
    boolean that_present_takeTime = true;
    if (this_present_takeTime || that_present_takeTime) {
      if (!(this_present_takeTime && that_present_takeTime))
        return false;
      if (this.takeTime != that.takeTime)
        return false;
    }

    boolean this_present_refundApplyTime = true;
    boolean that_present_refundApplyTime = true;
    if (this_present_refundApplyTime || that_present_refundApplyTime) {
      if (!(this_present_refundApplyTime && that_present_refundApplyTime))
        return false;
      if (this.refundApplyTime != that.refundApplyTime)
        return false;
    }

    boolean this_present_refundSuccessTime = true;
    boolean that_present_refundSuccessTime = true;
    if (this_present_refundSuccessTime || that_present_refundSuccessTime) {
      if (!(this_present_refundSuccessTime && that_present_refundSuccessTime))
        return false;
      if (this.refundSuccessTime != that.refundSuccessTime)
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_refundingNumber = true;
    boolean that_present_refundingNumber = true;
    if (this_present_refundingNumber || that_present_refundingNumber) {
      if (!(this_present_refundingNumber && that_present_refundingNumber))
        return false;
      if (this.refundingNumber != that.refundingNumber)
        return false;
    }

    boolean this_present_vipQuantity = true;
    boolean that_present_vipQuantity = true;
    if (this_present_vipQuantity || that_present_vipQuantity) {
      if (!(this_present_vipQuantity && that_present_vipQuantity))
        return false;
      if (this.vipQuantity != that.vipQuantity)
        return false;
    }

    boolean this_present_vipMoney = true;
    boolean that_present_vipMoney = true;
    if (this_present_vipMoney || that_present_vipMoney) {
      if (!(this_present_vipMoney && that_present_vipMoney))
        return false;
      if (this.vipMoney != that.vipMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productImage = true && (isSetProductImage());
    list.add(present_productImage);
    if (present_productImage)
      list.add(productImage);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_money = true;
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_isOutletComment = true;
    list.add(present_isOutletComment);
    if (present_isOutletComment)
      list.add(isOutletComment);

    boolean present_takeCode = true && (isSetTakeCode());
    list.add(present_takeCode);
    if (present_takeCode)
      list.add(takeCode);

    boolean present_deliverState = true && (isSetDeliverState());
    list.add(present_deliverState);
    if (present_deliverState)
      list.add(deliverState);

    boolean present_settlementStatus = true && (isSetSettlementStatus());
    list.add(present_settlementStatus);
    if (present_settlementStatus)
      list.add(settlementStatus);

    boolean present_settlementNumber = true && (isSetSettlementNumber());
    list.add(present_settlementNumber);
    if (present_settlementNumber)
      list.add(settlementNumber);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_consumeStatus = true && (isSetConsumeStatus());
    list.add(present_consumeStatus);
    if (present_consumeStatus)
      list.add(consumeStatus);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_refundNumber = true;
    list.add(present_refundNumber);
    if (present_refundNumber)
      list.add(refundNumber);

    boolean present_surplusNumber = true;
    list.add(present_surplusNumber);
    if (present_surplusNumber)
      list.add(surplusNumber);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_checkCodeTime = true;
    list.add(present_checkCodeTime);
    if (present_checkCodeTime)
      list.add(checkCodeTime);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_merchantUserId = true;
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    boolean present_realTotalMoney = true;
    list.add(present_realTotalMoney);
    if (present_realTotalMoney)
      list.add(realTotalMoney);

    boolean present_refundReason = true && (isSetRefundReason());
    list.add(present_refundReason);
    if (present_refundReason)
      list.add(refundReason);

    boolean present_takeNumber = true;
    list.add(present_takeNumber);
    if (present_takeNumber)
      list.add(takeNumber);

    boolean present_takeTime = true;
    list.add(present_takeTime);
    if (present_takeTime)
      list.add(takeTime);

    boolean present_refundApplyTime = true;
    list.add(present_refundApplyTime);
    if (present_refundApplyTime)
      list.add(refundApplyTime);

    boolean present_refundSuccessTime = true;
    list.add(present_refundSuccessTime);
    if (present_refundSuccessTime)
      list.add(refundSuccessTime);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_refundingNumber = true;
    list.add(present_refundingNumber);
    if (present_refundingNumber)
      list.add(refundingNumber);

    boolean present_vipQuantity = true;
    list.add(present_vipQuantity);
    if (present_vipQuantity)
      list.add(vipQuantity);

    boolean present_vipMoney = true;
    list.add(present_vipMoney);
    if (present_vipMoney)
      list.add(vipMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductImage()).compareTo(other.isSetProductImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productImage, other.productImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOutletComment()).compareTo(other.isSetIsOutletComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOutletComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOutletComment, other.isOutletComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeCode()).compareTo(other.isSetTakeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeCode, other.takeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverState()).compareTo(other.isSetDeliverState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverState, other.deliverState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementStatus()).compareTo(other.isSetSettlementStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementStatus, other.settlementStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementNumber()).compareTo(other.isSetSettlementNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementNumber, other.settlementNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeStatus()).compareTo(other.isSetConsumeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeStatus, other.consumeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundNumber()).compareTo(other.isSetRefundNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundNumber, other.refundNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurplusNumber()).compareTo(other.isSetSurplusNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurplusNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surplusNumber, other.surplusNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckCodeTime()).compareTo(other.isSetCheckCodeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckCodeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkCodeTime, other.checkCodeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealTotalMoney()).compareTo(other.isSetRealTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTotalMoney, other.realTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundReason()).compareTo(other.isSetRefundReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundReason, other.refundReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeNumber()).compareTo(other.isSetTakeNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeNumber, other.takeNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeTime()).compareTo(other.isSetTakeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeTime, other.takeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundApplyTime()).compareTo(other.isSetRefundApplyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundApplyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundApplyTime, other.refundApplyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundSuccessTime()).compareTo(other.isSetRefundSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundSuccessTime, other.refundSuccessTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundingNumber()).compareTo(other.isSetRefundingNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundingNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundingNumber, other.refundingNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipQuantity()).compareTo(other.isSetVipQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipQuantity, other.vipQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipMoney()).compareTo(other.isSetVipMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipMoney, other.vipMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductInfoVo(");
    boolean first = true;

    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productImage:");
    if (this.productImage == null) {
      sb.append("null");
    } else {
      sb.append(this.productImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOutletComment:");
    sb.append(this.isOutletComment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeCode:");
    if (this.takeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.takeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliverState:");
    if (this.deliverState == null) {
      sb.append("null");
    } else {
      sb.append(this.deliverState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementStatus:");
    if (this.settlementStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementNumber:");
    if (this.settlementNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeStatus:");
    if (this.consumeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.consumeStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundNumber:");
    sb.append(this.refundNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surplusNumber:");
    sb.append(this.surplusNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkCodeTime:");
    sb.append(this.checkCodeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    sb.append(this.merchantUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realTotalMoney:");
    sb.append(this.realTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundReason:");
    if (this.refundReason == null) {
      sb.append("null");
    } else {
      sb.append(this.refundReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeNumber:");
    sb.append(this.takeNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeTime:");
    sb.append(this.takeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundApplyTime:");
    sb.append(this.refundApplyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundSuccessTime:");
    sb.append(this.refundSuccessTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundingNumber:");
    sb.append(this.refundingNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipQuantity:");
    sb.append(this.vipQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipMoney:");
    sb.append(this.vipMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductInfoVoStandardSchemeFactory implements SchemeFactory {
    public ProductInfoVoStandardScheme getScheme() {
      return new ProductInfoVoStandardScheme();
    }
  }

  private static class ProductInfoVoStandardScheme extends StandardScheme<ProductInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productImage = iprot.readString();
              struct.setProductImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.money = iprot.readDouble();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_OUTLET_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOutletComment = iprot.readBool();
              struct.setIsOutletCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAKE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.takeCode = iprot.readString();
              struct.setTakeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliverState = iprot.readString();
              struct.setDeliverStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SETTLEMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementStatus = iprot.readString();
              struct.setSettlementStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETTLEMENT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementNumber = iprot.readString();
              struct.setSettlementNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONSUME_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consumeStatus = iprot.readString();
              struct.setConsumeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REFUND_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundNumber = iprot.readI32();
              struct.setRefundNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SURPLUS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surplusNumber = iprot.readI32();
              struct.setSurplusNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHECK_CODE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.checkCodeTime = iprot.readI64();
              struct.setCheckCodeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantUserId = iprot.readI64();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REAL_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realTotalMoney = iprot.readDouble();
              struct.setRealTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REFUND_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundReason = iprot.readString();
              struct.setRefundReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TAKE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.takeNumber = iprot.readI32();
              struct.setTakeNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TAKE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.takeTime = iprot.readI64();
              struct.setTakeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REFUND_APPLY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundApplyTime = iprot.readI64();
              struct.setRefundApplyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REFUND_SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundSuccessTime = iprot.readI64();
              struct.setRefundSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REFUNDING_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundingNumber = iprot.readI32();
              struct.setRefundingNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // VIP_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipQuantity = iprot.readI32();
              struct.setVipQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // VIP_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipMoney = iprot.readDouble();
              struct.setVipMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.productImage != null) {
        oprot.writeFieldBegin(PRODUCT_IMAGE_FIELD_DESC);
        oprot.writeString(struct.productImage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeDouble(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OUTLET_COMMENT_FIELD_DESC);
      oprot.writeBool(struct.isOutletComment);
      oprot.writeFieldEnd();
      if (struct.takeCode != null) {
        oprot.writeFieldBegin(TAKE_CODE_FIELD_DESC);
        oprot.writeString(struct.takeCode);
        oprot.writeFieldEnd();
      }
      if (struct.deliverState != null) {
        oprot.writeFieldBegin(DELIVER_STATE_FIELD_DESC);
        oprot.writeString(struct.deliverState);
        oprot.writeFieldEnd();
      }
      if (struct.settlementStatus != null) {
        oprot.writeFieldBegin(SETTLEMENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.settlementStatus);
        oprot.writeFieldEnd();
      }
      if (struct.settlementNumber != null) {
        oprot.writeFieldBegin(SETTLEMENT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.settlementNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.consumeStatus != null) {
        oprot.writeFieldBegin(CONSUME_STATUS_FIELD_DESC);
        oprot.writeString(struct.consumeStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.refundNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SURPLUS_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.surplusNumber);
      oprot.writeFieldEnd();
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_CODE_TIME_FIELD_DESC);
      oprot.writeI64(struct.checkCodeTime);
      oprot.writeFieldEnd();
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realTotalMoney);
      oprot.writeFieldEnd();
      if (struct.refundReason != null) {
        oprot.writeFieldBegin(REFUND_REASON_FIELD_DESC);
        oprot.writeString(struct.refundReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TAKE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.takeNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAKE_TIME_FIELD_DESC);
      oprot.writeI64(struct.takeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_APPLY_TIME_FIELD_DESC);
      oprot.writeI64(struct.refundApplyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_SUCCESS_TIME_FIELD_DESC);
      oprot.writeI64(struct.refundSuccessTime);
      oprot.writeFieldEnd();
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUNDING_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.refundingNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductInfoVoTupleSchemeFactory implements SchemeFactory {
    public ProductInfoVoTupleScheme getScheme() {
      return new ProductInfoVoTupleScheme();
    }
  }

  private static class ProductInfoVoTupleScheme extends TupleScheme<ProductInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductName()) {
        optionals.set(0);
      }
      if (struct.isSetProductImage()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetMoney()) {
        optionals.set(3);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(4);
      }
      if (struct.isSetIsOutletComment()) {
        optionals.set(5);
      }
      if (struct.isSetTakeCode()) {
        optionals.set(6);
      }
      if (struct.isSetDeliverState()) {
        optionals.set(7);
      }
      if (struct.isSetSettlementStatus()) {
        optionals.set(8);
      }
      if (struct.isSetSettlementNumber()) {
        optionals.set(9);
      }
      if (struct.isSetStartTime()) {
        optionals.set(10);
      }
      if (struct.isSetEndTime()) {
        optionals.set(11);
      }
      if (struct.isSetConsumeStatus()) {
        optionals.set(12);
      }
      if (struct.isSetDeliveryMoney()) {
        optionals.set(13);
      }
      if (struct.isSetProductId()) {
        optionals.set(14);
      }
      if (struct.isSetRefundNumber()) {
        optionals.set(15);
      }
      if (struct.isSetSurplusNumber()) {
        optionals.set(16);
      }
      if (struct.isSetDeliveryOption()) {
        optionals.set(17);
      }
      if (struct.isSetCheckCodeTime()) {
        optionals.set(18);
      }
      if (struct.isSetOutletName()) {
        optionals.set(19);
      }
      if (struct.isSetMerchantUserId()) {
        optionals.set(20);
      }
      if (struct.isSetRealTotalMoney()) {
        optionals.set(21);
      }
      if (struct.isSetRefundReason()) {
        optionals.set(22);
      }
      if (struct.isSetTakeNumber()) {
        optionals.set(23);
      }
      if (struct.isSetTakeTime()) {
        optionals.set(24);
      }
      if (struct.isSetRefundApplyTime()) {
        optionals.set(25);
      }
      if (struct.isSetRefundSuccessTime()) {
        optionals.set(26);
      }
      if (struct.isSetRefundState()) {
        optionals.set(27);
      }
      if (struct.isSetRefundingNumber()) {
        optionals.set(28);
      }
      if (struct.isSetVipQuantity()) {
        optionals.set(29);
      }
      if (struct.isSetVipMoney()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductImage()) {
        oprot.writeString(struct.productImage);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetMoney()) {
        oprot.writeDouble(struct.money);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetIsOutletComment()) {
        oprot.writeBool(struct.isOutletComment);
      }
      if (struct.isSetTakeCode()) {
        oprot.writeString(struct.takeCode);
      }
      if (struct.isSetDeliverState()) {
        oprot.writeString(struct.deliverState);
      }
      if (struct.isSetSettlementStatus()) {
        oprot.writeString(struct.settlementStatus);
      }
      if (struct.isSetSettlementNumber()) {
        oprot.writeString(struct.settlementNumber);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetConsumeStatus()) {
        oprot.writeString(struct.consumeStatus);
      }
      if (struct.isSetDeliveryMoney()) {
        oprot.writeDouble(struct.deliveryMoney);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetRefundNumber()) {
        oprot.writeI32(struct.refundNumber);
      }
      if (struct.isSetSurplusNumber()) {
        oprot.writeI32(struct.surplusNumber);
      }
      if (struct.isSetDeliveryOption()) {
        oprot.writeString(struct.deliveryOption);
      }
      if (struct.isSetCheckCodeTime()) {
        oprot.writeI64(struct.checkCodeTime);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetMerchantUserId()) {
        oprot.writeI64(struct.merchantUserId);
      }
      if (struct.isSetRealTotalMoney()) {
        oprot.writeDouble(struct.realTotalMoney);
      }
      if (struct.isSetRefundReason()) {
        oprot.writeString(struct.refundReason);
      }
      if (struct.isSetTakeNumber()) {
        oprot.writeI32(struct.takeNumber);
      }
      if (struct.isSetTakeTime()) {
        oprot.writeI64(struct.takeTime);
      }
      if (struct.isSetRefundApplyTime()) {
        oprot.writeI64(struct.refundApplyTime);
      }
      if (struct.isSetRefundSuccessTime()) {
        oprot.writeI64(struct.refundSuccessTime);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetRefundingNumber()) {
        oprot.writeI32(struct.refundingNumber);
      }
      if (struct.isSetVipQuantity()) {
        oprot.writeI32(struct.vipQuantity);
      }
      if (struct.isSetVipMoney()) {
        oprot.writeDouble(struct.vipMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productImage = iprot.readString();
        struct.setProductImageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.money = iprot.readDouble();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isOutletComment = iprot.readBool();
        struct.setIsOutletCommentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.takeCode = iprot.readString();
        struct.setTakeCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deliverState = iprot.readString();
        struct.setDeliverStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.settlementStatus = iprot.readString();
        struct.setSettlementStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.settlementNumber = iprot.readString();
        struct.setSettlementNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.consumeStatus = iprot.readString();
        struct.setConsumeStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.deliveryMoney = iprot.readDouble();
        struct.setDeliveryMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.refundNumber = iprot.readI32();
        struct.setRefundNumberIsSet(true);
      }
      if (incoming.get(16)) {
        struct.surplusNumber = iprot.readI32();
        struct.setSurplusNumberIsSet(true);
      }
      if (incoming.get(17)) {
        struct.deliveryOption = iprot.readString();
        struct.setDeliveryOptionIsSet(true);
      }
      if (incoming.get(18)) {
        struct.checkCodeTime = iprot.readI64();
        struct.setCheckCodeTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.merchantUserId = iprot.readI64();
        struct.setMerchantUserIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.realTotalMoney = iprot.readDouble();
        struct.setRealTotalMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.refundReason = iprot.readString();
        struct.setRefundReasonIsSet(true);
      }
      if (incoming.get(23)) {
        struct.takeNumber = iprot.readI32();
        struct.setTakeNumberIsSet(true);
      }
      if (incoming.get(24)) {
        struct.takeTime = iprot.readI64();
        struct.setTakeTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.refundApplyTime = iprot.readI64();
        struct.setRefundApplyTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.refundSuccessTime = iprot.readI64();
        struct.setRefundSuccessTimeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.refundingNumber = iprot.readI32();
        struct.setRefundingNumberIsSet(true);
      }
      if (incoming.get(29)) {
        struct.vipQuantity = iprot.readI32();
        struct.setVipQuantityIsSet(true);
      }
      if (incoming.get(30)) {
        struct.vipMoney = iprot.readDouble();
        struct.setVipMoneyIsSet(true);
      }
    }
  }

}

