/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 客户端支付渠道Vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ClientPaymentChannelVo implements org.apache.thrift.TBase<ClientPaymentChannelVo, ClientPaymentChannelVo._Fields>, java.io.Serializable, Cloneable, Comparable<ClientPaymentChannelVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientPaymentChannelVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentChannelId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ICO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("icoUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentOrgNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_FROAD_CHECK_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isFroadCheckToken", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientPaymentChannelVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientPaymentChannelVoTupleSchemeFactory());
  }

  /**
   * 主键id
   */
  public long id; // optional
  /**
   * 客户端id
   */
  public String clientId; // optional
  /**
   * 支付渠道id
   */
  public String paymentChannelId; // optional
  /**
   * 资金机构名称
   */
  public String name; // optional
  /**
   * 资金机构全名
   */
  public String fullName; // optional
  /**
   * 渠道类型
   */
  public String type; // optional
  /**
   * 支付方式图标
   */
  public String icoUrl; // optional
  /**
   * 资金机构代号（支付系统）
   */
  public String paymentOrgNo; // optional
  /**
   * 是否方付通验码
   */
  public boolean isFroadCheckToken; // optional
  /**
   * 积分兑换比例(实时获取)
   */
  public String pointRate; // optional
  /**
   * 是否删除
   */
  public boolean isDelete; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键id
     */
    ID((short)1, "id"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 支付渠道id
     */
    PAYMENT_CHANNEL_ID((short)3, "paymentChannelId"),
    /**
     * 资金机构名称
     */
    NAME((short)4, "name"),
    /**
     * 资金机构全名
     */
    FULL_NAME((short)5, "fullName"),
    /**
     * 渠道类型
     */
    TYPE((short)6, "type"),
    /**
     * 支付方式图标
     */
    ICO_URL((short)7, "icoUrl"),
    /**
     * 资金机构代号（支付系统）
     */
    PAYMENT_ORG_NO((short)8, "paymentOrgNo"),
    /**
     * 是否方付通验码
     */
    IS_FROAD_CHECK_TOKEN((short)9, "isFroadCheckToken"),
    /**
     * 积分兑换比例(实时获取)
     */
    POINT_RATE((short)10, "pointRate"),
    /**
     * 是否删除
     */
    IS_DELETE((short)11, "isDelete");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // PAYMENT_CHANNEL_ID
          return PAYMENT_CHANNEL_ID;
        case 4: // NAME
          return NAME;
        case 5: // FULL_NAME
          return FULL_NAME;
        case 6: // TYPE
          return TYPE;
        case 7: // ICO_URL
          return ICO_URL;
        case 8: // PAYMENT_ORG_NO
          return PAYMENT_ORG_NO;
        case 9: // IS_FROAD_CHECK_TOKEN
          return IS_FROAD_CHECK_TOKEN;
        case 10: // POINT_RATE
          return POINT_RATE;
        case 11: // IS_DELETE
          return IS_DELETE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISFROADCHECKTOKEN_ISSET_ID = 1;
  private static final int __ISDELETE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.PAYMENT_CHANNEL_ID,_Fields.NAME,_Fields.FULL_NAME,_Fields.TYPE,_Fields.ICO_URL,_Fields.PAYMENT_ORG_NO,_Fields.IS_FROAD_CHECK_TOKEN,_Fields.POINT_RATE,_Fields.IS_DELETE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentChannelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICO_URL, new org.apache.thrift.meta_data.FieldMetaData("icoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("paymentOrgNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FROAD_CHECK_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("isFroadCheckToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pointRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientPaymentChannelVo.class, metaDataMap);
  }

  public ClientPaymentChannelVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientPaymentChannelVo(ClientPaymentChannelVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetPaymentChannelId()) {
      this.paymentChannelId = other.paymentChannelId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFullName()) {
      this.fullName = other.fullName;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetIcoUrl()) {
      this.icoUrl = other.icoUrl;
    }
    if (other.isSetPaymentOrgNo()) {
      this.paymentOrgNo = other.paymentOrgNo;
    }
    this.isFroadCheckToken = other.isFroadCheckToken;
    if (other.isSetPointRate()) {
      this.pointRate = other.pointRate;
    }
    this.isDelete = other.isDelete;
  }

  public ClientPaymentChannelVo deepCopy() {
    return new ClientPaymentChannelVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.paymentChannelId = null;
    this.name = null;
    this.fullName = null;
    this.type = null;
    this.icoUrl = null;
    this.paymentOrgNo = null;
    setIsFroadCheckTokenIsSet(false);
    this.isFroadCheckToken = false;
    this.pointRate = null;
    setIsDeleteIsSet(false);
    this.isDelete = false;
  }

  /**
   * 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键id
   */
  public ClientPaymentChannelVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public ClientPaymentChannelVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 支付渠道id
   */
  public String getPaymentChannelId() {
    return this.paymentChannelId;
  }

  /**
   * 支付渠道id
   */
  public ClientPaymentChannelVo setPaymentChannelId(String paymentChannelId) {
    this.paymentChannelId = paymentChannelId;
    return this;
  }

  public void unsetPaymentChannelId() {
    this.paymentChannelId = null;
  }

  /** Returns true if field paymentChannelId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentChannelId() {
    return this.paymentChannelId != null;
  }

  public void setPaymentChannelIdIsSet(boolean value) {
    if (!value) {
      this.paymentChannelId = null;
    }
  }

  /**
   * 资金机构名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 资金机构名称
   */
  public ClientPaymentChannelVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 资金机构全名
   */
  public String getFullName() {
    return this.fullName;
  }

  /**
   * 资金机构全名
   */
  public ClientPaymentChannelVo setFullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  public void unsetFullName() {
    this.fullName = null;
  }

  /** Returns true if field fullName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullName() {
    return this.fullName != null;
  }

  public void setFullNameIsSet(boolean value) {
    if (!value) {
      this.fullName = null;
    }
  }

  /**
   * 渠道类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 渠道类型
   */
  public ClientPaymentChannelVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 支付方式图标
   */
  public String getIcoUrl() {
    return this.icoUrl;
  }

  /**
   * 支付方式图标
   */
  public ClientPaymentChannelVo setIcoUrl(String icoUrl) {
    this.icoUrl = icoUrl;
    return this;
  }

  public void unsetIcoUrl() {
    this.icoUrl = null;
  }

  /** Returns true if field icoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIcoUrl() {
    return this.icoUrl != null;
  }

  public void setIcoUrlIsSet(boolean value) {
    if (!value) {
      this.icoUrl = null;
    }
  }

  /**
   * 资金机构代号（支付系统）
   */
  public String getPaymentOrgNo() {
    return this.paymentOrgNo;
  }

  /**
   * 资金机构代号（支付系统）
   */
  public ClientPaymentChannelVo setPaymentOrgNo(String paymentOrgNo) {
    this.paymentOrgNo = paymentOrgNo;
    return this;
  }

  public void unsetPaymentOrgNo() {
    this.paymentOrgNo = null;
  }

  /** Returns true if field paymentOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentOrgNo() {
    return this.paymentOrgNo != null;
  }

  public void setPaymentOrgNoIsSet(boolean value) {
    if (!value) {
      this.paymentOrgNo = null;
    }
  }

  /**
   * 是否方付通验码
   */
  public boolean isIsFroadCheckToken() {
    return this.isFroadCheckToken;
  }

  /**
   * 是否方付通验码
   */
  public ClientPaymentChannelVo setIsFroadCheckToken(boolean isFroadCheckToken) {
    this.isFroadCheckToken = isFroadCheckToken;
    setIsFroadCheckTokenIsSet(true);
    return this;
  }

  public void unsetIsFroadCheckToken() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFROADCHECKTOKEN_ISSET_ID);
  }

  /** Returns true if field isFroadCheckToken is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFroadCheckToken() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFROADCHECKTOKEN_ISSET_ID);
  }

  public void setIsFroadCheckTokenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFROADCHECKTOKEN_ISSET_ID, value);
  }

  /**
   * 积分兑换比例(实时获取)
   */
  public String getPointRate() {
    return this.pointRate;
  }

  /**
   * 积分兑换比例(实时获取)
   */
  public ClientPaymentChannelVo setPointRate(String pointRate) {
    this.pointRate = pointRate;
    return this;
  }

  public void unsetPointRate() {
    this.pointRate = null;
  }

  /** Returns true if field pointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRate() {
    return this.pointRate != null;
  }

  public void setPointRateIsSet(boolean value) {
    if (!value) {
      this.pointRate = null;
    }
  }

  /**
   * 是否删除
   */
  public boolean isIsDelete() {
    return this.isDelete;
  }

  /**
   * 是否删除
   */
  public ClientPaymentChannelVo setIsDelete(boolean isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PAYMENT_CHANNEL_ID:
      if (value == null) {
        unsetPaymentChannelId();
      } else {
        setPaymentChannelId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FULL_NAME:
      if (value == null) {
        unsetFullName();
      } else {
        setFullName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ICO_URL:
      if (value == null) {
        unsetIcoUrl();
      } else {
        setIcoUrl((String)value);
      }
      break;

    case PAYMENT_ORG_NO:
      if (value == null) {
        unsetPaymentOrgNo();
      } else {
        setPaymentOrgNo((String)value);
      }
      break;

    case IS_FROAD_CHECK_TOKEN:
      if (value == null) {
        unsetIsFroadCheckToken();
      } else {
        setIsFroadCheckToken((Boolean)value);
      }
      break;

    case POINT_RATE:
      if (value == null) {
        unsetPointRate();
      } else {
        setPointRate((String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case PAYMENT_CHANNEL_ID:
      return getPaymentChannelId();

    case NAME:
      return getName();

    case FULL_NAME:
      return getFullName();

    case TYPE:
      return getType();

    case ICO_URL:
      return getIcoUrl();

    case PAYMENT_ORG_NO:
      return getPaymentOrgNo();

    case IS_FROAD_CHECK_TOKEN:
      return Boolean.valueOf(isIsFroadCheckToken());

    case POINT_RATE:
      return getPointRate();

    case IS_DELETE:
      return Boolean.valueOf(isIsDelete());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case PAYMENT_CHANNEL_ID:
      return isSetPaymentChannelId();
    case NAME:
      return isSetName();
    case FULL_NAME:
      return isSetFullName();
    case TYPE:
      return isSetType();
    case ICO_URL:
      return isSetIcoUrl();
    case PAYMENT_ORG_NO:
      return isSetPaymentOrgNo();
    case IS_FROAD_CHECK_TOKEN:
      return isSetIsFroadCheckToken();
    case POINT_RATE:
      return isSetPointRate();
    case IS_DELETE:
      return isSetIsDelete();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientPaymentChannelVo)
      return this.equals((ClientPaymentChannelVo)that);
    return false;
  }

  public boolean equals(ClientPaymentChannelVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_paymentChannelId = true && this.isSetPaymentChannelId();
    boolean that_present_paymentChannelId = true && that.isSetPaymentChannelId();
    if (this_present_paymentChannelId || that_present_paymentChannelId) {
      if (!(this_present_paymentChannelId && that_present_paymentChannelId))
        return false;
      if (!this.paymentChannelId.equals(that.paymentChannelId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fullName = true && this.isSetFullName();
    boolean that_present_fullName = true && that.isSetFullName();
    if (this_present_fullName || that_present_fullName) {
      if (!(this_present_fullName && that_present_fullName))
        return false;
      if (!this.fullName.equals(that.fullName))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_icoUrl = true && this.isSetIcoUrl();
    boolean that_present_icoUrl = true && that.isSetIcoUrl();
    if (this_present_icoUrl || that_present_icoUrl) {
      if (!(this_present_icoUrl && that_present_icoUrl))
        return false;
      if (!this.icoUrl.equals(that.icoUrl))
        return false;
    }

    boolean this_present_paymentOrgNo = true && this.isSetPaymentOrgNo();
    boolean that_present_paymentOrgNo = true && that.isSetPaymentOrgNo();
    if (this_present_paymentOrgNo || that_present_paymentOrgNo) {
      if (!(this_present_paymentOrgNo && that_present_paymentOrgNo))
        return false;
      if (!this.paymentOrgNo.equals(that.paymentOrgNo))
        return false;
    }

    boolean this_present_isFroadCheckToken = true && this.isSetIsFroadCheckToken();
    boolean that_present_isFroadCheckToken = true && that.isSetIsFroadCheckToken();
    if (this_present_isFroadCheckToken || that_present_isFroadCheckToken) {
      if (!(this_present_isFroadCheckToken && that_present_isFroadCheckToken))
        return false;
      if (this.isFroadCheckToken != that.isFroadCheckToken)
        return false;
    }

    boolean this_present_pointRate = true && this.isSetPointRate();
    boolean that_present_pointRate = true && that.isSetPointRate();
    if (this_present_pointRate || that_present_pointRate) {
      if (!(this_present_pointRate && that_present_pointRate))
        return false;
      if (!this.pointRate.equals(that.pointRate))
        return false;
    }

    boolean this_present_isDelete = true && this.isSetIsDelete();
    boolean that_present_isDelete = true && that.isSetIsDelete();
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_paymentChannelId = true && (isSetPaymentChannelId());
    list.add(present_paymentChannelId);
    if (present_paymentChannelId)
      list.add(paymentChannelId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_fullName = true && (isSetFullName());
    list.add(present_fullName);
    if (present_fullName)
      list.add(fullName);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_icoUrl = true && (isSetIcoUrl());
    list.add(present_icoUrl);
    if (present_icoUrl)
      list.add(icoUrl);

    boolean present_paymentOrgNo = true && (isSetPaymentOrgNo());
    list.add(present_paymentOrgNo);
    if (present_paymentOrgNo)
      list.add(paymentOrgNo);

    boolean present_isFroadCheckToken = true && (isSetIsFroadCheckToken());
    list.add(present_isFroadCheckToken);
    if (present_isFroadCheckToken)
      list.add(isFroadCheckToken);

    boolean present_pointRate = true && (isSetPointRate());
    list.add(present_pointRate);
    if (present_pointRate)
      list.add(pointRate);

    boolean present_isDelete = true && (isSetIsDelete());
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientPaymentChannelVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentChannelId()).compareTo(other.isSetPaymentChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentChannelId, other.paymentChannelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullName()).compareTo(other.isSetFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullName, other.fullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcoUrl()).compareTo(other.isSetIcoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icoUrl, other.icoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentOrgNo()).compareTo(other.isSetPaymentOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentOrgNo, other.paymentOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFroadCheckToken()).compareTo(other.isSetIsFroadCheckToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFroadCheckToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFroadCheckToken, other.isFroadCheckToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRate()).compareTo(other.isSetPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRate, other.pointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientPaymentChannelVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetPaymentChannelId()) {
      if (!first) sb.append(", ");
      sb.append("paymentChannelId:");
      if (this.paymentChannelId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentChannelId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetFullName()) {
      if (!first) sb.append(", ");
      sb.append("fullName:");
      if (this.fullName == null) {
        sb.append("null");
      } else {
        sb.append(this.fullName);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetIcoUrl()) {
      if (!first) sb.append(", ");
      sb.append("icoUrl:");
      if (this.icoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.icoUrl);
      }
      first = false;
    }
    if (isSetPaymentOrgNo()) {
      if (!first) sb.append(", ");
      sb.append("paymentOrgNo:");
      if (this.paymentOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentOrgNo);
      }
      first = false;
    }
    if (isSetIsFroadCheckToken()) {
      if (!first) sb.append(", ");
      sb.append("isFroadCheckToken:");
      sb.append(this.isFroadCheckToken);
      first = false;
    }
    if (isSetPointRate()) {
      if (!first) sb.append(", ");
      sb.append("pointRate:");
      if (this.pointRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pointRate);
      }
      first = false;
    }
    if (isSetIsDelete()) {
      if (!first) sb.append(", ");
      sb.append("isDelete:");
      sb.append(this.isDelete);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientPaymentChannelVoStandardSchemeFactory implements SchemeFactory {
    public ClientPaymentChannelVoStandardScheme getScheme() {
      return new ClientPaymentChannelVoStandardScheme();
    }
  }

  private static class ClientPaymentChannelVoStandardScheme extends StandardScheme<ClientPaymentChannelVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientPaymentChannelVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentChannelId = iprot.readString();
              struct.setPaymentChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullName = iprot.readString();
              struct.setFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ICO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icoUrl = iprot.readString();
              struct.setIcoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentOrgNo = iprot.readString();
              struct.setPaymentOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_FROAD_CHECK_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFroadCheckToken = iprot.readBool();
              struct.setIsFroadCheckTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointRate = iprot.readString();
              struct.setPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDelete = iprot.readBool();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientPaymentChannelVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paymentChannelId != null) {
        if (struct.isSetPaymentChannelId()) {
          oprot.writeFieldBegin(PAYMENT_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.paymentChannelId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fullName != null) {
        if (struct.isSetFullName()) {
          oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
          oprot.writeString(struct.fullName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.icoUrl != null) {
        if (struct.isSetIcoUrl()) {
          oprot.writeFieldBegin(ICO_URL_FIELD_DESC);
          oprot.writeString(struct.icoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paymentOrgNo != null) {
        if (struct.isSetPaymentOrgNo()) {
          oprot.writeFieldBegin(PAYMENT_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.paymentOrgNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsFroadCheckToken()) {
        oprot.writeFieldBegin(IS_FROAD_CHECK_TOKEN_FIELD_DESC);
        oprot.writeBool(struct.isFroadCheckToken);
        oprot.writeFieldEnd();
      }
      if (struct.pointRate != null) {
        if (struct.isSetPointRate()) {
          oprot.writeFieldBegin(POINT_RATE_FIELD_DESC);
          oprot.writeString(struct.pointRate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDelete()) {
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeBool(struct.isDelete);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientPaymentChannelVoTupleSchemeFactory implements SchemeFactory {
    public ClientPaymentChannelVoTupleScheme getScheme() {
      return new ClientPaymentChannelVoTupleScheme();
    }
  }

  private static class ClientPaymentChannelVoTupleScheme extends TupleScheme<ClientPaymentChannelVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientPaymentChannelVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentChannelId()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetFullName()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetIcoUrl()) {
        optionals.set(6);
      }
      if (struct.isSetPaymentOrgNo()) {
        optionals.set(7);
      }
      if (struct.isSetIsFroadCheckToken()) {
        optionals.set(8);
      }
      if (struct.isSetPointRate()) {
        optionals.set(9);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetPaymentChannelId()) {
        oprot.writeString(struct.paymentChannelId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFullName()) {
        oprot.writeString(struct.fullName);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetIcoUrl()) {
        oprot.writeString(struct.icoUrl);
      }
      if (struct.isSetPaymentOrgNo()) {
        oprot.writeString(struct.paymentOrgNo);
      }
      if (struct.isSetIsFroadCheckToken()) {
        oprot.writeBool(struct.isFroadCheckToken);
      }
      if (struct.isSetPointRate()) {
        oprot.writeString(struct.pointRate);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeBool(struct.isDelete);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientPaymentChannelVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentChannelId = iprot.readString();
        struct.setPaymentChannelIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fullName = iprot.readString();
        struct.setFullNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.icoUrl = iprot.readString();
        struct.setIcoUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.paymentOrgNo = iprot.readString();
        struct.setPaymentOrgNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isFroadCheckToken = iprot.readBool();
        struct.setIsFroadCheckTokenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pointRate = iprot.readString();
        struct.setPointRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isDelete = iprot.readBool();
        struct.setIsDeleteIsSet(true);
      }
    }
  }

}

