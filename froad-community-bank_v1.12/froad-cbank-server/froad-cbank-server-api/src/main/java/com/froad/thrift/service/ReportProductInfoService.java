/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportProductInfoService {

  /**
   * 销售信息统计
   */
  public interface Iface {

    /**
     * 销售走势图
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.SaleTrendResVo getSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 业务销售类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getSaleTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 支付方式占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getPayTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 业务销售统计详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.SaleCountDetailResVo getSaleCountDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 业务销售统计详情列表(分页)
     * 
     * @param pageVo
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.SaleCountDetailPageVo getSaleCountDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户业务销售详情
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.MerchantSaleDetailResVo getMerchantSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 业务类型销售统计详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.BusinessSaleDetailResVo getBusinessSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSaleTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPayTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSaleCountDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSaleCountDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.report.SaleTrendResVo getSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getSaleTrend(commonParamVo);
      return recv_getSaleTrend();
    }

    public void send_getSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getSaleTrend_args args = new getSaleTrend_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getSaleTrend", args);
    }

    public com.froad.thrift.vo.report.SaleTrendResVo recv_getSaleTrend() throws org.apache.thrift.TException
    {
      getSaleTrend_result result = new getSaleTrend_result();
      receiveBase(result, "getSaleTrend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSaleTrend failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSaleTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getSaleTypePercent(commonParamVo);
      return recv_getSaleTypePercent();
    }

    public void send_getSaleTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getSaleTypePercent_args args = new getSaleTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getSaleTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getSaleTypePercent() throws org.apache.thrift.TException
    {
      getSaleTypePercent_result result = new getSaleTypePercent_result();
      receiveBase(result, "getSaleTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSaleTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getPayTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getPayTypePercent(commonParamVo);
      return recv_getPayTypePercent();
    }

    public void send_getPayTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getPayTypePercent_args args = new getPayTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getPayTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getPayTypePercent() throws org.apache.thrift.TException
    {
      getPayTypePercent_result result = new getPayTypePercent_result();
      receiveBase(result, "getPayTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPayTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.SaleCountDetailResVo getSaleCountDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getSaleCountDetail(commonParamVo);
      return recv_getSaleCountDetail();
    }

    public void send_getSaleCountDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getSaleCountDetail_args args = new getSaleCountDetail_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getSaleCountDetail", args);
    }

    public com.froad.thrift.vo.report.SaleCountDetailResVo recv_getSaleCountDetail() throws org.apache.thrift.TException
    {
      getSaleCountDetail_result result = new getSaleCountDetail_result();
      receiveBase(result, "getSaleCountDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSaleCountDetail failed: unknown result");
    }

    public com.froad.thrift.vo.report.SaleCountDetailPageVo getSaleCountDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getSaleCountDetailListByPage(pageVo, commonParamVo);
      return recv_getSaleCountDetailListByPage();
    }

    public void send_getSaleCountDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getSaleCountDetailListByPage_args args = new getSaleCountDetailListByPage_args();
      args.setPageVo(pageVo);
      args.setCommonParamVo(commonParamVo);
      sendBase("getSaleCountDetailListByPage", args);
    }

    public com.froad.thrift.vo.report.SaleCountDetailPageVo recv_getSaleCountDetailListByPage() throws org.apache.thrift.TException
    {
      getSaleCountDetailListByPage_result result = new getSaleCountDetailListByPage_result();
      receiveBase(result, "getSaleCountDetailListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSaleCountDetailListByPage failed: unknown result");
    }

    public com.froad.thrift.vo.report.MerchantSaleDetailResVo getMerchantSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getMerchantSaleDetail(commonParamVo);
      return recv_getMerchantSaleDetail();
    }

    public void send_getMerchantSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getMerchantSaleDetail_args args = new getMerchantSaleDetail_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getMerchantSaleDetail", args);
    }

    public com.froad.thrift.vo.report.MerchantSaleDetailResVo recv_getMerchantSaleDetail() throws org.apache.thrift.TException
    {
      getMerchantSaleDetail_result result = new getMerchantSaleDetail_result();
      receiveBase(result, "getMerchantSaleDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantSaleDetail failed: unknown result");
    }

    public com.froad.thrift.vo.report.BusinessSaleDetailResVo getBusinessSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getBusinessSaleDetail(commonParamVo);
      return recv_getBusinessSaleDetail();
    }

    public void send_getBusinessSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getBusinessSaleDetail_args args = new getBusinessSaleDetail_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getBusinessSaleDetail", args);
    }

    public com.froad.thrift.vo.report.BusinessSaleDetailResVo recv_getBusinessSaleDetail() throws org.apache.thrift.TException
    {
      getBusinessSaleDetail_result result = new getBusinessSaleDetail_result();
      receiveBase(result, "getBusinessSaleDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessSaleDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSaleTrend_call method_call = new getSaleTrend_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSaleTrend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getSaleTrend_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSaleTrend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSaleTrend_args args = new getSaleTrend_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.SaleTrendResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSaleTrend();
      }
    }

    public void getSaleTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSaleTypePercent_call method_call = new getSaleTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSaleTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getSaleTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSaleTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSaleTypePercent_args args = new getSaleTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSaleTypePercent();
      }
    }

    public void getPayTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPayTypePercent_call method_call = new getPayTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPayTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getPayTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPayTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPayTypePercent_args args = new getPayTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPayTypePercent();
      }
    }

    public void getSaleCountDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSaleCountDetail_call method_call = new getSaleCountDetail_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSaleCountDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getSaleCountDetail_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSaleCountDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSaleCountDetail_args args = new getSaleCountDetail_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.SaleCountDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSaleCountDetail();
      }
    }

    public void getSaleCountDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSaleCountDetailListByPage_call method_call = new getSaleCountDetailListByPage_call(pageVo, commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSaleCountDetailListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getSaleCountDetailListByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSaleCountDetailListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSaleCountDetailListByPage_args args = new getSaleCountDetailListByPage_args();
        args.setPageVo(pageVo);
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.SaleCountDetailPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSaleCountDetailListByPage();
      }
    }

    public void getMerchantSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantSaleDetail_call method_call = new getMerchantSaleDetail_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantSaleDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getMerchantSaleDetail_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantSaleDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantSaleDetail_args args = new getMerchantSaleDetail_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.MerchantSaleDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantSaleDetail();
      }
    }

    public void getBusinessSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessSaleDetail_call method_call = new getBusinessSaleDetail_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessSaleDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getBusinessSaleDetail_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessSaleDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessSaleDetail_args args = new getBusinessSaleDetail_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.BusinessSaleDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessSaleDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSaleTrend", new getSaleTrend());
      processMap.put("getSaleTypePercent", new getSaleTypePercent());
      processMap.put("getPayTypePercent", new getPayTypePercent());
      processMap.put("getSaleCountDetail", new getSaleCountDetail());
      processMap.put("getSaleCountDetailListByPage", new getSaleCountDetailListByPage());
      processMap.put("getMerchantSaleDetail", new getMerchantSaleDetail());
      processMap.put("getBusinessSaleDetail", new getBusinessSaleDetail());
      return processMap;
    }

    public static class getSaleTrend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSaleTrend_args> {
      public getSaleTrend() {
        super("getSaleTrend");
      }

      public getSaleTrend_args getEmptyArgsInstance() {
        return new getSaleTrend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSaleTrend_result getResult(I iface, getSaleTrend_args args) throws org.apache.thrift.TException {
        getSaleTrend_result result = new getSaleTrend_result();
        result.success = iface.getSaleTrend(args.commonParamVo);
        return result;
      }
    }

    public static class getSaleTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSaleTypePercent_args> {
      public getSaleTypePercent() {
        super("getSaleTypePercent");
      }

      public getSaleTypePercent_args getEmptyArgsInstance() {
        return new getSaleTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSaleTypePercent_result getResult(I iface, getSaleTypePercent_args args) throws org.apache.thrift.TException {
        getSaleTypePercent_result result = new getSaleTypePercent_result();
        result.success = iface.getSaleTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class getPayTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPayTypePercent_args> {
      public getPayTypePercent() {
        super("getPayTypePercent");
      }

      public getPayTypePercent_args getEmptyArgsInstance() {
        return new getPayTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPayTypePercent_result getResult(I iface, getPayTypePercent_args args) throws org.apache.thrift.TException {
        getPayTypePercent_result result = new getPayTypePercent_result();
        result.success = iface.getPayTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class getSaleCountDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSaleCountDetail_args> {
      public getSaleCountDetail() {
        super("getSaleCountDetail");
      }

      public getSaleCountDetail_args getEmptyArgsInstance() {
        return new getSaleCountDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSaleCountDetail_result getResult(I iface, getSaleCountDetail_args args) throws org.apache.thrift.TException {
        getSaleCountDetail_result result = new getSaleCountDetail_result();
        result.success = iface.getSaleCountDetail(args.commonParamVo);
        return result;
      }
    }

    public static class getSaleCountDetailListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSaleCountDetailListByPage_args> {
      public getSaleCountDetailListByPage() {
        super("getSaleCountDetailListByPage");
      }

      public getSaleCountDetailListByPage_args getEmptyArgsInstance() {
        return new getSaleCountDetailListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSaleCountDetailListByPage_result getResult(I iface, getSaleCountDetailListByPage_args args) throws org.apache.thrift.TException {
        getSaleCountDetailListByPage_result result = new getSaleCountDetailListByPage_result();
        result.success = iface.getSaleCountDetailListByPage(args.pageVo, args.commonParamVo);
        return result;
      }
    }

    public static class getMerchantSaleDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantSaleDetail_args> {
      public getMerchantSaleDetail() {
        super("getMerchantSaleDetail");
      }

      public getMerchantSaleDetail_args getEmptyArgsInstance() {
        return new getMerchantSaleDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantSaleDetail_result getResult(I iface, getMerchantSaleDetail_args args) throws org.apache.thrift.TException {
        getMerchantSaleDetail_result result = new getMerchantSaleDetail_result();
        result.success = iface.getMerchantSaleDetail(args.commonParamVo);
        return result;
      }
    }

    public static class getBusinessSaleDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessSaleDetail_args> {
      public getBusinessSaleDetail() {
        super("getBusinessSaleDetail");
      }

      public getBusinessSaleDetail_args getEmptyArgsInstance() {
        return new getBusinessSaleDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessSaleDetail_result getResult(I iface, getBusinessSaleDetail_args args) throws org.apache.thrift.TException {
        getBusinessSaleDetail_result result = new getBusinessSaleDetail_result();
        result.success = iface.getBusinessSaleDetail(args.commonParamVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSaleTrend", new getSaleTrend());
      processMap.put("getSaleTypePercent", new getSaleTypePercent());
      processMap.put("getPayTypePercent", new getPayTypePercent());
      processMap.put("getSaleCountDetail", new getSaleCountDetail());
      processMap.put("getSaleCountDetailListByPage", new getSaleCountDetailListByPage());
      processMap.put("getMerchantSaleDetail", new getMerchantSaleDetail());
      processMap.put("getBusinessSaleDetail", new getBusinessSaleDetail());
      return processMap;
    }

    public static class getSaleTrend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSaleTrend_args, com.froad.thrift.vo.report.SaleTrendResVo> {
      public getSaleTrend() {
        super("getSaleTrend");
      }

      public getSaleTrend_args getEmptyArgsInstance() {
        return new getSaleTrend_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.SaleTrendResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.SaleTrendResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.SaleTrendResVo o) {
            getSaleTrend_result result = new getSaleTrend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSaleTrend_result result = new getSaleTrend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSaleTrend_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.SaleTrendResVo> resultHandler) throws TException {
        iface.getSaleTrend(args.commonParamVo,resultHandler);
      }
    }

    public static class getSaleTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSaleTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getSaleTypePercent() {
        super("getSaleTypePercent");
      }

      public getSaleTypePercent_args getEmptyArgsInstance() {
        return new getSaleTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getSaleTypePercent_result result = new getSaleTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSaleTypePercent_result result = new getSaleTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSaleTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getSaleTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getPayTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPayTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getPayTypePercent() {
        super("getPayTypePercent");
      }

      public getPayTypePercent_args getEmptyArgsInstance() {
        return new getPayTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getPayTypePercent_result result = new getPayTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPayTypePercent_result result = new getPayTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPayTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getPayTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getSaleCountDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSaleCountDetail_args, com.froad.thrift.vo.report.SaleCountDetailResVo> {
      public getSaleCountDetail() {
        super("getSaleCountDetail");
      }

      public getSaleCountDetail_args getEmptyArgsInstance() {
        return new getSaleCountDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.SaleCountDetailResVo o) {
            getSaleCountDetail_result result = new getSaleCountDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSaleCountDetail_result result = new getSaleCountDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSaleCountDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailResVo> resultHandler) throws TException {
        iface.getSaleCountDetail(args.commonParamVo,resultHandler);
      }
    }

    public static class getSaleCountDetailListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSaleCountDetailListByPage_args, com.froad.thrift.vo.report.SaleCountDetailPageVo> {
      public getSaleCountDetailListByPage() {
        super("getSaleCountDetailListByPage");
      }

      public getSaleCountDetailListByPage_args getEmptyArgsInstance() {
        return new getSaleCountDetailListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailPageVo>() { 
          public void onComplete(com.froad.thrift.vo.report.SaleCountDetailPageVo o) {
            getSaleCountDetailListByPage_result result = new getSaleCountDetailListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSaleCountDetailListByPage_result result = new getSaleCountDetailListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSaleCountDetailListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.SaleCountDetailPageVo> resultHandler) throws TException {
        iface.getSaleCountDetailListByPage(args.pageVo, args.commonParamVo,resultHandler);
      }
    }

    public static class getMerchantSaleDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantSaleDetail_args, com.froad.thrift.vo.report.MerchantSaleDetailResVo> {
      public getMerchantSaleDetail() {
        super("getMerchantSaleDetail");
      }

      public getMerchantSaleDetail_args getEmptyArgsInstance() {
        return new getMerchantSaleDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.MerchantSaleDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.MerchantSaleDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.MerchantSaleDetailResVo o) {
            getMerchantSaleDetail_result result = new getMerchantSaleDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantSaleDetail_result result = new getMerchantSaleDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantSaleDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.MerchantSaleDetailResVo> resultHandler) throws TException {
        iface.getMerchantSaleDetail(args.commonParamVo,resultHandler);
      }
    }

    public static class getBusinessSaleDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessSaleDetail_args, com.froad.thrift.vo.report.BusinessSaleDetailResVo> {
      public getBusinessSaleDetail() {
        super("getBusinessSaleDetail");
      }

      public getBusinessSaleDetail_args getEmptyArgsInstance() {
        return new getBusinessSaleDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.BusinessSaleDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.BusinessSaleDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.BusinessSaleDetailResVo o) {
            getBusinessSaleDetail_result result = new getBusinessSaleDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessSaleDetail_result result = new getBusinessSaleDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessSaleDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.BusinessSaleDetailResVo> resultHandler) throws TException {
        iface.getBusinessSaleDetail(args.commonParamVo,resultHandler);
      }
    }

  }

  public static class getSaleTrend_args implements org.apache.thrift.TBase<getSaleTrend_args, getSaleTrend_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleTrend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleTrend_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleTrend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleTrend_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleTrend_args.class, metaDataMap);
    }

    public getSaleTrend_args() {
    }

    public getSaleTrend_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleTrend_args(getSaleTrend_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getSaleTrend_args deepCopy() {
      return new getSaleTrend_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getSaleTrend_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleTrend_args)
        return this.equals((getSaleTrend_args)that);
      return false;
    }

    public boolean equals(getSaleTrend_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleTrend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleTrend_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleTrend_argsStandardSchemeFactory implements SchemeFactory {
      public getSaleTrend_argsStandardScheme getScheme() {
        return new getSaleTrend_argsStandardScheme();
      }
    }

    private static class getSaleTrend_argsStandardScheme extends StandardScheme<getSaleTrend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleTrend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleTrend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleTrend_argsTupleSchemeFactory implements SchemeFactory {
      public getSaleTrend_argsTupleScheme getScheme() {
        return new getSaleTrend_argsTupleScheme();
      }
    }

    private static class getSaleTrend_argsTupleScheme extends TupleScheme<getSaleTrend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getSaleTrend_result implements org.apache.thrift.TBase<getSaleTrend_result, getSaleTrend_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleTrend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleTrend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleTrend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleTrend_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.SaleTrendResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.SaleTrendResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleTrend_result.class, metaDataMap);
    }

    public getSaleTrend_result() {
    }

    public getSaleTrend_result(
      com.froad.thrift.vo.report.SaleTrendResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleTrend_result(getSaleTrend_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.SaleTrendResVo(other.success);
      }
    }

    public getSaleTrend_result deepCopy() {
      return new getSaleTrend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.SaleTrendResVo getSuccess() {
      return this.success;
    }

    public getSaleTrend_result setSuccess(com.froad.thrift.vo.report.SaleTrendResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.SaleTrendResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleTrend_result)
        return this.equals((getSaleTrend_result)that);
      return false;
    }

    public boolean equals(getSaleTrend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleTrend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleTrend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleTrend_resultStandardSchemeFactory implements SchemeFactory {
      public getSaleTrend_resultStandardScheme getScheme() {
        return new getSaleTrend_resultStandardScheme();
      }
    }

    private static class getSaleTrend_resultStandardScheme extends StandardScheme<getSaleTrend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleTrend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.SaleTrendResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleTrend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleTrend_resultTupleSchemeFactory implements SchemeFactory {
      public getSaleTrend_resultTupleScheme getScheme() {
        return new getSaleTrend_resultTupleScheme();
      }
    }

    private static class getSaleTrend_resultTupleScheme extends TupleScheme<getSaleTrend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.SaleTrendResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSaleTypePercent_args implements org.apache.thrift.TBase<getSaleTypePercent_args, getSaleTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleTypePercent_args.class, metaDataMap);
    }

    public getSaleTypePercent_args() {
    }

    public getSaleTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleTypePercent_args(getSaleTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getSaleTypePercent_args deepCopy() {
      return new getSaleTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getSaleTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleTypePercent_args)
        return this.equals((getSaleTypePercent_args)that);
      return false;
    }

    public boolean equals(getSaleTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public getSaleTypePercent_argsStandardScheme getScheme() {
        return new getSaleTypePercent_argsStandardScheme();
      }
    }

    private static class getSaleTypePercent_argsStandardScheme extends StandardScheme<getSaleTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public getSaleTypePercent_argsTupleScheme getScheme() {
        return new getSaleTypePercent_argsTupleScheme();
      }
    }

    private static class getSaleTypePercent_argsTupleScheme extends TupleScheme<getSaleTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getSaleTypePercent_result implements org.apache.thrift.TBase<getSaleTypePercent_result, getSaleTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleTypePercent_result.class, metaDataMap);
    }

    public getSaleTypePercent_result() {
    }

    public getSaleTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleTypePercent_result(getSaleTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getSaleTypePercent_result deepCopy() {
      return new getSaleTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getSaleTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleTypePercent_result)
        return this.equals((getSaleTypePercent_result)that);
      return false;
    }

    public boolean equals(getSaleTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public getSaleTypePercent_resultStandardScheme getScheme() {
        return new getSaleTypePercent_resultStandardScheme();
      }
    }

    private static class getSaleTypePercent_resultStandardScheme extends StandardScheme<getSaleTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public getSaleTypePercent_resultTupleScheme getScheme() {
        return new getSaleTypePercent_resultTupleScheme();
      }
    }

    private static class getSaleTypePercent_resultTupleScheme extends TupleScheme<getSaleTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPayTypePercent_args implements org.apache.thrift.TBase<getPayTypePercent_args, getPayTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPayTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPayTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPayTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPayTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPayTypePercent_args.class, metaDataMap);
    }

    public getPayTypePercent_args() {
    }

    public getPayTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPayTypePercent_args(getPayTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getPayTypePercent_args deepCopy() {
      return new getPayTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getPayTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPayTypePercent_args)
        return this.equals((getPayTypePercent_args)that);
      return false;
    }

    public boolean equals(getPayTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPayTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPayTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPayTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public getPayTypePercent_argsStandardScheme getScheme() {
        return new getPayTypePercent_argsStandardScheme();
      }
    }

    private static class getPayTypePercent_argsStandardScheme extends StandardScheme<getPayTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPayTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPayTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPayTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public getPayTypePercent_argsTupleScheme getScheme() {
        return new getPayTypePercent_argsTupleScheme();
      }
    }

    private static class getPayTypePercent_argsTupleScheme extends TupleScheme<getPayTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPayTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPayTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getPayTypePercent_result implements org.apache.thrift.TBase<getPayTypePercent_result, getPayTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPayTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPayTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPayTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPayTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPayTypePercent_result.class, metaDataMap);
    }

    public getPayTypePercent_result() {
    }

    public getPayTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPayTypePercent_result(getPayTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getPayTypePercent_result deepCopy() {
      return new getPayTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getPayTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPayTypePercent_result)
        return this.equals((getPayTypePercent_result)that);
      return false;
    }

    public boolean equals(getPayTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPayTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPayTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPayTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public getPayTypePercent_resultStandardScheme getScheme() {
        return new getPayTypePercent_resultStandardScheme();
      }
    }

    private static class getPayTypePercent_resultStandardScheme extends StandardScheme<getPayTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPayTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPayTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPayTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public getPayTypePercent_resultTupleScheme getScheme() {
        return new getPayTypePercent_resultTupleScheme();
      }
    }

    private static class getPayTypePercent_resultTupleScheme extends TupleScheme<getPayTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPayTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPayTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSaleCountDetail_args implements org.apache.thrift.TBase<getSaleCountDetail_args, getSaleCountDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleCountDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleCountDetail_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleCountDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleCountDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleCountDetail_args.class, metaDataMap);
    }

    public getSaleCountDetail_args() {
    }

    public getSaleCountDetail_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleCountDetail_args(getSaleCountDetail_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getSaleCountDetail_args deepCopy() {
      return new getSaleCountDetail_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getSaleCountDetail_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleCountDetail_args)
        return this.equals((getSaleCountDetail_args)that);
      return false;
    }

    public boolean equals(getSaleCountDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleCountDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleCountDetail_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleCountDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getSaleCountDetail_argsStandardScheme getScheme() {
        return new getSaleCountDetail_argsStandardScheme();
      }
    }

    private static class getSaleCountDetail_argsStandardScheme extends StandardScheme<getSaleCountDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleCountDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleCountDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleCountDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getSaleCountDetail_argsTupleScheme getScheme() {
        return new getSaleCountDetail_argsTupleScheme();
      }
    }

    private static class getSaleCountDetail_argsTupleScheme extends TupleScheme<getSaleCountDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getSaleCountDetail_result implements org.apache.thrift.TBase<getSaleCountDetail_result, getSaleCountDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleCountDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleCountDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleCountDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleCountDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.SaleCountDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.SaleCountDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleCountDetail_result.class, metaDataMap);
    }

    public getSaleCountDetail_result() {
    }

    public getSaleCountDetail_result(
      com.froad.thrift.vo.report.SaleCountDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleCountDetail_result(getSaleCountDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.SaleCountDetailResVo(other.success);
      }
    }

    public getSaleCountDetail_result deepCopy() {
      return new getSaleCountDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.SaleCountDetailResVo getSuccess() {
      return this.success;
    }

    public getSaleCountDetail_result setSuccess(com.froad.thrift.vo.report.SaleCountDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.SaleCountDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleCountDetail_result)
        return this.equals((getSaleCountDetail_result)that);
      return false;
    }

    public boolean equals(getSaleCountDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleCountDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleCountDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleCountDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getSaleCountDetail_resultStandardScheme getScheme() {
        return new getSaleCountDetail_resultStandardScheme();
      }
    }

    private static class getSaleCountDetail_resultStandardScheme extends StandardScheme<getSaleCountDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleCountDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.SaleCountDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleCountDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleCountDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getSaleCountDetail_resultTupleScheme getScheme() {
        return new getSaleCountDetail_resultTupleScheme();
      }
    }

    private static class getSaleCountDetail_resultTupleScheme extends TupleScheme<getSaleCountDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.SaleCountDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSaleCountDetailListByPage_args implements org.apache.thrift.TBase<getSaleCountDetailListByPage_args, getSaleCountDetailListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleCountDetailListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleCountDetailListByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleCountDetailListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleCountDetailListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      COMMON_PARAM_VO((short)2, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleCountDetailListByPage_args.class, metaDataMap);
    }

    public getSaleCountDetailListByPage_args() {
    }

    public getSaleCountDetailListByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.pageVo = pageVo;
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleCountDetailListByPage_args(getSaleCountDetailListByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getSaleCountDetailListByPage_args deepCopy() {
      return new getSaleCountDetailListByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getSaleCountDetailListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getSaleCountDetailListByPage_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleCountDetailListByPage_args)
        return this.equals((getSaleCountDetailListByPage_args)that);
      return false;
    }

    public boolean equals(getSaleCountDetailListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleCountDetailListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleCountDetailListByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleCountDetailListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getSaleCountDetailListByPage_argsStandardScheme getScheme() {
        return new getSaleCountDetailListByPage_argsStandardScheme();
      }
    }

    private static class getSaleCountDetailListByPage_argsStandardScheme extends StandardScheme<getSaleCountDetailListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleCountDetailListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleCountDetailListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleCountDetailListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getSaleCountDetailListByPage_argsTupleScheme getScheme() {
        return new getSaleCountDetailListByPage_argsTupleScheme();
      }
    }

    private static class getSaleCountDetailListByPage_argsTupleScheme extends TupleScheme<getSaleCountDetailListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetCommonParamVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getSaleCountDetailListByPage_result implements org.apache.thrift.TBase<getSaleCountDetailListByPage_result, getSaleCountDetailListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSaleCountDetailListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSaleCountDetailListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSaleCountDetailListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSaleCountDetailListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.SaleCountDetailPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.SaleCountDetailPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSaleCountDetailListByPage_result.class, metaDataMap);
    }

    public getSaleCountDetailListByPage_result() {
    }

    public getSaleCountDetailListByPage_result(
      com.froad.thrift.vo.report.SaleCountDetailPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSaleCountDetailListByPage_result(getSaleCountDetailListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.SaleCountDetailPageVo(other.success);
      }
    }

    public getSaleCountDetailListByPage_result deepCopy() {
      return new getSaleCountDetailListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.SaleCountDetailPageVo getSuccess() {
      return this.success;
    }

    public getSaleCountDetailListByPage_result setSuccess(com.froad.thrift.vo.report.SaleCountDetailPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.SaleCountDetailPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSaleCountDetailListByPage_result)
        return this.equals((getSaleCountDetailListByPage_result)that);
      return false;
    }

    public boolean equals(getSaleCountDetailListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSaleCountDetailListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSaleCountDetailListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSaleCountDetailListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getSaleCountDetailListByPage_resultStandardScheme getScheme() {
        return new getSaleCountDetailListByPage_resultStandardScheme();
      }
    }

    private static class getSaleCountDetailListByPage_resultStandardScheme extends StandardScheme<getSaleCountDetailListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSaleCountDetailListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.SaleCountDetailPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSaleCountDetailListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSaleCountDetailListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getSaleCountDetailListByPage_resultTupleScheme getScheme() {
        return new getSaleCountDetailListByPage_resultTupleScheme();
      }
    }

    private static class getSaleCountDetailListByPage_resultTupleScheme extends TupleScheme<getSaleCountDetailListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSaleCountDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.SaleCountDetailPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantSaleDetail_args implements org.apache.thrift.TBase<getMerchantSaleDetail_args, getMerchantSaleDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantSaleDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantSaleDetail_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantSaleDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantSaleDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantSaleDetail_args.class, metaDataMap);
    }

    public getMerchantSaleDetail_args() {
    }

    public getMerchantSaleDetail_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantSaleDetail_args(getMerchantSaleDetail_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getMerchantSaleDetail_args deepCopy() {
      return new getMerchantSaleDetail_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getMerchantSaleDetail_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantSaleDetail_args)
        return this.equals((getMerchantSaleDetail_args)that);
      return false;
    }

    public boolean equals(getMerchantSaleDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantSaleDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantSaleDetail_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantSaleDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantSaleDetail_argsStandardScheme getScheme() {
        return new getMerchantSaleDetail_argsStandardScheme();
      }
    }

    private static class getMerchantSaleDetail_argsStandardScheme extends StandardScheme<getMerchantSaleDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantSaleDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantSaleDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantSaleDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantSaleDetail_argsTupleScheme getScheme() {
        return new getMerchantSaleDetail_argsTupleScheme();
      }
    }

    private static class getMerchantSaleDetail_argsTupleScheme extends TupleScheme<getMerchantSaleDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantSaleDetail_result implements org.apache.thrift.TBase<getMerchantSaleDetail_result, getMerchantSaleDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantSaleDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantSaleDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantSaleDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantSaleDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.MerchantSaleDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.MerchantSaleDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantSaleDetail_result.class, metaDataMap);
    }

    public getMerchantSaleDetail_result() {
    }

    public getMerchantSaleDetail_result(
      com.froad.thrift.vo.report.MerchantSaleDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantSaleDetail_result(getMerchantSaleDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.MerchantSaleDetailResVo(other.success);
      }
    }

    public getMerchantSaleDetail_result deepCopy() {
      return new getMerchantSaleDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.MerchantSaleDetailResVo getSuccess() {
      return this.success;
    }

    public getMerchantSaleDetail_result setSuccess(com.froad.thrift.vo.report.MerchantSaleDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.MerchantSaleDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantSaleDetail_result)
        return this.equals((getMerchantSaleDetail_result)that);
      return false;
    }

    public boolean equals(getMerchantSaleDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantSaleDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantSaleDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantSaleDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantSaleDetail_resultStandardScheme getScheme() {
        return new getMerchantSaleDetail_resultStandardScheme();
      }
    }

    private static class getMerchantSaleDetail_resultStandardScheme extends StandardScheme<getMerchantSaleDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantSaleDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.MerchantSaleDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantSaleDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantSaleDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantSaleDetail_resultTupleScheme getScheme() {
        return new getMerchantSaleDetail_resultTupleScheme();
      }
    }

    private static class getMerchantSaleDetail_resultTupleScheme extends TupleScheme<getMerchantSaleDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.MerchantSaleDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBusinessSaleDetail_args implements org.apache.thrift.TBase<getBusinessSaleDetail_args, getBusinessSaleDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessSaleDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessSaleDetail_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessSaleDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessSaleDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessSaleDetail_args.class, metaDataMap);
    }

    public getBusinessSaleDetail_args() {
    }

    public getBusinessSaleDetail_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessSaleDetail_args(getBusinessSaleDetail_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getBusinessSaleDetail_args deepCopy() {
      return new getBusinessSaleDetail_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getBusinessSaleDetail_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessSaleDetail_args)
        return this.equals((getBusinessSaleDetail_args)that);
      return false;
    }

    public boolean equals(getBusinessSaleDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessSaleDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessSaleDetail_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessSaleDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessSaleDetail_argsStandardScheme getScheme() {
        return new getBusinessSaleDetail_argsStandardScheme();
      }
    }

    private static class getBusinessSaleDetail_argsStandardScheme extends StandardScheme<getBusinessSaleDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessSaleDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessSaleDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessSaleDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessSaleDetail_argsTupleScheme getScheme() {
        return new getBusinessSaleDetail_argsTupleScheme();
      }
    }

    private static class getBusinessSaleDetail_argsTupleScheme extends TupleScheme<getBusinessSaleDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getBusinessSaleDetail_result implements org.apache.thrift.TBase<getBusinessSaleDetail_result, getBusinessSaleDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessSaleDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessSaleDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessSaleDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessSaleDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.BusinessSaleDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.BusinessSaleDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessSaleDetail_result.class, metaDataMap);
    }

    public getBusinessSaleDetail_result() {
    }

    public getBusinessSaleDetail_result(
      com.froad.thrift.vo.report.BusinessSaleDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessSaleDetail_result(getBusinessSaleDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.BusinessSaleDetailResVo(other.success);
      }
    }

    public getBusinessSaleDetail_result deepCopy() {
      return new getBusinessSaleDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.BusinessSaleDetailResVo getSuccess() {
      return this.success;
    }

    public getBusinessSaleDetail_result setSuccess(com.froad.thrift.vo.report.BusinessSaleDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.BusinessSaleDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessSaleDetail_result)
        return this.equals((getBusinessSaleDetail_result)that);
      return false;
    }

    public boolean equals(getBusinessSaleDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessSaleDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessSaleDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessSaleDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessSaleDetail_resultStandardScheme getScheme() {
        return new getBusinessSaleDetail_resultStandardScheme();
      }
    }

    private static class getBusinessSaleDetail_resultStandardScheme extends StandardScheme<getBusinessSaleDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessSaleDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.BusinessSaleDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessSaleDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessSaleDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessSaleDetail_resultTupleScheme getScheme() {
        return new getBusinessSaleDetail_resultTupleScheme();
      }
    }

    private static class getBusinessSaleDetail_resultTupleScheme extends TupleScheme<getBusinessSaleDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.BusinessSaleDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
