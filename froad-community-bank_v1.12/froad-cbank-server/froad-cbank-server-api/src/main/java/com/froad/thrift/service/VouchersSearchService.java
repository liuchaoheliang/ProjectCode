/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersSearchService {

  /**
   * 代金券查询服务 *
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 详情页查询红包券码明细列表分页 *
     * 
     * @param page
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO findVouchersDetailInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 新增页查询红包券码明细列表分页（红包临时信息） *
     * 
     * @param page
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO findVouchersDetailTemporaryInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 查询红包活动券码个数  *
     * 
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindVouchersCountVO FindVouchersCountInfo(String clientId, String activeId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findVouchersDetailInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findVouchersDetailTemporaryInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void FindVouchersCountInfo(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO findVouchersDetailInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_findVouchersDetailInfo(page, clientId, activeId);
      return recv_findVouchersDetailInfo();
    }

    public void send_findVouchersDetailInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException
    {
      findVouchersDetailInfo_args args = new findVouchersDetailInfo_args();
      args.setPage(page);
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("findVouchersDetailInfo", args);
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO recv_findVouchersDetailInfo() throws org.apache.thrift.TException
    {
      findVouchersDetailInfo_result result = new findVouchersDetailInfo_result();
      receiveBase(result, "findVouchersDetailInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVouchersDetailInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO findVouchersDetailTemporaryInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_findVouchersDetailTemporaryInfo(page, clientId, activeId);
      return recv_findVouchersDetailTemporaryInfo();
    }

    public void send_findVouchersDetailTemporaryInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId) throws org.apache.thrift.TException
    {
      findVouchersDetailTemporaryInfo_args args = new findVouchersDetailTemporaryInfo_args();
      args.setPage(page);
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("findVouchersDetailTemporaryInfo", args);
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO recv_findVouchersDetailTemporaryInfo() throws org.apache.thrift.TException
    {
      findVouchersDetailTemporaryInfo_result result = new findVouchersDetailTemporaryInfo_result();
      receiveBase(result, "findVouchersDetailTemporaryInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVouchersDetailTemporaryInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindVouchersCountVO FindVouchersCountInfo(String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_FindVouchersCountInfo(clientId, activeId);
      return recv_FindVouchersCountInfo();
    }

    public void send_FindVouchersCountInfo(String clientId, String activeId) throws org.apache.thrift.TException
    {
      FindVouchersCountInfo_args args = new FindVouchersCountInfo_args();
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("FindVouchersCountInfo", args);
    }

    public com.froad.thrift.vo.active.FindVouchersCountVO recv_FindVouchersCountInfo() throws org.apache.thrift.TException
    {
      FindVouchersCountInfo_result result = new FindVouchersCountInfo_result();
      receiveBase(result, "FindVouchersCountInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindVouchersCountInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findVouchersDetailInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVouchersDetailInfo_call method_call = new findVouchersDetailInfo_call(page, clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVouchersDetailInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private String clientId;
      private String activeId;
      public findVouchersDetailInfo_call(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVouchersDetailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVouchersDetailInfo_args args = new findVouchersDetailInfo_args();
        args.setPage(page);
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersDetailInfoVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVouchersDetailInfo();
      }
    }

    public void findVouchersDetailTemporaryInfo(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVouchersDetailTemporaryInfo_call method_call = new findVouchersDetailTemporaryInfo_call(page, clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVouchersDetailTemporaryInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private String clientId;
      private String activeId;
      public findVouchersDetailTemporaryInfo_call(com.froad.thrift.vo.PageVo page, String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVouchersDetailTemporaryInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVouchersDetailTemporaryInfo_args args = new findVouchersDetailTemporaryInfo_args();
        args.setPage(page);
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersDetailInfoVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVouchersDetailTemporaryInfo();
      }
    }

    public void FindVouchersCountInfo(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindVouchersCountInfo_call method_call = new FindVouchersCountInfo_call(clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindVouchersCountInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String activeId;
      public FindVouchersCountInfo_call(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindVouchersCountInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindVouchersCountInfo_args args = new FindVouchersCountInfo_args();
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersCountVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindVouchersCountInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findVouchersDetailInfo", new findVouchersDetailInfo());
      processMap.put("findVouchersDetailTemporaryInfo", new findVouchersDetailTemporaryInfo());
      processMap.put("FindVouchersCountInfo", new FindVouchersCountInfo());
      return processMap;
    }

    public static class findVouchersDetailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVouchersDetailInfo_args> {
      public findVouchersDetailInfo() {
        super("findVouchersDetailInfo");
      }

      public findVouchersDetailInfo_args getEmptyArgsInstance() {
        return new findVouchersDetailInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVouchersDetailInfo_result getResult(I iface, findVouchersDetailInfo_args args) throws org.apache.thrift.TException {
        findVouchersDetailInfo_result result = new findVouchersDetailInfo_result();
        result.success = iface.findVouchersDetailInfo(args.page, args.clientId, args.activeId);
        return result;
      }
    }

    public static class findVouchersDetailTemporaryInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVouchersDetailTemporaryInfo_args> {
      public findVouchersDetailTemporaryInfo() {
        super("findVouchersDetailTemporaryInfo");
      }

      public findVouchersDetailTemporaryInfo_args getEmptyArgsInstance() {
        return new findVouchersDetailTemporaryInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVouchersDetailTemporaryInfo_result getResult(I iface, findVouchersDetailTemporaryInfo_args args) throws org.apache.thrift.TException {
        findVouchersDetailTemporaryInfo_result result = new findVouchersDetailTemporaryInfo_result();
        result.success = iface.findVouchersDetailTemporaryInfo(args.page, args.clientId, args.activeId);
        return result;
      }
    }

    public static class FindVouchersCountInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindVouchersCountInfo_args> {
      public FindVouchersCountInfo() {
        super("FindVouchersCountInfo");
      }

      public FindVouchersCountInfo_args getEmptyArgsInstance() {
        return new FindVouchersCountInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public FindVouchersCountInfo_result getResult(I iface, FindVouchersCountInfo_args args) throws org.apache.thrift.TException {
        FindVouchersCountInfo_result result = new FindVouchersCountInfo_result();
        result.success = iface.FindVouchersCountInfo(args.clientId, args.activeId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findVouchersDetailInfo", new findVouchersDetailInfo());
      processMap.put("findVouchersDetailTemporaryInfo", new findVouchersDetailTemporaryInfo());
      processMap.put("FindVouchersCountInfo", new FindVouchersCountInfo());
      return processMap;
    }

    public static class findVouchersDetailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findVouchersDetailInfo_args, com.froad.thrift.vo.active.FindVouchersDetailInfoVO> {
      public findVouchersDetailInfo() {
        super("findVouchersDetailInfo");
      }

      public findVouchersDetailInfo_args getEmptyArgsInstance() {
        return new findVouchersDetailInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersDetailInfoVO o) {
            findVouchersDetailInfo_result result = new findVouchersDetailInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findVouchersDetailInfo_result result = new findVouchersDetailInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findVouchersDetailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO> resultHandler) throws TException {
        iface.findVouchersDetailInfo(args.page, args.clientId, args.activeId,resultHandler);
      }
    }

    public static class findVouchersDetailTemporaryInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findVouchersDetailTemporaryInfo_args, com.froad.thrift.vo.active.FindVouchersDetailInfoVO> {
      public findVouchersDetailTemporaryInfo() {
        super("findVouchersDetailTemporaryInfo");
      }

      public findVouchersDetailTemporaryInfo_args getEmptyArgsInstance() {
        return new findVouchersDetailTemporaryInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersDetailInfoVO o) {
            findVouchersDetailTemporaryInfo_result result = new findVouchersDetailTemporaryInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findVouchersDetailTemporaryInfo_result result = new findVouchersDetailTemporaryInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findVouchersDetailTemporaryInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersDetailInfoVO> resultHandler) throws TException {
        iface.findVouchersDetailTemporaryInfo(args.page, args.clientId, args.activeId,resultHandler);
      }
    }

    public static class FindVouchersCountInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindVouchersCountInfo_args, com.froad.thrift.vo.active.FindVouchersCountVO> {
      public FindVouchersCountInfo() {
        super("FindVouchersCountInfo");
      }

      public FindVouchersCountInfo_args getEmptyArgsInstance() {
        return new FindVouchersCountInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersCountVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersCountVO>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersCountVO o) {
            FindVouchersCountInfo_result result = new FindVouchersCountInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            FindVouchersCountInfo_result result = new FindVouchersCountInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindVouchersCountInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersCountVO> resultHandler) throws TException {
        iface.FindVouchersCountInfo(args.clientId, args.activeId,resultHandler);
      }
    }

  }

  public static class findVouchersDetailInfo_args implements org.apache.thrift.TBase<findVouchersDetailInfo_args, findVouchersDetailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersDetailInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersDetailInfo_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersDetailInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersDetailInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CLIENT_ID((short)2, "clientId"),
      ACTIVE_ID((short)3, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersDetailInfo_args.class, metaDataMap);
    }

    public findVouchersDetailInfo_args() {
    }

    public findVouchersDetailInfo_args(
      com.froad.thrift.vo.PageVo page,
      String clientId,
      String activeId)
    {
      this();
      this.page = page;
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersDetailInfo_args(findVouchersDetailInfo_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public findVouchersDetailInfo_args deepCopy() {
      return new findVouchersDetailInfo_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.clientId = null;
      this.activeId = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public findVouchersDetailInfo_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public findVouchersDetailInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public findVouchersDetailInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersDetailInfo_args)
        return this.equals((findVouchersDetailInfo_args)that);
      return false;
    }

    public boolean equals(findVouchersDetailInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersDetailInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersDetailInfo_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersDetailInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findVouchersDetailInfo_argsStandardScheme getScheme() {
        return new findVouchersDetailInfo_argsStandardScheme();
      }
    }

    private static class findVouchersDetailInfo_argsStandardScheme extends StandardScheme<findVouchersDetailInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersDetailInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findVouchersDetailInfo_argsTupleScheme getScheme() {
        return new findVouchersDetailInfo_argsTupleScheme();
      }
    }

    private static class findVouchersDetailInfo_argsTupleScheme extends TupleScheme<findVouchersDetailInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetActiveId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class findVouchersDetailInfo_result implements org.apache.thrift.TBase<findVouchersDetailInfo_result, findVouchersDetailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersDetailInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersDetailInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersDetailInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersDetailInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersDetailInfoVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersDetailInfo_result.class, metaDataMap);
    }

    public findVouchersDetailInfo_result() {
    }

    public findVouchersDetailInfo_result(
      com.froad.thrift.vo.active.FindVouchersDetailInfoVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersDetailInfo_result(findVouchersDetailInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO(other.success);
      }
    }

    public findVouchersDetailInfo_result deepCopy() {
      return new findVouchersDetailInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO getSuccess() {
      return this.success;
    }

    public findVouchersDetailInfo_result setSuccess(com.froad.thrift.vo.active.FindVouchersDetailInfoVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersDetailInfoVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersDetailInfo_result)
        return this.equals((findVouchersDetailInfo_result)that);
      return false;
    }

    public boolean equals(findVouchersDetailInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersDetailInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersDetailInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersDetailInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findVouchersDetailInfo_resultStandardScheme getScheme() {
        return new findVouchersDetailInfo_resultStandardScheme();
      }
    }

    private static class findVouchersDetailInfo_resultStandardScheme extends StandardScheme<findVouchersDetailInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersDetailInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findVouchersDetailInfo_resultTupleScheme getScheme() {
        return new findVouchersDetailInfo_resultTupleScheme();
      }
    }

    private static class findVouchersDetailInfo_resultTupleScheme extends TupleScheme<findVouchersDetailInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findVouchersDetailTemporaryInfo_args implements org.apache.thrift.TBase<findVouchersDetailTemporaryInfo_args, findVouchersDetailTemporaryInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersDetailTemporaryInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersDetailTemporaryInfo_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersDetailTemporaryInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersDetailTemporaryInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CLIENT_ID((short)2, "clientId"),
      ACTIVE_ID((short)3, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersDetailTemporaryInfo_args.class, metaDataMap);
    }

    public findVouchersDetailTemporaryInfo_args() {
    }

    public findVouchersDetailTemporaryInfo_args(
      com.froad.thrift.vo.PageVo page,
      String clientId,
      String activeId)
    {
      this();
      this.page = page;
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersDetailTemporaryInfo_args(findVouchersDetailTemporaryInfo_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public findVouchersDetailTemporaryInfo_args deepCopy() {
      return new findVouchersDetailTemporaryInfo_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.clientId = null;
      this.activeId = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public findVouchersDetailTemporaryInfo_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public findVouchersDetailTemporaryInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public findVouchersDetailTemporaryInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersDetailTemporaryInfo_args)
        return this.equals((findVouchersDetailTemporaryInfo_args)that);
      return false;
    }

    public boolean equals(findVouchersDetailTemporaryInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersDetailTemporaryInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersDetailTemporaryInfo_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersDetailTemporaryInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findVouchersDetailTemporaryInfo_argsStandardScheme getScheme() {
        return new findVouchersDetailTemporaryInfo_argsStandardScheme();
      }
    }

    private static class findVouchersDetailTemporaryInfo_argsStandardScheme extends StandardScheme<findVouchersDetailTemporaryInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersDetailTemporaryInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersDetailTemporaryInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersDetailTemporaryInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findVouchersDetailTemporaryInfo_argsTupleScheme getScheme() {
        return new findVouchersDetailTemporaryInfo_argsTupleScheme();
      }
    }

    private static class findVouchersDetailTemporaryInfo_argsTupleScheme extends TupleScheme<findVouchersDetailTemporaryInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailTemporaryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetActiveId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailTemporaryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class findVouchersDetailTemporaryInfo_result implements org.apache.thrift.TBase<findVouchersDetailTemporaryInfo_result, findVouchersDetailTemporaryInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersDetailTemporaryInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersDetailTemporaryInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersDetailTemporaryInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersDetailTemporaryInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersDetailInfoVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersDetailTemporaryInfo_result.class, metaDataMap);
    }

    public findVouchersDetailTemporaryInfo_result() {
    }

    public findVouchersDetailTemporaryInfo_result(
      com.froad.thrift.vo.active.FindVouchersDetailInfoVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersDetailTemporaryInfo_result(findVouchersDetailTemporaryInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO(other.success);
      }
    }

    public findVouchersDetailTemporaryInfo_result deepCopy() {
      return new findVouchersDetailTemporaryInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersDetailInfoVO getSuccess() {
      return this.success;
    }

    public findVouchersDetailTemporaryInfo_result setSuccess(com.froad.thrift.vo.active.FindVouchersDetailInfoVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersDetailInfoVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersDetailTemporaryInfo_result)
        return this.equals((findVouchersDetailTemporaryInfo_result)that);
      return false;
    }

    public boolean equals(findVouchersDetailTemporaryInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersDetailTemporaryInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersDetailTemporaryInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersDetailTemporaryInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findVouchersDetailTemporaryInfo_resultStandardScheme getScheme() {
        return new findVouchersDetailTemporaryInfo_resultStandardScheme();
      }
    }

    private static class findVouchersDetailTemporaryInfo_resultStandardScheme extends StandardScheme<findVouchersDetailTemporaryInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersDetailTemporaryInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersDetailTemporaryInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersDetailTemporaryInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findVouchersDetailTemporaryInfo_resultTupleScheme getScheme() {
        return new findVouchersDetailTemporaryInfo_resultTupleScheme();
      }
    }

    private static class findVouchersDetailTemporaryInfo_resultTupleScheme extends TupleScheme<findVouchersDetailTemporaryInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailTemporaryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersDetailTemporaryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersDetailInfoVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class FindVouchersCountInfo_args implements org.apache.thrift.TBase<FindVouchersCountInfo_args, FindVouchersCountInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindVouchersCountInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindVouchersCountInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FindVouchersCountInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FindVouchersCountInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACTIVE_ID((short)2, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindVouchersCountInfo_args.class, metaDataMap);
    }

    public FindVouchersCountInfo_args() {
    }

    public FindVouchersCountInfo_args(
      String clientId,
      String activeId)
    {
      this();
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindVouchersCountInfo_args(FindVouchersCountInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public FindVouchersCountInfo_args deepCopy() {
      return new FindVouchersCountInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.activeId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public FindVouchersCountInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public FindVouchersCountInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FindVouchersCountInfo_args)
        return this.equals((FindVouchersCountInfo_args)that);
      return false;
    }

    public boolean equals(FindVouchersCountInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(FindVouchersCountInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FindVouchersCountInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindVouchersCountInfo_argsStandardSchemeFactory implements SchemeFactory {
      public FindVouchersCountInfo_argsStandardScheme getScheme() {
        return new FindVouchersCountInfo_argsStandardScheme();
      }
    }

    private static class FindVouchersCountInfo_argsStandardScheme extends StandardScheme<FindVouchersCountInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindVouchersCountInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindVouchersCountInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindVouchersCountInfo_argsTupleSchemeFactory implements SchemeFactory {
      public FindVouchersCountInfo_argsTupleScheme getScheme() {
        return new FindVouchersCountInfo_argsTupleScheme();
      }
    }

    private static class FindVouchersCountInfo_argsTupleScheme extends TupleScheme<FindVouchersCountInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindVouchersCountInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetActiveId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindVouchersCountInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class FindVouchersCountInfo_result implements org.apache.thrift.TBase<FindVouchersCountInfo_result, FindVouchersCountInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindVouchersCountInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindVouchersCountInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FindVouchersCountInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FindVouchersCountInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersCountVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersCountVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindVouchersCountInfo_result.class, metaDataMap);
    }

    public FindVouchersCountInfo_result() {
    }

    public FindVouchersCountInfo_result(
      com.froad.thrift.vo.active.FindVouchersCountVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindVouchersCountInfo_result(FindVouchersCountInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersCountVO(other.success);
      }
    }

    public FindVouchersCountInfo_result deepCopy() {
      return new FindVouchersCountInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersCountVO getSuccess() {
      return this.success;
    }

    public FindVouchersCountInfo_result setSuccess(com.froad.thrift.vo.active.FindVouchersCountVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersCountVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FindVouchersCountInfo_result)
        return this.equals((FindVouchersCountInfo_result)that);
      return false;
    }

    public boolean equals(FindVouchersCountInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(FindVouchersCountInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FindVouchersCountInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindVouchersCountInfo_resultStandardSchemeFactory implements SchemeFactory {
      public FindVouchersCountInfo_resultStandardScheme getScheme() {
        return new FindVouchersCountInfo_resultStandardScheme();
      }
    }

    private static class FindVouchersCountInfo_resultStandardScheme extends StandardScheme<FindVouchersCountInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindVouchersCountInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersCountVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindVouchersCountInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindVouchersCountInfo_resultTupleSchemeFactory implements SchemeFactory {
      public FindVouchersCountInfo_resultTupleScheme getScheme() {
        return new FindVouchersCountInfo_resultTupleScheme();
      }
    }

    private static class FindVouchersCountInfo_resultTupleScheme extends TupleScheme<FindVouchersCountInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindVouchersCountInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindVouchersCountInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersCountVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
