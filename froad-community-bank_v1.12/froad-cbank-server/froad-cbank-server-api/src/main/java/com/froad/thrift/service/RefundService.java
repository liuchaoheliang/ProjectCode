/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RefundService {

  /**
   * 退款对外接口
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 订单退款接口
     * 
     * @param refundRequestVo
     */
    public com.froad.thrift.vo.refund.RefundResponseVo doOrderRefund(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo) throws org.apache.thrift.TException;

    /**
     * 查找退款详情接口
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.refund.RefundResponseVo getRefundDetail(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 获取退款记录列表
     * 
     * @param refundListRequestVo
     */
    public com.froad.thrift.vo.refund.RefundListResponseVo getRefundList(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo) throws org.apache.thrift.TException;

    /**
     * 更新退款状态
     * 
     * @param refundStateRequestVo
     */
    public com.froad.thrift.vo.refund.RefundStateResponseVo updateRefundState(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo) throws org.apache.thrift.TException;

    /**
     * 券过期自动退款接口
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.refund.RefundTicketsResponseVo refundTickets(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * vip退款
     * option -- 1 校验
     * option -- 2 退款
     * 
     * @param orderId
     * @param clientId
     * @param memberCode
     * @param option
     */
    public com.froad.thrift.vo.refund.RefundResponseVo doOrderRefundOfVIP(String orderId, String clientId, long memberCode, String option) throws org.apache.thrift.TException;

    /**
     * 用于boss管理平台（运维）发起退款
     * 该退款实际只能退款精品商城类型订单，!!!!!!<代替用户发起退款，调用用户退款接口----确认这样实现>!!!!!
     * 
     * @param subOrderId
     * @param refundReason
     * @param productId
     * @param quantity
     * @param clientId
     */
    public com.froad.thrift.vo.refund.RefundResponseVo doRefundOfBoutiqueBoss(String subOrderId, String refundReason, String productId, int quantity, String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void doOrderRefund(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundDetail(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundList(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRefundState(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void refundTickets(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doOrderRefundOfVIP(String orderId, String clientId, long memberCode, String option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doRefundOfBoutiqueBoss(String subOrderId, String refundReason, String productId, int quantity, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.refund.RefundResponseVo doOrderRefund(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo) throws org.apache.thrift.TException
    {
      send_doOrderRefund(refundRequestVo);
      return recv_doOrderRefund();
    }

    public void send_doOrderRefund(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo) throws org.apache.thrift.TException
    {
      doOrderRefund_args args = new doOrderRefund_args();
      args.setRefundRequestVo(refundRequestVo);
      sendBase("doOrderRefund", args);
    }

    public com.froad.thrift.vo.refund.RefundResponseVo recv_doOrderRefund() throws org.apache.thrift.TException
    {
      doOrderRefund_result result = new doOrderRefund_result();
      receiveBase(result, "doOrderRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doOrderRefund failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundResponseVo getRefundDetail(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_getRefundDetail(requestVo);
      return recv_getRefundDetail();
    }

    public void send_getRefundDetail(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      getRefundDetail_args args = new getRefundDetail_args();
      args.setRequestVo(requestVo);
      sendBase("getRefundDetail", args);
    }

    public com.froad.thrift.vo.refund.RefundResponseVo recv_getRefundDetail() throws org.apache.thrift.TException
    {
      getRefundDetail_result result = new getRefundDetail_result();
      receiveBase(result, "getRefundDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundDetail failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundListResponseVo getRefundList(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo) throws org.apache.thrift.TException
    {
      send_getRefundList(refundListRequestVo);
      return recv_getRefundList();
    }

    public void send_getRefundList(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo) throws org.apache.thrift.TException
    {
      getRefundList_args args = new getRefundList_args();
      args.setRefundListRequestVo(refundListRequestVo);
      sendBase("getRefundList", args);
    }

    public com.froad.thrift.vo.refund.RefundListResponseVo recv_getRefundList() throws org.apache.thrift.TException
    {
      getRefundList_result result = new getRefundList_result();
      receiveBase(result, "getRefundList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundList failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundStateResponseVo updateRefundState(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo) throws org.apache.thrift.TException
    {
      send_updateRefundState(refundStateRequestVo);
      return recv_updateRefundState();
    }

    public void send_updateRefundState(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo) throws org.apache.thrift.TException
    {
      updateRefundState_args args = new updateRefundState_args();
      args.setRefundStateRequestVo(refundStateRequestVo);
      sendBase("updateRefundState", args);
    }

    public com.froad.thrift.vo.refund.RefundStateResponseVo recv_updateRefundState() throws org.apache.thrift.TException
    {
      updateRefundState_result result = new updateRefundState_result();
      receiveBase(result, "updateRefundState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRefundState failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundTicketsResponseVo refundTickets(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_refundTickets(requestVo);
      return recv_refundTickets();
    }

    public void send_refundTickets(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo) throws org.apache.thrift.TException
    {
      refundTickets_args args = new refundTickets_args();
      args.setRequestVo(requestVo);
      sendBase("refundTickets", args);
    }

    public com.froad.thrift.vo.refund.RefundTicketsResponseVo recv_refundTickets() throws org.apache.thrift.TException
    {
      refundTickets_result result = new refundTickets_result();
      receiveBase(result, "refundTickets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundTickets failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundResponseVo doOrderRefundOfVIP(String orderId, String clientId, long memberCode, String option) throws org.apache.thrift.TException
    {
      send_doOrderRefundOfVIP(orderId, clientId, memberCode, option);
      return recv_doOrderRefundOfVIP();
    }

    public void send_doOrderRefundOfVIP(String orderId, String clientId, long memberCode, String option) throws org.apache.thrift.TException
    {
      doOrderRefundOfVIP_args args = new doOrderRefundOfVIP_args();
      args.setOrderId(orderId);
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setOption(option);
      sendBase("doOrderRefundOfVIP", args);
    }

    public com.froad.thrift.vo.refund.RefundResponseVo recv_doOrderRefundOfVIP() throws org.apache.thrift.TException
    {
      doOrderRefundOfVIP_result result = new doOrderRefundOfVIP_result();
      receiveBase(result, "doOrderRefundOfVIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doOrderRefundOfVIP failed: unknown result");
    }

    public com.froad.thrift.vo.refund.RefundResponseVo doRefundOfBoutiqueBoss(String subOrderId, String refundReason, String productId, int quantity, String clientId) throws org.apache.thrift.TException
    {
      send_doRefundOfBoutiqueBoss(subOrderId, refundReason, productId, quantity, clientId);
      return recv_doRefundOfBoutiqueBoss();
    }

    public void send_doRefundOfBoutiqueBoss(String subOrderId, String refundReason, String productId, int quantity, String clientId) throws org.apache.thrift.TException
    {
      doRefundOfBoutiqueBoss_args args = new doRefundOfBoutiqueBoss_args();
      args.setSubOrderId(subOrderId);
      args.setRefundReason(refundReason);
      args.setProductId(productId);
      args.setQuantity(quantity);
      args.setClientId(clientId);
      sendBase("doRefundOfBoutiqueBoss", args);
    }

    public com.froad.thrift.vo.refund.RefundResponseVo recv_doRefundOfBoutiqueBoss() throws org.apache.thrift.TException
    {
      doRefundOfBoutiqueBoss_result result = new doRefundOfBoutiqueBoss_result();
      receiveBase(result, "doRefundOfBoutiqueBoss");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doRefundOfBoutiqueBoss failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doOrderRefund(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doOrderRefund_call method_call = new doOrderRefund_call(refundRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doOrderRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo;
      public doOrderRefund_call(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundRequestVo = refundRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doOrderRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doOrderRefund_args args = new doOrderRefund_args();
        args.setRefundRequestVo(refundRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doOrderRefund();
      }
    }

    public void getRefundDetail(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundDetail_call method_call = new getRefundDetail_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo;
      public getRefundDetail_call(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundDetail_args args = new getRefundDetail_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundDetail();
      }
    }

    public void getRefundList(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundList_call method_call = new getRefundList_call(refundListRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo;
      public getRefundList_call(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundListRequestVo = refundListRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundList_args args = new getRefundList_args();
        args.setRefundListRequestVo(refundListRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundListResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundList();
      }
    }

    public void updateRefundState(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRefundState_call method_call = new updateRefundState_call(refundStateRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRefundState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo;
      public updateRefundState_call(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundStateRequestVo = refundStateRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRefundState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRefundState_args args = new updateRefundState_args();
        args.setRefundStateRequestVo(refundStateRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundStateResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRefundState();
      }
    }

    public void refundTickets(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundTickets_call method_call = new refundTickets_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundTickets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo;
      public refundTickets_call(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundTickets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundTickets_args args = new refundTickets_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundTicketsResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundTickets();
      }
    }

    public void doOrderRefundOfVIP(String orderId, String clientId, long memberCode, String option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doOrderRefundOfVIP_call method_call = new doOrderRefundOfVIP_call(orderId, clientId, memberCode, option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doOrderRefundOfVIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String clientId;
      private long memberCode;
      private String option;
      public doOrderRefundOfVIP_call(String orderId, String clientId, long memberCode, String option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doOrderRefundOfVIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doOrderRefundOfVIP_args args = new doOrderRefundOfVIP_args();
        args.setOrderId(orderId);
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doOrderRefundOfVIP();
      }
    }

    public void doRefundOfBoutiqueBoss(String subOrderId, String refundReason, String productId, int quantity, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doRefundOfBoutiqueBoss_call method_call = new doRefundOfBoutiqueBoss_call(subOrderId, refundReason, productId, quantity, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doRefundOfBoutiqueBoss_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String subOrderId;
      private String refundReason;
      private String productId;
      private int quantity;
      private String clientId;
      public doRefundOfBoutiqueBoss_call(String subOrderId, String refundReason, String productId, int quantity, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.subOrderId = subOrderId;
        this.refundReason = refundReason;
        this.productId = productId;
        this.quantity = quantity;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doRefundOfBoutiqueBoss", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doRefundOfBoutiqueBoss_args args = new doRefundOfBoutiqueBoss_args();
        args.setSubOrderId(subOrderId);
        args.setRefundReason(refundReason);
        args.setProductId(productId);
        args.setQuantity(quantity);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.refund.RefundResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doRefundOfBoutiqueBoss();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doOrderRefund", new doOrderRefund());
      processMap.put("getRefundDetail", new getRefundDetail());
      processMap.put("getRefundList", new getRefundList());
      processMap.put("updateRefundState", new updateRefundState());
      processMap.put("refundTickets", new refundTickets());
      processMap.put("doOrderRefundOfVIP", new doOrderRefundOfVIP());
      processMap.put("doRefundOfBoutiqueBoss", new doRefundOfBoutiqueBoss());
      return processMap;
    }

    public static class doOrderRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doOrderRefund_args> {
      public doOrderRefund() {
        super("doOrderRefund");
      }

      public doOrderRefund_args getEmptyArgsInstance() {
        return new doOrderRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doOrderRefund_result getResult(I iface, doOrderRefund_args args) throws org.apache.thrift.TException {
        doOrderRefund_result result = new doOrderRefund_result();
        result.success = iface.doOrderRefund(args.refundRequestVo);
        return result;
      }
    }

    public static class getRefundDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundDetail_args> {
      public getRefundDetail() {
        super("getRefundDetail");
      }

      public getRefundDetail_args getEmptyArgsInstance() {
        return new getRefundDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundDetail_result getResult(I iface, getRefundDetail_args args) throws org.apache.thrift.TException {
        getRefundDetail_result result = new getRefundDetail_result();
        result.success = iface.getRefundDetail(args.requestVo);
        return result;
      }
    }

    public static class getRefundList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundList_args> {
      public getRefundList() {
        super("getRefundList");
      }

      public getRefundList_args getEmptyArgsInstance() {
        return new getRefundList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundList_result getResult(I iface, getRefundList_args args) throws org.apache.thrift.TException {
        getRefundList_result result = new getRefundList_result();
        result.success = iface.getRefundList(args.refundListRequestVo);
        return result;
      }
    }

    public static class updateRefundState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRefundState_args> {
      public updateRefundState() {
        super("updateRefundState");
      }

      public updateRefundState_args getEmptyArgsInstance() {
        return new updateRefundState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRefundState_result getResult(I iface, updateRefundState_args args) throws org.apache.thrift.TException {
        updateRefundState_result result = new updateRefundState_result();
        result.success = iface.updateRefundState(args.refundStateRequestVo);
        return result;
      }
    }

    public static class refundTickets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundTickets_args> {
      public refundTickets() {
        super("refundTickets");
      }

      public refundTickets_args getEmptyArgsInstance() {
        return new refundTickets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundTickets_result getResult(I iface, refundTickets_args args) throws org.apache.thrift.TException {
        refundTickets_result result = new refundTickets_result();
        result.success = iface.refundTickets(args.requestVo);
        return result;
      }
    }

    public static class doOrderRefundOfVIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doOrderRefundOfVIP_args> {
      public doOrderRefundOfVIP() {
        super("doOrderRefundOfVIP");
      }

      public doOrderRefundOfVIP_args getEmptyArgsInstance() {
        return new doOrderRefundOfVIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doOrderRefundOfVIP_result getResult(I iface, doOrderRefundOfVIP_args args) throws org.apache.thrift.TException {
        doOrderRefundOfVIP_result result = new doOrderRefundOfVIP_result();
        result.success = iface.doOrderRefundOfVIP(args.orderId, args.clientId, args.memberCode, args.option);
        return result;
      }
    }

    public static class doRefundOfBoutiqueBoss<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doRefundOfBoutiqueBoss_args> {
      public doRefundOfBoutiqueBoss() {
        super("doRefundOfBoutiqueBoss");
      }

      public doRefundOfBoutiqueBoss_args getEmptyArgsInstance() {
        return new doRefundOfBoutiqueBoss_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doRefundOfBoutiqueBoss_result getResult(I iface, doRefundOfBoutiqueBoss_args args) throws org.apache.thrift.TException {
        doRefundOfBoutiqueBoss_result result = new doRefundOfBoutiqueBoss_result();
        result.success = iface.doRefundOfBoutiqueBoss(args.subOrderId, args.refundReason, args.productId, args.quantity, args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doOrderRefund", new doOrderRefund());
      processMap.put("getRefundDetail", new getRefundDetail());
      processMap.put("getRefundList", new getRefundList());
      processMap.put("updateRefundState", new updateRefundState());
      processMap.put("refundTickets", new refundTickets());
      processMap.put("doOrderRefundOfVIP", new doOrderRefundOfVIP());
      processMap.put("doRefundOfBoutiqueBoss", new doRefundOfBoutiqueBoss());
      return processMap;
    }

    public static class doOrderRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doOrderRefund_args, com.froad.thrift.vo.refund.RefundResponseVo> {
      public doOrderRefund() {
        super("doOrderRefund");
      }

      public doOrderRefund_args getEmptyArgsInstance() {
        return new doOrderRefund_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundResponseVo o) {
            doOrderRefund_result result = new doOrderRefund_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doOrderRefund_result result = new doOrderRefund_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doOrderRefund_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> resultHandler) throws TException {
        iface.doOrderRefund(args.refundRequestVo,resultHandler);
      }
    }

    public static class getRefundDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundDetail_args, com.froad.thrift.vo.refund.RefundResponseVo> {
      public getRefundDetail() {
        super("getRefundDetail");
      }

      public getRefundDetail_args getEmptyArgsInstance() {
        return new getRefundDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundResponseVo o) {
            getRefundDetail_result result = new getRefundDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundDetail_result result = new getRefundDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> resultHandler) throws TException {
        iface.getRefundDetail(args.requestVo,resultHandler);
      }
    }

    public static class getRefundList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundList_args, com.froad.thrift.vo.refund.RefundListResponseVo> {
      public getRefundList() {
        super("getRefundList");
      }

      public getRefundList_args getEmptyArgsInstance() {
        return new getRefundList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundListResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundListResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundListResponseVo o) {
            getRefundList_result result = new getRefundList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundList_result result = new getRefundList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundListResponseVo> resultHandler) throws TException {
        iface.getRefundList(args.refundListRequestVo,resultHandler);
      }
    }

    public static class updateRefundState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRefundState_args, com.froad.thrift.vo.refund.RefundStateResponseVo> {
      public updateRefundState() {
        super("updateRefundState");
      }

      public updateRefundState_args getEmptyArgsInstance() {
        return new updateRefundState_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundStateResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundStateResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundStateResponseVo o) {
            updateRefundState_result result = new updateRefundState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRefundState_result result = new updateRefundState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRefundState_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundStateResponseVo> resultHandler) throws TException {
        iface.updateRefundState(args.refundStateRequestVo,resultHandler);
      }
    }

    public static class refundTickets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refundTickets_args, com.froad.thrift.vo.refund.RefundTicketsResponseVo> {
      public refundTickets() {
        super("refundTickets");
      }

      public refundTickets_args getEmptyArgsInstance() {
        return new refundTickets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundTicketsResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundTicketsResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundTicketsResponseVo o) {
            refundTickets_result result = new refundTickets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            refundTickets_result result = new refundTickets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refundTickets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundTicketsResponseVo> resultHandler) throws TException {
        iface.refundTickets(args.requestVo,resultHandler);
      }
    }

    public static class doOrderRefundOfVIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doOrderRefundOfVIP_args, com.froad.thrift.vo.refund.RefundResponseVo> {
      public doOrderRefundOfVIP() {
        super("doOrderRefundOfVIP");
      }

      public doOrderRefundOfVIP_args getEmptyArgsInstance() {
        return new doOrderRefundOfVIP_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundResponseVo o) {
            doOrderRefundOfVIP_result result = new doOrderRefundOfVIP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doOrderRefundOfVIP_result result = new doOrderRefundOfVIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doOrderRefundOfVIP_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> resultHandler) throws TException {
        iface.doOrderRefundOfVIP(args.orderId, args.clientId, args.memberCode, args.option,resultHandler);
      }
    }

    public static class doRefundOfBoutiqueBoss<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doRefundOfBoutiqueBoss_args, com.froad.thrift.vo.refund.RefundResponseVo> {
      public doRefundOfBoutiqueBoss() {
        super("doRefundOfBoutiqueBoss");
      }

      public doRefundOfBoutiqueBoss_args getEmptyArgsInstance() {
        return new doRefundOfBoutiqueBoss_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.refund.RefundResponseVo o) {
            doRefundOfBoutiqueBoss_result result = new doRefundOfBoutiqueBoss_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doRefundOfBoutiqueBoss_result result = new doRefundOfBoutiqueBoss_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doRefundOfBoutiqueBoss_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.refund.RefundResponseVo> resultHandler) throws TException {
        iface.doRefundOfBoutiqueBoss(args.subOrderId, args.refundReason, args.productId, args.quantity, args.clientId,resultHandler);
      }
    }

  }

  public static class doOrderRefund_args implements org.apache.thrift.TBase<doOrderRefund_args, doOrderRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<doOrderRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doOrderRefund_args");

    private static final org.apache.thrift.protocol.TField REFUND_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doOrderRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doOrderRefund_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_REQUEST_VO((short)1, "refundRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_REQUEST_VO
            return REFUND_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("refundRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doOrderRefund_args.class, metaDataMap);
    }

    public doOrderRefund_args() {
    }

    public doOrderRefund_args(
      com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo)
    {
      this();
      this.refundRequestVo = refundRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doOrderRefund_args(doOrderRefund_args other) {
      if (other.isSetRefundRequestVo()) {
        this.refundRequestVo = new com.froad.thrift.vo.refund.RefundRequestVo(other.refundRequestVo);
      }
    }

    public doOrderRefund_args deepCopy() {
      return new doOrderRefund_args(this);
    }

    @Override
    public void clear() {
      this.refundRequestVo = null;
    }

    public com.froad.thrift.vo.refund.RefundRequestVo getRefundRequestVo() {
      return this.refundRequestVo;
    }

    public doOrderRefund_args setRefundRequestVo(com.froad.thrift.vo.refund.RefundRequestVo refundRequestVo) {
      this.refundRequestVo = refundRequestVo;
      return this;
    }

    public void unsetRefundRequestVo() {
      this.refundRequestVo = null;
    }

    /** Returns true if field refundRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundRequestVo() {
      return this.refundRequestVo != null;
    }

    public void setRefundRequestVoIsSet(boolean value) {
      if (!value) {
        this.refundRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_REQUEST_VO:
        if (value == null) {
          unsetRefundRequestVo();
        } else {
          setRefundRequestVo((com.froad.thrift.vo.refund.RefundRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_REQUEST_VO:
        return getRefundRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_REQUEST_VO:
        return isSetRefundRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doOrderRefund_args)
        return this.equals((doOrderRefund_args)that);
      return false;
    }

    public boolean equals(doOrderRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_refundRequestVo = true && this.isSetRefundRequestVo();
      boolean that_present_refundRequestVo = true && that.isSetRefundRequestVo();
      if (this_present_refundRequestVo || that_present_refundRequestVo) {
        if (!(this_present_refundRequestVo && that_present_refundRequestVo))
          return false;
        if (!this.refundRequestVo.equals(that.refundRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundRequestVo = true && (isSetRefundRequestVo());
      list.add(present_refundRequestVo);
      if (present_refundRequestVo)
        list.add(refundRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(doOrderRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundRequestVo()).compareTo(other.isSetRefundRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundRequestVo, other.refundRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doOrderRefund_args(");
      boolean first = true;

      sb.append("refundRequestVo:");
      if (this.refundRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.refundRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundRequestVo != null) {
        refundRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doOrderRefund_argsStandardSchemeFactory implements SchemeFactory {
      public doOrderRefund_argsStandardScheme getScheme() {
        return new doOrderRefund_argsStandardScheme();
      }
    }

    private static class doOrderRefund_argsStandardScheme extends StandardScheme<doOrderRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doOrderRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundRequestVo = new com.froad.thrift.vo.refund.RefundRequestVo();
                struct.refundRequestVo.read(iprot);
                struct.setRefundRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doOrderRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundRequestVo != null) {
          oprot.writeFieldBegin(REFUND_REQUEST_VO_FIELD_DESC);
          struct.refundRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doOrderRefund_argsTupleSchemeFactory implements SchemeFactory {
      public doOrderRefund_argsTupleScheme getScheme() {
        return new doOrderRefund_argsTupleScheme();
      }
    }

    private static class doOrderRefund_argsTupleScheme extends TupleScheme<doOrderRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doOrderRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundRequestVo()) {
          struct.refundRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doOrderRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundRequestVo = new com.froad.thrift.vo.refund.RefundRequestVo();
          struct.refundRequestVo.read(iprot);
          struct.setRefundRequestVoIsSet(true);
        }
      }
    }

  }

  public static class doOrderRefund_result implements org.apache.thrift.TBase<doOrderRefund_result, doOrderRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<doOrderRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doOrderRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doOrderRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doOrderRefund_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doOrderRefund_result.class, metaDataMap);
    }

    public doOrderRefund_result() {
    }

    public doOrderRefund_result(
      com.froad.thrift.vo.refund.RefundResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doOrderRefund_result(doOrderRefund_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundResponseVo(other.success);
      }
    }

    public doOrderRefund_result deepCopy() {
      return new doOrderRefund_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundResponseVo getSuccess() {
      return this.success;
    }

    public doOrderRefund_result setSuccess(com.froad.thrift.vo.refund.RefundResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doOrderRefund_result)
        return this.equals((doOrderRefund_result)that);
      return false;
    }

    public boolean equals(doOrderRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doOrderRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doOrderRefund_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doOrderRefund_resultStandardSchemeFactory implements SchemeFactory {
      public doOrderRefund_resultStandardScheme getScheme() {
        return new doOrderRefund_resultStandardScheme();
      }
    }

    private static class doOrderRefund_resultStandardScheme extends StandardScheme<doOrderRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doOrderRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doOrderRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doOrderRefund_resultTupleSchemeFactory implements SchemeFactory {
      public doOrderRefund_resultTupleScheme getScheme() {
        return new doOrderRefund_resultTupleScheme();
      }
    }

    private static class doOrderRefund_resultTupleScheme extends TupleScheme<doOrderRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doOrderRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doOrderRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetail_args implements org.apache.thrift.TBase<getRefundDetail_args, getRefundDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetail_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundDetailRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetail_args.class, metaDataMap);
    }

    public getRefundDetail_args() {
    }

    public getRefundDetail_args(
      com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetail_args(getRefundDetail_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.refund.RefundDetailRequestVo(other.requestVo);
      }
    }

    public getRefundDetail_args deepCopy() {
      return new getRefundDetail_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.refund.RefundDetailRequestVo getRequestVo() {
      return this.requestVo;
    }

    public getRefundDetail_args setRequestVo(com.froad.thrift.vo.refund.RefundDetailRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.refund.RefundDetailRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetail_args)
        return this.equals((getRefundDetail_args)that);
      return false;
    }

    public boolean equals(getRefundDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetail_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundDetail_argsStandardScheme getScheme() {
        return new getRefundDetail_argsStandardScheme();
      }
    }

    private static class getRefundDetail_argsStandardScheme extends StandardScheme<getRefundDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.refund.RefundDetailRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundDetail_argsTupleScheme getScheme() {
        return new getRefundDetail_argsTupleScheme();
      }
    }

    private static class getRefundDetail_argsTupleScheme extends TupleScheme<getRefundDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.refund.RefundDetailRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetail_result implements org.apache.thrift.TBase<getRefundDetail_result, getRefundDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetail_result.class, metaDataMap);
    }

    public getRefundDetail_result() {
    }

    public getRefundDetail_result(
      com.froad.thrift.vo.refund.RefundResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetail_result(getRefundDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundResponseVo(other.success);
      }
    }

    public getRefundDetail_result deepCopy() {
      return new getRefundDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundResponseVo getSuccess() {
      return this.success;
    }

    public getRefundDetail_result setSuccess(com.froad.thrift.vo.refund.RefundResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetail_result)
        return this.equals((getRefundDetail_result)that);
      return false;
    }

    public boolean equals(getRefundDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundDetail_resultStandardScheme getScheme() {
        return new getRefundDetail_resultStandardScheme();
      }
    }

    private static class getRefundDetail_resultStandardScheme extends StandardScheme<getRefundDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundDetail_resultTupleScheme getScheme() {
        return new getRefundDetail_resultTupleScheme();
      }
    }

    private static class getRefundDetail_resultTupleScheme extends TupleScheme<getRefundDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundList_args implements org.apache.thrift.TBase<getRefundList_args, getRefundList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundList_args");

    private static final org.apache.thrift.protocol.TField REFUND_LIST_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundListRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_LIST_REQUEST_VO((short)1, "refundListRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_LIST_REQUEST_VO
            return REFUND_LIST_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_LIST_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("refundListRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundListRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundList_args.class, metaDataMap);
    }

    public getRefundList_args() {
    }

    public getRefundList_args(
      com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo)
    {
      this();
      this.refundListRequestVo = refundListRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundList_args(getRefundList_args other) {
      if (other.isSetRefundListRequestVo()) {
        this.refundListRequestVo = new com.froad.thrift.vo.refund.RefundListRequestVo(other.refundListRequestVo);
      }
    }

    public getRefundList_args deepCopy() {
      return new getRefundList_args(this);
    }

    @Override
    public void clear() {
      this.refundListRequestVo = null;
    }

    public com.froad.thrift.vo.refund.RefundListRequestVo getRefundListRequestVo() {
      return this.refundListRequestVo;
    }

    public getRefundList_args setRefundListRequestVo(com.froad.thrift.vo.refund.RefundListRequestVo refundListRequestVo) {
      this.refundListRequestVo = refundListRequestVo;
      return this;
    }

    public void unsetRefundListRequestVo() {
      this.refundListRequestVo = null;
    }

    /** Returns true if field refundListRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundListRequestVo() {
      return this.refundListRequestVo != null;
    }

    public void setRefundListRequestVoIsSet(boolean value) {
      if (!value) {
        this.refundListRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_LIST_REQUEST_VO:
        if (value == null) {
          unsetRefundListRequestVo();
        } else {
          setRefundListRequestVo((com.froad.thrift.vo.refund.RefundListRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_LIST_REQUEST_VO:
        return getRefundListRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_LIST_REQUEST_VO:
        return isSetRefundListRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundList_args)
        return this.equals((getRefundList_args)that);
      return false;
    }

    public boolean equals(getRefundList_args that) {
      if (that == null)
        return false;

      boolean this_present_refundListRequestVo = true && this.isSetRefundListRequestVo();
      boolean that_present_refundListRequestVo = true && that.isSetRefundListRequestVo();
      if (this_present_refundListRequestVo || that_present_refundListRequestVo) {
        if (!(this_present_refundListRequestVo && that_present_refundListRequestVo))
          return false;
        if (!this.refundListRequestVo.equals(that.refundListRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundListRequestVo = true && (isSetRefundListRequestVo());
      list.add(present_refundListRequestVo);
      if (present_refundListRequestVo)
        list.add(refundListRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundListRequestVo()).compareTo(other.isSetRefundListRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundListRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundListRequestVo, other.refundListRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundList_args(");
      boolean first = true;

      sb.append("refundListRequestVo:");
      if (this.refundListRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.refundListRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundListRequestVo != null) {
        refundListRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundList_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundList_argsStandardScheme getScheme() {
        return new getRefundList_argsStandardScheme();
      }
    }

    private static class getRefundList_argsStandardScheme extends StandardScheme<getRefundList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_LIST_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundListRequestVo = new com.froad.thrift.vo.refund.RefundListRequestVo();
                struct.refundListRequestVo.read(iprot);
                struct.setRefundListRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundListRequestVo != null) {
          oprot.writeFieldBegin(REFUND_LIST_REQUEST_VO_FIELD_DESC);
          struct.refundListRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundList_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundList_argsTupleScheme getScheme() {
        return new getRefundList_argsTupleScheme();
      }
    }

    private static class getRefundList_argsTupleScheme extends TupleScheme<getRefundList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundListRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundListRequestVo()) {
          struct.refundListRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundListRequestVo = new com.froad.thrift.vo.refund.RefundListRequestVo();
          struct.refundListRequestVo.read(iprot);
          struct.setRefundListRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getRefundList_result implements org.apache.thrift.TBase<getRefundList_result, getRefundList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundListResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundListResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundList_result.class, metaDataMap);
    }

    public getRefundList_result() {
    }

    public getRefundList_result(
      com.froad.thrift.vo.refund.RefundListResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundList_result(getRefundList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundListResponseVo(other.success);
      }
    }

    public getRefundList_result deepCopy() {
      return new getRefundList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundListResponseVo getSuccess() {
      return this.success;
    }

    public getRefundList_result setSuccess(com.froad.thrift.vo.refund.RefundListResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundListResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundList_result)
        return this.equals((getRefundList_result)that);
      return false;
    }

    public boolean equals(getRefundList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundList_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundList_resultStandardScheme getScheme() {
        return new getRefundList_resultStandardScheme();
      }
    }

    private static class getRefundList_resultStandardScheme extends StandardScheme<getRefundList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundListResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundList_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundList_resultTupleScheme getScheme() {
        return new getRefundList_resultTupleScheme();
      }
    }

    private static class getRefundList_resultTupleScheme extends TupleScheme<getRefundList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundListResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRefundState_args implements org.apache.thrift.TBase<updateRefundState_args, updateRefundState_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundState_args");

    private static final org.apache.thrift.protocol.TField REFUND_STATE_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundStateRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundState_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_STATE_REQUEST_VO((short)1, "refundStateRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_STATE_REQUEST_VO
            return REFUND_STATE_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_STATE_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("refundStateRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundStateRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundState_args.class, metaDataMap);
    }

    public updateRefundState_args() {
    }

    public updateRefundState_args(
      com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo)
    {
      this();
      this.refundStateRequestVo = refundStateRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundState_args(updateRefundState_args other) {
      if (other.isSetRefundStateRequestVo()) {
        this.refundStateRequestVo = new com.froad.thrift.vo.refund.RefundStateRequestVo(other.refundStateRequestVo);
      }
    }

    public updateRefundState_args deepCopy() {
      return new updateRefundState_args(this);
    }

    @Override
    public void clear() {
      this.refundStateRequestVo = null;
    }

    public com.froad.thrift.vo.refund.RefundStateRequestVo getRefundStateRequestVo() {
      return this.refundStateRequestVo;
    }

    public updateRefundState_args setRefundStateRequestVo(com.froad.thrift.vo.refund.RefundStateRequestVo refundStateRequestVo) {
      this.refundStateRequestVo = refundStateRequestVo;
      return this;
    }

    public void unsetRefundStateRequestVo() {
      this.refundStateRequestVo = null;
    }

    /** Returns true if field refundStateRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundStateRequestVo() {
      return this.refundStateRequestVo != null;
    }

    public void setRefundStateRequestVoIsSet(boolean value) {
      if (!value) {
        this.refundStateRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_STATE_REQUEST_VO:
        if (value == null) {
          unsetRefundStateRequestVo();
        } else {
          setRefundStateRequestVo((com.froad.thrift.vo.refund.RefundStateRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_STATE_REQUEST_VO:
        return getRefundStateRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_STATE_REQUEST_VO:
        return isSetRefundStateRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundState_args)
        return this.equals((updateRefundState_args)that);
      return false;
    }

    public boolean equals(updateRefundState_args that) {
      if (that == null)
        return false;

      boolean this_present_refundStateRequestVo = true && this.isSetRefundStateRequestVo();
      boolean that_present_refundStateRequestVo = true && that.isSetRefundStateRequestVo();
      if (this_present_refundStateRequestVo || that_present_refundStateRequestVo) {
        if (!(this_present_refundStateRequestVo && that_present_refundStateRequestVo))
          return false;
        if (!this.refundStateRequestVo.equals(that.refundStateRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundStateRequestVo = true && (isSetRefundStateRequestVo());
      list.add(present_refundStateRequestVo);
      if (present_refundStateRequestVo)
        list.add(refundStateRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundStateRequestVo()).compareTo(other.isSetRefundStateRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundStateRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundStateRequestVo, other.refundStateRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundState_args(");
      boolean first = true;

      sb.append("refundStateRequestVo:");
      if (this.refundStateRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.refundStateRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundStateRequestVo != null) {
        refundStateRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundState_argsStandardSchemeFactory implements SchemeFactory {
      public updateRefundState_argsStandardScheme getScheme() {
        return new updateRefundState_argsStandardScheme();
      }
    }

    private static class updateRefundState_argsStandardScheme extends StandardScheme<updateRefundState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_STATE_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundStateRequestVo = new com.froad.thrift.vo.refund.RefundStateRequestVo();
                struct.refundStateRequestVo.read(iprot);
                struct.setRefundStateRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundStateRequestVo != null) {
          oprot.writeFieldBegin(REFUND_STATE_REQUEST_VO_FIELD_DESC);
          struct.refundStateRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundState_argsTupleSchemeFactory implements SchemeFactory {
      public updateRefundState_argsTupleScheme getScheme() {
        return new updateRefundState_argsTupleScheme();
      }
    }

    private static class updateRefundState_argsTupleScheme extends TupleScheme<updateRefundState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundStateRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundStateRequestVo()) {
          struct.refundStateRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundStateRequestVo = new com.froad.thrift.vo.refund.RefundStateRequestVo();
          struct.refundStateRequestVo.read(iprot);
          struct.setRefundStateRequestVoIsSet(true);
        }
      }
    }

  }

  public static class updateRefundState_result implements org.apache.thrift.TBase<updateRefundState_result, updateRefundState_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundState_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundStateResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundStateResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundState_result.class, metaDataMap);
    }

    public updateRefundState_result() {
    }

    public updateRefundState_result(
      com.froad.thrift.vo.refund.RefundStateResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundState_result(updateRefundState_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundStateResponseVo(other.success);
      }
    }

    public updateRefundState_result deepCopy() {
      return new updateRefundState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundStateResponseVo getSuccess() {
      return this.success;
    }

    public updateRefundState_result setSuccess(com.froad.thrift.vo.refund.RefundStateResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundStateResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundState_result)
        return this.equals((updateRefundState_result)that);
      return false;
    }

    public boolean equals(updateRefundState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundState_resultStandardSchemeFactory implements SchemeFactory {
      public updateRefundState_resultStandardScheme getScheme() {
        return new updateRefundState_resultStandardScheme();
      }
    }

    private static class updateRefundState_resultStandardScheme extends StandardScheme<updateRefundState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundStateResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundState_resultTupleSchemeFactory implements SchemeFactory {
      public updateRefundState_resultTupleScheme getScheme() {
        return new updateRefundState_resultTupleScheme();
      }
    }

    private static class updateRefundState_resultTupleScheme extends TupleScheme<updateRefundState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundStateResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refundTickets_args implements org.apache.thrift.TBase<refundTickets_args, refundTickets_args._Fields>, java.io.Serializable, Cloneable, Comparable<refundTickets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundTickets_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundTickets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundTickets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundTicketsRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundTickets_args.class, metaDataMap);
    }

    public refundTickets_args() {
    }

    public refundTickets_args(
      com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundTickets_args(refundTickets_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.refund.RefundTicketsRequestVo(other.requestVo);
      }
    }

    public refundTickets_args deepCopy() {
      return new refundTickets_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.refund.RefundTicketsRequestVo getRequestVo() {
      return this.requestVo;
    }

    public refundTickets_args setRequestVo(com.froad.thrift.vo.refund.RefundTicketsRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.refund.RefundTicketsRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundTickets_args)
        return this.equals((refundTickets_args)that);
      return false;
    }

    public boolean equals(refundTickets_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundTickets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundTickets_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundTickets_argsStandardSchemeFactory implements SchemeFactory {
      public refundTickets_argsStandardScheme getScheme() {
        return new refundTickets_argsStandardScheme();
      }
    }

    private static class refundTickets_argsStandardScheme extends StandardScheme<refundTickets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundTickets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.refund.RefundTicketsRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundTickets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundTickets_argsTupleSchemeFactory implements SchemeFactory {
      public refundTickets_argsTupleScheme getScheme() {
        return new refundTickets_argsTupleScheme();
      }
    }

    private static class refundTickets_argsTupleScheme extends TupleScheme<refundTickets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.refund.RefundTicketsRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class refundTickets_result implements org.apache.thrift.TBase<refundTickets_result, refundTickets_result._Fields>, java.io.Serializable, Cloneable, Comparable<refundTickets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundTickets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundTickets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundTickets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundTicketsResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundTicketsResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundTickets_result.class, metaDataMap);
    }

    public refundTickets_result() {
    }

    public refundTickets_result(
      com.froad.thrift.vo.refund.RefundTicketsResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundTickets_result(refundTickets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundTicketsResponseVo(other.success);
      }
    }

    public refundTickets_result deepCopy() {
      return new refundTickets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundTicketsResponseVo getSuccess() {
      return this.success;
    }

    public refundTickets_result setSuccess(com.froad.thrift.vo.refund.RefundTicketsResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundTicketsResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundTickets_result)
        return this.equals((refundTickets_result)that);
      return false;
    }

    public boolean equals(refundTickets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundTickets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundTickets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundTickets_resultStandardSchemeFactory implements SchemeFactory {
      public refundTickets_resultStandardScheme getScheme() {
        return new refundTickets_resultStandardScheme();
      }
    }

    private static class refundTickets_resultStandardScheme extends StandardScheme<refundTickets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundTickets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundTicketsResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundTickets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundTickets_resultTupleSchemeFactory implements SchemeFactory {
      public refundTickets_resultTupleScheme getScheme() {
        return new refundTickets_resultTupleScheme();
      }
    }

    private static class refundTickets_resultTupleScheme extends TupleScheme<refundTickets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundTicketsResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class doOrderRefundOfVIP_args implements org.apache.thrift.TBase<doOrderRefundOfVIP_args, doOrderRefundOfVIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<doOrderRefundOfVIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doOrderRefundOfVIP_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doOrderRefundOfVIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doOrderRefundOfVIP_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String clientId; // required
    public long memberCode; // required
    public String option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      CLIENT_ID((short)2, "clientId"),
      MEMBER_CODE((short)3, "memberCode"),
      OPTION((short)4, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // MEMBER_CODE
            return MEMBER_CODE;
          case 4: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doOrderRefundOfVIP_args.class, metaDataMap);
    }

    public doOrderRefundOfVIP_args() {
    }

    public doOrderRefundOfVIP_args(
      String orderId,
      String clientId,
      long memberCode,
      String option)
    {
      this();
      this.orderId = orderId;
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doOrderRefundOfVIP_args(doOrderRefundOfVIP_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetOption()) {
        this.option = other.option;
      }
    }

    public doOrderRefundOfVIP_args deepCopy() {
      return new doOrderRefundOfVIP_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.option = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public doOrderRefundOfVIP_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public doOrderRefundOfVIP_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public doOrderRefundOfVIP_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getOption() {
      return this.option;
    }

    public doOrderRefundOfVIP_args setOption(String option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doOrderRefundOfVIP_args)
        return this.equals((doOrderRefundOfVIP_args)that);
      return false;
    }

    public boolean equals(doOrderRefundOfVIP_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_option = true && (isSetOption());
      list.add(present_option);
      if (present_option)
        list.add(option);

      return list.hashCode();
    }

    @Override
    public int compareTo(doOrderRefundOfVIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doOrderRefundOfVIP_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doOrderRefundOfVIP_argsStandardSchemeFactory implements SchemeFactory {
      public doOrderRefundOfVIP_argsStandardScheme getScheme() {
        return new doOrderRefundOfVIP_argsStandardScheme();
      }
    }

    private static class doOrderRefundOfVIP_argsStandardScheme extends StandardScheme<doOrderRefundOfVIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doOrderRefundOfVIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.option = iprot.readString();
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doOrderRefundOfVIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          oprot.writeString(struct.option);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doOrderRefundOfVIP_argsTupleSchemeFactory implements SchemeFactory {
      public doOrderRefundOfVIP_argsTupleScheme getScheme() {
        return new doOrderRefundOfVIP_argsTupleScheme();
      }
    }

    private static class doOrderRefundOfVIP_argsTupleScheme extends TupleScheme<doOrderRefundOfVIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doOrderRefundOfVIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(2);
        }
        if (struct.isSetOption()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetOption()) {
          oprot.writeString(struct.option);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doOrderRefundOfVIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.option = iprot.readString();
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class doOrderRefundOfVIP_result implements org.apache.thrift.TBase<doOrderRefundOfVIP_result, doOrderRefundOfVIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<doOrderRefundOfVIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doOrderRefundOfVIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doOrderRefundOfVIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doOrderRefundOfVIP_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doOrderRefundOfVIP_result.class, metaDataMap);
    }

    public doOrderRefundOfVIP_result() {
    }

    public doOrderRefundOfVIP_result(
      com.froad.thrift.vo.refund.RefundResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doOrderRefundOfVIP_result(doOrderRefundOfVIP_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundResponseVo(other.success);
      }
    }

    public doOrderRefundOfVIP_result deepCopy() {
      return new doOrderRefundOfVIP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundResponseVo getSuccess() {
      return this.success;
    }

    public doOrderRefundOfVIP_result setSuccess(com.froad.thrift.vo.refund.RefundResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doOrderRefundOfVIP_result)
        return this.equals((doOrderRefundOfVIP_result)that);
      return false;
    }

    public boolean equals(doOrderRefundOfVIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doOrderRefundOfVIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doOrderRefundOfVIP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doOrderRefundOfVIP_resultStandardSchemeFactory implements SchemeFactory {
      public doOrderRefundOfVIP_resultStandardScheme getScheme() {
        return new doOrderRefundOfVIP_resultStandardScheme();
      }
    }

    private static class doOrderRefundOfVIP_resultStandardScheme extends StandardScheme<doOrderRefundOfVIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doOrderRefundOfVIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doOrderRefundOfVIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doOrderRefundOfVIP_resultTupleSchemeFactory implements SchemeFactory {
      public doOrderRefundOfVIP_resultTupleScheme getScheme() {
        return new doOrderRefundOfVIP_resultTupleScheme();
      }
    }

    private static class doOrderRefundOfVIP_resultTupleScheme extends TupleScheme<doOrderRefundOfVIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doOrderRefundOfVIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doOrderRefundOfVIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class doRefundOfBoutiqueBoss_args implements org.apache.thrift.TBase<doRefundOfBoutiqueBoss_args, doRefundOfBoutiqueBoss_args._Fields>, java.io.Serializable, Cloneable, Comparable<doRefundOfBoutiqueBoss_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doRefundOfBoutiqueBoss_args");

    private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REFUND_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("refundReason", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doRefundOfBoutiqueBoss_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doRefundOfBoutiqueBoss_argsTupleSchemeFactory());
    }

    public String subOrderId; // required
    public String refundReason; // required
    public String productId; // required
    public int quantity; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUB_ORDER_ID((short)1, "subOrderId"),
      REFUND_REASON((short)2, "refundReason"),
      PRODUCT_ID((short)3, "productId"),
      QUANTITY((short)4, "quantity"),
      CLIENT_ID((short)5, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUB_ORDER_ID
            return SUB_ORDER_ID;
          case 2: // REFUND_REASON
            return REFUND_REASON;
          case 3: // PRODUCT_ID
            return PRODUCT_ID;
          case 4: // QUANTITY
            return QUANTITY;
          case 5: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUANTITY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFUND_REASON, new org.apache.thrift.meta_data.FieldMetaData("refundReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doRefundOfBoutiqueBoss_args.class, metaDataMap);
    }

    public doRefundOfBoutiqueBoss_args() {
    }

    public doRefundOfBoutiqueBoss_args(
      String subOrderId,
      String refundReason,
      String productId,
      int quantity,
      String clientId)
    {
      this();
      this.subOrderId = subOrderId;
      this.refundReason = refundReason;
      this.productId = productId;
      this.quantity = quantity;
      setQuantityIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doRefundOfBoutiqueBoss_args(doRefundOfBoutiqueBoss_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSubOrderId()) {
        this.subOrderId = other.subOrderId;
      }
      if (other.isSetRefundReason()) {
        this.refundReason = other.refundReason;
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.quantity = other.quantity;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public doRefundOfBoutiqueBoss_args deepCopy() {
      return new doRefundOfBoutiqueBoss_args(this);
    }

    @Override
    public void clear() {
      this.subOrderId = null;
      this.refundReason = null;
      this.productId = null;
      setQuantityIsSet(false);
      this.quantity = 0;
      this.clientId = null;
    }

    public String getSubOrderId() {
      return this.subOrderId;
    }

    public doRefundOfBoutiqueBoss_args setSubOrderId(String subOrderId) {
      this.subOrderId = subOrderId;
      return this;
    }

    public void unsetSubOrderId() {
      this.subOrderId = null;
    }

    /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubOrderId() {
      return this.subOrderId != null;
    }

    public void setSubOrderIdIsSet(boolean value) {
      if (!value) {
        this.subOrderId = null;
      }
    }

    public String getRefundReason() {
      return this.refundReason;
    }

    public doRefundOfBoutiqueBoss_args setRefundReason(String refundReason) {
      this.refundReason = refundReason;
      return this;
    }

    public void unsetRefundReason() {
      this.refundReason = null;
    }

    /** Returns true if field refundReason is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundReason() {
      return this.refundReason != null;
    }

    public void setRefundReasonIsSet(boolean value) {
      if (!value) {
        this.refundReason = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public doRefundOfBoutiqueBoss_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public int getQuantity() {
      return this.quantity;
    }

    public doRefundOfBoutiqueBoss_args setQuantity(int quantity) {
      this.quantity = quantity;
      setQuantityIsSet(true);
      return this;
    }

    public void unsetQuantity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
    }

    /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
    public boolean isSetQuantity() {
      return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
    }

    public void setQuantityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public doRefundOfBoutiqueBoss_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUB_ORDER_ID:
        if (value == null) {
          unsetSubOrderId();
        } else {
          setSubOrderId((String)value);
        }
        break;

      case REFUND_REASON:
        if (value == null) {
          unsetRefundReason();
        } else {
          setRefundReason((String)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case QUANTITY:
        if (value == null) {
          unsetQuantity();
        } else {
          setQuantity((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUB_ORDER_ID:
        return getSubOrderId();

      case REFUND_REASON:
        return getRefundReason();

      case PRODUCT_ID:
        return getProductId();

      case QUANTITY:
        return Integer.valueOf(getQuantity());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUB_ORDER_ID:
        return isSetSubOrderId();
      case REFUND_REASON:
        return isSetRefundReason();
      case PRODUCT_ID:
        return isSetProductId();
      case QUANTITY:
        return isSetQuantity();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doRefundOfBoutiqueBoss_args)
        return this.equals((doRefundOfBoutiqueBoss_args)that);
      return false;
    }

    public boolean equals(doRefundOfBoutiqueBoss_args that) {
      if (that == null)
        return false;

      boolean this_present_subOrderId = true && this.isSetSubOrderId();
      boolean that_present_subOrderId = true && that.isSetSubOrderId();
      if (this_present_subOrderId || that_present_subOrderId) {
        if (!(this_present_subOrderId && that_present_subOrderId))
          return false;
        if (!this.subOrderId.equals(that.subOrderId))
          return false;
      }

      boolean this_present_refundReason = true && this.isSetRefundReason();
      boolean that_present_refundReason = true && that.isSetRefundReason();
      if (this_present_refundReason || that_present_refundReason) {
        if (!(this_present_refundReason && that_present_refundReason))
          return false;
        if (!this.refundReason.equals(that.refundReason))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_quantity = true;
      boolean that_present_quantity = true;
      if (this_present_quantity || that_present_quantity) {
        if (!(this_present_quantity && that_present_quantity))
          return false;
        if (this.quantity != that.quantity)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_subOrderId = true && (isSetSubOrderId());
      list.add(present_subOrderId);
      if (present_subOrderId)
        list.add(subOrderId);

      boolean present_refundReason = true && (isSetRefundReason());
      list.add(present_refundReason);
      if (present_refundReason)
        list.add(refundReason);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_quantity = true;
      list.add(present_quantity);
      if (present_quantity)
        list.add(quantity);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(doRefundOfBoutiqueBoss_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefundReason()).compareTo(other.isSetRefundReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundReason, other.refundReason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuantity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doRefundOfBoutiqueBoss_args(");
      boolean first = true;

      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("refundReason:");
      if (this.refundReason == null) {
        sb.append("null");
      } else {
        sb.append(this.refundReason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doRefundOfBoutiqueBoss_argsStandardSchemeFactory implements SchemeFactory {
      public doRefundOfBoutiqueBoss_argsStandardScheme getScheme() {
        return new doRefundOfBoutiqueBoss_argsStandardScheme();
      }
    }

    private static class doRefundOfBoutiqueBoss_argsStandardScheme extends StandardScheme<doRefundOfBoutiqueBoss_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doRefundOfBoutiqueBoss_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUB_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subOrderId = iprot.readString();
                struct.setSubOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REFUND_REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.refundReason = iprot.readString();
                struct.setRefundReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUANTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.quantity = iprot.readI32();
                struct.setQuantityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doRefundOfBoutiqueBoss_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.subOrderId != null) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
        if (struct.refundReason != null) {
          oprot.writeFieldBegin(REFUND_REASON_FIELD_DESC);
          oprot.writeString(struct.refundReason);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doRefundOfBoutiqueBoss_argsTupleSchemeFactory implements SchemeFactory {
      public doRefundOfBoutiqueBoss_argsTupleScheme getScheme() {
        return new doRefundOfBoutiqueBoss_argsTupleScheme();
      }
    }

    private static class doRefundOfBoutiqueBoss_argsTupleScheme extends TupleScheme<doRefundOfBoutiqueBoss_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doRefundOfBoutiqueBoss_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSubOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetRefundReason()) {
          optionals.set(1);
        }
        if (struct.isSetProductId()) {
          optionals.set(2);
        }
        if (struct.isSetQuantity()) {
          optionals.set(3);
        }
        if (struct.isSetClientId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSubOrderId()) {
          oprot.writeString(struct.subOrderId);
        }
        if (struct.isSetRefundReason()) {
          oprot.writeString(struct.refundReason);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetQuantity()) {
          oprot.writeI32(struct.quantity);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doRefundOfBoutiqueBoss_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.subOrderId = iprot.readString();
          struct.setSubOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.refundReason = iprot.readString();
          struct.setRefundReasonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.quantity = iprot.readI32();
          struct.setQuantityIsSet(true);
        }
        if (incoming.get(4)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class doRefundOfBoutiqueBoss_result implements org.apache.thrift.TBase<doRefundOfBoutiqueBoss_result, doRefundOfBoutiqueBoss_result._Fields>, java.io.Serializable, Cloneable, Comparable<doRefundOfBoutiqueBoss_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doRefundOfBoutiqueBoss_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doRefundOfBoutiqueBoss_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doRefundOfBoutiqueBoss_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.refund.RefundResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.refund.RefundResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doRefundOfBoutiqueBoss_result.class, metaDataMap);
    }

    public doRefundOfBoutiqueBoss_result() {
    }

    public doRefundOfBoutiqueBoss_result(
      com.froad.thrift.vo.refund.RefundResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doRefundOfBoutiqueBoss_result(doRefundOfBoutiqueBoss_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.refund.RefundResponseVo(other.success);
      }
    }

    public doRefundOfBoutiqueBoss_result deepCopy() {
      return new doRefundOfBoutiqueBoss_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.refund.RefundResponseVo getSuccess() {
      return this.success;
    }

    public doRefundOfBoutiqueBoss_result setSuccess(com.froad.thrift.vo.refund.RefundResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.refund.RefundResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doRefundOfBoutiqueBoss_result)
        return this.equals((doRefundOfBoutiqueBoss_result)that);
      return false;
    }

    public boolean equals(doRefundOfBoutiqueBoss_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doRefundOfBoutiqueBoss_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doRefundOfBoutiqueBoss_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doRefundOfBoutiqueBoss_resultStandardSchemeFactory implements SchemeFactory {
      public doRefundOfBoutiqueBoss_resultStandardScheme getScheme() {
        return new doRefundOfBoutiqueBoss_resultStandardScheme();
      }
    }

    private static class doRefundOfBoutiqueBoss_resultStandardScheme extends StandardScheme<doRefundOfBoutiqueBoss_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doRefundOfBoutiqueBoss_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doRefundOfBoutiqueBoss_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doRefundOfBoutiqueBoss_resultTupleSchemeFactory implements SchemeFactory {
      public doRefundOfBoutiqueBoss_resultTupleScheme getScheme() {
        return new doRefundOfBoutiqueBoss_resultTupleScheme();
      }
    }

    private static class doRefundOfBoutiqueBoss_resultTupleScheme extends TupleScheme<doRefundOfBoutiqueBoss_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doRefundOfBoutiqueBoss_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doRefundOfBoutiqueBoss_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.refund.RefundResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
