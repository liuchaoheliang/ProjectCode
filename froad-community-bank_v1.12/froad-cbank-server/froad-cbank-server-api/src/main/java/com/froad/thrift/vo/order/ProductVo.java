/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商品信息-按mongo表类型
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductVo implements org.apache.thrift.TBase<ProductVo, ProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField VIP_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VIP_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipQuantity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField REFUND_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundNumber", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SURPLUS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("surplusNumber", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DELIVERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryState", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CONSUME_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ORG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgNames", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REFUNDING_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundingNumber", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementStatus", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductVoTupleSchemeFactory());
  }

  /**
   * 商品编号
   */
  public String productId; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 商品单价
   */
  public double money; // required
  /**
   * 商品VIP价格
   */
  public double vipMoney; // required
  /**
   * 普通购买数量
   */
  public int quantity; // required
  /**
   * VIP购买数量
   */
  public int vipQuantity; // required
  /**
   * 赠送积分
   */
  public double points; // required
  /**
   * 配送或者自提方式
   */
  public String deliveryOption; // required
  /**
   * 运费
   */
  public double deliveryMoney; // required
  /**
   * 团购预售（券的有效期-开始时间）
   */
  public long startTime; // required
  /**
   * 团购预售（券的有效期-结束时间）
   */
  public long endTime; // required
  /**
   * 小计
   */
  public double subTotalMoney; // required
  /**
   * 退款数量
   */
  public int refundNumber; // required
  /**
   * 剩余数量
   */
  public int surplusNumber; // required
  /**
   * 配送或者自提状态
   */
  public String deliveryState; // required
  /**
   * 预售和团购的消费状态 1：未消费， 2. 已消费， 3. 部分消费
   */
  public int consumeStatus; // required
  /**
   * 预售返回的列表中的商品所属法人行社用到
   */
  public String orgNames; // required
  /**
   * 退款中数量
   */
  public int refundingNumber; // required
  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public String settlementStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品编号
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 商品单价
     */
    MONEY((short)3, "money"),
    /**
     * 商品VIP价格
     */
    VIP_MONEY((short)4, "vipMoney"),
    /**
     * 普通购买数量
     */
    QUANTITY((short)5, "quantity"),
    /**
     * VIP购买数量
     */
    VIP_QUANTITY((short)6, "vipQuantity"),
    /**
     * 赠送积分
     */
    POINTS((short)7, "points"),
    /**
     * 配送或者自提方式
     */
    DELIVERY_OPTION((short)8, "deliveryOption"),
    /**
     * 运费
     */
    DELIVERY_MONEY((short)9, "deliveryMoney"),
    /**
     * 团购预售（券的有效期-开始时间）
     */
    START_TIME((short)10, "startTime"),
    /**
     * 团购预售（券的有效期-结束时间）
     */
    END_TIME((short)11, "endTime"),
    /**
     * 小计
     */
    SUB_TOTAL_MONEY((short)12, "subTotalMoney"),
    /**
     * 退款数量
     */
    REFUND_NUMBER((short)13, "refundNumber"),
    /**
     * 剩余数量
     */
    SURPLUS_NUMBER((short)14, "surplusNumber"),
    /**
     * 配送或者自提状态
     */
    DELIVERY_STATE((short)15, "deliveryState"),
    /**
     * 预售和团购的消费状态 1：未消费， 2. 已消费， 3. 部分消费
     */
    CONSUME_STATUS((short)16, "consumeStatus"),
    /**
     * 预售返回的列表中的商品所属法人行社用到
     */
    ORG_NAMES((short)17, "orgNames"),
    /**
     * 退款中数量
     */
    REFUNDING_NUMBER((short)18, "refundingNumber"),
    /**
     * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
     */
    SETTLEMENT_STATUS((short)19, "settlementStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // MONEY
          return MONEY;
        case 4: // VIP_MONEY
          return VIP_MONEY;
        case 5: // QUANTITY
          return QUANTITY;
        case 6: // VIP_QUANTITY
          return VIP_QUANTITY;
        case 7: // POINTS
          return POINTS;
        case 8: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 9: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 10: // START_TIME
          return START_TIME;
        case 11: // END_TIME
          return END_TIME;
        case 12: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 13: // REFUND_NUMBER
          return REFUND_NUMBER;
        case 14: // SURPLUS_NUMBER
          return SURPLUS_NUMBER;
        case 15: // DELIVERY_STATE
          return DELIVERY_STATE;
        case 16: // CONSUME_STATUS
          return CONSUME_STATUS;
        case 17: // ORG_NAMES
          return ORG_NAMES;
        case 18: // REFUNDING_NUMBER
          return REFUNDING_NUMBER;
        case 19: // SETTLEMENT_STATUS
          return SETTLEMENT_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONEY_ISSET_ID = 0;
  private static final int __VIPMONEY_ISSET_ID = 1;
  private static final int __QUANTITY_ISSET_ID = 2;
  private static final int __VIPQUANTITY_ISSET_ID = 3;
  private static final int __POINTS_ISSET_ID = 4;
  private static final int __DELIVERYMONEY_ISSET_ID = 5;
  private static final int __STARTTIME_ISSET_ID = 6;
  private static final int __ENDTIME_ISSET_ID = 7;
  private static final int __SUBTOTALMONEY_ISSET_ID = 8;
  private static final int __REFUNDNUMBER_ISSET_ID = 9;
  private static final int __SURPLUSNUMBER_ISSET_ID = 10;
  private static final int __CONSUMESTATUS_ISSET_ID = 11;
  private static final int __REFUNDINGNUMBER_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("vipQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("refundNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURPLUS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("surplusNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("deliveryState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSUME_STATUS, new org.apache.thrift.meta_data.FieldMetaData("consumeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("orgNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUNDING_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("refundingNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SETTLEMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settlementStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductVo.class, metaDataMap);
  }

  public ProductVo() {
  }

  public ProductVo(
    String productId,
    String productName,
    double money,
    double vipMoney,
    int quantity,
    int vipQuantity,
    double points,
    String deliveryOption,
    double deliveryMoney,
    long startTime,
    long endTime,
    double subTotalMoney,
    int refundNumber,
    int surplusNumber,
    String deliveryState,
    int consumeStatus,
    String orgNames,
    int refundingNumber,
    String settlementStatus)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.money = money;
    setMoneyIsSet(true);
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    this.points = points;
    setPointsIsSet(true);
    this.deliveryOption = deliveryOption;
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.refundNumber = refundNumber;
    setRefundNumberIsSet(true);
    this.surplusNumber = surplusNumber;
    setSurplusNumberIsSet(true);
    this.deliveryState = deliveryState;
    this.consumeStatus = consumeStatus;
    setConsumeStatusIsSet(true);
    this.orgNames = orgNames;
    this.refundingNumber = refundingNumber;
    setRefundingNumberIsSet(true);
    this.settlementStatus = settlementStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductVo(ProductVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.money = other.money;
    this.vipMoney = other.vipMoney;
    this.quantity = other.quantity;
    this.vipQuantity = other.vipQuantity;
    this.points = other.points;
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    this.deliveryMoney = other.deliveryMoney;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.subTotalMoney = other.subTotalMoney;
    this.refundNumber = other.refundNumber;
    this.surplusNumber = other.surplusNumber;
    if (other.isSetDeliveryState()) {
      this.deliveryState = other.deliveryState;
    }
    this.consumeStatus = other.consumeStatus;
    if (other.isSetOrgNames()) {
      this.orgNames = other.orgNames;
    }
    this.refundingNumber = other.refundingNumber;
    if (other.isSetSettlementStatus()) {
      this.settlementStatus = other.settlementStatus;
    }
  }

  public ProductVo deepCopy() {
    return new ProductVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setMoneyIsSet(false);
    this.money = 0.0;
    setVipMoneyIsSet(false);
    this.vipMoney = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    setVipQuantityIsSet(false);
    this.vipQuantity = 0;
    setPointsIsSet(false);
    this.points = 0.0;
    this.deliveryOption = null;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    setRefundNumberIsSet(false);
    this.refundNumber = 0;
    setSurplusNumberIsSet(false);
    this.surplusNumber = 0;
    this.deliveryState = null;
    setConsumeStatusIsSet(false);
    this.consumeStatus = 0;
    this.orgNames = null;
    setRefundingNumberIsSet(false);
    this.refundingNumber = 0;
    this.settlementStatus = null;
  }

  /**
   * 商品编号
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品编号
   */
  public ProductVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public ProductVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品单价
   */
  public double getMoney() {
    return this.money;
  }

  /**
   * 商品单价
   */
  public ProductVo setMoney(double money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  /**
   * 商品VIP价格
   */
  public double getVipMoney() {
    return this.vipMoney;
  }

  /**
   * 商品VIP价格
   */
  public ProductVo setVipMoney(double vipMoney) {
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    return this;
  }

  public void unsetVipMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  /** Returns true if field vipMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  public void setVipMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPMONEY_ISSET_ID, value);
  }

  /**
   * 普通购买数量
   */
  public int getQuantity() {
    return this.quantity;
  }

  /**
   * 普通购买数量
   */
  public ProductVo setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * VIP购买数量
   */
  public int getVipQuantity() {
    return this.vipQuantity;
  }

  /**
   * VIP购买数量
   */
  public ProductVo setVipQuantity(int vipQuantity) {
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    return this;
  }

  public void unsetVipQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  /** Returns true if field vipQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetVipQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  public void setVipQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID, value);
  }

  /**
   * 赠送积分
   */
  public double getPoints() {
    return this.points;
  }

  /**
   * 赠送积分
   */
  public ProductVo setPoints(double points) {
    this.points = points;
    setPointsIsSet(true);
    return this;
  }

  public void unsetPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  public void setPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
  }

  /**
   * 配送或者自提方式
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 配送或者自提方式
   */
  public ProductVo setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 运费
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费
   */
  public ProductVo setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 团购预售（券的有效期-开始时间）
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 团购预售（券的有效期-开始时间）
   */
  public ProductVo setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 团购预售（券的有效期-结束时间）
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 团购预售（券的有效期-结束时间）
   */
  public ProductVo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 小计
   */
  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  /**
   * 小计
   */
  public ProductVo setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 退款数量
   */
  public int getRefundNumber() {
    return this.refundNumber;
  }

  /**
   * 退款数量
   */
  public ProductVo setRefundNumber(int refundNumber) {
    this.refundNumber = refundNumber;
    setRefundNumberIsSet(true);
    return this;
  }

  public void unsetRefundNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID);
  }

  /** Returns true if field refundNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID);
  }

  public void setRefundNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDNUMBER_ISSET_ID, value);
  }

  /**
   * 剩余数量
   */
  public int getSurplusNumber() {
    return this.surplusNumber;
  }

  /**
   * 剩余数量
   */
  public ProductVo setSurplusNumber(int surplusNumber) {
    this.surplusNumber = surplusNumber;
    setSurplusNumberIsSet(true);
    return this;
  }

  public void unsetSurplusNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID);
  }

  /** Returns true if field surplusNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSurplusNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID);
  }

  public void setSurplusNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURPLUSNUMBER_ISSET_ID, value);
  }

  /**
   * 配送或者自提状态
   */
  public String getDeliveryState() {
    return this.deliveryState;
  }

  /**
   * 配送或者自提状态
   */
  public ProductVo setDeliveryState(String deliveryState) {
    this.deliveryState = deliveryState;
    return this;
  }

  public void unsetDeliveryState() {
    this.deliveryState = null;
  }

  /** Returns true if field deliveryState is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryState() {
    return this.deliveryState != null;
  }

  public void setDeliveryStateIsSet(boolean value) {
    if (!value) {
      this.deliveryState = null;
    }
  }

  /**
   * 预售和团购的消费状态 1：未消费， 2. 已消费， 3. 部分消费
   */
  public int getConsumeStatus() {
    return this.consumeStatus;
  }

  /**
   * 预售和团购的消费状态 1：未消费， 2. 已消费， 3. 部分消费
   */
  public ProductVo setConsumeStatus(int consumeStatus) {
    this.consumeStatus = consumeStatus;
    setConsumeStatusIsSet(true);
    return this;
  }

  public void unsetConsumeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMESTATUS_ISSET_ID);
  }

  /** Returns true if field consumeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMESTATUS_ISSET_ID);
  }

  public void setConsumeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMESTATUS_ISSET_ID, value);
  }

  /**
   * 预售返回的列表中的商品所属法人行社用到
   */
  public String getOrgNames() {
    return this.orgNames;
  }

  /**
   * 预售返回的列表中的商品所属法人行社用到
   */
  public ProductVo setOrgNames(String orgNames) {
    this.orgNames = orgNames;
    return this;
  }

  public void unsetOrgNames() {
    this.orgNames = null;
  }

  /** Returns true if field orgNames is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgNames() {
    return this.orgNames != null;
  }

  public void setOrgNamesIsSet(boolean value) {
    if (!value) {
      this.orgNames = null;
    }
  }

  /**
   * 退款中数量
   */
  public int getRefundingNumber() {
    return this.refundingNumber;
  }

  /**
   * 退款中数量
   */
  public ProductVo setRefundingNumber(int refundingNumber) {
    this.refundingNumber = refundingNumber;
    setRefundingNumberIsSet(true);
    return this;
  }

  public void unsetRefundingNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID);
  }

  /** Returns true if field refundingNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundingNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID);
  }

  public void setRefundingNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDINGNUMBER_ISSET_ID, value);
  }

  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public String getSettlementStatus() {
    return this.settlementStatus;
  }

  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public ProductVo setSettlementStatus(String settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

  public void unsetSettlementStatus() {
    this.settlementStatus = null;
  }

  /** Returns true if field settlementStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementStatus() {
    return this.settlementStatus != null;
  }

  public void setSettlementStatusIsSet(boolean value) {
    if (!value) {
      this.settlementStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Double)value);
      }
      break;

    case VIP_MONEY:
      if (value == null) {
        unsetVipMoney();
      } else {
        setVipMoney((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case VIP_QUANTITY:
      if (value == null) {
        unsetVipQuantity();
      } else {
        setVipQuantity((Integer)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Double)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case REFUND_NUMBER:
      if (value == null) {
        unsetRefundNumber();
      } else {
        setRefundNumber((Integer)value);
      }
      break;

    case SURPLUS_NUMBER:
      if (value == null) {
        unsetSurplusNumber();
      } else {
        setSurplusNumber((Integer)value);
      }
      break;

    case DELIVERY_STATE:
      if (value == null) {
        unsetDeliveryState();
      } else {
        setDeliveryState((String)value);
      }
      break;

    case CONSUME_STATUS:
      if (value == null) {
        unsetConsumeStatus();
      } else {
        setConsumeStatus((Integer)value);
      }
      break;

    case ORG_NAMES:
      if (value == null) {
        unsetOrgNames();
      } else {
        setOrgNames((String)value);
      }
      break;

    case REFUNDING_NUMBER:
      if (value == null) {
        unsetRefundingNumber();
      } else {
        setRefundingNumber((Integer)value);
      }
      break;

    case SETTLEMENT_STATUS:
      if (value == null) {
        unsetSettlementStatus();
      } else {
        setSettlementStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case MONEY:
      return Double.valueOf(getMoney());

    case VIP_MONEY:
      return Double.valueOf(getVipMoney());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case VIP_QUANTITY:
      return Integer.valueOf(getVipQuantity());

    case POINTS:
      return Double.valueOf(getPoints());

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case REFUND_NUMBER:
      return Integer.valueOf(getRefundNumber());

    case SURPLUS_NUMBER:
      return Integer.valueOf(getSurplusNumber());

    case DELIVERY_STATE:
      return getDeliveryState();

    case CONSUME_STATUS:
      return Integer.valueOf(getConsumeStatus());

    case ORG_NAMES:
      return getOrgNames();

    case REFUNDING_NUMBER:
      return Integer.valueOf(getRefundingNumber());

    case SETTLEMENT_STATUS:
      return getSettlementStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case MONEY:
      return isSetMoney();
    case VIP_MONEY:
      return isSetVipMoney();
    case QUANTITY:
      return isSetQuantity();
    case VIP_QUANTITY:
      return isSetVipQuantity();
    case POINTS:
      return isSetPoints();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case REFUND_NUMBER:
      return isSetRefundNumber();
    case SURPLUS_NUMBER:
      return isSetSurplusNumber();
    case DELIVERY_STATE:
      return isSetDeliveryState();
    case CONSUME_STATUS:
      return isSetConsumeStatus();
    case ORG_NAMES:
      return isSetOrgNames();
    case REFUNDING_NUMBER:
      return isSetRefundingNumber();
    case SETTLEMENT_STATUS:
      return isSetSettlementStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductVo)
      return this.equals((ProductVo)that);
    return false;
  }

  public boolean equals(ProductVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_vipMoney = true;
    boolean that_present_vipMoney = true;
    if (this_present_vipMoney || that_present_vipMoney) {
      if (!(this_present_vipMoney && that_present_vipMoney))
        return false;
      if (this.vipMoney != that.vipMoney)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_vipQuantity = true;
    boolean that_present_vipQuantity = true;
    if (this_present_vipQuantity || that_present_vipQuantity) {
      if (!(this_present_vipQuantity && that_present_vipQuantity))
        return false;
      if (this.vipQuantity != that.vipQuantity)
        return false;
    }

    boolean this_present_points = true;
    boolean that_present_points = true;
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (this.points != that.points)
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_refundNumber = true;
    boolean that_present_refundNumber = true;
    if (this_present_refundNumber || that_present_refundNumber) {
      if (!(this_present_refundNumber && that_present_refundNumber))
        return false;
      if (this.refundNumber != that.refundNumber)
        return false;
    }

    boolean this_present_surplusNumber = true;
    boolean that_present_surplusNumber = true;
    if (this_present_surplusNumber || that_present_surplusNumber) {
      if (!(this_present_surplusNumber && that_present_surplusNumber))
        return false;
      if (this.surplusNumber != that.surplusNumber)
        return false;
    }

    boolean this_present_deliveryState = true && this.isSetDeliveryState();
    boolean that_present_deliveryState = true && that.isSetDeliveryState();
    if (this_present_deliveryState || that_present_deliveryState) {
      if (!(this_present_deliveryState && that_present_deliveryState))
        return false;
      if (!this.deliveryState.equals(that.deliveryState))
        return false;
    }

    boolean this_present_consumeStatus = true;
    boolean that_present_consumeStatus = true;
    if (this_present_consumeStatus || that_present_consumeStatus) {
      if (!(this_present_consumeStatus && that_present_consumeStatus))
        return false;
      if (this.consumeStatus != that.consumeStatus)
        return false;
    }

    boolean this_present_orgNames = true && this.isSetOrgNames();
    boolean that_present_orgNames = true && that.isSetOrgNames();
    if (this_present_orgNames || that_present_orgNames) {
      if (!(this_present_orgNames && that_present_orgNames))
        return false;
      if (!this.orgNames.equals(that.orgNames))
        return false;
    }

    boolean this_present_refundingNumber = true;
    boolean that_present_refundingNumber = true;
    if (this_present_refundingNumber || that_present_refundingNumber) {
      if (!(this_present_refundingNumber && that_present_refundingNumber))
        return false;
      if (this.refundingNumber != that.refundingNumber)
        return false;
    }

    boolean this_present_settlementStatus = true && this.isSetSettlementStatus();
    boolean that_present_settlementStatus = true && that.isSetSettlementStatus();
    if (this_present_settlementStatus || that_present_settlementStatus) {
      if (!(this_present_settlementStatus && that_present_settlementStatus))
        return false;
      if (!this.settlementStatus.equals(that.settlementStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_money = true;
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_vipMoney = true;
    list.add(present_vipMoney);
    if (present_vipMoney)
      list.add(vipMoney);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_vipQuantity = true;
    list.add(present_vipQuantity);
    if (present_vipQuantity)
      list.add(vipQuantity);

    boolean present_points = true;
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_refundNumber = true;
    list.add(present_refundNumber);
    if (present_refundNumber)
      list.add(refundNumber);

    boolean present_surplusNumber = true;
    list.add(present_surplusNumber);
    if (present_surplusNumber)
      list.add(surplusNumber);

    boolean present_deliveryState = true && (isSetDeliveryState());
    list.add(present_deliveryState);
    if (present_deliveryState)
      list.add(deliveryState);

    boolean present_consumeStatus = true;
    list.add(present_consumeStatus);
    if (present_consumeStatus)
      list.add(consumeStatus);

    boolean present_orgNames = true && (isSetOrgNames());
    list.add(present_orgNames);
    if (present_orgNames)
      list.add(orgNames);

    boolean present_refundingNumber = true;
    list.add(present_refundingNumber);
    if (present_refundingNumber)
      list.add(refundingNumber);

    boolean present_settlementStatus = true && (isSetSettlementStatus());
    list.add(present_settlementStatus);
    if (present_settlementStatus)
      list.add(settlementStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipMoney()).compareTo(other.isSetVipMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipMoney, other.vipMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipQuantity()).compareTo(other.isSetVipQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipQuantity, other.vipQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundNumber()).compareTo(other.isSetRefundNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundNumber, other.refundNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurplusNumber()).compareTo(other.isSetSurplusNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurplusNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surplusNumber, other.surplusNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryState()).compareTo(other.isSetDeliveryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryState, other.deliveryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeStatus()).compareTo(other.isSetConsumeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeStatus, other.consumeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgNames()).compareTo(other.isSetOrgNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgNames, other.orgNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundingNumber()).compareTo(other.isSetRefundingNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundingNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundingNumber, other.refundingNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementStatus()).compareTo(other.isSetSettlementStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementStatus, other.settlementStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipMoney:");
    sb.append(this.vipMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipQuantity:");
    sb.append(this.vipQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("points:");
    sb.append(this.points);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundNumber:");
    sb.append(this.refundNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surplusNumber:");
    sb.append(this.surplusNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryState:");
    if (this.deliveryState == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeStatus:");
    sb.append(this.consumeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgNames:");
    if (this.orgNames == null) {
      sb.append("null");
    } else {
      sb.append(this.orgNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundingNumber:");
    sb.append(this.refundingNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementStatus:");
    if (this.settlementStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductVoStandardSchemeFactory implements SchemeFactory {
    public ProductVoStandardScheme getScheme() {
      return new ProductVoStandardScheme();
    }
  }

  private static class ProductVoStandardScheme extends StandardScheme<ProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.money = iprot.readDouble();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIP_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipMoney = iprot.readDouble();
              struct.setVipMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIP_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipQuantity = iprot.readI32();
              struct.setVipQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.points = iprot.readDouble();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REFUND_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundNumber = iprot.readI32();
              struct.setRefundNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SURPLUS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surplusNumber = iprot.readI32();
              struct.setSurplusNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DELIVERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryState = iprot.readString();
              struct.setDeliveryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CONSUME_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consumeStatus = iprot.readI32();
              struct.setConsumeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgNames = iprot.readString();
              struct.setOrgNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REFUNDING_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundingNumber = iprot.readI32();
              struct.setRefundingNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SETTLEMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementStatus = iprot.readString();
              struct.setSettlementStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeDouble(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINTS_FIELD_DESC);
      oprot.writeDouble(struct.points);
      oprot.writeFieldEnd();
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.refundNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SURPLUS_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.surplusNumber);
      oprot.writeFieldEnd();
      if (struct.deliveryState != null) {
        oprot.writeFieldBegin(DELIVERY_STATE_FIELD_DESC);
        oprot.writeString(struct.deliveryState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSUME_STATUS_FIELD_DESC);
      oprot.writeI32(struct.consumeStatus);
      oprot.writeFieldEnd();
      if (struct.orgNames != null) {
        oprot.writeFieldBegin(ORG_NAMES_FIELD_DESC);
        oprot.writeString(struct.orgNames);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUNDING_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.refundingNumber);
      oprot.writeFieldEnd();
      if (struct.settlementStatus != null) {
        oprot.writeFieldBegin(SETTLEMENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.settlementStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductVoTupleSchemeFactory implements SchemeFactory {
    public ProductVoTupleScheme getScheme() {
      return new ProductVoTupleScheme();
    }
  }

  private static class ProductVoTupleScheme extends TupleScheme<ProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetMoney()) {
        optionals.set(2);
      }
      if (struct.isSetVipMoney()) {
        optionals.set(3);
      }
      if (struct.isSetQuantity()) {
        optionals.set(4);
      }
      if (struct.isSetVipQuantity()) {
        optionals.set(5);
      }
      if (struct.isSetPoints()) {
        optionals.set(6);
      }
      if (struct.isSetDeliveryOption()) {
        optionals.set(7);
      }
      if (struct.isSetDeliveryMoney()) {
        optionals.set(8);
      }
      if (struct.isSetStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(11);
      }
      if (struct.isSetRefundNumber()) {
        optionals.set(12);
      }
      if (struct.isSetSurplusNumber()) {
        optionals.set(13);
      }
      if (struct.isSetDeliveryState()) {
        optionals.set(14);
      }
      if (struct.isSetConsumeStatus()) {
        optionals.set(15);
      }
      if (struct.isSetOrgNames()) {
        optionals.set(16);
      }
      if (struct.isSetRefundingNumber()) {
        optionals.set(17);
      }
      if (struct.isSetSettlementStatus()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMoney()) {
        oprot.writeDouble(struct.money);
      }
      if (struct.isSetVipMoney()) {
        oprot.writeDouble(struct.vipMoney);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetVipQuantity()) {
        oprot.writeI32(struct.vipQuantity);
      }
      if (struct.isSetPoints()) {
        oprot.writeDouble(struct.points);
      }
      if (struct.isSetDeliveryOption()) {
        oprot.writeString(struct.deliveryOption);
      }
      if (struct.isSetDeliveryMoney()) {
        oprot.writeDouble(struct.deliveryMoney);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetRefundNumber()) {
        oprot.writeI32(struct.refundNumber);
      }
      if (struct.isSetSurplusNumber()) {
        oprot.writeI32(struct.surplusNumber);
      }
      if (struct.isSetDeliveryState()) {
        oprot.writeString(struct.deliveryState);
      }
      if (struct.isSetConsumeStatus()) {
        oprot.writeI32(struct.consumeStatus);
      }
      if (struct.isSetOrgNames()) {
        oprot.writeString(struct.orgNames);
      }
      if (struct.isSetRefundingNumber()) {
        oprot.writeI32(struct.refundingNumber);
      }
      if (struct.isSetSettlementStatus()) {
        oprot.writeString(struct.settlementStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.money = iprot.readDouble();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vipMoney = iprot.readDouble();
        struct.setVipMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vipQuantity = iprot.readI32();
        struct.setVipQuantityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.points = iprot.readDouble();
        struct.setPointsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deliveryOption = iprot.readString();
        struct.setDeliveryOptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deliveryMoney = iprot.readDouble();
        struct.setDeliveryMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.refundNumber = iprot.readI32();
        struct.setRefundNumberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.surplusNumber = iprot.readI32();
        struct.setSurplusNumberIsSet(true);
      }
      if (incoming.get(14)) {
        struct.deliveryState = iprot.readString();
        struct.setDeliveryStateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.consumeStatus = iprot.readI32();
        struct.setConsumeStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.orgNames = iprot.readString();
        struct.setOrgNamesIsSet(true);
      }
      if (incoming.get(17)) {
        struct.refundingNumber = iprot.readI32();
        struct.setRefundingNumberIsSet(true);
      }
      if (incoming.get(18)) {
        struct.settlementStatus = iprot.readString();
        struct.setSettlementStatusIsSet(true);
      }
    }
  }

}

