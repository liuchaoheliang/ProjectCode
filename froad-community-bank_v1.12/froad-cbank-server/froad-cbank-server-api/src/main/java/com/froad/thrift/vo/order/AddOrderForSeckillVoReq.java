/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 1.1 创建秒杀订单请求-改造（版本1.1 - 2015.06.07需求变更）
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AddOrderForSeckillVoReq implements org.apache.thrift.TBase<AddOrderForSeckillVoReq, AddOrderForSeckillVoReq._Fields>, java.io.Serializable, Cloneable, Comparable<AddOrderForSeckillVoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddOrderForSeckillVoReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("productImage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VIP_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField VIP_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipQuantity", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DELIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField RECV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recvId", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField DELIVERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryType", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddOrderForSeckillVoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddOrderForSeckillVoReqTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 会员号
   */
  public long memberCode; // required
  /**
   * 会员名称
   */
  public String memberName; // required
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 请求号
   */
  public String reqId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 商品图片
   */
  public String productImage; // required
  /**
   * 商品类型
   */
  public String productType; // required
  /**
   * 普通价
   */
  public double money; // required
  /**
   * 普通价购买数量
   */
  public int quantity; // required
  /**
   * VIP价：没有就传0
   */
  public double vipMoney; // required
  /**
   * VIP价购买数量：没有就传0
   */
  public int vipQuantity; // required
  /**
   * 运费
   */
  public double deliveryMoney; // required
  /**
   * 备注
   */
  public String remark; // optional
  /**
   * 提货信息编号
   */
  public String deliverId; // optional
  /**
   * 收货信息编号
   */
  public String recvId; // optional
  /**
   * 接收券和短信的手机号
   */
  public String phone; // optional
  /**
   * 预售商品自提网点|线下积分兑换网点
   */
  public String orgCode; // optional
  /**
   * 预售商品自提网点|线下积分兑换网点名称
   */
  public String orgName; // optional
  /**
   * 配送|自提方式
   */
  public String deliveryType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 会员名称
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)4, "createSource"),
    /**
     * 请求号
     */
    REQ_ID((short)5, "reqId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)6, "merchantId"),
    /**
     * 商品ID
     */
    PRODUCT_ID((short)7, "productId"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)8, "productName"),
    /**
     * 商品图片
     */
    PRODUCT_IMAGE((short)9, "productImage"),
    /**
     * 商品类型
     */
    PRODUCT_TYPE((short)10, "productType"),
    /**
     * 普通价
     */
    MONEY((short)11, "money"),
    /**
     * 普通价购买数量
     */
    QUANTITY((short)12, "quantity"),
    /**
     * VIP价：没有就传0
     */
    VIP_MONEY((short)13, "vipMoney"),
    /**
     * VIP价购买数量：没有就传0
     */
    VIP_QUANTITY((short)14, "vipQuantity"),
    /**
     * 运费
     */
    DELIVERY_MONEY((short)15, "deliveryMoney"),
    /**
     * 备注
     */
    REMARK((short)16, "remark"),
    /**
     * 提货信息编号
     */
    DELIVER_ID((short)17, "deliverId"),
    /**
     * 收货信息编号
     */
    RECV_ID((short)18, "recvId"),
    /**
     * 接收券和短信的手机号
     */
    PHONE((short)19, "phone"),
    /**
     * 预售商品自提网点|线下积分兑换网点
     */
    ORG_CODE((short)20, "orgCode"),
    /**
     * 预售商品自提网点|线下积分兑换网点名称
     */
    ORG_NAME((short)21, "orgName"),
    /**
     * 配送|自提方式
     */
    DELIVERY_TYPE((short)22, "deliveryType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 5: // REQ_ID
          return REQ_ID;
        case 6: // MERCHANT_ID
          return MERCHANT_ID;
        case 7: // PRODUCT_ID
          return PRODUCT_ID;
        case 8: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 9: // PRODUCT_IMAGE
          return PRODUCT_IMAGE;
        case 10: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 11: // MONEY
          return MONEY;
        case 12: // QUANTITY
          return QUANTITY;
        case 13: // VIP_MONEY
          return VIP_MONEY;
        case 14: // VIP_QUANTITY
          return VIP_QUANTITY;
        case 15: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 16: // REMARK
          return REMARK;
        case 17: // DELIVER_ID
          return DELIVER_ID;
        case 18: // RECV_ID
          return RECV_ID;
        case 19: // PHONE
          return PHONE;
        case 20: // ORG_CODE
          return ORG_CODE;
        case 21: // ORG_NAME
          return ORG_NAME;
        case 22: // DELIVERY_TYPE
          return DELIVERY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private static final int __QUANTITY_ISSET_ID = 2;
  private static final int __VIPMONEY_ISSET_ID = 3;
  private static final int __VIPQUANTITY_ISSET_ID = 4;
  private static final int __DELIVERYMONEY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REMARK,_Fields.DELIVER_ID,_Fields.RECV_ID,_Fields.PHONE,_Fields.ORG_CODE,_Fields.ORG_NAME,_Fields.DELIVERY_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("productImage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipMoney", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("vipQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("deliverId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_ID, new org.apache.thrift.meta_data.FieldMetaData("recvId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deliveryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddOrderForSeckillVoReq.class, metaDataMap);
  }

  public AddOrderForSeckillVoReq() {
  }

  public AddOrderForSeckillVoReq(
    String clientId,
    long memberCode,
    String memberName,
    String createSource,
    String reqId,
    String merchantId,
    String productId,
    String productName,
    String productImage,
    String productType,
    double money,
    int quantity,
    double vipMoney,
    int vipQuantity,
    double deliveryMoney)
  {
    this();
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberName = memberName;
    this.createSource = createSource;
    this.reqId = reqId;
    this.merchantId = merchantId;
    this.productId = productId;
    this.productName = productName;
    this.productImage = productImage;
    this.productType = productType;
    this.money = money;
    setMoneyIsSet(true);
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddOrderForSeckillVoReq(AddOrderForSeckillVoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetReqId()) {
      this.reqId = other.reqId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetProductImage()) {
      this.productImage = other.productImage;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    this.money = other.money;
    this.quantity = other.quantity;
    this.vipMoney = other.vipMoney;
    this.vipQuantity = other.vipQuantity;
    this.deliveryMoney = other.deliveryMoney;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetDeliverId()) {
      this.deliverId = other.deliverId;
    }
    if (other.isSetRecvId()) {
      this.recvId = other.recvId;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetDeliveryType()) {
      this.deliveryType = other.deliveryType;
    }
  }

  public AddOrderForSeckillVoReq deepCopy() {
    return new AddOrderForSeckillVoReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.memberName = null;
    this.createSource = null;
    this.reqId = null;
    this.merchantId = null;
    this.productId = null;
    this.productName = null;
    this.productImage = null;
    this.productType = null;
    setMoneyIsSet(false);
    this.money = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    setVipMoneyIsSet(false);
    this.vipMoney = 0.0;
    setVipQuantityIsSet(false);
    this.vipQuantity = 0;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    this.remark = null;
    this.deliverId = null;
    this.recvId = null;
    this.phone = null;
    this.orgCode = null;
    this.orgName = null;
    this.deliveryType = null;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public AddOrderForSeckillVoReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 会员号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public AddOrderForSeckillVoReq setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 会员名称
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名称
   */
  public AddOrderForSeckillVoReq setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public AddOrderForSeckillVoReq setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 请求号
   */
  public String getReqId() {
    return this.reqId;
  }

  /**
   * 请求号
   */
  public AddOrderForSeckillVoReq setReqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

  public void unsetReqId() {
    this.reqId = null;
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return this.reqId != null;
  }

  public void setReqIdIsSet(boolean value) {
    if (!value) {
      this.reqId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public AddOrderForSeckillVoReq setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public AddOrderForSeckillVoReq setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public AddOrderForSeckillVoReq setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品图片
   */
  public String getProductImage() {
    return this.productImage;
  }

  /**
   * 商品图片
   */
  public AddOrderForSeckillVoReq setProductImage(String productImage) {
    this.productImage = productImage;
    return this;
  }

  public void unsetProductImage() {
    this.productImage = null;
  }

  /** Returns true if field productImage is set (has been assigned a value) and false otherwise */
  public boolean isSetProductImage() {
    return this.productImage != null;
  }

  public void setProductImageIsSet(boolean value) {
    if (!value) {
      this.productImage = null;
    }
  }

  /**
   * 商品类型
   */
  public String getProductType() {
    return this.productType;
  }

  /**
   * 商品类型
   */
  public AddOrderForSeckillVoReq setProductType(String productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  /**
   * 普通价
   */
  public double getMoney() {
    return this.money;
  }

  /**
   * 普通价
   */
  public AddOrderForSeckillVoReq setMoney(double money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  /**
   * 普通价购买数量
   */
  public int getQuantity() {
    return this.quantity;
  }

  /**
   * 普通价购买数量
   */
  public AddOrderForSeckillVoReq setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * VIP价：没有就传0
   */
  public double getVipMoney() {
    return this.vipMoney;
  }

  /**
   * VIP价：没有就传0
   */
  public AddOrderForSeckillVoReq setVipMoney(double vipMoney) {
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    return this;
  }

  public void unsetVipMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  /** Returns true if field vipMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  public void setVipMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPMONEY_ISSET_ID, value);
  }

  /**
   * VIP价购买数量：没有就传0
   */
  public int getVipQuantity() {
    return this.vipQuantity;
  }

  /**
   * VIP价购买数量：没有就传0
   */
  public AddOrderForSeckillVoReq setVipQuantity(int vipQuantity) {
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    return this;
  }

  public void unsetVipQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  /** Returns true if field vipQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetVipQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  public void setVipQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID, value);
  }

  /**
   * 运费
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费
   */
  public AddOrderForSeckillVoReq setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public AddOrderForSeckillVoReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 提货信息编号
   */
  public String getDeliverId() {
    return this.deliverId;
  }

  /**
   * 提货信息编号
   */
  public AddOrderForSeckillVoReq setDeliverId(String deliverId) {
    this.deliverId = deliverId;
    return this;
  }

  public void unsetDeliverId() {
    this.deliverId = null;
  }

  /** Returns true if field deliverId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverId() {
    return this.deliverId != null;
  }

  public void setDeliverIdIsSet(boolean value) {
    if (!value) {
      this.deliverId = null;
    }
  }

  /**
   * 收货信息编号
   */
  public String getRecvId() {
    return this.recvId;
  }

  /**
   * 收货信息编号
   */
  public AddOrderForSeckillVoReq setRecvId(String recvId) {
    this.recvId = recvId;
    return this;
  }

  public void unsetRecvId() {
    this.recvId = null;
  }

  /** Returns true if field recvId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvId() {
    return this.recvId != null;
  }

  public void setRecvIdIsSet(boolean value) {
    if (!value) {
      this.recvId = null;
    }
  }

  /**
   * 接收券和短信的手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 接收券和短信的手机号
   */
  public AddOrderForSeckillVoReq setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 预售商品自提网点|线下积分兑换网点
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 预售商品自提网点|线下积分兑换网点
   */
  public AddOrderForSeckillVoReq setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 预售商品自提网点|线下积分兑换网点名称
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 预售商品自提网点|线下积分兑换网点名称
   */
  public AddOrderForSeckillVoReq setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 配送|自提方式
   */
  public String getDeliveryType() {
    return this.deliveryType;
  }

  /**
   * 配送|自提方式
   */
  public AddOrderForSeckillVoReq setDeliveryType(String deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  public void unsetDeliveryType() {
    this.deliveryType = null;
  }

  /** Returns true if field deliveryType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryType() {
    return this.deliveryType != null;
  }

  public void setDeliveryTypeIsSet(boolean value) {
    if (!value) {
      this.deliveryType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_IMAGE:
      if (value == null) {
        unsetProductImage();
      } else {
        setProductImage((String)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case VIP_MONEY:
      if (value == null) {
        unsetVipMoney();
      } else {
        setVipMoney((Double)value);
      }
      break;

    case VIP_QUANTITY:
      if (value == null) {
        unsetVipQuantity();
      } else {
        setVipQuantity((Integer)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case DELIVER_ID:
      if (value == null) {
        unsetDeliverId();
      } else {
        setDeliverId((String)value);
      }
      break;

    case RECV_ID:
      if (value == null) {
        unsetRecvId();
      } else {
        setRecvId((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case DELIVERY_TYPE:
      if (value == null) {
        unsetDeliveryType();
      } else {
        setDeliveryType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_NAME:
      return getMemberName();

    case CREATE_SOURCE:
      return getCreateSource();

    case REQ_ID:
      return getReqId();

    case MERCHANT_ID:
      return getMerchantId();

    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_IMAGE:
      return getProductImage();

    case PRODUCT_TYPE:
      return getProductType();

    case MONEY:
      return Double.valueOf(getMoney());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case VIP_MONEY:
      return Double.valueOf(getVipMoney());

    case VIP_QUANTITY:
      return Integer.valueOf(getVipQuantity());

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case REMARK:
      return getRemark();

    case DELIVER_ID:
      return getDeliverId();

    case RECV_ID:
      return getRecvId();

    case PHONE:
      return getPhone();

    case ORG_CODE:
      return getOrgCode();

    case ORG_NAME:
      return getOrgName();

    case DELIVERY_TYPE:
      return getDeliveryType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case REQ_ID:
      return isSetReqId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_IMAGE:
      return isSetProductImage();
    case PRODUCT_TYPE:
      return isSetProductType();
    case MONEY:
      return isSetMoney();
    case QUANTITY:
      return isSetQuantity();
    case VIP_MONEY:
      return isSetVipMoney();
    case VIP_QUANTITY:
      return isSetVipQuantity();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case REMARK:
      return isSetRemark();
    case DELIVER_ID:
      return isSetDeliverId();
    case RECV_ID:
      return isSetRecvId();
    case PHONE:
      return isSetPhone();
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_NAME:
      return isSetOrgName();
    case DELIVERY_TYPE:
      return isSetDeliveryType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddOrderForSeckillVoReq)
      return this.equals((AddOrderForSeckillVoReq)that);
    return false;
  }

  public boolean equals(AddOrderForSeckillVoReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_reqId = true && this.isSetReqId();
    boolean that_present_reqId = true && that.isSetReqId();
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (!this.reqId.equals(that.reqId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productImage = true && this.isSetProductImage();
    boolean that_present_productImage = true && that.isSetProductImage();
    if (this_present_productImage || that_present_productImage) {
      if (!(this_present_productImage && that_present_productImage))
        return false;
      if (!this.productImage.equals(that.productImage))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_vipMoney = true;
    boolean that_present_vipMoney = true;
    if (this_present_vipMoney || that_present_vipMoney) {
      if (!(this_present_vipMoney && that_present_vipMoney))
        return false;
      if (this.vipMoney != that.vipMoney)
        return false;
    }

    boolean this_present_vipQuantity = true;
    boolean that_present_vipQuantity = true;
    if (this_present_vipQuantity || that_present_vipQuantity) {
      if (!(this_present_vipQuantity && that_present_vipQuantity))
        return false;
      if (this.vipQuantity != that.vipQuantity)
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_deliverId = true && this.isSetDeliverId();
    boolean that_present_deliverId = true && that.isSetDeliverId();
    if (this_present_deliverId || that_present_deliverId) {
      if (!(this_present_deliverId && that_present_deliverId))
        return false;
      if (!this.deliverId.equals(that.deliverId))
        return false;
    }

    boolean this_present_recvId = true && this.isSetRecvId();
    boolean that_present_recvId = true && that.isSetRecvId();
    if (this_present_recvId || that_present_recvId) {
      if (!(this_present_recvId && that_present_recvId))
        return false;
      if (!this.recvId.equals(that.recvId))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_deliveryType = true && this.isSetDeliveryType();
    boolean that_present_deliveryType = true && that.isSetDeliveryType();
    if (this_present_deliveryType || that_present_deliveryType) {
      if (!(this_present_deliveryType && that_present_deliveryType))
        return false;
      if (!this.deliveryType.equals(that.deliveryType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_reqId = true && (isSetReqId());
    list.add(present_reqId);
    if (present_reqId)
      list.add(reqId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productImage = true && (isSetProductImage());
    list.add(present_productImage);
    if (present_productImage)
      list.add(productImage);

    boolean present_productType = true && (isSetProductType());
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_money = true;
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_vipMoney = true;
    list.add(present_vipMoney);
    if (present_vipMoney)
      list.add(vipMoney);

    boolean present_vipQuantity = true;
    list.add(present_vipQuantity);
    if (present_vipQuantity)
      list.add(vipQuantity);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_deliverId = true && (isSetDeliverId());
    list.add(present_deliverId);
    if (present_deliverId)
      list.add(deliverId);

    boolean present_recvId = true && (isSetRecvId());
    list.add(present_recvId);
    if (present_recvId)
      list.add(recvId);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_deliveryType = true && (isSetDeliveryType());
    list.add(present_deliveryType);
    if (present_deliveryType)
      list.add(deliveryType);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddOrderForSeckillVoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductImage()).compareTo(other.isSetProductImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productImage, other.productImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipMoney()).compareTo(other.isSetVipMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipMoney, other.vipMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipQuantity()).compareTo(other.isSetVipQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipQuantity, other.vipQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverId()).compareTo(other.isSetDeliverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverId, other.deliverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvId()).compareTo(other.isSetRecvId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvId, other.recvId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryType()).compareTo(other.isSetDeliveryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryType, other.deliveryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddOrderForSeckillVoReq(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqId:");
    if (this.reqId == null) {
      sb.append("null");
    } else {
      sb.append(this.reqId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productImage:");
    if (this.productImage == null) {
      sb.append("null");
    } else {
      sb.append(this.productImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipMoney:");
    sb.append(this.vipMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipQuantity:");
    sb.append(this.vipQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetDeliverId()) {
      if (!first) sb.append(", ");
      sb.append("deliverId:");
      if (this.deliverId == null) {
        sb.append("null");
      } else {
        sb.append(this.deliverId);
      }
      first = false;
    }
    if (isSetRecvId()) {
      if (!first) sb.append(", ");
      sb.append("recvId:");
      if (this.recvId == null) {
        sb.append("null");
      } else {
        sb.append(this.recvId);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetDeliveryType()) {
      if (!first) sb.append(", ");
      sb.append("deliveryType:");
      if (this.deliveryType == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clientId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'memberCode' because it's a primitive and you chose the non-beans generator.
    if (memberName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberName' was not present! Struct: " + toString());
    }
    if (createSource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createSource' was not present! Struct: " + toString());
    }
    if (reqId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reqId' was not present! Struct: " + toString());
    }
    if (merchantId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'merchantId' was not present! Struct: " + toString());
    }
    if (productId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not present! Struct: " + toString());
    }
    if (productName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productName' was not present! Struct: " + toString());
    }
    if (productImage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productImage' was not present! Struct: " + toString());
    }
    if (productType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'money' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'quantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vipMoney' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vipQuantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'deliveryMoney' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddOrderForSeckillVoReqStandardSchemeFactory implements SchemeFactory {
    public AddOrderForSeckillVoReqStandardScheme getScheme() {
      return new AddOrderForSeckillVoReqStandardScheme();
    }
  }

  private static class AddOrderForSeckillVoReqStandardScheme extends StandardScheme<AddOrderForSeckillVoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddOrderForSeckillVoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqId = iprot.readString();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productImage = iprot.readString();
              struct.setProductImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productType = iprot.readString();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.money = iprot.readDouble();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIP_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipMoney = iprot.readDouble();
              struct.setVipMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VIP_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipQuantity = iprot.readI32();
              struct.setVipQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DELIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliverId = iprot.readString();
              struct.setDeliverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RECV_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvId = iprot.readString();
              struct.setRecvIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DELIVERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryType = iprot.readString();
              struct.setDeliveryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemberCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberCode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'money' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQuantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVipMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vipMoney' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVipQuantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vipQuantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDeliveryMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryMoney' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddOrderForSeckillVoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      if (struct.reqId != null) {
        oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
        oprot.writeString(struct.reqId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.productImage != null) {
        oprot.writeFieldBegin(PRODUCT_IMAGE_FIELD_DESC);
        oprot.writeString(struct.productImage);
        oprot.writeFieldEnd();
      }
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.productType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeDouble(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliverId != null) {
        if (struct.isSetDeliverId()) {
          oprot.writeFieldBegin(DELIVER_ID_FIELD_DESC);
          oprot.writeString(struct.deliverId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recvId != null) {
        if (struct.isSetRecvId()) {
          oprot.writeFieldBegin(RECV_ID_FIELD_DESC);
          oprot.writeString(struct.recvId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryType != null) {
        if (struct.isSetDeliveryType()) {
          oprot.writeFieldBegin(DELIVERY_TYPE_FIELD_DESC);
          oprot.writeString(struct.deliveryType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddOrderForSeckillVoReqTupleSchemeFactory implements SchemeFactory {
    public AddOrderForSeckillVoReqTupleScheme getScheme() {
      return new AddOrderForSeckillVoReqTupleScheme();
    }
  }

  private static class AddOrderForSeckillVoReqTupleScheme extends TupleScheme<AddOrderForSeckillVoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddOrderForSeckillVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientId);
      oprot.writeI64(struct.memberCode);
      oprot.writeString(struct.memberName);
      oprot.writeString(struct.createSource);
      oprot.writeString(struct.reqId);
      oprot.writeString(struct.merchantId);
      oprot.writeString(struct.productId);
      oprot.writeString(struct.productName);
      oprot.writeString(struct.productImage);
      oprot.writeString(struct.productType);
      oprot.writeDouble(struct.money);
      oprot.writeI32(struct.quantity);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeDouble(struct.deliveryMoney);
      BitSet optionals = new BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      if (struct.isSetDeliverId()) {
        optionals.set(1);
      }
      if (struct.isSetRecvId()) {
        optionals.set(2);
      }
      if (struct.isSetPhone()) {
        optionals.set(3);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(4);
      }
      if (struct.isSetOrgName()) {
        optionals.set(5);
      }
      if (struct.isSetDeliveryType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetDeliverId()) {
        oprot.writeString(struct.deliverId);
      }
      if (struct.isSetRecvId()) {
        oprot.writeString(struct.recvId);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetDeliveryType()) {
        oprot.writeString(struct.deliveryType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddOrderForSeckillVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientId = iprot.readString();
      struct.setClientIdIsSet(true);
      struct.memberCode = iprot.readI64();
      struct.setMemberCodeIsSet(true);
      struct.memberName = iprot.readString();
      struct.setMemberNameIsSet(true);
      struct.createSource = iprot.readString();
      struct.setCreateSourceIsSet(true);
      struct.reqId = iprot.readString();
      struct.setReqIdIsSet(true);
      struct.merchantId = iprot.readString();
      struct.setMerchantIdIsSet(true);
      struct.productId = iprot.readString();
      struct.setProductIdIsSet(true);
      struct.productName = iprot.readString();
      struct.setProductNameIsSet(true);
      struct.productImage = iprot.readString();
      struct.setProductImageIsSet(true);
      struct.productType = iprot.readString();
      struct.setProductTypeIsSet(true);
      struct.money = iprot.readDouble();
      struct.setMoneyIsSet(true);
      struct.quantity = iprot.readI32();
      struct.setQuantityIsSet(true);
      struct.vipMoney = iprot.readDouble();
      struct.setVipMoneyIsSet(true);
      struct.vipQuantity = iprot.readI32();
      struct.setVipQuantityIsSet(true);
      struct.deliveryMoney = iprot.readDouble();
      struct.setDeliveryMoneyIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deliverId = iprot.readString();
        struct.setDeliverIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recvId = iprot.readString();
        struct.setRecvIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deliveryType = iprot.readString();
        struct.setDeliveryTypeIsSet(true);
      }
    }
  }

}

