/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * BizInstanceAttrValueVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BizInstanceAttrValueVo implements org.apache.thrift.TBase<BizInstanceAttrValueVo, BizInstanceAttrValueVo._Fields>, java.io.Serializable, Cloneable, Comparable<BizInstanceAttrValueVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizInstanceAttrValueVo");

  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ATTR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("attrName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("attrValue", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizInstanceAttrValueVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizInstanceAttrValueVoTupleSchemeFactory());
  }

  public String instanceId; // optional
  /**
   * instanceId
   */
  public String attrId; // optional
  /**
   * attrId
   */
  public String attrName; // optional
  /**
   * attrName
   */
  public String attrValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_ID((short)1, "instanceId"),
    /**
     * instanceId
     */
    ATTR_ID((short)2, "attrId"),
    /**
     * attrId
     */
    ATTR_NAME((short)3, "attrName"),
    /**
     * attrName
     */
    ATTR_VALUE((short)4, "attrValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_ID
          return INSTANCE_ID;
        case 2: // ATTR_ID
          return ATTR_ID;
        case 3: // ATTR_NAME
          return ATTR_NAME;
        case 4: // ATTR_VALUE
          return ATTR_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INSTANCE_ID,_Fields.ATTR_ID,_Fields.ATTR_NAME,_Fields.ATTR_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR_NAME, new org.apache.thrift.meta_data.FieldMetaData("attrName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("attrValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizInstanceAttrValueVo.class, metaDataMap);
  }

  public BizInstanceAttrValueVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizInstanceAttrValueVo(BizInstanceAttrValueVo other) {
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetAttrId()) {
      this.attrId = other.attrId;
    }
    if (other.isSetAttrName()) {
      this.attrName = other.attrName;
    }
    if (other.isSetAttrValue()) {
      this.attrValue = other.attrValue;
    }
  }

  public BizInstanceAttrValueVo deepCopy() {
    return new BizInstanceAttrValueVo(this);
  }

  @Override
  public void clear() {
    this.instanceId = null;
    this.attrId = null;
    this.attrName = null;
    this.attrValue = null;
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public BizInstanceAttrValueVo setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  /**
   * instanceId
   */
  public String getAttrId() {
    return this.attrId;
  }

  /**
   * instanceId
   */
  public BizInstanceAttrValueVo setAttrId(String attrId) {
    this.attrId = attrId;
    return this;
  }

  public void unsetAttrId() {
    this.attrId = null;
  }

  /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrId() {
    return this.attrId != null;
  }

  public void setAttrIdIsSet(boolean value) {
    if (!value) {
      this.attrId = null;
    }
  }

  /**
   * attrId
   */
  public String getAttrName() {
    return this.attrName;
  }

  /**
   * attrId
   */
  public BizInstanceAttrValueVo setAttrName(String attrName) {
    this.attrName = attrName;
    return this;
  }

  public void unsetAttrName() {
    this.attrName = null;
  }

  /** Returns true if field attrName is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrName() {
    return this.attrName != null;
  }

  public void setAttrNameIsSet(boolean value) {
    if (!value) {
      this.attrName = null;
    }
  }

  /**
   * attrName
   */
  public String getAttrValue() {
    return this.attrValue;
  }

  /**
   * attrName
   */
  public BizInstanceAttrValueVo setAttrValue(String attrValue) {
    this.attrValue = attrValue;
    return this;
  }

  public void unsetAttrValue() {
    this.attrValue = null;
  }

  /** Returns true if field attrValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrValue() {
    return this.attrValue != null;
  }

  public void setAttrValueIsSet(boolean value) {
    if (!value) {
      this.attrValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case ATTR_ID:
      if (value == null) {
        unsetAttrId();
      } else {
        setAttrId((String)value);
      }
      break;

    case ATTR_NAME:
      if (value == null) {
        unsetAttrName();
      } else {
        setAttrName((String)value);
      }
      break;

    case ATTR_VALUE:
      if (value == null) {
        unsetAttrValue();
      } else {
        setAttrValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_ID:
      return getInstanceId();

    case ATTR_ID:
      return getAttrId();

    case ATTR_NAME:
      return getAttrName();

    case ATTR_VALUE:
      return getAttrValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_ID:
      return isSetInstanceId();
    case ATTR_ID:
      return isSetAttrId();
    case ATTR_NAME:
      return isSetAttrName();
    case ATTR_VALUE:
      return isSetAttrValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizInstanceAttrValueVo)
      return this.equals((BizInstanceAttrValueVo)that);
    return false;
  }

  public boolean equals(BizInstanceAttrValueVo that) {
    if (that == null)
      return false;

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_attrId = true && this.isSetAttrId();
    boolean that_present_attrId = true && that.isSetAttrId();
    if (this_present_attrId || that_present_attrId) {
      if (!(this_present_attrId && that_present_attrId))
        return false;
      if (!this.attrId.equals(that.attrId))
        return false;
    }

    boolean this_present_attrName = true && this.isSetAttrName();
    boolean that_present_attrName = true && that.isSetAttrName();
    if (this_present_attrName || that_present_attrName) {
      if (!(this_present_attrName && that_present_attrName))
        return false;
      if (!this.attrName.equals(that.attrName))
        return false;
    }

    boolean this_present_attrValue = true && this.isSetAttrValue();
    boolean that_present_attrValue = true && that.isSetAttrValue();
    if (this_present_attrValue || that_present_attrValue) {
      if (!(this_present_attrValue && that_present_attrValue))
        return false;
      if (!this.attrValue.equals(that.attrValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_instanceId = true && (isSetInstanceId());
    list.add(present_instanceId);
    if (present_instanceId)
      list.add(instanceId);

    boolean present_attrId = true && (isSetAttrId());
    list.add(present_attrId);
    if (present_attrId)
      list.add(attrId);

    boolean present_attrName = true && (isSetAttrName());
    list.add(present_attrName);
    if (present_attrName)
      list.add(attrName);

    boolean present_attrValue = true && (isSetAttrValue());
    list.add(present_attrValue);
    if (present_attrValue)
      list.add(attrValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizInstanceAttrValueVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttrName()).compareTo(other.isSetAttrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrName, other.attrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttrValue()).compareTo(other.isSetAttrValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrValue, other.attrValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizInstanceAttrValueVo(");
    boolean first = true;

    if (isSetInstanceId()) {
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetAttrId()) {
      if (!first) sb.append(", ");
      sb.append("attrId:");
      if (this.attrId == null) {
        sb.append("null");
      } else {
        sb.append(this.attrId);
      }
      first = false;
    }
    if (isSetAttrName()) {
      if (!first) sb.append(", ");
      sb.append("attrName:");
      if (this.attrName == null) {
        sb.append("null");
      } else {
        sb.append(this.attrName);
      }
      first = false;
    }
    if (isSetAttrValue()) {
      if (!first) sb.append(", ");
      sb.append("attrValue:");
      if (this.attrValue == null) {
        sb.append("null");
      } else {
        sb.append(this.attrValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizInstanceAttrValueVoStandardSchemeFactory implements SchemeFactory {
    public BizInstanceAttrValueVoStandardScheme getScheme() {
      return new BizInstanceAttrValueVoStandardScheme();
    }
  }

  private static class BizInstanceAttrValueVoStandardScheme extends StandardScheme<BizInstanceAttrValueVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizInstanceAttrValueVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attrId = iprot.readString();
              struct.setAttrIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attrName = iprot.readString();
              struct.setAttrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attrValue = iprot.readString();
              struct.setAttrValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizInstanceAttrValueVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attrId != null) {
        if (struct.isSetAttrId()) {
          oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
          oprot.writeString(struct.attrId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attrName != null) {
        if (struct.isSetAttrName()) {
          oprot.writeFieldBegin(ATTR_NAME_FIELD_DESC);
          oprot.writeString(struct.attrName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attrValue != null) {
        if (struct.isSetAttrValue()) {
          oprot.writeFieldBegin(ATTR_VALUE_FIELD_DESC);
          oprot.writeString(struct.attrValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizInstanceAttrValueVoTupleSchemeFactory implements SchemeFactory {
    public BizInstanceAttrValueVoTupleScheme getScheme() {
      return new BizInstanceAttrValueVoTupleScheme();
    }
  }

  private static class BizInstanceAttrValueVoTupleScheme extends TupleScheme<BizInstanceAttrValueVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizInstanceAttrValueVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetAttrId()) {
        optionals.set(1);
      }
      if (struct.isSetAttrName()) {
        optionals.set(2);
      }
      if (struct.isSetAttrValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetAttrId()) {
        oprot.writeString(struct.attrId);
      }
      if (struct.isSetAttrName()) {
        oprot.writeString(struct.attrName);
      }
      if (struct.isSetAttrValue()) {
        oprot.writeString(struct.attrValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizInstanceAttrValueVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.attrId = iprot.readString();
        struct.setAttrIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.attrName = iprot.readString();
        struct.setAttrNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.attrValue = iprot.readString();
        struct.setAttrValueIsSet(true);
      }
    }
  }

}

