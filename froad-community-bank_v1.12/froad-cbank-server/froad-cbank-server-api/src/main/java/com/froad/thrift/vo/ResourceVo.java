/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 菜单资源信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ResourceVo implements org.apache.thrift.TBase<ResourceVo, ResourceVo._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceVo");

  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("tree_path", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("order_value", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourceVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourceVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long resource_id; // optional
  /**
   * 资源名称
   */
  public String resource_name; // optional
  /**
   * 资源类型
   */
  public String resource_type; // optional
  /**
   * 树路径
   */
  public String tree_path; // optional
  /**
   * 资源URL
   */
  public String resource_url; // optional
  /**
   * 上级资源ID
   */
  public long parent_id; // optional
  /**
   * icon
   */
  public String icon; // optional
  /**
   * 资源接口
   */
  public String api; // optional
  /**
   * 排序值
   */
  public int order_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    RESOURCE_ID((short)1, "resource_id"),
    /**
     * 资源名称
     */
    RESOURCE_NAME((short)2, "resource_name"),
    /**
     * 资源类型
     */
    RESOURCE_TYPE((short)3, "resource_type"),
    /**
     * 树路径
     */
    TREE_PATH((short)4, "tree_path"),
    /**
     * 资源URL
     */
    RESOURCE_URL((short)5, "resource_url"),
    /**
     * 上级资源ID
     */
    PARENT_ID((short)6, "parent_id"),
    /**
     * icon
     */
    ICON((short)7, "icon"),
    /**
     * 资源接口
     */
    API((short)8, "api"),
    /**
     * 排序值
     */
    ORDER_VALUE((short)9, "order_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_ID
          return RESOURCE_ID;
        case 2: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 3: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 4: // TREE_PATH
          return TREE_PATH;
        case 5: // RESOURCE_URL
          return RESOURCE_URL;
        case 6: // PARENT_ID
          return PARENT_ID;
        case 7: // ICON
          return ICON;
        case 8: // API
          return API;
        case 9: // ORDER_VALUE
          return ORDER_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOURCE_ID_ISSET_ID = 0;
  private static final int __PARENT_ID_ISSET_ID = 1;
  private static final int __ORDER_VALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_ID,_Fields.RESOURCE_NAME,_Fields.RESOURCE_TYPE,_Fields.TREE_PATH,_Fields.RESOURCE_URL,_Fields.PARENT_ID,_Fields.ICON,_Fields.API,_Fields.ORDER_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resource_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resource_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resource_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("tree_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("resource_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("order_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceVo.class, metaDataMap);
  }

  public ResourceVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceVo(ResourceVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.resource_id = other.resource_id;
    if (other.isSetResource_name()) {
      this.resource_name = other.resource_name;
    }
    if (other.isSetResource_type()) {
      this.resource_type = other.resource_type;
    }
    if (other.isSetTree_path()) {
      this.tree_path = other.tree_path;
    }
    if (other.isSetResource_url()) {
      this.resource_url = other.resource_url;
    }
    this.parent_id = other.parent_id;
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetApi()) {
      this.api = other.api;
    }
    this.order_value = other.order_value;
  }

  public ResourceVo deepCopy() {
    return new ResourceVo(this);
  }

  @Override
  public void clear() {
    setResource_idIsSet(false);
    this.resource_id = 0;
    this.resource_name = null;
    this.resource_type = null;
    this.tree_path = null;
    this.resource_url = null;
    setParent_idIsSet(false);
    this.parent_id = 0;
    this.icon = null;
    this.api = null;
    setOrder_valueIsSet(false);
    this.order_value = 0;
  }

  /**
   * 主键ID
   */
  public long getResource_id() {
    return this.resource_id;
  }

  /**
   * 主键ID
   */
  public ResourceVo setResource_id(long resource_id) {
    this.resource_id = resource_id;
    setResource_idIsSet(true);
    return this;
  }

  public void unsetResource_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCE_ID_ISSET_ID);
  }

  /** Returns true if field resource_id is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_id() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCE_ID_ISSET_ID);
  }

  public void setResource_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCE_ID_ISSET_ID, value);
  }

  /**
   * 资源名称
   */
  public String getResource_name() {
    return this.resource_name;
  }

  /**
   * 资源名称
   */
  public ResourceVo setResource_name(String resource_name) {
    this.resource_name = resource_name;
    return this;
  }

  public void unsetResource_name() {
    this.resource_name = null;
  }

  /** Returns true if field resource_name is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_name() {
    return this.resource_name != null;
  }

  public void setResource_nameIsSet(boolean value) {
    if (!value) {
      this.resource_name = null;
    }
  }

  /**
   * 资源类型
   */
  public String getResource_type() {
    return this.resource_type;
  }

  /**
   * 资源类型
   */
  public ResourceVo setResource_type(String resource_type) {
    this.resource_type = resource_type;
    return this;
  }

  public void unsetResource_type() {
    this.resource_type = null;
  }

  /** Returns true if field resource_type is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_type() {
    return this.resource_type != null;
  }

  public void setResource_typeIsSet(boolean value) {
    if (!value) {
      this.resource_type = null;
    }
  }

  /**
   * 树路径
   */
  public String getTree_path() {
    return this.tree_path;
  }

  /**
   * 树路径
   */
  public ResourceVo setTree_path(String tree_path) {
    this.tree_path = tree_path;
    return this;
  }

  public void unsetTree_path() {
    this.tree_path = null;
  }

  /** Returns true if field tree_path is set (has been assigned a value) and false otherwise */
  public boolean isSetTree_path() {
    return this.tree_path != null;
  }

  public void setTree_pathIsSet(boolean value) {
    if (!value) {
      this.tree_path = null;
    }
  }

  /**
   * 资源URL
   */
  public String getResource_url() {
    return this.resource_url;
  }

  /**
   * 资源URL
   */
  public ResourceVo setResource_url(String resource_url) {
    this.resource_url = resource_url;
    return this;
  }

  public void unsetResource_url() {
    this.resource_url = null;
  }

  /** Returns true if field resource_url is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_url() {
    return this.resource_url != null;
  }

  public void setResource_urlIsSet(boolean value) {
    if (!value) {
      this.resource_url = null;
    }
  }

  /**
   * 上级资源ID
   */
  public long getParent_id() {
    return this.parent_id;
  }

  /**
   * 上级资源ID
   */
  public ResourceVo setParent_id(long parent_id) {
    this.parent_id = parent_id;
    setParent_idIsSet(true);
    return this;
  }

  public void unsetParent_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ID_ISSET_ID);
  }

  /** Returns true if field parent_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_ID_ISSET_ID);
  }

  public void setParent_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ID_ISSET_ID, value);
  }

  /**
   * icon
   */
  public String getIcon() {
    return this.icon;
  }

  /**
   * icon
   */
  public ResourceVo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  /**
   * 资源接口
   */
  public String getApi() {
    return this.api;
  }

  /**
   * 资源接口
   */
  public ResourceVo setApi(String api) {
    this.api = api;
    return this;
  }

  public void unsetApi() {
    this.api = null;
  }

  /** Returns true if field api is set (has been assigned a value) and false otherwise */
  public boolean isSetApi() {
    return this.api != null;
  }

  public void setApiIsSet(boolean value) {
    if (!value) {
      this.api = null;
    }
  }

  /**
   * 排序值
   */
  public int getOrder_value() {
    return this.order_value;
  }

  /**
   * 排序值
   */
  public ResourceVo setOrder_value(int order_value) {
    this.order_value = order_value;
    setOrder_valueIsSet(true);
    return this;
  }

  public void unsetOrder_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_VALUE_ISSET_ID);
  }

  /** Returns true if field order_value is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_value() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_VALUE_ISSET_ID);
  }

  public void setOrder_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE_ID:
      if (value == null) {
        unsetResource_id();
      } else {
        setResource_id((Long)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResource_name();
      } else {
        setResource_name((String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResource_type();
      } else {
        setResource_type((String)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTree_path();
      } else {
        setTree_path((String)value);
      }
      break;

    case RESOURCE_URL:
      if (value == null) {
        unsetResource_url();
      } else {
        setResource_url((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParent_id();
      } else {
        setParent_id((Long)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case API:
      if (value == null) {
        unsetApi();
      } else {
        setApi((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrder_value();
      } else {
        setOrder_value((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_ID:
      return Long.valueOf(getResource_id());

    case RESOURCE_NAME:
      return getResource_name();

    case RESOURCE_TYPE:
      return getResource_type();

    case TREE_PATH:
      return getTree_path();

    case RESOURCE_URL:
      return getResource_url();

    case PARENT_ID:
      return Long.valueOf(getParent_id());

    case ICON:
      return getIcon();

    case API:
      return getApi();

    case ORDER_VALUE:
      return Integer.valueOf(getOrder_value());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_ID:
      return isSetResource_id();
    case RESOURCE_NAME:
      return isSetResource_name();
    case RESOURCE_TYPE:
      return isSetResource_type();
    case TREE_PATH:
      return isSetTree_path();
    case RESOURCE_URL:
      return isSetResource_url();
    case PARENT_ID:
      return isSetParent_id();
    case ICON:
      return isSetIcon();
    case API:
      return isSetApi();
    case ORDER_VALUE:
      return isSetOrder_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceVo)
      return this.equals((ResourceVo)that);
    return false;
  }

  public boolean equals(ResourceVo that) {
    if (that == null)
      return false;

    boolean this_present_resource_id = true && this.isSetResource_id();
    boolean that_present_resource_id = true && that.isSetResource_id();
    if (this_present_resource_id || that_present_resource_id) {
      if (!(this_present_resource_id && that_present_resource_id))
        return false;
      if (this.resource_id != that.resource_id)
        return false;
    }

    boolean this_present_resource_name = true && this.isSetResource_name();
    boolean that_present_resource_name = true && that.isSetResource_name();
    if (this_present_resource_name || that_present_resource_name) {
      if (!(this_present_resource_name && that_present_resource_name))
        return false;
      if (!this.resource_name.equals(that.resource_name))
        return false;
    }

    boolean this_present_resource_type = true && this.isSetResource_type();
    boolean that_present_resource_type = true && that.isSetResource_type();
    if (this_present_resource_type || that_present_resource_type) {
      if (!(this_present_resource_type && that_present_resource_type))
        return false;
      if (!this.resource_type.equals(that.resource_type))
        return false;
    }

    boolean this_present_tree_path = true && this.isSetTree_path();
    boolean that_present_tree_path = true && that.isSetTree_path();
    if (this_present_tree_path || that_present_tree_path) {
      if (!(this_present_tree_path && that_present_tree_path))
        return false;
      if (!this.tree_path.equals(that.tree_path))
        return false;
    }

    boolean this_present_resource_url = true && this.isSetResource_url();
    boolean that_present_resource_url = true && that.isSetResource_url();
    if (this_present_resource_url || that_present_resource_url) {
      if (!(this_present_resource_url && that_present_resource_url))
        return false;
      if (!this.resource_url.equals(that.resource_url))
        return false;
    }

    boolean this_present_parent_id = true && this.isSetParent_id();
    boolean that_present_parent_id = true && that.isSetParent_id();
    if (this_present_parent_id || that_present_parent_id) {
      if (!(this_present_parent_id && that_present_parent_id))
        return false;
      if (this.parent_id != that.parent_id)
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_api = true && this.isSetApi();
    boolean that_present_api = true && that.isSetApi();
    if (this_present_api || that_present_api) {
      if (!(this_present_api && that_present_api))
        return false;
      if (!this.api.equals(that.api))
        return false;
    }

    boolean this_present_order_value = true && this.isSetOrder_value();
    boolean that_present_order_value = true && that.isSetOrder_value();
    if (this_present_order_value || that_present_order_value) {
      if (!(this_present_order_value && that_present_order_value))
        return false;
      if (this.order_value != that.order_value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resource_id = true && (isSetResource_id());
    list.add(present_resource_id);
    if (present_resource_id)
      list.add(resource_id);

    boolean present_resource_name = true && (isSetResource_name());
    list.add(present_resource_name);
    if (present_resource_name)
      list.add(resource_name);

    boolean present_resource_type = true && (isSetResource_type());
    list.add(present_resource_type);
    if (present_resource_type)
      list.add(resource_type);

    boolean present_tree_path = true && (isSetTree_path());
    list.add(present_tree_path);
    if (present_tree_path)
      list.add(tree_path);

    boolean present_resource_url = true && (isSetResource_url());
    list.add(present_resource_url);
    if (present_resource_url)
      list.add(resource_url);

    boolean present_parent_id = true && (isSetParent_id());
    list.add(present_parent_id);
    if (present_parent_id)
      list.add(parent_id);

    boolean present_icon = true && (isSetIcon());
    list.add(present_icon);
    if (present_icon)
      list.add(icon);

    boolean present_api = true && (isSetApi());
    list.add(present_api);
    if (present_api)
      list.add(api);

    boolean present_order_value = true && (isSetOrder_value());
    list.add(present_order_value);
    if (present_order_value)
      list.add(order_value);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResourceVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResource_id()).compareTo(other.isSetResource_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_id, other.resource_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_name()).compareTo(other.isSetResource_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_name, other.resource_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_type()).compareTo(other.isSetResource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_type, other.resource_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTree_path()).compareTo(other.isSetTree_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTree_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree_path, other.tree_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_url()).compareTo(other.isSetResource_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_url, other.resource_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent_id()).compareTo(other.isSetParent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_id, other.parent_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_value()).compareTo(other.isSetOrder_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_value, other.order_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceVo(");
    boolean first = true;

    if (isSetResource_id()) {
      sb.append("resource_id:");
      sb.append(this.resource_id);
      first = false;
    }
    if (isSetResource_name()) {
      if (!first) sb.append(", ");
      sb.append("resource_name:");
      if (this.resource_name == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_name);
      }
      first = false;
    }
    if (isSetResource_type()) {
      if (!first) sb.append(", ");
      sb.append("resource_type:");
      if (this.resource_type == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_type);
      }
      first = false;
    }
    if (isSetTree_path()) {
      if (!first) sb.append(", ");
      sb.append("tree_path:");
      if (this.tree_path == null) {
        sb.append("null");
      } else {
        sb.append(this.tree_path);
      }
      first = false;
    }
    if (isSetResource_url()) {
      if (!first) sb.append(", ");
      sb.append("resource_url:");
      if (this.resource_url == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_url);
      }
      first = false;
    }
    if (isSetParent_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_id:");
      sb.append(this.parent_id);
      first = false;
    }
    if (isSetIcon()) {
      if (!first) sb.append(", ");
      sb.append("icon:");
      if (this.icon == null) {
        sb.append("null");
      } else {
        sb.append(this.icon);
      }
      first = false;
    }
    if (isSetApi()) {
      if (!first) sb.append(", ");
      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
    }
    if (isSetOrder_value()) {
      if (!first) sb.append(", ");
      sb.append("order_value:");
      sb.append(this.order_value);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceVoStandardSchemeFactory implements SchemeFactory {
    public ResourceVoStandardScheme getScheme() {
      return new ResourceVoStandardScheme();
    }
  }

  private static class ResourceVoStandardScheme extends StandardScheme<ResourceVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resource_id = iprot.readI64();
              struct.setResource_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resource_name = iprot.readString();
              struct.setResource_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resource_type = iprot.readString();
              struct.setResource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tree_path = iprot.readString();
              struct.setTree_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resource_url = iprot.readString();
              struct.setResource_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parent_id = iprot.readI64();
              struct.setParent_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // API
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api = iprot.readString();
              struct.setApiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order_value = iprot.readI32();
              struct.setOrder_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetResource_id()) {
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resource_id);
        oprot.writeFieldEnd();
      }
      if (struct.resource_name != null) {
        if (struct.isSetResource_name()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resource_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_type != null) {
        if (struct.isSetResource_type()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resource_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tree_path != null) {
        if (struct.isSetTree_path()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.tree_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_url != null) {
        if (struct.isSetResource_url()) {
          oprot.writeFieldBegin(RESOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.resource_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParent_id()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parent_id);
        oprot.writeFieldEnd();
      }
      if (struct.icon != null) {
        if (struct.isSetIcon()) {
          oprot.writeFieldBegin(ICON_FIELD_DESC);
          oprot.writeString(struct.icon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.api != null) {
        if (struct.isSetApi()) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrder_value()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.order_value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceVoTupleSchemeFactory implements SchemeFactory {
    public ResourceVoTupleScheme getScheme() {
      return new ResourceVoTupleScheme();
    }
  }

  private static class ResourceVoTupleScheme extends TupleScheme<ResourceVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResource_id()) {
        optionals.set(0);
      }
      if (struct.isSetResource_name()) {
        optionals.set(1);
      }
      if (struct.isSetResource_type()) {
        optionals.set(2);
      }
      if (struct.isSetTree_path()) {
        optionals.set(3);
      }
      if (struct.isSetResource_url()) {
        optionals.set(4);
      }
      if (struct.isSetParent_id()) {
        optionals.set(5);
      }
      if (struct.isSetIcon()) {
        optionals.set(6);
      }
      if (struct.isSetApi()) {
        optionals.set(7);
      }
      if (struct.isSetOrder_value()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetResource_id()) {
        oprot.writeI64(struct.resource_id);
      }
      if (struct.isSetResource_name()) {
        oprot.writeString(struct.resource_name);
      }
      if (struct.isSetResource_type()) {
        oprot.writeString(struct.resource_type);
      }
      if (struct.isSetTree_path()) {
        oprot.writeString(struct.tree_path);
      }
      if (struct.isSetResource_url()) {
        oprot.writeString(struct.resource_url);
      }
      if (struct.isSetParent_id()) {
        oprot.writeI64(struct.parent_id);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetApi()) {
        oprot.writeString(struct.api);
      }
      if (struct.isSetOrder_value()) {
        oprot.writeI32(struct.order_value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.resource_id = iprot.readI64();
        struct.setResource_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resource_name = iprot.readString();
        struct.setResource_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resource_type = iprot.readString();
        struct.setResource_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tree_path = iprot.readString();
        struct.setTree_pathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resource_url = iprot.readString();
        struct.setResource_urlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parent_id = iprot.readI64();
        struct.setParent_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(7)) {
        struct.api = iprot.readString();
        struct.setApiIsSet(true);
      }
      if (incoming.get(8)) {
        struct.order_value = iprot.readI32();
        struct.setOrder_valueIsSet(true);
      }
    }
  }

}

