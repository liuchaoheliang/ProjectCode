/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 广告位
 * 注 - 已经摒弃使用;新的广告位是 AdLocationVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AdPositionVo implements org.apache.thrift.TBase<AdPositionVo, AdPositionVo._Fields>, java.io.Serializable, Cloneable, Comparable<AdPositionVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdPositionVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TERMINAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("terminalType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POSITION_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionStyle", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POSITION_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionPage", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionPoint", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SIZE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeLimit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnable", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdPositionVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdPositionVoTupleSchemeFactory());
  }

  public long id; // optional
  /**
   * 主键ID 广告位ID
   */
  public String clientId; // optional
  /**
   * 客户端ID
   */
  public String name; // optional
  /**
   * 名称
   */
  public int width; // optional
  /**
   * 宽度
   */
  public int height; // optional
  /**
   * 高度
   */
  public String terminalType; // optional
  /**
   * 终端类型
   */
  public String positionStyle; // optional
  /**
   * 形状
   */
  public String positionPage; // optional
  /**
   * 页面标识
   */
  public int positionPoint; // optional
  /**
   * 页面原点
   */
  public int sizeLimit; // optional
  /**
   * 大小限制 - kb
   */
  public String description; // optional
  /**
   * 描述
   */
  public boolean isEnable; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 主键ID 广告位ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 客户端ID
     */
    NAME((short)3, "name"),
    /**
     * 名称
     */
    WIDTH((short)4, "width"),
    /**
     * 宽度
     */
    HEIGHT((short)5, "height"),
    /**
     * 高度
     */
    TERMINAL_TYPE((short)6, "terminalType"),
    /**
     * 终端类型
     */
    POSITION_STYLE((short)7, "positionStyle"),
    /**
     * 形状
     */
    POSITION_PAGE((short)8, "positionPage"),
    /**
     * 页面标识
     */
    POSITION_POINT((short)9, "positionPoint"),
    /**
     * 页面原点
     */
    SIZE_LIMIT((short)10, "sizeLimit"),
    /**
     * 大小限制 - kb
     */
    DESCRIPTION((short)11, "description"),
    /**
     * 描述
     */
    IS_ENABLE((short)12, "isEnable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // NAME
          return NAME;
        case 4: // WIDTH
          return WIDTH;
        case 5: // HEIGHT
          return HEIGHT;
        case 6: // TERMINAL_TYPE
          return TERMINAL_TYPE;
        case 7: // POSITION_STYLE
          return POSITION_STYLE;
        case 8: // POSITION_PAGE
          return POSITION_PAGE;
        case 9: // POSITION_POINT
          return POSITION_POINT;
        case 10: // SIZE_LIMIT
          return SIZE_LIMIT;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        case 12: // IS_ENABLE
          return IS_ENABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WIDTH_ISSET_ID = 1;
  private static final int __HEIGHT_ISSET_ID = 2;
  private static final int __POSITIONPOINT_ISSET_ID = 3;
  private static final int __SIZELIMIT_ISSET_ID = 4;
  private static final int __ISENABLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.NAME,_Fields.WIDTH,_Fields.HEIGHT,_Fields.TERMINAL_TYPE,_Fields.POSITION_STYLE,_Fields.POSITION_PAGE,_Fields.POSITION_POINT,_Fields.SIZE_LIMIT,_Fields.DESCRIPTION,_Fields.IS_ENABLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TERMINAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("terminalType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_STYLE, new org.apache.thrift.meta_data.FieldMetaData("positionStyle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_PAGE, new org.apache.thrift.meta_data.FieldMetaData("positionPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_POINT, new org.apache.thrift.meta_data.FieldMetaData("positionPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIZE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("sizeLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("isEnable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdPositionVo.class, metaDataMap);
  }

  public AdPositionVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdPositionVo(AdPositionVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.width = other.width;
    this.height = other.height;
    if (other.isSetTerminalType()) {
      this.terminalType = other.terminalType;
    }
    if (other.isSetPositionStyle()) {
      this.positionStyle = other.positionStyle;
    }
    if (other.isSetPositionPage()) {
      this.positionPage = other.positionPage;
    }
    this.positionPoint = other.positionPoint;
    this.sizeLimit = other.sizeLimit;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.isEnable = other.isEnable;
  }

  public AdPositionVo deepCopy() {
    return new AdPositionVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.name = null;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.terminalType = null;
    this.positionStyle = null;
    this.positionPage = null;
    setPositionPointIsSet(false);
    this.positionPoint = 0;
    setSizeLimitIsSet(false);
    this.sizeLimit = 0;
    this.description = null;
    setIsEnableIsSet(false);
    this.isEnable = false;
  }

  public long getId() {
    return this.id;
  }

  public AdPositionVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 主键ID 广告位ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 主键ID 广告位ID
   */
  public AdPositionVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 客户端ID
   */
  public String getName() {
    return this.name;
  }

  /**
   * 客户端ID
   */
  public AdPositionVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 名称
   */
  public int getWidth() {
    return this.width;
  }

  /**
   * 名称
   */
  public AdPositionVo setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  /**
   * 宽度
   */
  public int getHeight() {
    return this.height;
  }

  /**
   * 宽度
   */
  public AdPositionVo setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  /**
   * 高度
   */
  public String getTerminalType() {
    return this.terminalType;
  }

  /**
   * 高度
   */
  public AdPositionVo setTerminalType(String terminalType) {
    this.terminalType = terminalType;
    return this;
  }

  public void unsetTerminalType() {
    this.terminalType = null;
  }

  /** Returns true if field terminalType is set (has been assigned a value) and false otherwise */
  public boolean isSetTerminalType() {
    return this.terminalType != null;
  }

  public void setTerminalTypeIsSet(boolean value) {
    if (!value) {
      this.terminalType = null;
    }
  }

  /**
   * 终端类型
   */
  public String getPositionStyle() {
    return this.positionStyle;
  }

  /**
   * 终端类型
   */
  public AdPositionVo setPositionStyle(String positionStyle) {
    this.positionStyle = positionStyle;
    return this;
  }

  public void unsetPositionStyle() {
    this.positionStyle = null;
  }

  /** Returns true if field positionStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionStyle() {
    return this.positionStyle != null;
  }

  public void setPositionStyleIsSet(boolean value) {
    if (!value) {
      this.positionStyle = null;
    }
  }

  /**
   * 形状
   */
  public String getPositionPage() {
    return this.positionPage;
  }

  /**
   * 形状
   */
  public AdPositionVo setPositionPage(String positionPage) {
    this.positionPage = positionPage;
    return this;
  }

  public void unsetPositionPage() {
    this.positionPage = null;
  }

  /** Returns true if field positionPage is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionPage() {
    return this.positionPage != null;
  }

  public void setPositionPageIsSet(boolean value) {
    if (!value) {
      this.positionPage = null;
    }
  }

  /**
   * 页面标识
   */
  public int getPositionPoint() {
    return this.positionPoint;
  }

  /**
   * 页面标识
   */
  public AdPositionVo setPositionPoint(int positionPoint) {
    this.positionPoint = positionPoint;
    setPositionPointIsSet(true);
    return this;
  }

  public void unsetPositionPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPOINT_ISSET_ID);
  }

  /** Returns true if field positionPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPOINT_ISSET_ID);
  }

  public void setPositionPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPOINT_ISSET_ID, value);
  }

  /**
   * 页面原点
   */
  public int getSizeLimit() {
    return this.sizeLimit;
  }

  /**
   * 页面原点
   */
  public AdPositionVo setSizeLimit(int sizeLimit) {
    this.sizeLimit = sizeLimit;
    setSizeLimitIsSet(true);
    return this;
  }

  public void unsetSizeLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZELIMIT_ISSET_ID);
  }

  /** Returns true if field sizeLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZELIMIT_ISSET_ID);
  }

  public void setSizeLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZELIMIT_ISSET_ID, value);
  }

  /**
   * 大小限制 - kb
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 大小限制 - kb
   */
  public AdPositionVo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 描述
   */
  public boolean isIsEnable() {
    return this.isEnable;
  }

  /**
   * 描述
   */
  public AdPositionVo setIsEnable(boolean isEnable) {
    this.isEnable = isEnable;
    setIsEnableIsSet(true);
    return this;
  }

  public void unsetIsEnable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  /** Returns true if field isEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  public void setIsEnableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case TERMINAL_TYPE:
      if (value == null) {
        unsetTerminalType();
      } else {
        setTerminalType((String)value);
      }
      break;

    case POSITION_STYLE:
      if (value == null) {
        unsetPositionStyle();
      } else {
        setPositionStyle((String)value);
      }
      break;

    case POSITION_PAGE:
      if (value == null) {
        unsetPositionPage();
      } else {
        setPositionPage((String)value);
      }
      break;

    case POSITION_POINT:
      if (value == null) {
        unsetPositionPoint();
      } else {
        setPositionPoint((Integer)value);
      }
      break;

    case SIZE_LIMIT:
      if (value == null) {
        unsetSizeLimit();
      } else {
        setSizeLimit((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IS_ENABLE:
      if (value == null) {
        unsetIsEnable();
      } else {
        setIsEnable((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case NAME:
      return getName();

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case TERMINAL_TYPE:
      return getTerminalType();

    case POSITION_STYLE:
      return getPositionStyle();

    case POSITION_PAGE:
      return getPositionPage();

    case POSITION_POINT:
      return Integer.valueOf(getPositionPoint());

    case SIZE_LIMIT:
      return Integer.valueOf(getSizeLimit());

    case DESCRIPTION:
      return getDescription();

    case IS_ENABLE:
      return Boolean.valueOf(isIsEnable());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case NAME:
      return isSetName();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case TERMINAL_TYPE:
      return isSetTerminalType();
    case POSITION_STYLE:
      return isSetPositionStyle();
    case POSITION_PAGE:
      return isSetPositionPage();
    case POSITION_POINT:
      return isSetPositionPoint();
    case SIZE_LIMIT:
      return isSetSizeLimit();
    case DESCRIPTION:
      return isSetDescription();
    case IS_ENABLE:
      return isSetIsEnable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdPositionVo)
      return this.equals((AdPositionVo)that);
    return false;
  }

  public boolean equals(AdPositionVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_width = true && this.isSetWidth();
    boolean that_present_width = true && that.isSetWidth();
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_terminalType = true && this.isSetTerminalType();
    boolean that_present_terminalType = true && that.isSetTerminalType();
    if (this_present_terminalType || that_present_terminalType) {
      if (!(this_present_terminalType && that_present_terminalType))
        return false;
      if (!this.terminalType.equals(that.terminalType))
        return false;
    }

    boolean this_present_positionStyle = true && this.isSetPositionStyle();
    boolean that_present_positionStyle = true && that.isSetPositionStyle();
    if (this_present_positionStyle || that_present_positionStyle) {
      if (!(this_present_positionStyle && that_present_positionStyle))
        return false;
      if (!this.positionStyle.equals(that.positionStyle))
        return false;
    }

    boolean this_present_positionPage = true && this.isSetPositionPage();
    boolean that_present_positionPage = true && that.isSetPositionPage();
    if (this_present_positionPage || that_present_positionPage) {
      if (!(this_present_positionPage && that_present_positionPage))
        return false;
      if (!this.positionPage.equals(that.positionPage))
        return false;
    }

    boolean this_present_positionPoint = true && this.isSetPositionPoint();
    boolean that_present_positionPoint = true && that.isSetPositionPoint();
    if (this_present_positionPoint || that_present_positionPoint) {
      if (!(this_present_positionPoint && that_present_positionPoint))
        return false;
      if (this.positionPoint != that.positionPoint)
        return false;
    }

    boolean this_present_sizeLimit = true && this.isSetSizeLimit();
    boolean that_present_sizeLimit = true && that.isSetSizeLimit();
    if (this_present_sizeLimit || that_present_sizeLimit) {
      if (!(this_present_sizeLimit && that_present_sizeLimit))
        return false;
      if (this.sizeLimit != that.sizeLimit)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_isEnable = true && this.isSetIsEnable();
    boolean that_present_isEnable = true && that.isSetIsEnable();
    if (this_present_isEnable || that_present_isEnable) {
      if (!(this_present_isEnable && that_present_isEnable))
        return false;
      if (this.isEnable != that.isEnable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_width = true && (isSetWidth());
    list.add(present_width);
    if (present_width)
      list.add(width);

    boolean present_height = true && (isSetHeight());
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_terminalType = true && (isSetTerminalType());
    list.add(present_terminalType);
    if (present_terminalType)
      list.add(terminalType);

    boolean present_positionStyle = true && (isSetPositionStyle());
    list.add(present_positionStyle);
    if (present_positionStyle)
      list.add(positionStyle);

    boolean present_positionPage = true && (isSetPositionPage());
    list.add(present_positionPage);
    if (present_positionPage)
      list.add(positionPage);

    boolean present_positionPoint = true && (isSetPositionPoint());
    list.add(present_positionPoint);
    if (present_positionPoint)
      list.add(positionPoint);

    boolean present_sizeLimit = true && (isSetSizeLimit());
    list.add(present_sizeLimit);
    if (present_sizeLimit)
      list.add(sizeLimit);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_isEnable = true && (isSetIsEnable());
    list.add(present_isEnable);
    if (present_isEnable)
      list.add(isEnable);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdPositionVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerminalType()).compareTo(other.isSetTerminalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerminalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminalType, other.terminalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionStyle()).compareTo(other.isSetPositionStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionStyle, other.positionStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionPage()).compareTo(other.isSetPositionPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionPage, other.positionPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionPoint()).compareTo(other.isSetPositionPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionPoint, other.positionPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeLimit()).compareTo(other.isSetSizeLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeLimit, other.sizeLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnable()).compareTo(other.isSetIsEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnable, other.isEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdPositionVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetWidth()) {
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetTerminalType()) {
      if (!first) sb.append(", ");
      sb.append("terminalType:");
      if (this.terminalType == null) {
        sb.append("null");
      } else {
        sb.append(this.terminalType);
      }
      first = false;
    }
    if (isSetPositionStyle()) {
      if (!first) sb.append(", ");
      sb.append("positionStyle:");
      if (this.positionStyle == null) {
        sb.append("null");
      } else {
        sb.append(this.positionStyle);
      }
      first = false;
    }
    if (isSetPositionPage()) {
      if (!first) sb.append(", ");
      sb.append("positionPage:");
      if (this.positionPage == null) {
        sb.append("null");
      } else {
        sb.append(this.positionPage);
      }
      first = false;
    }
    if (isSetPositionPoint()) {
      if (!first) sb.append(", ");
      sb.append("positionPoint:");
      sb.append(this.positionPoint);
      first = false;
    }
    if (isSetSizeLimit()) {
      if (!first) sb.append(", ");
      sb.append("sizeLimit:");
      sb.append(this.sizeLimit);
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetIsEnable()) {
      if (!first) sb.append(", ");
      sb.append("isEnable:");
      sb.append(this.isEnable);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdPositionVoStandardSchemeFactory implements SchemeFactory {
    public AdPositionVoStandardScheme getScheme() {
      return new AdPositionVoStandardScheme();
    }
  }

  private static class AdPositionVoStandardScheme extends StandardScheme<AdPositionVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdPositionVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TERMINAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.terminalType = iprot.readString();
              struct.setTerminalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSITION_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionStyle = iprot.readString();
              struct.setPositionStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSITION_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionPage = iprot.readString();
              struct.setPositionPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionPoint = iprot.readI32();
              struct.setPositionPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SIZE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sizeLimit = iprot.readI32();
              struct.setSizeLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnable = iprot.readBool();
              struct.setIsEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdPositionVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWidth()) {
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.terminalType != null) {
        if (struct.isSetTerminalType()) {
          oprot.writeFieldBegin(TERMINAL_TYPE_FIELD_DESC);
          oprot.writeString(struct.terminalType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionStyle != null) {
        if (struct.isSetPositionStyle()) {
          oprot.writeFieldBegin(POSITION_STYLE_FIELD_DESC);
          oprot.writeString(struct.positionStyle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionPage != null) {
        if (struct.isSetPositionPage()) {
          oprot.writeFieldBegin(POSITION_PAGE_FIELD_DESC);
          oprot.writeString(struct.positionPage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionPoint()) {
        oprot.writeFieldBegin(POSITION_POINT_FIELD_DESC);
        oprot.writeI32(struct.positionPoint);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSizeLimit()) {
        oprot.writeFieldBegin(SIZE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.sizeLimit);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsEnable()) {
        oprot.writeFieldBegin(IS_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.isEnable);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdPositionVoTupleSchemeFactory implements SchemeFactory {
    public AdPositionVoTupleScheme getScheme() {
      return new AdPositionVoTupleScheme();
    }
  }

  private static class AdPositionVoTupleScheme extends TupleScheme<AdPositionVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdPositionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetWidth()) {
        optionals.set(3);
      }
      if (struct.isSetHeight()) {
        optionals.set(4);
      }
      if (struct.isSetTerminalType()) {
        optionals.set(5);
      }
      if (struct.isSetPositionStyle()) {
        optionals.set(6);
      }
      if (struct.isSetPositionPage()) {
        optionals.set(7);
      }
      if (struct.isSetPositionPoint()) {
        optionals.set(8);
      }
      if (struct.isSetSizeLimit()) {
        optionals.set(9);
      }
      if (struct.isSetDescription()) {
        optionals.set(10);
      }
      if (struct.isSetIsEnable()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetTerminalType()) {
        oprot.writeString(struct.terminalType);
      }
      if (struct.isSetPositionStyle()) {
        oprot.writeString(struct.positionStyle);
      }
      if (struct.isSetPositionPage()) {
        oprot.writeString(struct.positionPage);
      }
      if (struct.isSetPositionPoint()) {
        oprot.writeI32(struct.positionPoint);
      }
      if (struct.isSetSizeLimit()) {
        oprot.writeI32(struct.sizeLimit);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetIsEnable()) {
        oprot.writeBool(struct.isEnable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdPositionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.terminalType = iprot.readString();
        struct.setTerminalTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.positionStyle = iprot.readString();
        struct.setPositionStyleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.positionPage = iprot.readString();
        struct.setPositionPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.positionPoint = iprot.readI32();
        struct.setPositionPointIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sizeLimit = iprot.readI32();
        struct.setSizeLimitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isEnable = iprot.readBool();
        struct.setIsEnableIsSet(true);
      }
    }
  }

}

