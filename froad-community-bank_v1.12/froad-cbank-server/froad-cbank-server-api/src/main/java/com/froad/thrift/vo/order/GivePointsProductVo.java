/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 查询商品送积分明细-商品信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class GivePointsProductVo implements org.apache.thrift.TBase<GivePointsProductVo, GivePointsProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<GivePointsProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GivePointsProductVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GIVE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("givePoints", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField GIVE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("giveState", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GivePointsProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GivePointsProductVoTupleSchemeFactory());
  }

  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 送积分值
   */
  public double givePoints; // required
  /**
   * 送分状态:{"0":"赠送失败"，"1":"已赠送"，"2":"未赠送"，"3":"退分失败"，"4":"退分成功"}
   */
  public String giveState; // required
  /**
   * 送分时间
   */
  public String paymentTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品ID
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 送积分值
     */
    GIVE_POINTS((short)3, "givePoints"),
    /**
     * 送分状态:{"0":"赠送失败"，"1":"已赠送"，"2":"未赠送"，"3":"退分失败"，"4":"退分成功"}
     */
    GIVE_STATE((short)4, "giveState"),
    /**
     * 送分时间
     */
    PAYMENT_TIME((short)5, "paymentTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // GIVE_POINTS
          return GIVE_POINTS;
        case 4: // GIVE_STATE
          return GIVE_STATE;
        case 5: // PAYMENT_TIME
          return PAYMENT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GIVEPOINTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("givePoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GIVE_STATE, new org.apache.thrift.meta_data.FieldMetaData("giveState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GivePointsProductVo.class, metaDataMap);
  }

  public GivePointsProductVo() {
  }

  public GivePointsProductVo(
    String productId,
    String productName,
    double givePoints,
    String giveState,
    String paymentTime)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.givePoints = givePoints;
    setGivePointsIsSet(true);
    this.giveState = giveState;
    this.paymentTime = paymentTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GivePointsProductVo(GivePointsProductVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.givePoints = other.givePoints;
    if (other.isSetGiveState()) {
      this.giveState = other.giveState;
    }
    if (other.isSetPaymentTime()) {
      this.paymentTime = other.paymentTime;
    }
  }

  public GivePointsProductVo deepCopy() {
    return new GivePointsProductVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setGivePointsIsSet(false);
    this.givePoints = 0.0;
    this.giveState = null;
    this.paymentTime = null;
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public GivePointsProductVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public GivePointsProductVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 送积分值
   */
  public double getGivePoints() {
    return this.givePoints;
  }

  /**
   * 送积分值
   */
  public GivePointsProductVo setGivePoints(double givePoints) {
    this.givePoints = givePoints;
    setGivePointsIsSet(true);
    return this;
  }

  public void unsetGivePoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID);
  }

  /** Returns true if field givePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetGivePoints() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID);
  }

  public void setGivePointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID, value);
  }

  /**
   * 送分状态:{"0":"赠送失败"，"1":"已赠送"，"2":"未赠送"，"3":"退分失败"，"4":"退分成功"}
   */
  public String getGiveState() {
    return this.giveState;
  }

  /**
   * 送分状态:{"0":"赠送失败"，"1":"已赠送"，"2":"未赠送"，"3":"退分失败"，"4":"退分成功"}
   */
  public GivePointsProductVo setGiveState(String giveState) {
    this.giveState = giveState;
    return this;
  }

  public void unsetGiveState() {
    this.giveState = null;
  }

  /** Returns true if field giveState is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveState() {
    return this.giveState != null;
  }

  public void setGiveStateIsSet(boolean value) {
    if (!value) {
      this.giveState = null;
    }
  }

  /**
   * 送分时间
   */
  public String getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 送分时间
   */
  public GivePointsProductVo setPaymentTime(String paymentTime) {
    this.paymentTime = paymentTime;
    return this;
  }

  public void unsetPaymentTime() {
    this.paymentTime = null;
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return this.paymentTime != null;
  }

  public void setPaymentTimeIsSet(boolean value) {
    if (!value) {
      this.paymentTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case GIVE_POINTS:
      if (value == null) {
        unsetGivePoints();
      } else {
        setGivePoints((Double)value);
      }
      break;

    case GIVE_STATE:
      if (value == null) {
        unsetGiveState();
      } else {
        setGiveState((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case GIVE_POINTS:
      return Double.valueOf(getGivePoints());

    case GIVE_STATE:
      return getGiveState();

    case PAYMENT_TIME:
      return getPaymentTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case GIVE_POINTS:
      return isSetGivePoints();
    case GIVE_STATE:
      return isSetGiveState();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GivePointsProductVo)
      return this.equals((GivePointsProductVo)that);
    return false;
  }

  public boolean equals(GivePointsProductVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_givePoints = true;
    boolean that_present_givePoints = true;
    if (this_present_givePoints || that_present_givePoints) {
      if (!(this_present_givePoints && that_present_givePoints))
        return false;
      if (this.givePoints != that.givePoints)
        return false;
    }

    boolean this_present_giveState = true && this.isSetGiveState();
    boolean that_present_giveState = true && that.isSetGiveState();
    if (this_present_giveState || that_present_giveState) {
      if (!(this_present_giveState && that_present_giveState))
        return false;
      if (!this.giveState.equals(that.giveState))
        return false;
    }

    boolean this_present_paymentTime = true && this.isSetPaymentTime();
    boolean that_present_paymentTime = true && that.isSetPaymentTime();
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (!this.paymentTime.equals(that.paymentTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_givePoints = true;
    list.add(present_givePoints);
    if (present_givePoints)
      list.add(givePoints);

    boolean present_giveState = true && (isSetGiveState());
    list.add(present_giveState);
    if (present_giveState)
      list.add(giveState);

    boolean present_paymentTime = true && (isSetPaymentTime());
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(GivePointsProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGivePoints()).compareTo(other.isSetGivePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGivePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.givePoints, other.givePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveState()).compareTo(other.isSetGiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveState, other.giveState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GivePointsProductVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("givePoints:");
    sb.append(this.givePoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveState:");
    if (this.giveState == null) {
      sb.append("null");
    } else {
      sb.append(this.giveState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    if (this.paymentTime == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GivePointsProductVoStandardSchemeFactory implements SchemeFactory {
    public GivePointsProductVoStandardScheme getScheme() {
      return new GivePointsProductVoStandardScheme();
    }
  }

  private static class GivePointsProductVoStandardScheme extends StandardScheme<GivePointsProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GivePointsProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIVE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.givePoints = iprot.readDouble();
              struct.setGivePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GIVE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveState = iprot.readString();
              struct.setGiveStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentTime = iprot.readString();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GivePointsProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.givePoints);
      oprot.writeFieldEnd();
      if (struct.giveState != null) {
        oprot.writeFieldBegin(GIVE_STATE_FIELD_DESC);
        oprot.writeString(struct.giveState);
        oprot.writeFieldEnd();
      }
      if (struct.paymentTime != null) {
        oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
        oprot.writeString(struct.paymentTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GivePointsProductVoTupleSchemeFactory implements SchemeFactory {
    public GivePointsProductVoTupleScheme getScheme() {
      return new GivePointsProductVoTupleScheme();
    }
  }

  private static class GivePointsProductVoTupleScheme extends TupleScheme<GivePointsProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GivePointsProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetGivePoints()) {
        optionals.set(2);
      }
      if (struct.isSetGiveState()) {
        optionals.set(3);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetGivePoints()) {
        oprot.writeDouble(struct.givePoints);
      }
      if (struct.isSetGiveState()) {
        oprot.writeString(struct.giveState);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeString(struct.paymentTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GivePointsProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.givePoints = iprot.readDouble();
        struct.setGivePointsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.giveState = iprot.readString();
        struct.setGiveStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paymentTime = iprot.readString();
        struct.setPaymentTimeIsSet(true);
      }
    }
  }

}

