/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.ticket;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 验券请求VO(相同商品合并成一个)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class TicketVerifyOfMergerRequestVo implements org.apache.thrift.TBase<TicketVerifyOfMergerRequestVo, TicketVerifyOfMergerRequestVo._Fields>, java.io.Serializable, Cloneable, Comparable<TicketVerifyOfMergerRequestVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TicketVerifyOfMergerRequestVo");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MUST_VALID_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mustValidTicketId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TICKET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TicketVerifyOfMergerRequestVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TicketVerifyOfMergerRequestVoTupleSchemeFactory());
  }

  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 消费门店ID
   */
  public String outletId; // required
  /**
   * 消费门店名称
   */
  public String outletName; // required
  /**
   * 机构号
   */
  public String orgCode; // required
  /**
   * 商户操作员名字
   */
  public String merchantUserName; // required
  /**
   * 提货人编号
   */
  public String memberCode; // required
  /**
   * 子订单id
   */
  public String subOrderId; // required
  /**
   * 必须要验证的券号(客户提供给门店操作员的券号)
   */
  public String mustValidTicketId; // required
  /**
   * 券ID列表
   */
  public List<TicketSummaryVo> ticketList; // required
  /**
   * 操作来源
   */
  public com.froad.thrift.vo.OriginVo originVo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商户ID
     */
    MERCHANT_ID((short)1, "merchantId"),
    /**
     * 消费门店ID
     */
    OUTLET_ID((short)2, "outletId"),
    /**
     * 消费门店名称
     */
    OUTLET_NAME((short)3, "outletName"),
    /**
     * 机构号
     */
    ORG_CODE((short)4, "orgCode"),
    /**
     * 商户操作员名字
     */
    MERCHANT_USER_NAME((short)5, "merchantUserName"),
    /**
     * 提货人编号
     */
    MEMBER_CODE((short)6, "memberCode"),
    /**
     * 子订单id
     */
    SUB_ORDER_ID((short)7, "subOrderId"),
    /**
     * 必须要验证的券号(客户提供给门店操作员的券号)
     */
    MUST_VALID_TICKET_ID((short)8, "mustValidTicketId"),
    /**
     * 券ID列表
     */
    TICKET_LIST((short)9, "ticketList"),
    /**
     * 操作来源
     */
    ORIGIN_VO((short)10, "originVo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // OUTLET_ID
          return OUTLET_ID;
        case 3: // OUTLET_NAME
          return OUTLET_NAME;
        case 4: // ORG_CODE
          return ORG_CODE;
        case 5: // MERCHANT_USER_NAME
          return MERCHANT_USER_NAME;
        case 6: // MEMBER_CODE
          return MEMBER_CODE;
        case 7: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 8: // MUST_VALID_TICKET_ID
          return MUST_VALID_TICKET_ID;
        case 9: // TICKET_LIST
          return TICKET_LIST;
        case 10: // ORIGIN_VO
          return ORIGIN_VO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUST_VALID_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("mustValidTicketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_LIST, new org.apache.thrift.meta_data.FieldMetaData("ticketList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicketSummaryVo.class))));
    tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TicketVerifyOfMergerRequestVo.class, metaDataMap);
  }

  public TicketVerifyOfMergerRequestVo() {
  }

  public TicketVerifyOfMergerRequestVo(
    String merchantId,
    String outletId,
    String outletName,
    String orgCode,
    String merchantUserName,
    String memberCode,
    String subOrderId,
    String mustValidTicketId,
    List<TicketSummaryVo> ticketList,
    com.froad.thrift.vo.OriginVo originVo)
  {
    this();
    this.merchantId = merchantId;
    this.outletId = outletId;
    this.outletName = outletName;
    this.orgCode = orgCode;
    this.merchantUserName = merchantUserName;
    this.memberCode = memberCode;
    this.subOrderId = subOrderId;
    this.mustValidTicketId = mustValidTicketId;
    this.ticketList = ticketList;
    this.originVo = originVo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TicketVerifyOfMergerRequestVo(TicketVerifyOfMergerRequestVo other) {
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetMerchantUserName()) {
      this.merchantUserName = other.merchantUserName;
    }
    if (other.isSetMemberCode()) {
      this.memberCode = other.memberCode;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetMustValidTicketId()) {
      this.mustValidTicketId = other.mustValidTicketId;
    }
    if (other.isSetTicketList()) {
      List<TicketSummaryVo> __this__ticketList = new ArrayList<TicketSummaryVo>(other.ticketList.size());
      for (TicketSummaryVo other_element : other.ticketList) {
        __this__ticketList.add(new TicketSummaryVo(other_element));
      }
      this.ticketList = __this__ticketList;
    }
    if (other.isSetOriginVo()) {
      this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
    }
  }

  public TicketVerifyOfMergerRequestVo deepCopy() {
    return new TicketVerifyOfMergerRequestVo(this);
  }

  @Override
  public void clear() {
    this.merchantId = null;
    this.outletId = null;
    this.outletName = null;
    this.orgCode = null;
    this.merchantUserName = null;
    this.memberCode = null;
    this.subOrderId = null;
    this.mustValidTicketId = null;
    this.ticketList = null;
    this.originVo = null;
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public TicketVerifyOfMergerRequestVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 消费门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 消费门店ID
   */
  public TicketVerifyOfMergerRequestVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 消费门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 消费门店名称
   */
  public TicketVerifyOfMergerRequestVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 机构号
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号
   */
  public TicketVerifyOfMergerRequestVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 商户操作员名字
   */
  public String getMerchantUserName() {
    return this.merchantUserName;
  }

  /**
   * 商户操作员名字
   */
  public TicketVerifyOfMergerRequestVo setMerchantUserName(String merchantUserName) {
    this.merchantUserName = merchantUserName;
    return this;
  }

  public void unsetMerchantUserName() {
    this.merchantUserName = null;
  }

  /** Returns true if field merchantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserName() {
    return this.merchantUserName != null;
  }

  public void setMerchantUserNameIsSet(boolean value) {
    if (!value) {
      this.merchantUserName = null;
    }
  }

  /**
   * 提货人编号
   */
  public String getMemberCode() {
    return this.memberCode;
  }

  /**
   * 提货人编号
   */
  public TicketVerifyOfMergerRequestVo setMemberCode(String memberCode) {
    this.memberCode = memberCode;
    return this;
  }

  public void unsetMemberCode() {
    this.memberCode = null;
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return this.memberCode != null;
  }

  public void setMemberCodeIsSet(boolean value) {
    if (!value) {
      this.memberCode = null;
    }
  }

  /**
   * 子订单id
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单id
   */
  public TicketVerifyOfMergerRequestVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 必须要验证的券号(客户提供给门店操作员的券号)
   */
  public String getMustValidTicketId() {
    return this.mustValidTicketId;
  }

  /**
   * 必须要验证的券号(客户提供给门店操作员的券号)
   */
  public TicketVerifyOfMergerRequestVo setMustValidTicketId(String mustValidTicketId) {
    this.mustValidTicketId = mustValidTicketId;
    return this;
  }

  public void unsetMustValidTicketId() {
    this.mustValidTicketId = null;
  }

  /** Returns true if field mustValidTicketId is set (has been assigned a value) and false otherwise */
  public boolean isSetMustValidTicketId() {
    return this.mustValidTicketId != null;
  }

  public void setMustValidTicketIdIsSet(boolean value) {
    if (!value) {
      this.mustValidTicketId = null;
    }
  }

  public int getTicketListSize() {
    return (this.ticketList == null) ? 0 : this.ticketList.size();
  }

  public java.util.Iterator<TicketSummaryVo> getTicketListIterator() {
    return (this.ticketList == null) ? null : this.ticketList.iterator();
  }

  public void addToTicketList(TicketSummaryVo elem) {
    if (this.ticketList == null) {
      this.ticketList = new ArrayList<TicketSummaryVo>();
    }
    this.ticketList.add(elem);
  }

  /**
   * 券ID列表
   */
  public List<TicketSummaryVo> getTicketList() {
    return this.ticketList;
  }

  /**
   * 券ID列表
   */
  public TicketVerifyOfMergerRequestVo setTicketList(List<TicketSummaryVo> ticketList) {
    this.ticketList = ticketList;
    return this;
  }

  public void unsetTicketList() {
    this.ticketList = null;
  }

  /** Returns true if field ticketList is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketList() {
    return this.ticketList != null;
  }

  public void setTicketListIsSet(boolean value) {
    if (!value) {
      this.ticketList = null;
    }
  }

  /**
   * 操作来源
   */
  public com.froad.thrift.vo.OriginVo getOriginVo() {
    return this.originVo;
  }

  /**
   * 操作来源
   */
  public TicketVerifyOfMergerRequestVo setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
    this.originVo = originVo;
    return this;
  }

  public void unsetOriginVo() {
    this.originVo = null;
  }

  /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginVo() {
    return this.originVo != null;
  }

  public void setOriginVoIsSet(boolean value) {
    if (!value) {
      this.originVo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case MERCHANT_USER_NAME:
      if (value == null) {
        unsetMerchantUserName();
      } else {
        setMerchantUserName((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case MUST_VALID_TICKET_ID:
      if (value == null) {
        unsetMustValidTicketId();
      } else {
        setMustValidTicketId((String)value);
      }
      break;

    case TICKET_LIST:
      if (value == null) {
        unsetTicketList();
      } else {
        setTicketList((List<TicketSummaryVo>)value);
      }
      break;

    case ORIGIN_VO:
      if (value == null) {
        unsetOriginVo();
      } else {
        setOriginVo((com.froad.thrift.vo.OriginVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case ORG_CODE:
      return getOrgCode();

    case MERCHANT_USER_NAME:
      return getMerchantUserName();

    case MEMBER_CODE:
      return getMemberCode();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case MUST_VALID_TICKET_ID:
      return getMustValidTicketId();

    case TICKET_LIST:
      return getTicketList();

    case ORIGIN_VO:
      return getOriginVo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case ORG_CODE:
      return isSetOrgCode();
    case MERCHANT_USER_NAME:
      return isSetMerchantUserName();
    case MEMBER_CODE:
      return isSetMemberCode();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case MUST_VALID_TICKET_ID:
      return isSetMustValidTicketId();
    case TICKET_LIST:
      return isSetTicketList();
    case ORIGIN_VO:
      return isSetOriginVo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TicketVerifyOfMergerRequestVo)
      return this.equals((TicketVerifyOfMergerRequestVo)that);
    return false;
  }

  public boolean equals(TicketVerifyOfMergerRequestVo that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_merchantUserName = true && this.isSetMerchantUserName();
    boolean that_present_merchantUserName = true && that.isSetMerchantUserName();
    if (this_present_merchantUserName || that_present_merchantUserName) {
      if (!(this_present_merchantUserName && that_present_merchantUserName))
        return false;
      if (!this.merchantUserName.equals(that.merchantUserName))
        return false;
    }

    boolean this_present_memberCode = true && this.isSetMemberCode();
    boolean that_present_memberCode = true && that.isSetMemberCode();
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (!this.memberCode.equals(that.memberCode))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_mustValidTicketId = true && this.isSetMustValidTicketId();
    boolean that_present_mustValidTicketId = true && that.isSetMustValidTicketId();
    if (this_present_mustValidTicketId || that_present_mustValidTicketId) {
      if (!(this_present_mustValidTicketId && that_present_mustValidTicketId))
        return false;
      if (!this.mustValidTicketId.equals(that.mustValidTicketId))
        return false;
    }

    boolean this_present_ticketList = true && this.isSetTicketList();
    boolean that_present_ticketList = true && that.isSetTicketList();
    if (this_present_ticketList || that_present_ticketList) {
      if (!(this_present_ticketList && that_present_ticketList))
        return false;
      if (!this.ticketList.equals(that.ticketList))
        return false;
    }

    boolean this_present_originVo = true && this.isSetOriginVo();
    boolean that_present_originVo = true && that.isSetOriginVo();
    if (this_present_originVo || that_present_originVo) {
      if (!(this_present_originVo && that_present_originVo))
        return false;
      if (!this.originVo.equals(that.originVo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_merchantUserName = true && (isSetMerchantUserName());
    list.add(present_merchantUserName);
    if (present_merchantUserName)
      list.add(merchantUserName);

    boolean present_memberCode = true && (isSetMemberCode());
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_mustValidTicketId = true && (isSetMustValidTicketId());
    list.add(present_mustValidTicketId);
    if (present_mustValidTicketId)
      list.add(mustValidTicketId);

    boolean present_ticketList = true && (isSetTicketList());
    list.add(present_ticketList);
    if (present_ticketList)
      list.add(ticketList);

    boolean present_originVo = true && (isSetOriginVo());
    list.add(present_originVo);
    if (present_originVo)
      list.add(originVo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TicketVerifyOfMergerRequestVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserName()).compareTo(other.isSetMerchantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserName, other.merchantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMustValidTicketId()).compareTo(other.isSetMustValidTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMustValidTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mustValidTicketId, other.mustValidTicketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketList()).compareTo(other.isSetTicketList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketList, other.ticketList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TicketVerifyOfMergerRequestVo(");
    boolean first = true;

    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserName:");
    if (this.merchantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    if (this.memberCode == null) {
      sb.append("null");
    } else {
      sb.append(this.memberCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mustValidTicketId:");
    if (this.mustValidTicketId == null) {
      sb.append("null");
    } else {
      sb.append(this.mustValidTicketId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketList:");
    if (this.ticketList == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originVo:");
    if (this.originVo == null) {
      sb.append("null");
    } else {
      sb.append(this.originVo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (originVo != null) {
      originVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TicketVerifyOfMergerRequestVoStandardSchemeFactory implements SchemeFactory {
    public TicketVerifyOfMergerRequestVoStandardScheme getScheme() {
      return new TicketVerifyOfMergerRequestVoStandardScheme();
    }
  }

  private static class TicketVerifyOfMergerRequestVoStandardScheme extends StandardScheme<TicketVerifyOfMergerRequestVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TicketVerifyOfMergerRequestVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERCHANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantUserName = iprot.readString();
              struct.setMerchantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberCode = iprot.readString();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MUST_VALID_TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mustValidTicketId = iprot.readString();
              struct.setMustValidTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICKET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.ticketList = new ArrayList<TicketSummaryVo>(_list8.size);
                TicketSummaryVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TicketSummaryVo();
                  _elem9.read(iprot);
                  struct.ticketList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTicketListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORIGIN_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.originVo = new com.froad.thrift.vo.OriginVo();
              struct.originVo.read(iprot);
              struct.setOriginVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TicketVerifyOfMergerRequestVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.merchantUserName != null) {
        oprot.writeFieldBegin(MERCHANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantUserName);
        oprot.writeFieldEnd();
      }
      if (struct.memberCode != null) {
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeString(struct.memberCode);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.mustValidTicketId != null) {
        oprot.writeFieldBegin(MUST_VALID_TICKET_ID_FIELD_DESC);
        oprot.writeString(struct.mustValidTicketId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketList != null) {
        oprot.writeFieldBegin(TICKET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ticketList.size()));
          for (TicketSummaryVo _iter11 : struct.ticketList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.originVo != null) {
        oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
        struct.originVo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicketVerifyOfMergerRequestVoTupleSchemeFactory implements SchemeFactory {
    public TicketVerifyOfMergerRequestVoTupleScheme getScheme() {
      return new TicketVerifyOfMergerRequestVoTupleScheme();
    }
  }

  private static class TicketVerifyOfMergerRequestVoTupleScheme extends TupleScheme<TicketVerifyOfMergerRequestVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TicketVerifyOfMergerRequestVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetOutletId()) {
        optionals.set(1);
      }
      if (struct.isSetOutletName()) {
        optionals.set(2);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(3);
      }
      if (struct.isSetMerchantUserName()) {
        optionals.set(4);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(5);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(6);
      }
      if (struct.isSetMustValidTicketId()) {
        optionals.set(7);
      }
      if (struct.isSetTicketList()) {
        optionals.set(8);
      }
      if (struct.isSetOriginVo()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetMerchantUserName()) {
        oprot.writeString(struct.merchantUserName);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeString(struct.memberCode);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetMustValidTicketId()) {
        oprot.writeString(struct.mustValidTicketId);
      }
      if (struct.isSetTicketList()) {
        {
          oprot.writeI32(struct.ticketList.size());
          for (TicketSummaryVo _iter12 : struct.ticketList)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetOriginVo()) {
        struct.originVo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TicketVerifyOfMergerRequestVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merchantUserName = iprot.readString();
        struct.setMerchantUserNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memberCode = iprot.readString();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mustValidTicketId = iprot.readString();
        struct.setMustValidTicketIdIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ticketList = new ArrayList<TicketSummaryVo>(_list13.size);
          TicketSummaryVo _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TicketSummaryVo();
            _elem14.read(iprot);
            struct.ticketList.add(_elem14);
          }
        }
        struct.setTicketListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.originVo = new com.froad.thrift.vo.OriginVo();
        struct.originVo.read(iprot);
        struct.setOriginVoIsSet(true);
      }
    }
  }

}

