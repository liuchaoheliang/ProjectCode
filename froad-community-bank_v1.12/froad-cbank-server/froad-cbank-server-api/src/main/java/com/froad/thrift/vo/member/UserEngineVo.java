/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class UserEngineVo implements org.apache.thrift.TBase<UserEngineVo, UserEngineVo._Fields>, java.io.Serializable, Cloneable, Comparable<UserEngineVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserEngineVo");

  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("registerIP", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("createChannel", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FROAD_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("froadPoints", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FROAD_EXCHAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("froadExchageRate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoints", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BANK_EXCHAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankExchageRate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uname", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField INTRODUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("introducer", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("bankDesc", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MOBILE_ENCRYPT_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileEncrypt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("receiver", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField MSG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgCode", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("demo", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField MEMBER_OAUTH_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("memberOauthDto", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserEngineVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserEngineVoTupleSchemeFactory());
  }

  public long memberCode; // required
  public String loginID; // required
  public String loginPwd; // required
  public String email; // required
  public long status; // required
  public String registerIP; // required
  public String mobile; // required
  public String createChannel; // required
  public String froadPoints; // required
  public String froadExchageRate; // required
  public String bankPoints; // required
  public String bankExchageRate; // required
  public String uname; // required
  public String introducer; // required
  public String bankDesc; // required
  public String mobileEncrypt; // required
  public List<ReceiverVo> receiver; // required
  public boolean result; // required
  public long msgCode; // required
  public String errorMsg; // required
  public String demo; // required
  public MemberOauthVo memberOauthDto; // required
  public long createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMBER_CODE((short)1, "memberCode"),
    LOGIN_ID((short)2, "loginID"),
    LOGIN_PWD((short)3, "loginPwd"),
    EMAIL((short)4, "email"),
    STATUS((short)5, "status"),
    REGISTER_IP((short)6, "registerIP"),
    MOBILE((short)7, "mobile"),
    CREATE_CHANNEL((short)8, "createChannel"),
    FROAD_POINTS((short)9, "froadPoints"),
    FROAD_EXCHAGE_RATE((short)10, "froadExchageRate"),
    BANK_POINTS((short)11, "bankPoints"),
    BANK_EXCHAGE_RATE((short)12, "bankExchageRate"),
    UNAME((short)13, "uname"),
    INTRODUCER((short)14, "introducer"),
    BANK_DESC((short)15, "bankDesc"),
    MOBILE_ENCRYPT((short)16, "mobileEncrypt"),
    RECEIVER((short)17, "receiver"),
    RESULT((short)18, "result"),
    MSG_CODE((short)19, "msgCode"),
    ERROR_MSG((short)20, "errorMsg"),
    DEMO((short)21, "demo"),
    MEMBER_OAUTH_DTO((short)22, "memberOauthDto"),
    CREATE_TIME((short)23, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_CODE
          return MEMBER_CODE;
        case 2: // LOGIN_ID
          return LOGIN_ID;
        case 3: // LOGIN_PWD
          return LOGIN_PWD;
        case 4: // EMAIL
          return EMAIL;
        case 5: // STATUS
          return STATUS;
        case 6: // REGISTER_IP
          return REGISTER_IP;
        case 7: // MOBILE
          return MOBILE;
        case 8: // CREATE_CHANNEL
          return CREATE_CHANNEL;
        case 9: // FROAD_POINTS
          return FROAD_POINTS;
        case 10: // FROAD_EXCHAGE_RATE
          return FROAD_EXCHAGE_RATE;
        case 11: // BANK_POINTS
          return BANK_POINTS;
        case 12: // BANK_EXCHAGE_RATE
          return BANK_EXCHAGE_RATE;
        case 13: // UNAME
          return UNAME;
        case 14: // INTRODUCER
          return INTRODUCER;
        case 15: // BANK_DESC
          return BANK_DESC;
        case 16: // MOBILE_ENCRYPT
          return MOBILE_ENCRYPT;
        case 17: // RECEIVER
          return RECEIVER;
        case 18: // RESULT
          return RESULT;
        case 19: // MSG_CODE
          return MSG_CODE;
        case 20: // ERROR_MSG
          return ERROR_MSG;
        case 21: // DEMO
          return DEMO;
        case 22: // MEMBER_OAUTH_DTO
          return MEMBER_OAUTH_DTO;
        case 23: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __RESULT_ISSET_ID = 2;
  private static final int __MSGCODE_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PWD, new org.apache.thrift.meta_data.FieldMetaData("loginPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("registerIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("createChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROAD_POINTS, new org.apache.thrift.meta_data.FieldMetaData("froadPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROAD_EXCHAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("froadExchageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_POINTS, new org.apache.thrift.meta_data.FieldMetaData("bankPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_EXCHAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("bankExchageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNAME, new org.apache.thrift.meta_data.FieldMetaData("uname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCER, new org.apache.thrift.meta_data.FieldMetaData("introducer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_DESC, new org.apache.thrift.meta_data.FieldMetaData("bankDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_ENCRYPT, new org.apache.thrift.meta_data.FieldMetaData("mobileEncrypt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVER, new org.apache.thrift.meta_data.FieldMetaData("receiver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ReceiverVo"))));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MSG_CODE, new org.apache.thrift.meta_data.FieldMetaData("msgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEMO, new org.apache.thrift.meta_data.FieldMetaData("demo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_OAUTH_DTO, new org.apache.thrift.meta_data.FieldMetaData("memberOauthDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MemberOauthVo")));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserEngineVo.class, metaDataMap);
  }

  public UserEngineVo() {
  }

  public UserEngineVo(
    long memberCode,
    String loginID,
    String loginPwd,
    String email,
    long status,
    String registerIP,
    String mobile,
    String createChannel,
    String froadPoints,
    String froadExchageRate,
    String bankPoints,
    String bankExchageRate,
    String uname,
    String introducer,
    String bankDesc,
    String mobileEncrypt,
    List<ReceiverVo> receiver,
    boolean result,
    long msgCode,
    String errorMsg,
    String demo,
    MemberOauthVo memberOauthDto,
    long createTime)
  {
    this();
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.loginID = loginID;
    this.loginPwd = loginPwd;
    this.email = email;
    this.status = status;
    setStatusIsSet(true);
    this.registerIP = registerIP;
    this.mobile = mobile;
    this.createChannel = createChannel;
    this.froadPoints = froadPoints;
    this.froadExchageRate = froadExchageRate;
    this.bankPoints = bankPoints;
    this.bankExchageRate = bankExchageRate;
    this.uname = uname;
    this.introducer = introducer;
    this.bankDesc = bankDesc;
    this.mobileEncrypt = mobileEncrypt;
    this.receiver = receiver;
    this.result = result;
    setResultIsSet(true);
    this.msgCode = msgCode;
    setMsgCodeIsSet(true);
    this.errorMsg = errorMsg;
    this.demo = demo;
    this.memberOauthDto = memberOauthDto;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserEngineVo(UserEngineVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memberCode = other.memberCode;
    if (other.isSetLoginID()) {
      this.loginID = other.loginID;
    }
    if (other.isSetLoginPwd()) {
      this.loginPwd = other.loginPwd;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.status = other.status;
    if (other.isSetRegisterIP()) {
      this.registerIP = other.registerIP;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCreateChannel()) {
      this.createChannel = other.createChannel;
    }
    if (other.isSetFroadPoints()) {
      this.froadPoints = other.froadPoints;
    }
    if (other.isSetFroadExchageRate()) {
      this.froadExchageRate = other.froadExchageRate;
    }
    if (other.isSetBankPoints()) {
      this.bankPoints = other.bankPoints;
    }
    if (other.isSetBankExchageRate()) {
      this.bankExchageRate = other.bankExchageRate;
    }
    if (other.isSetUname()) {
      this.uname = other.uname;
    }
    if (other.isSetIntroducer()) {
      this.introducer = other.introducer;
    }
    if (other.isSetBankDesc()) {
      this.bankDesc = other.bankDesc;
    }
    if (other.isSetMobileEncrypt()) {
      this.mobileEncrypt = other.mobileEncrypt;
    }
    if (other.isSetReceiver()) {
      List<ReceiverVo> __this__receiver = new ArrayList<ReceiverVo>(other.receiver.size());
      for (ReceiverVo other_element : other.receiver) {
        __this__receiver.add(other_element);
      }
      this.receiver = __this__receiver;
    }
    this.result = other.result;
    this.msgCode = other.msgCode;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    if (other.isSetDemo()) {
      this.demo = other.demo;
    }
    if (other.isSetMemberOauthDto()) {
      this.memberOauthDto = other.memberOauthDto;
    }
    this.createTime = other.createTime;
  }

  public UserEngineVo deepCopy() {
    return new UserEngineVo(this);
  }

  @Override
  public void clear() {
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.loginID = null;
    this.loginPwd = null;
    this.email = null;
    setStatusIsSet(false);
    this.status = 0;
    this.registerIP = null;
    this.mobile = null;
    this.createChannel = null;
    this.froadPoints = null;
    this.froadExchageRate = null;
    this.bankPoints = null;
    this.bankExchageRate = null;
    this.uname = null;
    this.introducer = null;
    this.bankDesc = null;
    this.mobileEncrypt = null;
    this.receiver = null;
    setResultIsSet(false);
    this.result = false;
    setMsgCodeIsSet(false);
    this.msgCode = 0;
    this.errorMsg = null;
    this.demo = null;
    this.memberOauthDto = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public long getMemberCode() {
    return this.memberCode;
  }

  public UserEngineVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  public String getLoginID() {
    return this.loginID;
  }

  public UserEngineVo setLoginID(String loginID) {
    this.loginID = loginID;
    return this;
  }

  public void unsetLoginID() {
    this.loginID = null;
  }

  /** Returns true if field loginID is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginID() {
    return this.loginID != null;
  }

  public void setLoginIDIsSet(boolean value) {
    if (!value) {
      this.loginID = null;
    }
  }

  public String getLoginPwd() {
    return this.loginPwd;
  }

  public UserEngineVo setLoginPwd(String loginPwd) {
    this.loginPwd = loginPwd;
    return this;
  }

  public void unsetLoginPwd() {
    this.loginPwd = null;
  }

  /** Returns true if field loginPwd is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPwd() {
    return this.loginPwd != null;
  }

  public void setLoginPwdIsSet(boolean value) {
    if (!value) {
      this.loginPwd = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserEngineVo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public long getStatus() {
    return this.status;
  }

  public UserEngineVo setStatus(long status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRegisterIP() {
    return this.registerIP;
  }

  public UserEngineVo setRegisterIP(String registerIP) {
    this.registerIP = registerIP;
    return this;
  }

  public void unsetRegisterIP() {
    this.registerIP = null;
  }

  /** Returns true if field registerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterIP() {
    return this.registerIP != null;
  }

  public void setRegisterIPIsSet(boolean value) {
    if (!value) {
      this.registerIP = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public UserEngineVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getCreateChannel() {
    return this.createChannel;
  }

  public UserEngineVo setCreateChannel(String createChannel) {
    this.createChannel = createChannel;
    return this;
  }

  public void unsetCreateChannel() {
    this.createChannel = null;
  }

  /** Returns true if field createChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateChannel() {
    return this.createChannel != null;
  }

  public void setCreateChannelIsSet(boolean value) {
    if (!value) {
      this.createChannel = null;
    }
  }

  public String getFroadPoints() {
    return this.froadPoints;
  }

  public UserEngineVo setFroadPoints(String froadPoints) {
    this.froadPoints = froadPoints;
    return this;
  }

  public void unsetFroadPoints() {
    this.froadPoints = null;
  }

  /** Returns true if field froadPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetFroadPoints() {
    return this.froadPoints != null;
  }

  public void setFroadPointsIsSet(boolean value) {
    if (!value) {
      this.froadPoints = null;
    }
  }

  public String getFroadExchageRate() {
    return this.froadExchageRate;
  }

  public UserEngineVo setFroadExchageRate(String froadExchageRate) {
    this.froadExchageRate = froadExchageRate;
    return this;
  }

  public void unsetFroadExchageRate() {
    this.froadExchageRate = null;
  }

  /** Returns true if field froadExchageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFroadExchageRate() {
    return this.froadExchageRate != null;
  }

  public void setFroadExchageRateIsSet(boolean value) {
    if (!value) {
      this.froadExchageRate = null;
    }
  }

  public String getBankPoints() {
    return this.bankPoints;
  }

  public UserEngineVo setBankPoints(String bankPoints) {
    this.bankPoints = bankPoints;
    return this;
  }

  public void unsetBankPoints() {
    this.bankPoints = null;
  }

  /** Returns true if field bankPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoints() {
    return this.bankPoints != null;
  }

  public void setBankPointsIsSet(boolean value) {
    if (!value) {
      this.bankPoints = null;
    }
  }

  public String getBankExchageRate() {
    return this.bankExchageRate;
  }

  public UserEngineVo setBankExchageRate(String bankExchageRate) {
    this.bankExchageRate = bankExchageRate;
    return this;
  }

  public void unsetBankExchageRate() {
    this.bankExchageRate = null;
  }

  /** Returns true if field bankExchageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBankExchageRate() {
    return this.bankExchageRate != null;
  }

  public void setBankExchageRateIsSet(boolean value) {
    if (!value) {
      this.bankExchageRate = null;
    }
  }

  public String getUname() {
    return this.uname;
  }

  public UserEngineVo setUname(String uname) {
    this.uname = uname;
    return this;
  }

  public void unsetUname() {
    this.uname = null;
  }

  /** Returns true if field uname is set (has been assigned a value) and false otherwise */
  public boolean isSetUname() {
    return this.uname != null;
  }

  public void setUnameIsSet(boolean value) {
    if (!value) {
      this.uname = null;
    }
  }

  public String getIntroducer() {
    return this.introducer;
  }

  public UserEngineVo setIntroducer(String introducer) {
    this.introducer = introducer;
    return this;
  }

  public void unsetIntroducer() {
    this.introducer = null;
  }

  /** Returns true if field introducer is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroducer() {
    return this.introducer != null;
  }

  public void setIntroducerIsSet(boolean value) {
    if (!value) {
      this.introducer = null;
    }
  }

  public String getBankDesc() {
    return this.bankDesc;
  }

  public UserEngineVo setBankDesc(String bankDesc) {
    this.bankDesc = bankDesc;
    return this;
  }

  public void unsetBankDesc() {
    this.bankDesc = null;
  }

  /** Returns true if field bankDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetBankDesc() {
    return this.bankDesc != null;
  }

  public void setBankDescIsSet(boolean value) {
    if (!value) {
      this.bankDesc = null;
    }
  }

  public String getMobileEncrypt() {
    return this.mobileEncrypt;
  }

  public UserEngineVo setMobileEncrypt(String mobileEncrypt) {
    this.mobileEncrypt = mobileEncrypt;
    return this;
  }

  public void unsetMobileEncrypt() {
    this.mobileEncrypt = null;
  }

  /** Returns true if field mobileEncrypt is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileEncrypt() {
    return this.mobileEncrypt != null;
  }

  public void setMobileEncryptIsSet(boolean value) {
    if (!value) {
      this.mobileEncrypt = null;
    }
  }

  public int getReceiverSize() {
    return (this.receiver == null) ? 0 : this.receiver.size();
  }

  public java.util.Iterator<ReceiverVo> getReceiverIterator() {
    return (this.receiver == null) ? null : this.receiver.iterator();
  }

  public void addToReceiver(ReceiverVo elem) {
    if (this.receiver == null) {
      this.receiver = new ArrayList<ReceiverVo>();
    }
    this.receiver.add(elem);
  }

  public List<ReceiverVo> getReceiver() {
    return this.receiver;
  }

  public UserEngineVo setReceiver(List<ReceiverVo> receiver) {
    this.receiver = receiver;
    return this;
  }

  public void unsetReceiver() {
    this.receiver = null;
  }

  /** Returns true if field receiver is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiver() {
    return this.receiver != null;
  }

  public void setReceiverIsSet(boolean value) {
    if (!value) {
      this.receiver = null;
    }
  }

  public boolean isResult() {
    return this.result;
  }

  public UserEngineVo setResult(boolean result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public long getMsgCode() {
    return this.msgCode;
  }

  public UserEngineVo setMsgCode(long msgCode) {
    this.msgCode = msgCode;
    setMsgCodeIsSet(true);
    return this;
  }

  public void unsetMsgCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGCODE_ISSET_ID);
  }

  /** Returns true if field msgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGCODE_ISSET_ID);
  }

  public void setMsgCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGCODE_ISSET_ID, value);
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public UserEngineVo setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public String getDemo() {
    return this.demo;
  }

  public UserEngineVo setDemo(String demo) {
    this.demo = demo;
    return this;
  }

  public void unsetDemo() {
    this.demo = null;
  }

  /** Returns true if field demo is set (has been assigned a value) and false otherwise */
  public boolean isSetDemo() {
    return this.demo != null;
  }

  public void setDemoIsSet(boolean value) {
    if (!value) {
      this.demo = null;
    }
  }

  public MemberOauthVo getMemberOauthDto() {
    return this.memberOauthDto;
  }

  public UserEngineVo setMemberOauthDto(MemberOauthVo memberOauthDto) {
    this.memberOauthDto = memberOauthDto;
    return this;
  }

  public void unsetMemberOauthDto() {
    this.memberOauthDto = null;
  }

  /** Returns true if field memberOauthDto is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberOauthDto() {
    return this.memberOauthDto != null;
  }

  public void setMemberOauthDtoIsSet(boolean value) {
    if (!value) {
      this.memberOauthDto = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public UserEngineVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginID();
      } else {
        setLoginID((String)value);
      }
      break;

    case LOGIN_PWD:
      if (value == null) {
        unsetLoginPwd();
      } else {
        setLoginPwd((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Long)value);
      }
      break;

    case REGISTER_IP:
      if (value == null) {
        unsetRegisterIP();
      } else {
        setRegisterIP((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case CREATE_CHANNEL:
      if (value == null) {
        unsetCreateChannel();
      } else {
        setCreateChannel((String)value);
      }
      break;

    case FROAD_POINTS:
      if (value == null) {
        unsetFroadPoints();
      } else {
        setFroadPoints((String)value);
      }
      break;

    case FROAD_EXCHAGE_RATE:
      if (value == null) {
        unsetFroadExchageRate();
      } else {
        setFroadExchageRate((String)value);
      }
      break;

    case BANK_POINTS:
      if (value == null) {
        unsetBankPoints();
      } else {
        setBankPoints((String)value);
      }
      break;

    case BANK_EXCHAGE_RATE:
      if (value == null) {
        unsetBankExchageRate();
      } else {
        setBankExchageRate((String)value);
      }
      break;

    case UNAME:
      if (value == null) {
        unsetUname();
      } else {
        setUname((String)value);
      }
      break;

    case INTRODUCER:
      if (value == null) {
        unsetIntroducer();
      } else {
        setIntroducer((String)value);
      }
      break;

    case BANK_DESC:
      if (value == null) {
        unsetBankDesc();
      } else {
        setBankDesc((String)value);
      }
      break;

    case MOBILE_ENCRYPT:
      if (value == null) {
        unsetMobileEncrypt();
      } else {
        setMobileEncrypt((String)value);
      }
      break;

    case RECEIVER:
      if (value == null) {
        unsetReceiver();
      } else {
        setReceiver((List<ReceiverVo>)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Boolean)value);
      }
      break;

    case MSG_CODE:
      if (value == null) {
        unsetMsgCode();
      } else {
        setMsgCode((Long)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    case DEMO:
      if (value == null) {
        unsetDemo();
      } else {
        setDemo((String)value);
      }
      break;

    case MEMBER_OAUTH_DTO:
      if (value == null) {
        unsetMemberOauthDto();
      } else {
        setMemberOauthDto((MemberOauthVo)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case LOGIN_ID:
      return getLoginID();

    case LOGIN_PWD:
      return getLoginPwd();

    case EMAIL:
      return getEmail();

    case STATUS:
      return Long.valueOf(getStatus());

    case REGISTER_IP:
      return getRegisterIP();

    case MOBILE:
      return getMobile();

    case CREATE_CHANNEL:
      return getCreateChannel();

    case FROAD_POINTS:
      return getFroadPoints();

    case FROAD_EXCHAGE_RATE:
      return getFroadExchageRate();

    case BANK_POINTS:
      return getBankPoints();

    case BANK_EXCHAGE_RATE:
      return getBankExchageRate();

    case UNAME:
      return getUname();

    case INTRODUCER:
      return getIntroducer();

    case BANK_DESC:
      return getBankDesc();

    case MOBILE_ENCRYPT:
      return getMobileEncrypt();

    case RECEIVER:
      return getReceiver();

    case RESULT:
      return Boolean.valueOf(isResult());

    case MSG_CODE:
      return Long.valueOf(getMsgCode());

    case ERROR_MSG:
      return getErrorMsg();

    case DEMO:
      return getDemo();

    case MEMBER_OAUTH_DTO:
      return getMemberOauthDto();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_CODE:
      return isSetMemberCode();
    case LOGIN_ID:
      return isSetLoginID();
    case LOGIN_PWD:
      return isSetLoginPwd();
    case EMAIL:
      return isSetEmail();
    case STATUS:
      return isSetStatus();
    case REGISTER_IP:
      return isSetRegisterIP();
    case MOBILE:
      return isSetMobile();
    case CREATE_CHANNEL:
      return isSetCreateChannel();
    case FROAD_POINTS:
      return isSetFroadPoints();
    case FROAD_EXCHAGE_RATE:
      return isSetFroadExchageRate();
    case BANK_POINTS:
      return isSetBankPoints();
    case BANK_EXCHAGE_RATE:
      return isSetBankExchageRate();
    case UNAME:
      return isSetUname();
    case INTRODUCER:
      return isSetIntroducer();
    case BANK_DESC:
      return isSetBankDesc();
    case MOBILE_ENCRYPT:
      return isSetMobileEncrypt();
    case RECEIVER:
      return isSetReceiver();
    case RESULT:
      return isSetResult();
    case MSG_CODE:
      return isSetMsgCode();
    case ERROR_MSG:
      return isSetErrorMsg();
    case DEMO:
      return isSetDemo();
    case MEMBER_OAUTH_DTO:
      return isSetMemberOauthDto();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserEngineVo)
      return this.equals((UserEngineVo)that);
    return false;
  }

  public boolean equals(UserEngineVo that) {
    if (that == null)
      return false;

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_loginID = true && this.isSetLoginID();
    boolean that_present_loginID = true && that.isSetLoginID();
    if (this_present_loginID || that_present_loginID) {
      if (!(this_present_loginID && that_present_loginID))
        return false;
      if (!this.loginID.equals(that.loginID))
        return false;
    }

    boolean this_present_loginPwd = true && this.isSetLoginPwd();
    boolean that_present_loginPwd = true && that.isSetLoginPwd();
    if (this_present_loginPwd || that_present_loginPwd) {
      if (!(this_present_loginPwd && that_present_loginPwd))
        return false;
      if (!this.loginPwd.equals(that.loginPwd))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_registerIP = true && this.isSetRegisterIP();
    boolean that_present_registerIP = true && that.isSetRegisterIP();
    if (this_present_registerIP || that_present_registerIP) {
      if (!(this_present_registerIP && that_present_registerIP))
        return false;
      if (!this.registerIP.equals(that.registerIP))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_createChannel = true && this.isSetCreateChannel();
    boolean that_present_createChannel = true && that.isSetCreateChannel();
    if (this_present_createChannel || that_present_createChannel) {
      if (!(this_present_createChannel && that_present_createChannel))
        return false;
      if (!this.createChannel.equals(that.createChannel))
        return false;
    }

    boolean this_present_froadPoints = true && this.isSetFroadPoints();
    boolean that_present_froadPoints = true && that.isSetFroadPoints();
    if (this_present_froadPoints || that_present_froadPoints) {
      if (!(this_present_froadPoints && that_present_froadPoints))
        return false;
      if (!this.froadPoints.equals(that.froadPoints))
        return false;
    }

    boolean this_present_froadExchageRate = true && this.isSetFroadExchageRate();
    boolean that_present_froadExchageRate = true && that.isSetFroadExchageRate();
    if (this_present_froadExchageRate || that_present_froadExchageRate) {
      if (!(this_present_froadExchageRate && that_present_froadExchageRate))
        return false;
      if (!this.froadExchageRate.equals(that.froadExchageRate))
        return false;
    }

    boolean this_present_bankPoints = true && this.isSetBankPoints();
    boolean that_present_bankPoints = true && that.isSetBankPoints();
    if (this_present_bankPoints || that_present_bankPoints) {
      if (!(this_present_bankPoints && that_present_bankPoints))
        return false;
      if (!this.bankPoints.equals(that.bankPoints))
        return false;
    }

    boolean this_present_bankExchageRate = true && this.isSetBankExchageRate();
    boolean that_present_bankExchageRate = true && that.isSetBankExchageRate();
    if (this_present_bankExchageRate || that_present_bankExchageRate) {
      if (!(this_present_bankExchageRate && that_present_bankExchageRate))
        return false;
      if (!this.bankExchageRate.equals(that.bankExchageRate))
        return false;
    }

    boolean this_present_uname = true && this.isSetUname();
    boolean that_present_uname = true && that.isSetUname();
    if (this_present_uname || that_present_uname) {
      if (!(this_present_uname && that_present_uname))
        return false;
      if (!this.uname.equals(that.uname))
        return false;
    }

    boolean this_present_introducer = true && this.isSetIntroducer();
    boolean that_present_introducer = true && that.isSetIntroducer();
    if (this_present_introducer || that_present_introducer) {
      if (!(this_present_introducer && that_present_introducer))
        return false;
      if (!this.introducer.equals(that.introducer))
        return false;
    }

    boolean this_present_bankDesc = true && this.isSetBankDesc();
    boolean that_present_bankDesc = true && that.isSetBankDesc();
    if (this_present_bankDesc || that_present_bankDesc) {
      if (!(this_present_bankDesc && that_present_bankDesc))
        return false;
      if (!this.bankDesc.equals(that.bankDesc))
        return false;
    }

    boolean this_present_mobileEncrypt = true && this.isSetMobileEncrypt();
    boolean that_present_mobileEncrypt = true && that.isSetMobileEncrypt();
    if (this_present_mobileEncrypt || that_present_mobileEncrypt) {
      if (!(this_present_mobileEncrypt && that_present_mobileEncrypt))
        return false;
      if (!this.mobileEncrypt.equals(that.mobileEncrypt))
        return false;
    }

    boolean this_present_receiver = true && this.isSetReceiver();
    boolean that_present_receiver = true && that.isSetReceiver();
    if (this_present_receiver || that_present_receiver) {
      if (!(this_present_receiver && that_present_receiver))
        return false;
      if (!this.receiver.equals(that.receiver))
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_msgCode = true;
    boolean that_present_msgCode = true;
    if (this_present_msgCode || that_present_msgCode) {
      if (!(this_present_msgCode && that_present_msgCode))
        return false;
      if (this.msgCode != that.msgCode)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_demo = true && this.isSetDemo();
    boolean that_present_demo = true && that.isSetDemo();
    if (this_present_demo || that_present_demo) {
      if (!(this_present_demo && that_present_demo))
        return false;
      if (!this.demo.equals(that.demo))
        return false;
    }

    boolean this_present_memberOauthDto = true && this.isSetMemberOauthDto();
    boolean that_present_memberOauthDto = true && that.isSetMemberOauthDto();
    if (this_present_memberOauthDto || that_present_memberOauthDto) {
      if (!(this_present_memberOauthDto && that_present_memberOauthDto))
        return false;
      if (!this.memberOauthDto.equals(that.memberOauthDto))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_loginID = true && (isSetLoginID());
    list.add(present_loginID);
    if (present_loginID)
      list.add(loginID);

    boolean present_loginPwd = true && (isSetLoginPwd());
    list.add(present_loginPwd);
    if (present_loginPwd)
      list.add(loginPwd);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_registerIP = true && (isSetRegisterIP());
    list.add(present_registerIP);
    if (present_registerIP)
      list.add(registerIP);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_createChannel = true && (isSetCreateChannel());
    list.add(present_createChannel);
    if (present_createChannel)
      list.add(createChannel);

    boolean present_froadPoints = true && (isSetFroadPoints());
    list.add(present_froadPoints);
    if (present_froadPoints)
      list.add(froadPoints);

    boolean present_froadExchageRate = true && (isSetFroadExchageRate());
    list.add(present_froadExchageRate);
    if (present_froadExchageRate)
      list.add(froadExchageRate);

    boolean present_bankPoints = true && (isSetBankPoints());
    list.add(present_bankPoints);
    if (present_bankPoints)
      list.add(bankPoints);

    boolean present_bankExchageRate = true && (isSetBankExchageRate());
    list.add(present_bankExchageRate);
    if (present_bankExchageRate)
      list.add(bankExchageRate);

    boolean present_uname = true && (isSetUname());
    list.add(present_uname);
    if (present_uname)
      list.add(uname);

    boolean present_introducer = true && (isSetIntroducer());
    list.add(present_introducer);
    if (present_introducer)
      list.add(introducer);

    boolean present_bankDesc = true && (isSetBankDesc());
    list.add(present_bankDesc);
    if (present_bankDesc)
      list.add(bankDesc);

    boolean present_mobileEncrypt = true && (isSetMobileEncrypt());
    list.add(present_mobileEncrypt);
    if (present_mobileEncrypt)
      list.add(mobileEncrypt);

    boolean present_receiver = true && (isSetReceiver());
    list.add(present_receiver);
    if (present_receiver)
      list.add(receiver);

    boolean present_result = true;
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_msgCode = true;
    list.add(present_msgCode);
    if (present_msgCode)
      list.add(msgCode);

    boolean present_errorMsg = true && (isSetErrorMsg());
    list.add(present_errorMsg);
    if (present_errorMsg)
      list.add(errorMsg);

    boolean present_demo = true && (isSetDemo());
    list.add(present_demo);
    if (present_demo)
      list.add(demo);

    boolean present_memberOauthDto = true && (isSetMemberOauthDto());
    list.add(present_memberOauthDto);
    if (present_memberOauthDto)
      list.add(memberOauthDto);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserEngineVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginID()).compareTo(other.isSetLoginID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginID, other.loginID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPwd()).compareTo(other.isSetLoginPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPwd, other.loginPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterIP()).compareTo(other.isSetRegisterIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerIP, other.registerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateChannel()).compareTo(other.isSetCreateChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createChannel, other.createChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFroadPoints()).compareTo(other.isSetFroadPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFroadPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.froadPoints, other.froadPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFroadExchageRate()).compareTo(other.isSetFroadExchageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFroadExchageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.froadExchageRate, other.froadExchageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoints()).compareTo(other.isSetBankPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoints, other.bankPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankExchageRate()).compareTo(other.isSetBankExchageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankExchageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankExchageRate, other.bankExchageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUname()).compareTo(other.isSetUname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uname, other.uname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroducer()).compareTo(other.isSetIntroducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introducer, other.introducer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankDesc()).compareTo(other.isSetBankDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankDesc, other.bankDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileEncrypt()).compareTo(other.isSetMobileEncrypt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileEncrypt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileEncrypt, other.mobileEncrypt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(other.isSetReceiver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiver, other.receiver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgCode()).compareTo(other.isSetMsgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgCode, other.msgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemo()).compareTo(other.isSetDemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demo, other.demo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberOauthDto()).compareTo(other.isSetMemberOauthDto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberOauthDto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberOauthDto, other.memberOauthDto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserEngineVo(");
    boolean first = true;

    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginID:");
    if (this.loginID == null) {
      sb.append("null");
    } else {
      sb.append(this.loginID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPwd:");
    if (this.loginPwd == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerIP:");
    if (this.registerIP == null) {
      sb.append("null");
    } else {
      sb.append(this.registerIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createChannel:");
    if (this.createChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.createChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("froadPoints:");
    if (this.froadPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.froadPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("froadExchageRate:");
    if (this.froadExchageRate == null) {
      sb.append("null");
    } else {
      sb.append(this.froadExchageRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPoints:");
    if (this.bankPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankExchageRate:");
    if (this.bankExchageRate == null) {
      sb.append("null");
    } else {
      sb.append(this.bankExchageRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uname:");
    if (this.uname == null) {
      sb.append("null");
    } else {
      sb.append(this.uname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introducer:");
    if (this.introducer == null) {
      sb.append("null");
    } else {
      sb.append(this.introducer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankDesc:");
    if (this.bankDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.bankDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobileEncrypt:");
    if (this.mobileEncrypt == null) {
      sb.append("null");
    } else {
      sb.append(this.mobileEncrypt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiver:");
    if (this.receiver == null) {
      sb.append("null");
    } else {
      sb.append(this.receiver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgCode:");
    sb.append(this.msgCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("demo:");
    if (this.demo == null) {
      sb.append("null");
    } else {
      sb.append(this.demo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberOauthDto:");
    if (this.memberOauthDto == null) {
      sb.append("null");
    } else {
      sb.append(this.memberOauthDto);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserEngineVoStandardSchemeFactory implements SchemeFactory {
    public UserEngineVoStandardScheme getScheme() {
      return new UserEngineVoStandardScheme();
    }
  }

  private static class UserEngineVoStandardScheme extends StandardScheme<UserEngineVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserEngineVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginID = iprot.readString();
              struct.setLoginIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPwd = iprot.readString();
              struct.setLoginPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.status = iprot.readI64();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerIP = iprot.readString();
              struct.setRegisterIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createChannel = iprot.readString();
              struct.setCreateChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FROAD_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.froadPoints = iprot.readString();
              struct.setFroadPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FROAD_EXCHAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.froadExchageRate = iprot.readString();
              struct.setFroadExchageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPoints = iprot.readString();
              struct.setBankPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BANK_EXCHAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankExchageRate = iprot.readString();
              struct.setBankExchageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uname = iprot.readString();
              struct.setUnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INTRODUCER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introducer = iprot.readString();
              struct.setIntroducerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankDesc = iprot.readString();
              struct.setBankDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MOBILE_ENCRYPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileEncrypt = iprot.readString();
              struct.setMobileEncryptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RECEIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.receiver = new ArrayList<ReceiverVo>(_list8.size);
                ReceiverVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ReceiverVo();
                  _elem9.read(iprot);
                  struct.receiver.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setReceiverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result = iprot.readBool();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MSG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgCode = iprot.readI64();
              struct.setMsgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.demo = iprot.readString();
              struct.setDemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MEMBER_OAUTH_DTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memberOauthDto = new MemberOauthVo();
              struct.memberOauthDto.read(iprot);
              struct.setMemberOauthDtoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserEngineVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.loginID != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginID);
        oprot.writeFieldEnd();
      }
      if (struct.loginPwd != null) {
        oprot.writeFieldBegin(LOGIN_PWD_FIELD_DESC);
        oprot.writeString(struct.loginPwd);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI64(struct.status);
      oprot.writeFieldEnd();
      if (struct.registerIP != null) {
        oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
        oprot.writeString(struct.registerIP);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.createChannel != null) {
        oprot.writeFieldBegin(CREATE_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.createChannel);
        oprot.writeFieldEnd();
      }
      if (struct.froadPoints != null) {
        oprot.writeFieldBegin(FROAD_POINTS_FIELD_DESC);
        oprot.writeString(struct.froadPoints);
        oprot.writeFieldEnd();
      }
      if (struct.froadExchageRate != null) {
        oprot.writeFieldBegin(FROAD_EXCHAGE_RATE_FIELD_DESC);
        oprot.writeString(struct.froadExchageRate);
        oprot.writeFieldEnd();
      }
      if (struct.bankPoints != null) {
        oprot.writeFieldBegin(BANK_POINTS_FIELD_DESC);
        oprot.writeString(struct.bankPoints);
        oprot.writeFieldEnd();
      }
      if (struct.bankExchageRate != null) {
        oprot.writeFieldBegin(BANK_EXCHAGE_RATE_FIELD_DESC);
        oprot.writeString(struct.bankExchageRate);
        oprot.writeFieldEnd();
      }
      if (struct.uname != null) {
        oprot.writeFieldBegin(UNAME_FIELD_DESC);
        oprot.writeString(struct.uname);
        oprot.writeFieldEnd();
      }
      if (struct.introducer != null) {
        oprot.writeFieldBegin(INTRODUCER_FIELD_DESC);
        oprot.writeString(struct.introducer);
        oprot.writeFieldEnd();
      }
      if (struct.bankDesc != null) {
        oprot.writeFieldBegin(BANK_DESC_FIELD_DESC);
        oprot.writeString(struct.bankDesc);
        oprot.writeFieldEnd();
      }
      if (struct.mobileEncrypt != null) {
        oprot.writeFieldBegin(MOBILE_ENCRYPT_FIELD_DESC);
        oprot.writeString(struct.mobileEncrypt);
        oprot.writeFieldEnd();
      }
      if (struct.receiver != null) {
        oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.receiver.size()));
          for (ReceiverVo _iter11 : struct.receiver)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeBool(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSG_CODE_FIELD_DESC);
      oprot.writeI64(struct.msgCode);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      if (struct.demo != null) {
        oprot.writeFieldBegin(DEMO_FIELD_DESC);
        oprot.writeString(struct.demo);
        oprot.writeFieldEnd();
      }
      if (struct.memberOauthDto != null) {
        oprot.writeFieldBegin(MEMBER_OAUTH_DTO_FIELD_DESC);
        struct.memberOauthDto.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserEngineVoTupleSchemeFactory implements SchemeFactory {
    public UserEngineVoTupleScheme getScheme() {
      return new UserEngineVoTupleScheme();
    }
  }

  private static class UserEngineVoTupleScheme extends TupleScheme<UserEngineVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserEngineVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemberCode()) {
        optionals.set(0);
      }
      if (struct.isSetLoginID()) {
        optionals.set(1);
      }
      if (struct.isSetLoginPwd()) {
        optionals.set(2);
      }
      if (struct.isSetEmail()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetRegisterIP()) {
        optionals.set(5);
      }
      if (struct.isSetMobile()) {
        optionals.set(6);
      }
      if (struct.isSetCreateChannel()) {
        optionals.set(7);
      }
      if (struct.isSetFroadPoints()) {
        optionals.set(8);
      }
      if (struct.isSetFroadExchageRate()) {
        optionals.set(9);
      }
      if (struct.isSetBankPoints()) {
        optionals.set(10);
      }
      if (struct.isSetBankExchageRate()) {
        optionals.set(11);
      }
      if (struct.isSetUname()) {
        optionals.set(12);
      }
      if (struct.isSetIntroducer()) {
        optionals.set(13);
      }
      if (struct.isSetBankDesc()) {
        optionals.set(14);
      }
      if (struct.isSetMobileEncrypt()) {
        optionals.set(15);
      }
      if (struct.isSetReceiver()) {
        optionals.set(16);
      }
      if (struct.isSetResult()) {
        optionals.set(17);
      }
      if (struct.isSetMsgCode()) {
        optionals.set(18);
      }
      if (struct.isSetErrorMsg()) {
        optionals.set(19);
      }
      if (struct.isSetDemo()) {
        optionals.set(20);
      }
      if (struct.isSetMemberOauthDto()) {
        optionals.set(21);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetLoginID()) {
        oprot.writeString(struct.loginID);
      }
      if (struct.isSetLoginPwd()) {
        oprot.writeString(struct.loginPwd);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetStatus()) {
        oprot.writeI64(struct.status);
      }
      if (struct.isSetRegisterIP()) {
        oprot.writeString(struct.registerIP);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCreateChannel()) {
        oprot.writeString(struct.createChannel);
      }
      if (struct.isSetFroadPoints()) {
        oprot.writeString(struct.froadPoints);
      }
      if (struct.isSetFroadExchageRate()) {
        oprot.writeString(struct.froadExchageRate);
      }
      if (struct.isSetBankPoints()) {
        oprot.writeString(struct.bankPoints);
      }
      if (struct.isSetBankExchageRate()) {
        oprot.writeString(struct.bankExchageRate);
      }
      if (struct.isSetUname()) {
        oprot.writeString(struct.uname);
      }
      if (struct.isSetIntroducer()) {
        oprot.writeString(struct.introducer);
      }
      if (struct.isSetBankDesc()) {
        oprot.writeString(struct.bankDesc);
      }
      if (struct.isSetMobileEncrypt()) {
        oprot.writeString(struct.mobileEncrypt);
      }
      if (struct.isSetReceiver()) {
        {
          oprot.writeI32(struct.receiver.size());
          for (ReceiverVo _iter12 : struct.receiver)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetResult()) {
        oprot.writeBool(struct.result);
      }
      if (struct.isSetMsgCode()) {
        oprot.writeI64(struct.msgCode);
      }
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
      if (struct.isSetDemo()) {
        oprot.writeString(struct.demo);
      }
      if (struct.isSetMemberOauthDto()) {
        struct.memberOauthDto.write(oprot);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserEngineVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginID = iprot.readString();
        struct.setLoginIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginPwd = iprot.readString();
        struct.setLoginPwdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI64();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.registerIP = iprot.readString();
        struct.setRegisterIPIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createChannel = iprot.readString();
        struct.setCreateChannelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.froadPoints = iprot.readString();
        struct.setFroadPointsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.froadExchageRate = iprot.readString();
        struct.setFroadExchageRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankPoints = iprot.readString();
        struct.setBankPointsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bankExchageRate = iprot.readString();
        struct.setBankExchageRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.uname = iprot.readString();
        struct.setUnameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.introducer = iprot.readString();
        struct.setIntroducerIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankDesc = iprot.readString();
        struct.setBankDescIsSet(true);
      }
      if (incoming.get(15)) {
        struct.mobileEncrypt = iprot.readString();
        struct.setMobileEncryptIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.receiver = new ArrayList<ReceiverVo>(_list13.size);
          ReceiverVo _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new ReceiverVo();
            _elem14.read(iprot);
            struct.receiver.add(_elem14);
          }
        }
        struct.setReceiverIsSet(true);
      }
      if (incoming.get(17)) {
        struct.result = iprot.readBool();
        struct.setResultIsSet(true);
      }
      if (incoming.get(18)) {
        struct.msgCode = iprot.readI64();
        struct.setMsgCodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
      if (incoming.get(20)) {
        struct.demo = iprot.readString();
        struct.setDemoIsSet(true);
      }
      if (incoming.get(21)) {
        struct.memberOauthDto = new MemberOauthVo();
        struct.memberOauthDto.read(iprot);
        struct.setMemberOauthDtoIsSet(true);
      }
      if (incoming.get(22)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

