/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * ProductSearchVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductSearchVo implements org.apache.thrift.TBase<ProductSearchVo, ProductSearchVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductSearchVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductSearchVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_MARKETABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMarketable", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AUDIT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStartTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField AUDIT_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditEndTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField POINT_START_FIELD_DESC = new org.apache.thrift.protocol.TField("pointStart", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField POINT_END_FIELD_DESC = new org.apache.thrift.protocol.TField("pointEnd", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductSearchVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductSearchVoTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 机构号
   */
  public String orgCode; // required
  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String auditState; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 上下架状态
   */
  public String isMarketable; // required
  /**
   * 审核开始时间
   */
  public long auditStartTime; // optional
  /**
   * 审核结束时间
   */
  public long auditEndTime; // optional
  /**
   * 积分开始值
   */
  public int pointStart; // optional
  /**
   * 积分截止值
   */
  public int pointEnd; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 机构号
     */
    ORG_CODE((short)2, "orgCode"),
    /**
     * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
     */
    AUDIT_STATE((short)3, "auditState"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)4, "merchantName"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)5, "productName"),
    /**
     * 上下架状态
     */
    IS_MARKETABLE((short)6, "isMarketable"),
    /**
     * 审核开始时间
     */
    AUDIT_START_TIME((short)7, "auditStartTime"),
    /**
     * 审核结束时间
     */
    AUDIT_END_TIME((short)8, "auditEndTime"),
    /**
     * 积分开始值
     */
    POINT_START((short)9, "pointStart"),
    /**
     * 积分截止值
     */
    POINT_END((short)10, "pointEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // ORG_CODE
          return ORG_CODE;
        case 3: // AUDIT_STATE
          return AUDIT_STATE;
        case 4: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // IS_MARKETABLE
          return IS_MARKETABLE;
        case 7: // AUDIT_START_TIME
          return AUDIT_START_TIME;
        case 8: // AUDIT_END_TIME
          return AUDIT_END_TIME;
        case 9: // POINT_START
          return POINT_START;
        case 10: // POINT_END
          return POINT_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUDITSTARTTIME_ISSET_ID = 0;
  private static final int __AUDITENDTIME_ISSET_ID = 1;
  private static final int __POINTSTART_ISSET_ID = 2;
  private static final int __POINTEND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AUDIT_START_TIME,_Fields.AUDIT_END_TIME,_Fields.POINT_START,_Fields.POINT_END};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MARKETABLE, new org.apache.thrift.meta_data.FieldMetaData("isMarketable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("auditStartTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("auditEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POINT_START, new org.apache.thrift.meta_data.FieldMetaData("pointStart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_END, new org.apache.thrift.meta_data.FieldMetaData("pointEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductSearchVo.class, metaDataMap);
  }

  public ProductSearchVo() {
  }

  public ProductSearchVo(
    String clientId,
    String orgCode,
    String auditState,
    String merchantName,
    String productName,
    String isMarketable)
  {
    this();
    this.clientId = clientId;
    this.orgCode = orgCode;
    this.auditState = auditState;
    this.merchantName = merchantName;
    this.productName = productName;
    this.isMarketable = isMarketable;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSearchVo(ProductSearchVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetAuditState()) {
      this.auditState = other.auditState;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetIsMarketable()) {
      this.isMarketable = other.isMarketable;
    }
    this.auditStartTime = other.auditStartTime;
    this.auditEndTime = other.auditEndTime;
    this.pointStart = other.pointStart;
    this.pointEnd = other.pointEnd;
  }

  public ProductSearchVo deepCopy() {
    return new ProductSearchVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.orgCode = null;
    this.auditState = null;
    this.merchantName = null;
    this.productName = null;
    this.isMarketable = null;
    setAuditStartTimeIsSet(false);
    this.auditStartTime = 0;
    setAuditEndTimeIsSet(false);
    this.auditEndTime = 0;
    setPointStartIsSet(false);
    this.pointStart = 0;
    setPointEndIsSet(false);
    this.pointEnd = 0;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public ProductSearchVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 机构号
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号
   */
  public ProductSearchVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String getAuditState() {
    return this.auditState;
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public ProductSearchVo setAuditState(String auditState) {
    this.auditState = auditState;
    return this;
  }

  public void unsetAuditState() {
    this.auditState = null;
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return this.auditState != null;
  }

  public void setAuditStateIsSet(boolean value) {
    if (!value) {
      this.auditState = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public ProductSearchVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public ProductSearchVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 上下架状态
   */
  public String getIsMarketable() {
    return this.isMarketable;
  }

  /**
   * 上下架状态
   */
  public ProductSearchVo setIsMarketable(String isMarketable) {
    this.isMarketable = isMarketable;
    return this;
  }

  public void unsetIsMarketable() {
    this.isMarketable = null;
  }

  /** Returns true if field isMarketable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMarketable() {
    return this.isMarketable != null;
  }

  public void setIsMarketableIsSet(boolean value) {
    if (!value) {
      this.isMarketable = null;
    }
  }

  /**
   * 审核开始时间
   */
  public long getAuditStartTime() {
    return this.auditStartTime;
  }

  /**
   * 审核开始时间
   */
  public ProductSearchVo setAuditStartTime(long auditStartTime) {
    this.auditStartTime = auditStartTime;
    setAuditStartTimeIsSet(true);
    return this;
  }

  public void unsetAuditStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITSTARTTIME_ISSET_ID);
  }

  /** Returns true if field auditStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITSTARTTIME_ISSET_ID);
  }

  public void setAuditStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITSTARTTIME_ISSET_ID, value);
  }

  /**
   * 审核结束时间
   */
  public long getAuditEndTime() {
    return this.auditEndTime;
  }

  /**
   * 审核结束时间
   */
  public ProductSearchVo setAuditEndTime(long auditEndTime) {
    this.auditEndTime = auditEndTime;
    setAuditEndTimeIsSet(true);
    return this;
  }

  public void unsetAuditEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITENDTIME_ISSET_ID);
  }

  /** Returns true if field auditEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITENDTIME_ISSET_ID);
  }

  public void setAuditEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITENDTIME_ISSET_ID, value);
  }

  /**
   * 积分开始值
   */
  public int getPointStart() {
    return this.pointStart;
  }

  /**
   * 积分开始值
   */
  public ProductSearchVo setPointStart(int pointStart) {
    this.pointStart = pointStart;
    setPointStartIsSet(true);
    return this;
  }

  public void unsetPointStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTSTART_ISSET_ID);
  }

  /** Returns true if field pointStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPointStart() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTSTART_ISSET_ID);
  }

  public void setPointStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTSTART_ISSET_ID, value);
  }

  /**
   * 积分截止值
   */
  public int getPointEnd() {
    return this.pointEnd;
  }

  /**
   * 积分截止值
   */
  public ProductSearchVo setPointEnd(int pointEnd) {
    this.pointEnd = pointEnd;
    setPointEndIsSet(true);
    return this;
  }

  public void unsetPointEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTEND_ISSET_ID);
  }

  /** Returns true if field pointEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPointEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTEND_ISSET_ID);
  }

  public void setPointEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case IS_MARKETABLE:
      if (value == null) {
        unsetIsMarketable();
      } else {
        setIsMarketable((String)value);
      }
      break;

    case AUDIT_START_TIME:
      if (value == null) {
        unsetAuditStartTime();
      } else {
        setAuditStartTime((Long)value);
      }
      break;

    case AUDIT_END_TIME:
      if (value == null) {
        unsetAuditEndTime();
      } else {
        setAuditEndTime((Long)value);
      }
      break;

    case POINT_START:
      if (value == null) {
        unsetPointStart();
      } else {
        setPointStart((Integer)value);
      }
      break;

    case POINT_END:
      if (value == null) {
        unsetPointEnd();
      } else {
        setPointEnd((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case ORG_CODE:
      return getOrgCode();

    case AUDIT_STATE:
      return getAuditState();

    case MERCHANT_NAME:
      return getMerchantName();

    case PRODUCT_NAME:
      return getProductName();

    case IS_MARKETABLE:
      return getIsMarketable();

    case AUDIT_START_TIME:
      return Long.valueOf(getAuditStartTime());

    case AUDIT_END_TIME:
      return Long.valueOf(getAuditEndTime());

    case POINT_START:
      return Integer.valueOf(getPointStart());

    case POINT_END:
      return Integer.valueOf(getPointEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case ORG_CODE:
      return isSetOrgCode();
    case AUDIT_STATE:
      return isSetAuditState();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case PRODUCT_NAME:
      return isSetProductName();
    case IS_MARKETABLE:
      return isSetIsMarketable();
    case AUDIT_START_TIME:
      return isSetAuditStartTime();
    case AUDIT_END_TIME:
      return isSetAuditEndTime();
    case POINT_START:
      return isSetPointStart();
    case POINT_END:
      return isSetPointEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSearchVo)
      return this.equals((ProductSearchVo)that);
    return false;
  }

  public boolean equals(ProductSearchVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_auditState = true && this.isSetAuditState();
    boolean that_present_auditState = true && that.isSetAuditState();
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (!this.auditState.equals(that.auditState))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_isMarketable = true && this.isSetIsMarketable();
    boolean that_present_isMarketable = true && that.isSetIsMarketable();
    if (this_present_isMarketable || that_present_isMarketable) {
      if (!(this_present_isMarketable && that_present_isMarketable))
        return false;
      if (!this.isMarketable.equals(that.isMarketable))
        return false;
    }

    boolean this_present_auditStartTime = true && this.isSetAuditStartTime();
    boolean that_present_auditStartTime = true && that.isSetAuditStartTime();
    if (this_present_auditStartTime || that_present_auditStartTime) {
      if (!(this_present_auditStartTime && that_present_auditStartTime))
        return false;
      if (this.auditStartTime != that.auditStartTime)
        return false;
    }

    boolean this_present_auditEndTime = true && this.isSetAuditEndTime();
    boolean that_present_auditEndTime = true && that.isSetAuditEndTime();
    if (this_present_auditEndTime || that_present_auditEndTime) {
      if (!(this_present_auditEndTime && that_present_auditEndTime))
        return false;
      if (this.auditEndTime != that.auditEndTime)
        return false;
    }

    boolean this_present_pointStart = true && this.isSetPointStart();
    boolean that_present_pointStart = true && that.isSetPointStart();
    if (this_present_pointStart || that_present_pointStart) {
      if (!(this_present_pointStart && that_present_pointStart))
        return false;
      if (this.pointStart != that.pointStart)
        return false;
    }

    boolean this_present_pointEnd = true && this.isSetPointEnd();
    boolean that_present_pointEnd = true && that.isSetPointEnd();
    if (this_present_pointEnd || that_present_pointEnd) {
      if (!(this_present_pointEnd && that_present_pointEnd))
        return false;
      if (this.pointEnd != that.pointEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_auditState = true && (isSetAuditState());
    list.add(present_auditState);
    if (present_auditState)
      list.add(auditState);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_isMarketable = true && (isSetIsMarketable());
    list.add(present_isMarketable);
    if (present_isMarketable)
      list.add(isMarketable);

    boolean present_auditStartTime = true && (isSetAuditStartTime());
    list.add(present_auditStartTime);
    if (present_auditStartTime)
      list.add(auditStartTime);

    boolean present_auditEndTime = true && (isSetAuditEndTime());
    list.add(present_auditEndTime);
    if (present_auditEndTime)
      list.add(auditEndTime);

    boolean present_pointStart = true && (isSetPointStart());
    list.add(present_pointStart);
    if (present_pointStart)
      list.add(pointStart);

    boolean present_pointEnd = true && (isSetPointEnd());
    list.add(present_pointEnd);
    if (present_pointEnd)
      list.add(pointEnd);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductSearchVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMarketable()).compareTo(other.isSetIsMarketable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMarketable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMarketable, other.isMarketable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditStartTime()).compareTo(other.isSetAuditStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStartTime, other.auditStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditEndTime()).compareTo(other.isSetAuditEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditEndTime, other.auditEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointStart()).compareTo(other.isSetPointStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointStart, other.pointStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointEnd()).compareTo(other.isSetPointEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointEnd, other.pointEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSearchVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditState:");
    if (this.auditState == null) {
      sb.append("null");
    } else {
      sb.append(this.auditState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMarketable:");
    if (this.isMarketable == null) {
      sb.append("null");
    } else {
      sb.append(this.isMarketable);
    }
    first = false;
    if (isSetAuditStartTime()) {
      if (!first) sb.append(", ");
      sb.append("auditStartTime:");
      sb.append(this.auditStartTime);
      first = false;
    }
    if (isSetAuditEndTime()) {
      if (!first) sb.append(", ");
      sb.append("auditEndTime:");
      sb.append(this.auditEndTime);
      first = false;
    }
    if (isSetPointStart()) {
      if (!first) sb.append(", ");
      sb.append("pointStart:");
      sb.append(this.pointStart);
      first = false;
    }
    if (isSetPointEnd()) {
      if (!first) sb.append(", ");
      sb.append("pointEnd:");
      sb.append(this.pointEnd);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductSearchVoStandardSchemeFactory implements SchemeFactory {
    public ProductSearchVoStandardScheme getScheme() {
      return new ProductSearchVoStandardScheme();
    }
  }

  private static class ProductSearchVoStandardScheme extends StandardScheme<ProductSearchVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductSearchVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditState = iprot.readString();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_MARKETABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMarketable = iprot.readString();
              struct.setIsMarketableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AUDIT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditStartTime = iprot.readI64();
              struct.setAuditStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AUDIT_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditEndTime = iprot.readI64();
              struct.setAuditEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POINT_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointStart = iprot.readI32();
              struct.setPointStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POINT_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointEnd = iprot.readI32();
              struct.setPointEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductSearchVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.auditState != null) {
        oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
        oprot.writeString(struct.auditState);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.isMarketable != null) {
        oprot.writeFieldBegin(IS_MARKETABLE_FIELD_DESC);
        oprot.writeString(struct.isMarketable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuditStartTime()) {
        oprot.writeFieldBegin(AUDIT_START_TIME_FIELD_DESC);
        oprot.writeI64(struct.auditStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuditEndTime()) {
        oprot.writeFieldBegin(AUDIT_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.auditEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointStart()) {
        oprot.writeFieldBegin(POINT_START_FIELD_DESC);
        oprot.writeI32(struct.pointStart);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointEnd()) {
        oprot.writeFieldBegin(POINT_END_FIELD_DESC);
        oprot.writeI32(struct.pointEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductSearchVoTupleSchemeFactory implements SchemeFactory {
    public ProductSearchVoTupleScheme getScheme() {
      return new ProductSearchVoTupleScheme();
    }
  }

  private static class ProductSearchVoTupleScheme extends TupleScheme<ProductSearchVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductSearchVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(1);
      }
      if (struct.isSetAuditState()) {
        optionals.set(2);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetIsMarketable()) {
        optionals.set(5);
      }
      if (struct.isSetAuditStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetAuditEndTime()) {
        optionals.set(7);
      }
      if (struct.isSetPointStart()) {
        optionals.set(8);
      }
      if (struct.isSetPointEnd()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetAuditState()) {
        oprot.writeString(struct.auditState);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetIsMarketable()) {
        oprot.writeString(struct.isMarketable);
      }
      if (struct.isSetAuditStartTime()) {
        oprot.writeI64(struct.auditStartTime);
      }
      if (struct.isSetAuditEndTime()) {
        oprot.writeI64(struct.auditEndTime);
      }
      if (struct.isSetPointStart()) {
        oprot.writeI32(struct.pointStart);
      }
      if (struct.isSetPointEnd()) {
        oprot.writeI32(struct.pointEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductSearchVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.auditState = iprot.readString();
        struct.setAuditStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isMarketable = iprot.readString();
        struct.setIsMarketableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.auditStartTime = iprot.readI64();
        struct.setAuditStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.auditEndTime = iprot.readI64();
        struct.setAuditEndTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pointStart = iprot.readI32();
        struct.setPointStartIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pointEnd = iprot.readI32();
        struct.setPointEndIsSet(true);
      }
    }
  }

}

