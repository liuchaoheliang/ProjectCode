/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveSustainRelationService {

  /**
   * 活动支持的活动 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 促销活动列表接 *
     * 
     * @param activeBaseRuleVo
     */
    public com.froad.thrift.vo.active.FindAllPromotionActiveVO findAllPromotionActive(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException;

    /**
     * 详情页查询活动支持列表分页接口(分页) *
     * 
     * @param page
     * @param activeBaseRuleVo
     */
    public com.froad.thrift.vo.active.FindPromotionActiveByPageVO findPromotionActiveByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findAllPromotionActive(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPromotionActiveByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.FindAllPromotionActiveVO findAllPromotionActive(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException
    {
      send_findAllPromotionActive(activeBaseRuleVo);
      return recv_findAllPromotionActive();
    }

    public void send_findAllPromotionActive(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException
    {
      findAllPromotionActive_args args = new findAllPromotionActive_args();
      args.setActiveBaseRuleVo(activeBaseRuleVo);
      sendBase("findAllPromotionActive", args);
    }

    public com.froad.thrift.vo.active.FindAllPromotionActiveVO recv_findAllPromotionActive() throws org.apache.thrift.TException
    {
      findAllPromotionActive_result result = new findAllPromotionActive_result();
      receiveBase(result, "findAllPromotionActive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllPromotionActive failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindPromotionActiveByPageVO findPromotionActiveByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException
    {
      send_findPromotionActiveByPage(page, activeBaseRuleVo);
      return recv_findPromotionActiveByPage();
    }

    public void send_findPromotionActiveByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) throws org.apache.thrift.TException
    {
      findPromotionActiveByPage_args args = new findPromotionActiveByPage_args();
      args.setPage(page);
      args.setActiveBaseRuleVo(activeBaseRuleVo);
      sendBase("findPromotionActiveByPage", args);
    }

    public com.froad.thrift.vo.active.FindPromotionActiveByPageVO recv_findPromotionActiveByPage() throws org.apache.thrift.TException
    {
      findPromotionActiveByPage_result result = new findPromotionActiveByPage_result();
      receiveBase(result, "findPromotionActiveByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPromotionActiveByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findAllPromotionActive(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllPromotionActive_call method_call = new findAllPromotionActive_call(activeBaseRuleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllPromotionActive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo;
      public findAllPromotionActive_call(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activeBaseRuleVo = activeBaseRuleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllPromotionActive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllPromotionActive_args args = new findAllPromotionActive_args();
        args.setActiveBaseRuleVo(activeBaseRuleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindAllPromotionActiveVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllPromotionActive();
      }
    }

    public void findPromotionActiveByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPromotionActiveByPage_call method_call = new findPromotionActiveByPage_call(page, activeBaseRuleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPromotionActiveByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo;
      public findPromotionActiveByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.activeBaseRuleVo = activeBaseRuleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPromotionActiveByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPromotionActiveByPage_args args = new findPromotionActiveByPage_args();
        args.setPage(page);
        args.setActiveBaseRuleVo(activeBaseRuleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindPromotionActiveByPageVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPromotionActiveByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findAllPromotionActive", new findAllPromotionActive());
      processMap.put("findPromotionActiveByPage", new findPromotionActiveByPage());
      return processMap;
    }

    public static class findAllPromotionActive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllPromotionActive_args> {
      public findAllPromotionActive() {
        super("findAllPromotionActive");
      }

      public findAllPromotionActive_args getEmptyArgsInstance() {
        return new findAllPromotionActive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllPromotionActive_result getResult(I iface, findAllPromotionActive_args args) throws org.apache.thrift.TException {
        findAllPromotionActive_result result = new findAllPromotionActive_result();
        result.success = iface.findAllPromotionActive(args.activeBaseRuleVo);
        return result;
      }
    }

    public static class findPromotionActiveByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPromotionActiveByPage_args> {
      public findPromotionActiveByPage() {
        super("findPromotionActiveByPage");
      }

      public findPromotionActiveByPage_args getEmptyArgsInstance() {
        return new findPromotionActiveByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPromotionActiveByPage_result getResult(I iface, findPromotionActiveByPage_args args) throws org.apache.thrift.TException {
        findPromotionActiveByPage_result result = new findPromotionActiveByPage_result();
        result.success = iface.findPromotionActiveByPage(args.page, args.activeBaseRuleVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findAllPromotionActive", new findAllPromotionActive());
      processMap.put("findPromotionActiveByPage", new findPromotionActiveByPage());
      return processMap;
    }

    public static class findAllPromotionActive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllPromotionActive_args, com.froad.thrift.vo.active.FindAllPromotionActiveVO> {
      public findAllPromotionActive() {
        super("findAllPromotionActive");
      }

      public findAllPromotionActive_args getEmptyArgsInstance() {
        return new findAllPromotionActive_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindAllPromotionActiveVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindAllPromotionActiveVO>() { 
          public void onComplete(com.froad.thrift.vo.active.FindAllPromotionActiveVO o) {
            findAllPromotionActive_result result = new findAllPromotionActive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllPromotionActive_result result = new findAllPromotionActive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllPromotionActive_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindAllPromotionActiveVO> resultHandler) throws TException {
        iface.findAllPromotionActive(args.activeBaseRuleVo,resultHandler);
      }
    }

    public static class findPromotionActiveByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPromotionActiveByPage_args, com.froad.thrift.vo.active.FindPromotionActiveByPageVO> {
      public findPromotionActiveByPage() {
        super("findPromotionActiveByPage");
      }

      public findPromotionActiveByPage_args getEmptyArgsInstance() {
        return new findPromotionActiveByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindPromotionActiveByPageVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindPromotionActiveByPageVO>() { 
          public void onComplete(com.froad.thrift.vo.active.FindPromotionActiveByPageVO o) {
            findPromotionActiveByPage_result result = new findPromotionActiveByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPromotionActiveByPage_result result = new findPromotionActiveByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPromotionActiveByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindPromotionActiveByPageVO> resultHandler) throws TException {
        iface.findPromotionActiveByPage(args.page, args.activeBaseRuleVo,resultHandler);
      }
    }

  }

  public static class findAllPromotionActive_args implements org.apache.thrift.TBase<findAllPromotionActive_args, findAllPromotionActive_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllPromotionActive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPromotionActive_args");

    private static final org.apache.thrift.protocol.TField ACTIVE_BASE_RULE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeBaseRuleVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPromotionActive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPromotionActive_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVE_BASE_RULE_VO((short)1, "activeBaseRuleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVE_BASE_RULE_VO
            return ACTIVE_BASE_RULE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVE_BASE_RULE_VO, new org.apache.thrift.meta_data.FieldMetaData("activeBaseRuleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveBaseRuleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPromotionActive_args.class, metaDataMap);
    }

    public findAllPromotionActive_args() {
    }

    public findAllPromotionActive_args(
      com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo)
    {
      this();
      this.activeBaseRuleVo = activeBaseRuleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPromotionActive_args(findAllPromotionActive_args other) {
      if (other.isSetActiveBaseRuleVo()) {
        this.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo(other.activeBaseRuleVo);
      }
    }

    public findAllPromotionActive_args deepCopy() {
      return new findAllPromotionActive_args(this);
    }

    @Override
    public void clear() {
      this.activeBaseRuleVo = null;
    }

    public com.froad.thrift.vo.active.ActiveBaseRuleVo getActiveBaseRuleVo() {
      return this.activeBaseRuleVo;
    }

    public findAllPromotionActive_args setActiveBaseRuleVo(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) {
      this.activeBaseRuleVo = activeBaseRuleVo;
      return this;
    }

    public void unsetActiveBaseRuleVo() {
      this.activeBaseRuleVo = null;
    }

    /** Returns true if field activeBaseRuleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveBaseRuleVo() {
      return this.activeBaseRuleVo != null;
    }

    public void setActiveBaseRuleVoIsSet(boolean value) {
      if (!value) {
        this.activeBaseRuleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVE_BASE_RULE_VO:
        if (value == null) {
          unsetActiveBaseRuleVo();
        } else {
          setActiveBaseRuleVo((com.froad.thrift.vo.active.ActiveBaseRuleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVE_BASE_RULE_VO:
        return getActiveBaseRuleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVE_BASE_RULE_VO:
        return isSetActiveBaseRuleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPromotionActive_args)
        return this.equals((findAllPromotionActive_args)that);
      return false;
    }

    public boolean equals(findAllPromotionActive_args that) {
      if (that == null)
        return false;

      boolean this_present_activeBaseRuleVo = true && this.isSetActiveBaseRuleVo();
      boolean that_present_activeBaseRuleVo = true && that.isSetActiveBaseRuleVo();
      if (this_present_activeBaseRuleVo || that_present_activeBaseRuleVo) {
        if (!(this_present_activeBaseRuleVo && that_present_activeBaseRuleVo))
          return false;
        if (!this.activeBaseRuleVo.equals(that.activeBaseRuleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_activeBaseRuleVo = true && (isSetActiveBaseRuleVo());
      list.add(present_activeBaseRuleVo);
      if (present_activeBaseRuleVo)
        list.add(activeBaseRuleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllPromotionActive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActiveBaseRuleVo()).compareTo(other.isSetActiveBaseRuleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveBaseRuleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeBaseRuleVo, other.activeBaseRuleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPromotionActive_args(");
      boolean first = true;

      sb.append("activeBaseRuleVo:");
      if (this.activeBaseRuleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeBaseRuleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (activeBaseRuleVo != null) {
        activeBaseRuleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPromotionActive_argsStandardSchemeFactory implements SchemeFactory {
      public findAllPromotionActive_argsStandardScheme getScheme() {
        return new findAllPromotionActive_argsStandardScheme();
      }
    }

    private static class findAllPromotionActive_argsStandardScheme extends StandardScheme<findAllPromotionActive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPromotionActive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVE_BASE_RULE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo();
                struct.activeBaseRuleVo.read(iprot);
                struct.setActiveBaseRuleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPromotionActive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activeBaseRuleVo != null) {
          oprot.writeFieldBegin(ACTIVE_BASE_RULE_VO_FIELD_DESC);
          struct.activeBaseRuleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPromotionActive_argsTupleSchemeFactory implements SchemeFactory {
      public findAllPromotionActive_argsTupleScheme getScheme() {
        return new findAllPromotionActive_argsTupleScheme();
      }
    }

    private static class findAllPromotionActive_argsTupleScheme extends TupleScheme<findAllPromotionActive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPromotionActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActiveBaseRuleVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActiveBaseRuleVo()) {
          struct.activeBaseRuleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPromotionActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo();
          struct.activeBaseRuleVo.read(iprot);
          struct.setActiveBaseRuleVoIsSet(true);
        }
      }
    }

  }

  public static class findAllPromotionActive_result implements org.apache.thrift.TBase<findAllPromotionActive_result, findAllPromotionActive_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllPromotionActive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPromotionActive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPromotionActive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPromotionActive_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindAllPromotionActiveVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindAllPromotionActiveVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPromotionActive_result.class, metaDataMap);
    }

    public findAllPromotionActive_result() {
    }

    public findAllPromotionActive_result(
      com.froad.thrift.vo.active.FindAllPromotionActiveVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPromotionActive_result(findAllPromotionActive_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindAllPromotionActiveVO(other.success);
      }
    }

    public findAllPromotionActive_result deepCopy() {
      return new findAllPromotionActive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindAllPromotionActiveVO getSuccess() {
      return this.success;
    }

    public findAllPromotionActive_result setSuccess(com.froad.thrift.vo.active.FindAllPromotionActiveVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindAllPromotionActiveVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPromotionActive_result)
        return this.equals((findAllPromotionActive_result)that);
      return false;
    }

    public boolean equals(findAllPromotionActive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllPromotionActive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPromotionActive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPromotionActive_resultStandardSchemeFactory implements SchemeFactory {
      public findAllPromotionActive_resultStandardScheme getScheme() {
        return new findAllPromotionActive_resultStandardScheme();
      }
    }

    private static class findAllPromotionActive_resultStandardScheme extends StandardScheme<findAllPromotionActive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPromotionActive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindAllPromotionActiveVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPromotionActive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPromotionActive_resultTupleSchemeFactory implements SchemeFactory {
      public findAllPromotionActive_resultTupleScheme getScheme() {
        return new findAllPromotionActive_resultTupleScheme();
      }
    }

    private static class findAllPromotionActive_resultTupleScheme extends TupleScheme<findAllPromotionActive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPromotionActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPromotionActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindAllPromotionActiveVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPromotionActiveByPage_args implements org.apache.thrift.TBase<findPromotionActiveByPage_args, findPromotionActiveByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPromotionActiveByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPromotionActiveByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_BASE_RULE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeBaseRuleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPromotionActiveByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPromotionActiveByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      ACTIVE_BASE_RULE_VO((short)2, "activeBaseRuleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // ACTIVE_BASE_RULE_VO
            return ACTIVE_BASE_RULE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.ACTIVE_BASE_RULE_VO, new org.apache.thrift.meta_data.FieldMetaData("activeBaseRuleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveBaseRuleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPromotionActiveByPage_args.class, metaDataMap);
    }

    public findPromotionActiveByPage_args() {
    }

    public findPromotionActiveByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo)
    {
      this();
      this.page = page;
      this.activeBaseRuleVo = activeBaseRuleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPromotionActiveByPage_args(findPromotionActiveByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetActiveBaseRuleVo()) {
        this.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo(other.activeBaseRuleVo);
      }
    }

    public findPromotionActiveByPage_args deepCopy() {
      return new findPromotionActiveByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.activeBaseRuleVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public findPromotionActiveByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.active.ActiveBaseRuleVo getActiveBaseRuleVo() {
      return this.activeBaseRuleVo;
    }

    public findPromotionActiveByPage_args setActiveBaseRuleVo(com.froad.thrift.vo.active.ActiveBaseRuleVo activeBaseRuleVo) {
      this.activeBaseRuleVo = activeBaseRuleVo;
      return this;
    }

    public void unsetActiveBaseRuleVo() {
      this.activeBaseRuleVo = null;
    }

    /** Returns true if field activeBaseRuleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveBaseRuleVo() {
      return this.activeBaseRuleVo != null;
    }

    public void setActiveBaseRuleVoIsSet(boolean value) {
      if (!value) {
        this.activeBaseRuleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case ACTIVE_BASE_RULE_VO:
        if (value == null) {
          unsetActiveBaseRuleVo();
        } else {
          setActiveBaseRuleVo((com.froad.thrift.vo.active.ActiveBaseRuleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case ACTIVE_BASE_RULE_VO:
        return getActiveBaseRuleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case ACTIVE_BASE_RULE_VO:
        return isSetActiveBaseRuleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPromotionActiveByPage_args)
        return this.equals((findPromotionActiveByPage_args)that);
      return false;
    }

    public boolean equals(findPromotionActiveByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_activeBaseRuleVo = true && this.isSetActiveBaseRuleVo();
      boolean that_present_activeBaseRuleVo = true && that.isSetActiveBaseRuleVo();
      if (this_present_activeBaseRuleVo || that_present_activeBaseRuleVo) {
        if (!(this_present_activeBaseRuleVo && that_present_activeBaseRuleVo))
          return false;
        if (!this.activeBaseRuleVo.equals(that.activeBaseRuleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_activeBaseRuleVo = true && (isSetActiveBaseRuleVo());
      list.add(present_activeBaseRuleVo);
      if (present_activeBaseRuleVo)
        list.add(activeBaseRuleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPromotionActiveByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveBaseRuleVo()).compareTo(other.isSetActiveBaseRuleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveBaseRuleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeBaseRuleVo, other.activeBaseRuleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPromotionActiveByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeBaseRuleVo:");
      if (this.activeBaseRuleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeBaseRuleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (activeBaseRuleVo != null) {
        activeBaseRuleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPromotionActiveByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findPromotionActiveByPage_argsStandardScheme getScheme() {
        return new findPromotionActiveByPage_argsStandardScheme();
      }
    }

    private static class findPromotionActiveByPage_argsStandardScheme extends StandardScheme<findPromotionActiveByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPromotionActiveByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_BASE_RULE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo();
                struct.activeBaseRuleVo.read(iprot);
                struct.setActiveBaseRuleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPromotionActiveByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.activeBaseRuleVo != null) {
          oprot.writeFieldBegin(ACTIVE_BASE_RULE_VO_FIELD_DESC);
          struct.activeBaseRuleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPromotionActiveByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findPromotionActiveByPage_argsTupleScheme getScheme() {
        return new findPromotionActiveByPage_argsTupleScheme();
      }
    }

    private static class findPromotionActiveByPage_argsTupleScheme extends TupleScheme<findPromotionActiveByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPromotionActiveByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetActiveBaseRuleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetActiveBaseRuleVo()) {
          struct.activeBaseRuleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPromotionActiveByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeBaseRuleVo = new com.froad.thrift.vo.active.ActiveBaseRuleVo();
          struct.activeBaseRuleVo.read(iprot);
          struct.setActiveBaseRuleVoIsSet(true);
        }
      }
    }

  }

  public static class findPromotionActiveByPage_result implements org.apache.thrift.TBase<findPromotionActiveByPage_result, findPromotionActiveByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPromotionActiveByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPromotionActiveByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPromotionActiveByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPromotionActiveByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindPromotionActiveByPageVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindPromotionActiveByPageVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPromotionActiveByPage_result.class, metaDataMap);
    }

    public findPromotionActiveByPage_result() {
    }

    public findPromotionActiveByPage_result(
      com.froad.thrift.vo.active.FindPromotionActiveByPageVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPromotionActiveByPage_result(findPromotionActiveByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindPromotionActiveByPageVO(other.success);
      }
    }

    public findPromotionActiveByPage_result deepCopy() {
      return new findPromotionActiveByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindPromotionActiveByPageVO getSuccess() {
      return this.success;
    }

    public findPromotionActiveByPage_result setSuccess(com.froad.thrift.vo.active.FindPromotionActiveByPageVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindPromotionActiveByPageVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPromotionActiveByPage_result)
        return this.equals((findPromotionActiveByPage_result)that);
      return false;
    }

    public boolean equals(findPromotionActiveByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPromotionActiveByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPromotionActiveByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPromotionActiveByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findPromotionActiveByPage_resultStandardScheme getScheme() {
        return new findPromotionActiveByPage_resultStandardScheme();
      }
    }

    private static class findPromotionActiveByPage_resultStandardScheme extends StandardScheme<findPromotionActiveByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPromotionActiveByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindPromotionActiveByPageVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPromotionActiveByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPromotionActiveByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findPromotionActiveByPage_resultTupleScheme getScheme() {
        return new findPromotionActiveByPage_resultTupleScheme();
      }
    }

    private static class findPromotionActiveByPage_resultTupleScheme extends TupleScheme<findPromotionActiveByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPromotionActiveByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPromotionActiveByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindPromotionActiveByPageVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
