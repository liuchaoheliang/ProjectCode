/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 购物车响应商品
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShoppingCartResProductVo implements org.apache.thrift.TBase<ShoppingCartResProductVo, ShoppingCartResProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<ShoppingCartResProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShoppingCartResProductVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHOPPING_CART_RES_ACTIVE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingCartResActiveList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShoppingCartResProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShoppingCartResProductVoTupleSchemeFactory());
  }

  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 购物车响应活动 - 列表
   */
  public List<ShoppingCartResActiveVo> shoppingCartResActiveList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品id
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 购物车响应活动 - 列表
     */
    SHOPPING_CART_RES_ACTIVE_LIST((short)2, "shoppingCartResActiveList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // SHOPPING_CART_RES_ACTIVE_LIST
          return SHOPPING_CART_RES_ACTIVE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOPPING_CART_RES_ACTIVE_LIST, new org.apache.thrift.meta_data.FieldMetaData("shoppingCartResActiveList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ShoppingCartResActiveVo"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShoppingCartResProductVo.class, metaDataMap);
  }

  public ShoppingCartResProductVo() {
  }

  public ShoppingCartResProductVo(
    String productId,
    List<ShoppingCartResActiveVo> shoppingCartResActiveList)
  {
    this();
    this.productId = productId;
    this.shoppingCartResActiveList = shoppingCartResActiveList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShoppingCartResProductVo(ShoppingCartResProductVo other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetShoppingCartResActiveList()) {
      List<ShoppingCartResActiveVo> __this__shoppingCartResActiveList = new ArrayList<ShoppingCartResActiveVo>(other.shoppingCartResActiveList.size());
      for (ShoppingCartResActiveVo other_element : other.shoppingCartResActiveList) {
        __this__shoppingCartResActiveList.add(other_element);
      }
      this.shoppingCartResActiveList = __this__shoppingCartResActiveList;
    }
  }

  public ShoppingCartResProductVo deepCopy() {
    return new ShoppingCartResProductVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.shoppingCartResActiveList = null;
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public ShoppingCartResProductVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public int getShoppingCartResActiveListSize() {
    return (this.shoppingCartResActiveList == null) ? 0 : this.shoppingCartResActiveList.size();
  }

  public java.util.Iterator<ShoppingCartResActiveVo> getShoppingCartResActiveListIterator() {
    return (this.shoppingCartResActiveList == null) ? null : this.shoppingCartResActiveList.iterator();
  }

  public void addToShoppingCartResActiveList(ShoppingCartResActiveVo elem) {
    if (this.shoppingCartResActiveList == null) {
      this.shoppingCartResActiveList = new ArrayList<ShoppingCartResActiveVo>();
    }
    this.shoppingCartResActiveList.add(elem);
  }

  /**
   * 购物车响应活动 - 列表
   */
  public List<ShoppingCartResActiveVo> getShoppingCartResActiveList() {
    return this.shoppingCartResActiveList;
  }

  /**
   * 购物车响应活动 - 列表
   */
  public ShoppingCartResProductVo setShoppingCartResActiveList(List<ShoppingCartResActiveVo> shoppingCartResActiveList) {
    this.shoppingCartResActiveList = shoppingCartResActiveList;
    return this;
  }

  public void unsetShoppingCartResActiveList() {
    this.shoppingCartResActiveList = null;
  }

  /** Returns true if field shoppingCartResActiveList is set (has been assigned a value) and false otherwise */
  public boolean isSetShoppingCartResActiveList() {
    return this.shoppingCartResActiveList != null;
  }

  public void setShoppingCartResActiveListIsSet(boolean value) {
    if (!value) {
      this.shoppingCartResActiveList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case SHOPPING_CART_RES_ACTIVE_LIST:
      if (value == null) {
        unsetShoppingCartResActiveList();
      } else {
        setShoppingCartResActiveList((List<ShoppingCartResActiveVo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case SHOPPING_CART_RES_ACTIVE_LIST:
      return getShoppingCartResActiveList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case SHOPPING_CART_RES_ACTIVE_LIST:
      return isSetShoppingCartResActiveList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShoppingCartResProductVo)
      return this.equals((ShoppingCartResProductVo)that);
    return false;
  }

  public boolean equals(ShoppingCartResProductVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_shoppingCartResActiveList = true && this.isSetShoppingCartResActiveList();
    boolean that_present_shoppingCartResActiveList = true && that.isSetShoppingCartResActiveList();
    if (this_present_shoppingCartResActiveList || that_present_shoppingCartResActiveList) {
      if (!(this_present_shoppingCartResActiveList && that_present_shoppingCartResActiveList))
        return false;
      if (!this.shoppingCartResActiveList.equals(that.shoppingCartResActiveList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_shoppingCartResActiveList = true && (isSetShoppingCartResActiveList());
    list.add(present_shoppingCartResActiveList);
    if (present_shoppingCartResActiveList)
      list.add(shoppingCartResActiveList);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShoppingCartResProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShoppingCartResActiveList()).compareTo(other.isSetShoppingCartResActiveList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShoppingCartResActiveList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingCartResActiveList, other.shoppingCartResActiveList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShoppingCartResProductVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shoppingCartResActiveList:");
    if (this.shoppingCartResActiveList == null) {
      sb.append("null");
    } else {
      sb.append(this.shoppingCartResActiveList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShoppingCartResProductVoStandardSchemeFactory implements SchemeFactory {
    public ShoppingCartResProductVoStandardScheme getScheme() {
      return new ShoppingCartResProductVoStandardScheme();
    }
  }

  private static class ShoppingCartResProductVoStandardScheme extends StandardScheme<ShoppingCartResProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShoppingCartResProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOPPING_CART_RES_ACTIVE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.shoppingCartResActiveList = new ArrayList<ShoppingCartResActiveVo>(_list40.size);
                ShoppingCartResActiveVo _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new ShoppingCartResActiveVo();
                  _elem41.read(iprot);
                  struct.shoppingCartResActiveList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setShoppingCartResActiveListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShoppingCartResProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.shoppingCartResActiveList != null) {
        oprot.writeFieldBegin(SHOPPING_CART_RES_ACTIVE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.shoppingCartResActiveList.size()));
          for (ShoppingCartResActiveVo _iter43 : struct.shoppingCartResActiveList)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShoppingCartResProductVoTupleSchemeFactory implements SchemeFactory {
    public ShoppingCartResProductVoTupleScheme getScheme() {
      return new ShoppingCartResProductVoTupleScheme();
    }
  }

  private static class ShoppingCartResProductVoTupleScheme extends TupleScheme<ShoppingCartResProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShoppingCartResProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetShoppingCartResActiveList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetShoppingCartResActiveList()) {
        {
          oprot.writeI32(struct.shoppingCartResActiveList.size());
          for (ShoppingCartResActiveVo _iter44 : struct.shoppingCartResActiveList)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShoppingCartResProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.shoppingCartResActiveList = new ArrayList<ShoppingCartResActiveVo>(_list45.size);
          ShoppingCartResActiveVo _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new ShoppingCartResActiveVo();
            _elem46.read(iprot);
            struct.shoppingCartResActiveList.add(_elem46);
          }
        }
        struct.setShoppingCartResActiveListIsSet(true);
      }
    }
  }

}

