/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersRunService {

  /**
   * 代金券运行 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询红包详情 - 订单确认
     * 
     * @param findVouchersOfSubmitReq
     */
    public com.froad.thrift.vo.active.FindVouchersResVo findVouchersOfSubmit(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq) throws org.apache.thrift.TException;

    /**
     * 查询红包详情 - 会员中心
     * 
     * @param findVouchersOfCenterReq
     */
    public com.froad.thrift.vo.active.FindVouchersResVo findVouchersOfCenter(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq) throws org.apache.thrift.TException;

    /**
     * 校验代金券
     * 
     * @param checkVouchersReq
     */
    public com.froad.thrift.vo.active.CheckVouchersResVo checkVouchers(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq) throws org.apache.thrift.TException;

    /**
     * 订单创建失败回退
     * 
     * @param createVouchersOrderFailureGoBackReq
     */
    public com.froad.thrift.vo.ResultVo createVouchersOrderFailureGoBack(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq) throws org.apache.thrift.TException;

    /**
     * 支付结果通知
     * 
     * @param payResultNoticeReq
     */
    public com.froad.thrift.vo.ResultVo payResultNotice(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq) throws org.apache.thrift.TException;

    /**
     * 关单
     * 
     * @param closeVouchersOrderReq
     */
    public com.froad.thrift.vo.ResultVo closeVouchersOrder(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq) throws org.apache.thrift.TException;

    /**
     * 红包转化接口
     * 
     * @param vouchersToRedPackReqVo
     */
    public com.froad.thrift.vo.ResultVo vouchersToRedPack(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findVouchersOfSubmit(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findVouchersOfCenter(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkVouchers(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createVouchersOrderFailureGoBack(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void payResultNotice(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeVouchersOrder(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void vouchersToRedPack(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.FindVouchersResVo findVouchersOfSubmit(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq) throws org.apache.thrift.TException
    {
      send_findVouchersOfSubmit(findVouchersOfSubmitReq);
      return recv_findVouchersOfSubmit();
    }

    public void send_findVouchersOfSubmit(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq) throws org.apache.thrift.TException
    {
      findVouchersOfSubmit_args args = new findVouchersOfSubmit_args();
      args.setFindVouchersOfSubmitReq(findVouchersOfSubmitReq);
      sendBase("findVouchersOfSubmit", args);
    }

    public com.froad.thrift.vo.active.FindVouchersResVo recv_findVouchersOfSubmit() throws org.apache.thrift.TException
    {
      findVouchersOfSubmit_result result = new findVouchersOfSubmit_result();
      receiveBase(result, "findVouchersOfSubmit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVouchersOfSubmit failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindVouchersResVo findVouchersOfCenter(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq) throws org.apache.thrift.TException
    {
      send_findVouchersOfCenter(findVouchersOfCenterReq);
      return recv_findVouchersOfCenter();
    }

    public void send_findVouchersOfCenter(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq) throws org.apache.thrift.TException
    {
      findVouchersOfCenter_args args = new findVouchersOfCenter_args();
      args.setFindVouchersOfCenterReq(findVouchersOfCenterReq);
      sendBase("findVouchersOfCenter", args);
    }

    public com.froad.thrift.vo.active.FindVouchersResVo recv_findVouchersOfCenter() throws org.apache.thrift.TException
    {
      findVouchersOfCenter_result result = new findVouchersOfCenter_result();
      receiveBase(result, "findVouchersOfCenter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVouchersOfCenter failed: unknown result");
    }

    public com.froad.thrift.vo.active.CheckVouchersResVo checkVouchers(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq) throws org.apache.thrift.TException
    {
      send_checkVouchers(checkVouchersReq);
      return recv_checkVouchers();
    }

    public void send_checkVouchers(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq) throws org.apache.thrift.TException
    {
      checkVouchers_args args = new checkVouchers_args();
      args.setCheckVouchersReq(checkVouchersReq);
      sendBase("checkVouchers", args);
    }

    public com.froad.thrift.vo.active.CheckVouchersResVo recv_checkVouchers() throws org.apache.thrift.TException
    {
      checkVouchers_result result = new checkVouchers_result();
      receiveBase(result, "checkVouchers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkVouchers failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo createVouchersOrderFailureGoBack(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq) throws org.apache.thrift.TException
    {
      send_createVouchersOrderFailureGoBack(createVouchersOrderFailureGoBackReq);
      return recv_createVouchersOrderFailureGoBack();
    }

    public void send_createVouchersOrderFailureGoBack(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq) throws org.apache.thrift.TException
    {
      createVouchersOrderFailureGoBack_args args = new createVouchersOrderFailureGoBack_args();
      args.setCreateVouchersOrderFailureGoBackReq(createVouchersOrderFailureGoBackReq);
      sendBase("createVouchersOrderFailureGoBack", args);
    }

    public com.froad.thrift.vo.ResultVo recv_createVouchersOrderFailureGoBack() throws org.apache.thrift.TException
    {
      createVouchersOrderFailureGoBack_result result = new createVouchersOrderFailureGoBack_result();
      receiveBase(result, "createVouchersOrderFailureGoBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVouchersOrderFailureGoBack failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo payResultNotice(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq) throws org.apache.thrift.TException
    {
      send_payResultNotice(payResultNoticeReq);
      return recv_payResultNotice();
    }

    public void send_payResultNotice(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq) throws org.apache.thrift.TException
    {
      payResultNotice_args args = new payResultNotice_args();
      args.setPayResultNoticeReq(payResultNoticeReq);
      sendBase("payResultNotice", args);
    }

    public com.froad.thrift.vo.ResultVo recv_payResultNotice() throws org.apache.thrift.TException
    {
      payResultNotice_result result = new payResultNotice_result();
      receiveBase(result, "payResultNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "payResultNotice failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo closeVouchersOrder(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq) throws org.apache.thrift.TException
    {
      send_closeVouchersOrder(closeVouchersOrderReq);
      return recv_closeVouchersOrder();
    }

    public void send_closeVouchersOrder(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq) throws org.apache.thrift.TException
    {
      closeVouchersOrder_args args = new closeVouchersOrder_args();
      args.setCloseVouchersOrderReq(closeVouchersOrderReq);
      sendBase("closeVouchersOrder", args);
    }

    public com.froad.thrift.vo.ResultVo recv_closeVouchersOrder() throws org.apache.thrift.TException
    {
      closeVouchersOrder_result result = new closeVouchersOrder_result();
      receiveBase(result, "closeVouchersOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeVouchersOrder failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo vouchersToRedPack(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo) throws org.apache.thrift.TException
    {
      send_vouchersToRedPack(vouchersToRedPackReqVo);
      return recv_vouchersToRedPack();
    }

    public void send_vouchersToRedPack(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo) throws org.apache.thrift.TException
    {
      vouchersToRedPack_args args = new vouchersToRedPack_args();
      args.setVouchersToRedPackReqVo(vouchersToRedPackReqVo);
      sendBase("vouchersToRedPack", args);
    }

    public com.froad.thrift.vo.ResultVo recv_vouchersToRedPack() throws org.apache.thrift.TException
    {
      vouchersToRedPack_result result = new vouchersToRedPack_result();
      receiveBase(result, "vouchersToRedPack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "vouchersToRedPack failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findVouchersOfSubmit(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVouchersOfSubmit_call method_call = new findVouchersOfSubmit_call(findVouchersOfSubmitReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVouchersOfSubmit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq;
      public findVouchersOfSubmit_call(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findVouchersOfSubmitReq = findVouchersOfSubmitReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVouchersOfSubmit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVouchersOfSubmit_args args = new findVouchersOfSubmit_args();
        args.setFindVouchersOfSubmitReq(findVouchersOfSubmitReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVouchersOfSubmit();
      }
    }

    public void findVouchersOfCenter(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVouchersOfCenter_call method_call = new findVouchersOfCenter_call(findVouchersOfCenterReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVouchersOfCenter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq;
      public findVouchersOfCenter_call(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findVouchersOfCenterReq = findVouchersOfCenterReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVouchersOfCenter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVouchersOfCenter_args args = new findVouchersOfCenter_args();
        args.setFindVouchersOfCenterReq(findVouchersOfCenterReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVouchersOfCenter();
      }
    }

    public void checkVouchers(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkVouchers_call method_call = new checkVouchers_call(checkVouchersReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkVouchers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq;
      public checkVouchers_call(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkVouchersReq = checkVouchersReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkVouchers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkVouchers_args args = new checkVouchers_args();
        args.setCheckVouchersReq(checkVouchersReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.CheckVouchersResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkVouchers();
      }
    }

    public void createVouchersOrderFailureGoBack(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVouchersOrderFailureGoBack_call method_call = new createVouchersOrderFailureGoBack_call(createVouchersOrderFailureGoBackReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVouchersOrderFailureGoBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq;
      public createVouchersOrderFailureGoBack_call(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createVouchersOrderFailureGoBackReq = createVouchersOrderFailureGoBackReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVouchersOrderFailureGoBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVouchersOrderFailureGoBack_args args = new createVouchersOrderFailureGoBack_args();
        args.setCreateVouchersOrderFailureGoBackReq(createVouchersOrderFailureGoBackReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVouchersOrderFailureGoBack();
      }
    }

    public void payResultNotice(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      payResultNotice_call method_call = new payResultNotice_call(payResultNoticeReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class payResultNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq;
      public payResultNotice_call(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.payResultNoticeReq = payResultNoticeReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("payResultNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        payResultNotice_args args = new payResultNotice_args();
        args.setPayResultNoticeReq(payResultNoticeReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_payResultNotice();
      }
    }

    public void closeVouchersOrder(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeVouchersOrder_call method_call = new closeVouchersOrder_call(closeVouchersOrderReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeVouchersOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq;
      public closeVouchersOrder_call(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.closeVouchersOrderReq = closeVouchersOrderReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeVouchersOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeVouchersOrder_args args = new closeVouchersOrder_args();
        args.setCloseVouchersOrderReq(closeVouchersOrderReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeVouchersOrder();
      }
    }

    public void vouchersToRedPack(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      vouchersToRedPack_call method_call = new vouchersToRedPack_call(vouchersToRedPackReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class vouchersToRedPack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo;
      public vouchersToRedPack_call(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vouchersToRedPackReqVo = vouchersToRedPackReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("vouchersToRedPack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        vouchersToRedPack_args args = new vouchersToRedPack_args();
        args.setVouchersToRedPackReqVo(vouchersToRedPackReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_vouchersToRedPack();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findVouchersOfSubmit", new findVouchersOfSubmit());
      processMap.put("findVouchersOfCenter", new findVouchersOfCenter());
      processMap.put("checkVouchers", new checkVouchers());
      processMap.put("createVouchersOrderFailureGoBack", new createVouchersOrderFailureGoBack());
      processMap.put("payResultNotice", new payResultNotice());
      processMap.put("closeVouchersOrder", new closeVouchersOrder());
      processMap.put("vouchersToRedPack", new vouchersToRedPack());
      return processMap;
    }

    public static class findVouchersOfSubmit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVouchersOfSubmit_args> {
      public findVouchersOfSubmit() {
        super("findVouchersOfSubmit");
      }

      public findVouchersOfSubmit_args getEmptyArgsInstance() {
        return new findVouchersOfSubmit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVouchersOfSubmit_result getResult(I iface, findVouchersOfSubmit_args args) throws org.apache.thrift.TException {
        findVouchersOfSubmit_result result = new findVouchersOfSubmit_result();
        result.success = iface.findVouchersOfSubmit(args.findVouchersOfSubmitReq);
        return result;
      }
    }

    public static class findVouchersOfCenter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVouchersOfCenter_args> {
      public findVouchersOfCenter() {
        super("findVouchersOfCenter");
      }

      public findVouchersOfCenter_args getEmptyArgsInstance() {
        return new findVouchersOfCenter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVouchersOfCenter_result getResult(I iface, findVouchersOfCenter_args args) throws org.apache.thrift.TException {
        findVouchersOfCenter_result result = new findVouchersOfCenter_result();
        result.success = iface.findVouchersOfCenter(args.findVouchersOfCenterReq);
        return result;
      }
    }

    public static class checkVouchers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkVouchers_args> {
      public checkVouchers() {
        super("checkVouchers");
      }

      public checkVouchers_args getEmptyArgsInstance() {
        return new checkVouchers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkVouchers_result getResult(I iface, checkVouchers_args args) throws org.apache.thrift.TException {
        checkVouchers_result result = new checkVouchers_result();
        result.success = iface.checkVouchers(args.checkVouchersReq);
        return result;
      }
    }

    public static class createVouchersOrderFailureGoBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVouchersOrderFailureGoBack_args> {
      public createVouchersOrderFailureGoBack() {
        super("createVouchersOrderFailureGoBack");
      }

      public createVouchersOrderFailureGoBack_args getEmptyArgsInstance() {
        return new createVouchersOrderFailureGoBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVouchersOrderFailureGoBack_result getResult(I iface, createVouchersOrderFailureGoBack_args args) throws org.apache.thrift.TException {
        createVouchersOrderFailureGoBack_result result = new createVouchersOrderFailureGoBack_result();
        result.success = iface.createVouchersOrderFailureGoBack(args.createVouchersOrderFailureGoBackReq);
        return result;
      }
    }

    public static class payResultNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, payResultNotice_args> {
      public payResultNotice() {
        super("payResultNotice");
      }

      public payResultNotice_args getEmptyArgsInstance() {
        return new payResultNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public payResultNotice_result getResult(I iface, payResultNotice_args args) throws org.apache.thrift.TException {
        payResultNotice_result result = new payResultNotice_result();
        result.success = iface.payResultNotice(args.payResultNoticeReq);
        return result;
      }
    }

    public static class closeVouchersOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeVouchersOrder_args> {
      public closeVouchersOrder() {
        super("closeVouchersOrder");
      }

      public closeVouchersOrder_args getEmptyArgsInstance() {
        return new closeVouchersOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeVouchersOrder_result getResult(I iface, closeVouchersOrder_args args) throws org.apache.thrift.TException {
        closeVouchersOrder_result result = new closeVouchersOrder_result();
        result.success = iface.closeVouchersOrder(args.closeVouchersOrderReq);
        return result;
      }
    }

    public static class vouchersToRedPack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, vouchersToRedPack_args> {
      public vouchersToRedPack() {
        super("vouchersToRedPack");
      }

      public vouchersToRedPack_args getEmptyArgsInstance() {
        return new vouchersToRedPack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public vouchersToRedPack_result getResult(I iface, vouchersToRedPack_args args) throws org.apache.thrift.TException {
        vouchersToRedPack_result result = new vouchersToRedPack_result();
        result.success = iface.vouchersToRedPack(args.vouchersToRedPackReqVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findVouchersOfSubmit", new findVouchersOfSubmit());
      processMap.put("findVouchersOfCenter", new findVouchersOfCenter());
      processMap.put("checkVouchers", new checkVouchers());
      processMap.put("createVouchersOrderFailureGoBack", new createVouchersOrderFailureGoBack());
      processMap.put("payResultNotice", new payResultNotice());
      processMap.put("closeVouchersOrder", new closeVouchersOrder());
      processMap.put("vouchersToRedPack", new vouchersToRedPack());
      return processMap;
    }

    public static class findVouchersOfSubmit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findVouchersOfSubmit_args, com.froad.thrift.vo.active.FindVouchersResVo> {
      public findVouchersOfSubmit() {
        super("findVouchersOfSubmit");
      }

      public findVouchersOfSubmit_args getEmptyArgsInstance() {
        return new findVouchersOfSubmit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersResVo o) {
            findVouchersOfSubmit_result result = new findVouchersOfSubmit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findVouchersOfSubmit_result result = new findVouchersOfSubmit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findVouchersOfSubmit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo> resultHandler) throws TException {
        iface.findVouchersOfSubmit(args.findVouchersOfSubmitReq,resultHandler);
      }
    }

    public static class findVouchersOfCenter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findVouchersOfCenter_args, com.froad.thrift.vo.active.FindVouchersResVo> {
      public findVouchersOfCenter() {
        super("findVouchersOfCenter");
      }

      public findVouchersOfCenter_args getEmptyArgsInstance() {
        return new findVouchersOfCenter_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersResVo o) {
            findVouchersOfCenter_result result = new findVouchersOfCenter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findVouchersOfCenter_result result = new findVouchersOfCenter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findVouchersOfCenter_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersResVo> resultHandler) throws TException {
        iface.findVouchersOfCenter(args.findVouchersOfCenterReq,resultHandler);
      }
    }

    public static class checkVouchers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkVouchers_args, com.froad.thrift.vo.active.CheckVouchersResVo> {
      public checkVouchers() {
        super("checkVouchers");
      }

      public checkVouchers_args getEmptyArgsInstance() {
        return new checkVouchers_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.CheckVouchersResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.CheckVouchersResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.CheckVouchersResVo o) {
            checkVouchers_result result = new checkVouchers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkVouchers_result result = new checkVouchers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkVouchers_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.CheckVouchersResVo> resultHandler) throws TException {
        iface.checkVouchers(args.checkVouchersReq,resultHandler);
      }
    }

    public static class createVouchersOrderFailureGoBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createVouchersOrderFailureGoBack_args, com.froad.thrift.vo.ResultVo> {
      public createVouchersOrderFailureGoBack() {
        super("createVouchersOrderFailureGoBack");
      }

      public createVouchersOrderFailureGoBack_args getEmptyArgsInstance() {
        return new createVouchersOrderFailureGoBack_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            createVouchersOrderFailureGoBack_result result = new createVouchersOrderFailureGoBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createVouchersOrderFailureGoBack_result result = new createVouchersOrderFailureGoBack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createVouchersOrderFailureGoBack_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.createVouchersOrderFailureGoBack(args.createVouchersOrderFailureGoBackReq,resultHandler);
      }
    }

    public static class payResultNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, payResultNotice_args, com.froad.thrift.vo.ResultVo> {
      public payResultNotice() {
        super("payResultNotice");
      }

      public payResultNotice_args getEmptyArgsInstance() {
        return new payResultNotice_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            payResultNotice_result result = new payResultNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            payResultNotice_result result = new payResultNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, payResultNotice_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.payResultNotice(args.payResultNoticeReq,resultHandler);
      }
    }

    public static class closeVouchersOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeVouchersOrder_args, com.froad.thrift.vo.ResultVo> {
      public closeVouchersOrder() {
        super("closeVouchersOrder");
      }

      public closeVouchersOrder_args getEmptyArgsInstance() {
        return new closeVouchersOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            closeVouchersOrder_result result = new closeVouchersOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeVouchersOrder_result result = new closeVouchersOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeVouchersOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.closeVouchersOrder(args.closeVouchersOrderReq,resultHandler);
      }
    }

    public static class vouchersToRedPack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, vouchersToRedPack_args, com.froad.thrift.vo.ResultVo> {
      public vouchersToRedPack() {
        super("vouchersToRedPack");
      }

      public vouchersToRedPack_args getEmptyArgsInstance() {
        return new vouchersToRedPack_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            vouchersToRedPack_result result = new vouchersToRedPack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            vouchersToRedPack_result result = new vouchersToRedPack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, vouchersToRedPack_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.vouchersToRedPack(args.vouchersToRedPackReqVo,resultHandler);
      }
    }

  }

  public static class findVouchersOfSubmit_args implements org.apache.thrift.TBase<findVouchersOfSubmit_args, findVouchersOfSubmit_args._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersOfSubmit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersOfSubmit_args");

    private static final org.apache.thrift.protocol.TField FIND_VOUCHERS_OF_SUBMIT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("findVouchersOfSubmitReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersOfSubmit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersOfSubmit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_VOUCHERS_OF_SUBMIT_REQ((short)1, "findVouchersOfSubmitReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_VOUCHERS_OF_SUBMIT_REQ
            return FIND_VOUCHERS_OF_SUBMIT_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_VOUCHERS_OF_SUBMIT_REQ, new org.apache.thrift.meta_data.FieldMetaData("findVouchersOfSubmitReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersOfSubmit_args.class, metaDataMap);
    }

    public findVouchersOfSubmit_args() {
    }

    public findVouchersOfSubmit_args(
      com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq)
    {
      this();
      this.findVouchersOfSubmitReq = findVouchersOfSubmitReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersOfSubmit_args(findVouchersOfSubmit_args other) {
      if (other.isSetFindVouchersOfSubmitReq()) {
        this.findVouchersOfSubmitReq = new com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo(other.findVouchersOfSubmitReq);
      }
    }

    public findVouchersOfSubmit_args deepCopy() {
      return new findVouchersOfSubmit_args(this);
    }

    @Override
    public void clear() {
      this.findVouchersOfSubmitReq = null;
    }

    public com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo getFindVouchersOfSubmitReq() {
      return this.findVouchersOfSubmitReq;
    }

    public findVouchersOfSubmit_args setFindVouchersOfSubmitReq(com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo findVouchersOfSubmitReq) {
      this.findVouchersOfSubmitReq = findVouchersOfSubmitReq;
      return this;
    }

    public void unsetFindVouchersOfSubmitReq() {
      this.findVouchersOfSubmitReq = null;
    }

    /** Returns true if field findVouchersOfSubmitReq is set (has been assigned a value) and false otherwise */
    public boolean isSetFindVouchersOfSubmitReq() {
      return this.findVouchersOfSubmitReq != null;
    }

    public void setFindVouchersOfSubmitReqIsSet(boolean value) {
      if (!value) {
        this.findVouchersOfSubmitReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_VOUCHERS_OF_SUBMIT_REQ:
        if (value == null) {
          unsetFindVouchersOfSubmitReq();
        } else {
          setFindVouchersOfSubmitReq((com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_VOUCHERS_OF_SUBMIT_REQ:
        return getFindVouchersOfSubmitReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_VOUCHERS_OF_SUBMIT_REQ:
        return isSetFindVouchersOfSubmitReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersOfSubmit_args)
        return this.equals((findVouchersOfSubmit_args)that);
      return false;
    }

    public boolean equals(findVouchersOfSubmit_args that) {
      if (that == null)
        return false;

      boolean this_present_findVouchersOfSubmitReq = true && this.isSetFindVouchersOfSubmitReq();
      boolean that_present_findVouchersOfSubmitReq = true && that.isSetFindVouchersOfSubmitReq();
      if (this_present_findVouchersOfSubmitReq || that_present_findVouchersOfSubmitReq) {
        if (!(this_present_findVouchersOfSubmitReq && that_present_findVouchersOfSubmitReq))
          return false;
        if (!this.findVouchersOfSubmitReq.equals(that.findVouchersOfSubmitReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findVouchersOfSubmitReq = true && (isSetFindVouchersOfSubmitReq());
      list.add(present_findVouchersOfSubmitReq);
      if (present_findVouchersOfSubmitReq)
        list.add(findVouchersOfSubmitReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersOfSubmit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindVouchersOfSubmitReq()).compareTo(other.isSetFindVouchersOfSubmitReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindVouchersOfSubmitReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findVouchersOfSubmitReq, other.findVouchersOfSubmitReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersOfSubmit_args(");
      boolean first = true;

      sb.append("findVouchersOfSubmitReq:");
      if (this.findVouchersOfSubmitReq == null) {
        sb.append("null");
      } else {
        sb.append(this.findVouchersOfSubmitReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findVouchersOfSubmitReq != null) {
        findVouchersOfSubmitReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersOfSubmit_argsStandardSchemeFactory implements SchemeFactory {
      public findVouchersOfSubmit_argsStandardScheme getScheme() {
        return new findVouchersOfSubmit_argsStandardScheme();
      }
    }

    private static class findVouchersOfSubmit_argsStandardScheme extends StandardScheme<findVouchersOfSubmit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersOfSubmit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_VOUCHERS_OF_SUBMIT_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findVouchersOfSubmitReq = new com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo();
                struct.findVouchersOfSubmitReq.read(iprot);
                struct.setFindVouchersOfSubmitReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersOfSubmit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findVouchersOfSubmitReq != null) {
          oprot.writeFieldBegin(FIND_VOUCHERS_OF_SUBMIT_REQ_FIELD_DESC);
          struct.findVouchersOfSubmitReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersOfSubmit_argsTupleSchemeFactory implements SchemeFactory {
      public findVouchersOfSubmit_argsTupleScheme getScheme() {
        return new findVouchersOfSubmit_argsTupleScheme();
      }
    }

    private static class findVouchersOfSubmit_argsTupleScheme extends TupleScheme<findVouchersOfSubmit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersOfSubmit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindVouchersOfSubmitReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindVouchersOfSubmitReq()) {
          struct.findVouchersOfSubmitReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersOfSubmit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findVouchersOfSubmitReq = new com.froad.thrift.vo.active.FindVouchersOfSubmitReqVo();
          struct.findVouchersOfSubmitReq.read(iprot);
          struct.setFindVouchersOfSubmitReqIsSet(true);
        }
      }
    }

  }

  public static class findVouchersOfSubmit_result implements org.apache.thrift.TBase<findVouchersOfSubmit_result, findVouchersOfSubmit_result._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersOfSubmit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersOfSubmit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersOfSubmit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersOfSubmit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersOfSubmit_result.class, metaDataMap);
    }

    public findVouchersOfSubmit_result() {
    }

    public findVouchersOfSubmit_result(
      com.froad.thrift.vo.active.FindVouchersResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersOfSubmit_result(findVouchersOfSubmit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersResVo(other.success);
      }
    }

    public findVouchersOfSubmit_result deepCopy() {
      return new findVouchersOfSubmit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersResVo getSuccess() {
      return this.success;
    }

    public findVouchersOfSubmit_result setSuccess(com.froad.thrift.vo.active.FindVouchersResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersOfSubmit_result)
        return this.equals((findVouchersOfSubmit_result)that);
      return false;
    }

    public boolean equals(findVouchersOfSubmit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersOfSubmit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersOfSubmit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersOfSubmit_resultStandardSchemeFactory implements SchemeFactory {
      public findVouchersOfSubmit_resultStandardScheme getScheme() {
        return new findVouchersOfSubmit_resultStandardScheme();
      }
    }

    private static class findVouchersOfSubmit_resultStandardScheme extends StandardScheme<findVouchersOfSubmit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersOfSubmit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersOfSubmit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersOfSubmit_resultTupleSchemeFactory implements SchemeFactory {
      public findVouchersOfSubmit_resultTupleScheme getScheme() {
        return new findVouchersOfSubmit_resultTupleScheme();
      }
    }

    private static class findVouchersOfSubmit_resultTupleScheme extends TupleScheme<findVouchersOfSubmit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersOfSubmit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersOfSubmit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findVouchersOfCenter_args implements org.apache.thrift.TBase<findVouchersOfCenter_args, findVouchersOfCenter_args._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersOfCenter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersOfCenter_args");

    private static final org.apache.thrift.protocol.TField FIND_VOUCHERS_OF_CENTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("findVouchersOfCenterReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersOfCenter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersOfCenter_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_VOUCHERS_OF_CENTER_REQ((short)1, "findVouchersOfCenterReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_VOUCHERS_OF_CENTER_REQ
            return FIND_VOUCHERS_OF_CENTER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_VOUCHERS_OF_CENTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("findVouchersOfCenterReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersOfCenterReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersOfCenter_args.class, metaDataMap);
    }

    public findVouchersOfCenter_args() {
    }

    public findVouchersOfCenter_args(
      com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq)
    {
      this();
      this.findVouchersOfCenterReq = findVouchersOfCenterReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersOfCenter_args(findVouchersOfCenter_args other) {
      if (other.isSetFindVouchersOfCenterReq()) {
        this.findVouchersOfCenterReq = new com.froad.thrift.vo.active.FindVouchersOfCenterReqVo(other.findVouchersOfCenterReq);
      }
    }

    public findVouchersOfCenter_args deepCopy() {
      return new findVouchersOfCenter_args(this);
    }

    @Override
    public void clear() {
      this.findVouchersOfCenterReq = null;
    }

    public com.froad.thrift.vo.active.FindVouchersOfCenterReqVo getFindVouchersOfCenterReq() {
      return this.findVouchersOfCenterReq;
    }

    public findVouchersOfCenter_args setFindVouchersOfCenterReq(com.froad.thrift.vo.active.FindVouchersOfCenterReqVo findVouchersOfCenterReq) {
      this.findVouchersOfCenterReq = findVouchersOfCenterReq;
      return this;
    }

    public void unsetFindVouchersOfCenterReq() {
      this.findVouchersOfCenterReq = null;
    }

    /** Returns true if field findVouchersOfCenterReq is set (has been assigned a value) and false otherwise */
    public boolean isSetFindVouchersOfCenterReq() {
      return this.findVouchersOfCenterReq != null;
    }

    public void setFindVouchersOfCenterReqIsSet(boolean value) {
      if (!value) {
        this.findVouchersOfCenterReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_VOUCHERS_OF_CENTER_REQ:
        if (value == null) {
          unsetFindVouchersOfCenterReq();
        } else {
          setFindVouchersOfCenterReq((com.froad.thrift.vo.active.FindVouchersOfCenterReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_VOUCHERS_OF_CENTER_REQ:
        return getFindVouchersOfCenterReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_VOUCHERS_OF_CENTER_REQ:
        return isSetFindVouchersOfCenterReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersOfCenter_args)
        return this.equals((findVouchersOfCenter_args)that);
      return false;
    }

    public boolean equals(findVouchersOfCenter_args that) {
      if (that == null)
        return false;

      boolean this_present_findVouchersOfCenterReq = true && this.isSetFindVouchersOfCenterReq();
      boolean that_present_findVouchersOfCenterReq = true && that.isSetFindVouchersOfCenterReq();
      if (this_present_findVouchersOfCenterReq || that_present_findVouchersOfCenterReq) {
        if (!(this_present_findVouchersOfCenterReq && that_present_findVouchersOfCenterReq))
          return false;
        if (!this.findVouchersOfCenterReq.equals(that.findVouchersOfCenterReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findVouchersOfCenterReq = true && (isSetFindVouchersOfCenterReq());
      list.add(present_findVouchersOfCenterReq);
      if (present_findVouchersOfCenterReq)
        list.add(findVouchersOfCenterReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersOfCenter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindVouchersOfCenterReq()).compareTo(other.isSetFindVouchersOfCenterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindVouchersOfCenterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findVouchersOfCenterReq, other.findVouchersOfCenterReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersOfCenter_args(");
      boolean first = true;

      sb.append("findVouchersOfCenterReq:");
      if (this.findVouchersOfCenterReq == null) {
        sb.append("null");
      } else {
        sb.append(this.findVouchersOfCenterReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findVouchersOfCenterReq != null) {
        findVouchersOfCenterReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersOfCenter_argsStandardSchemeFactory implements SchemeFactory {
      public findVouchersOfCenter_argsStandardScheme getScheme() {
        return new findVouchersOfCenter_argsStandardScheme();
      }
    }

    private static class findVouchersOfCenter_argsStandardScheme extends StandardScheme<findVouchersOfCenter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersOfCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_VOUCHERS_OF_CENTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findVouchersOfCenterReq = new com.froad.thrift.vo.active.FindVouchersOfCenterReqVo();
                struct.findVouchersOfCenterReq.read(iprot);
                struct.setFindVouchersOfCenterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersOfCenter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findVouchersOfCenterReq != null) {
          oprot.writeFieldBegin(FIND_VOUCHERS_OF_CENTER_REQ_FIELD_DESC);
          struct.findVouchersOfCenterReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersOfCenter_argsTupleSchemeFactory implements SchemeFactory {
      public findVouchersOfCenter_argsTupleScheme getScheme() {
        return new findVouchersOfCenter_argsTupleScheme();
      }
    }

    private static class findVouchersOfCenter_argsTupleScheme extends TupleScheme<findVouchersOfCenter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersOfCenter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindVouchersOfCenterReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindVouchersOfCenterReq()) {
          struct.findVouchersOfCenterReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersOfCenter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findVouchersOfCenterReq = new com.froad.thrift.vo.active.FindVouchersOfCenterReqVo();
          struct.findVouchersOfCenterReq.read(iprot);
          struct.setFindVouchersOfCenterReqIsSet(true);
        }
      }
    }

  }

  public static class findVouchersOfCenter_result implements org.apache.thrift.TBase<findVouchersOfCenter_result, findVouchersOfCenter_result._Fields>, java.io.Serializable, Cloneable, Comparable<findVouchersOfCenter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVouchersOfCenter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVouchersOfCenter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVouchersOfCenter_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVouchersOfCenter_result.class, metaDataMap);
    }

    public findVouchersOfCenter_result() {
    }

    public findVouchersOfCenter_result(
      com.froad.thrift.vo.active.FindVouchersResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVouchersOfCenter_result(findVouchersOfCenter_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersResVo(other.success);
      }
    }

    public findVouchersOfCenter_result deepCopy() {
      return new findVouchersOfCenter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersResVo getSuccess() {
      return this.success;
    }

    public findVouchersOfCenter_result setSuccess(com.froad.thrift.vo.active.FindVouchersResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVouchersOfCenter_result)
        return this.equals((findVouchersOfCenter_result)that);
      return false;
    }

    public boolean equals(findVouchersOfCenter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findVouchersOfCenter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVouchersOfCenter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVouchersOfCenter_resultStandardSchemeFactory implements SchemeFactory {
      public findVouchersOfCenter_resultStandardScheme getScheme() {
        return new findVouchersOfCenter_resultStandardScheme();
      }
    }

    private static class findVouchersOfCenter_resultStandardScheme extends StandardScheme<findVouchersOfCenter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVouchersOfCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVouchersOfCenter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVouchersOfCenter_resultTupleSchemeFactory implements SchemeFactory {
      public findVouchersOfCenter_resultTupleScheme getScheme() {
        return new findVouchersOfCenter_resultTupleScheme();
      }
    }

    private static class findVouchersOfCenter_resultTupleScheme extends TupleScheme<findVouchersOfCenter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVouchersOfCenter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVouchersOfCenter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkVouchers_args implements org.apache.thrift.TBase<checkVouchers_args, checkVouchers_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkVouchers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVouchers_args");

    private static final org.apache.thrift.protocol.TField CHECK_VOUCHERS_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("checkVouchersReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVouchers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVouchers_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_VOUCHERS_REQ((short)1, "checkVouchersReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_VOUCHERS_REQ
            return CHECK_VOUCHERS_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_VOUCHERS_REQ, new org.apache.thrift.meta_data.FieldMetaData("checkVouchersReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CheckVouchersReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVouchers_args.class, metaDataMap);
    }

    public checkVouchers_args() {
    }

    public checkVouchers_args(
      com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq)
    {
      this();
      this.checkVouchersReq = checkVouchersReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVouchers_args(checkVouchers_args other) {
      if (other.isSetCheckVouchersReq()) {
        this.checkVouchersReq = new com.froad.thrift.vo.active.CheckVouchersReqVo(other.checkVouchersReq);
      }
    }

    public checkVouchers_args deepCopy() {
      return new checkVouchers_args(this);
    }

    @Override
    public void clear() {
      this.checkVouchersReq = null;
    }

    public com.froad.thrift.vo.active.CheckVouchersReqVo getCheckVouchersReq() {
      return this.checkVouchersReq;
    }

    public checkVouchers_args setCheckVouchersReq(com.froad.thrift.vo.active.CheckVouchersReqVo checkVouchersReq) {
      this.checkVouchersReq = checkVouchersReq;
      return this;
    }

    public void unsetCheckVouchersReq() {
      this.checkVouchersReq = null;
    }

    /** Returns true if field checkVouchersReq is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckVouchersReq() {
      return this.checkVouchersReq != null;
    }

    public void setCheckVouchersReqIsSet(boolean value) {
      if (!value) {
        this.checkVouchersReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_VOUCHERS_REQ:
        if (value == null) {
          unsetCheckVouchersReq();
        } else {
          setCheckVouchersReq((com.froad.thrift.vo.active.CheckVouchersReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_VOUCHERS_REQ:
        return getCheckVouchersReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_VOUCHERS_REQ:
        return isSetCheckVouchersReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVouchers_args)
        return this.equals((checkVouchers_args)that);
      return false;
    }

    public boolean equals(checkVouchers_args that) {
      if (that == null)
        return false;

      boolean this_present_checkVouchersReq = true && this.isSetCheckVouchersReq();
      boolean that_present_checkVouchersReq = true && that.isSetCheckVouchersReq();
      if (this_present_checkVouchersReq || that_present_checkVouchersReq) {
        if (!(this_present_checkVouchersReq && that_present_checkVouchersReq))
          return false;
        if (!this.checkVouchersReq.equals(that.checkVouchersReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkVouchersReq = true && (isSetCheckVouchersReq());
      list.add(present_checkVouchersReq);
      if (present_checkVouchersReq)
        list.add(checkVouchersReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkVouchers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckVouchersReq()).compareTo(other.isSetCheckVouchersReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckVouchersReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkVouchersReq, other.checkVouchersReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVouchers_args(");
      boolean first = true;

      sb.append("checkVouchersReq:");
      if (this.checkVouchersReq == null) {
        sb.append("null");
      } else {
        sb.append(this.checkVouchersReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkVouchersReq != null) {
        checkVouchersReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVouchers_argsStandardSchemeFactory implements SchemeFactory {
      public checkVouchers_argsStandardScheme getScheme() {
        return new checkVouchers_argsStandardScheme();
      }
    }

    private static class checkVouchers_argsStandardScheme extends StandardScheme<checkVouchers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVouchers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_VOUCHERS_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkVouchersReq = new com.froad.thrift.vo.active.CheckVouchersReqVo();
                struct.checkVouchersReq.read(iprot);
                struct.setCheckVouchersReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVouchers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkVouchersReq != null) {
          oprot.writeFieldBegin(CHECK_VOUCHERS_REQ_FIELD_DESC);
          struct.checkVouchersReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVouchers_argsTupleSchemeFactory implements SchemeFactory {
      public checkVouchers_argsTupleScheme getScheme() {
        return new checkVouchers_argsTupleScheme();
      }
    }

    private static class checkVouchers_argsTupleScheme extends TupleScheme<checkVouchers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVouchers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckVouchersReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckVouchersReq()) {
          struct.checkVouchersReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVouchers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkVouchersReq = new com.froad.thrift.vo.active.CheckVouchersReqVo();
          struct.checkVouchersReq.read(iprot);
          struct.setCheckVouchersReqIsSet(true);
        }
      }
    }

  }

  public static class checkVouchers_result implements org.apache.thrift.TBase<checkVouchers_result, checkVouchers_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkVouchers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVouchers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVouchers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVouchers_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CheckVouchersResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CheckVouchersResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVouchers_result.class, metaDataMap);
    }

    public checkVouchers_result() {
    }

    public checkVouchers_result(
      com.froad.thrift.vo.active.CheckVouchersResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVouchers_result(checkVouchers_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.CheckVouchersResVo(other.success);
      }
    }

    public checkVouchers_result deepCopy() {
      return new checkVouchers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.CheckVouchersResVo getSuccess() {
      return this.success;
    }

    public checkVouchers_result setSuccess(com.froad.thrift.vo.active.CheckVouchersResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.CheckVouchersResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVouchers_result)
        return this.equals((checkVouchers_result)that);
      return false;
    }

    public boolean equals(checkVouchers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkVouchers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVouchers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVouchers_resultStandardSchemeFactory implements SchemeFactory {
      public checkVouchers_resultStandardScheme getScheme() {
        return new checkVouchers_resultStandardScheme();
      }
    }

    private static class checkVouchers_resultStandardScheme extends StandardScheme<checkVouchers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVouchers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.CheckVouchersResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVouchers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVouchers_resultTupleSchemeFactory implements SchemeFactory {
      public checkVouchers_resultTupleScheme getScheme() {
        return new checkVouchers_resultTupleScheme();
      }
    }

    private static class checkVouchers_resultTupleScheme extends TupleScheme<checkVouchers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVouchers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVouchers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.CheckVouchersResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createVouchersOrderFailureGoBack_args implements org.apache.thrift.TBase<createVouchersOrderFailureGoBack_args, createVouchersOrderFailureGoBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<createVouchersOrderFailureGoBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVouchersOrderFailureGoBack_args");

    private static final org.apache.thrift.protocol.TField CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("createVouchersOrderFailureGoBackReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVouchersOrderFailureGoBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVouchersOrderFailureGoBack_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ((short)1, "createVouchersOrderFailureGoBackReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ
            return CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ, new org.apache.thrift.meta_data.FieldMetaData("createVouchersOrderFailureGoBackReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVouchersOrderFailureGoBack_args.class, metaDataMap);
    }

    public createVouchersOrderFailureGoBack_args() {
    }

    public createVouchersOrderFailureGoBack_args(
      com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq)
    {
      this();
      this.createVouchersOrderFailureGoBackReq = createVouchersOrderFailureGoBackReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVouchersOrderFailureGoBack_args(createVouchersOrderFailureGoBack_args other) {
      if (other.isSetCreateVouchersOrderFailureGoBackReq()) {
        this.createVouchersOrderFailureGoBackReq = new com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo(other.createVouchersOrderFailureGoBackReq);
      }
    }

    public createVouchersOrderFailureGoBack_args deepCopy() {
      return new createVouchersOrderFailureGoBack_args(this);
    }

    @Override
    public void clear() {
      this.createVouchersOrderFailureGoBackReq = null;
    }

    public com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo getCreateVouchersOrderFailureGoBackReq() {
      return this.createVouchersOrderFailureGoBackReq;
    }

    public createVouchersOrderFailureGoBack_args setCreateVouchersOrderFailureGoBackReq(com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo createVouchersOrderFailureGoBackReq) {
      this.createVouchersOrderFailureGoBackReq = createVouchersOrderFailureGoBackReq;
      return this;
    }

    public void unsetCreateVouchersOrderFailureGoBackReq() {
      this.createVouchersOrderFailureGoBackReq = null;
    }

    /** Returns true if field createVouchersOrderFailureGoBackReq is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateVouchersOrderFailureGoBackReq() {
      return this.createVouchersOrderFailureGoBackReq != null;
    }

    public void setCreateVouchersOrderFailureGoBackReqIsSet(boolean value) {
      if (!value) {
        this.createVouchersOrderFailureGoBackReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ:
        if (value == null) {
          unsetCreateVouchersOrderFailureGoBackReq();
        } else {
          setCreateVouchersOrderFailureGoBackReq((com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ:
        return getCreateVouchersOrderFailureGoBackReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ:
        return isSetCreateVouchersOrderFailureGoBackReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVouchersOrderFailureGoBack_args)
        return this.equals((createVouchersOrderFailureGoBack_args)that);
      return false;
    }

    public boolean equals(createVouchersOrderFailureGoBack_args that) {
      if (that == null)
        return false;

      boolean this_present_createVouchersOrderFailureGoBackReq = true && this.isSetCreateVouchersOrderFailureGoBackReq();
      boolean that_present_createVouchersOrderFailureGoBackReq = true && that.isSetCreateVouchersOrderFailureGoBackReq();
      if (this_present_createVouchersOrderFailureGoBackReq || that_present_createVouchersOrderFailureGoBackReq) {
        if (!(this_present_createVouchersOrderFailureGoBackReq && that_present_createVouchersOrderFailureGoBackReq))
          return false;
        if (!this.createVouchersOrderFailureGoBackReq.equals(that.createVouchersOrderFailureGoBackReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_createVouchersOrderFailureGoBackReq = true && (isSetCreateVouchersOrderFailureGoBackReq());
      list.add(present_createVouchersOrderFailureGoBackReq);
      if (present_createVouchersOrderFailureGoBackReq)
        list.add(createVouchersOrderFailureGoBackReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(createVouchersOrderFailureGoBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCreateVouchersOrderFailureGoBackReq()).compareTo(other.isSetCreateVouchersOrderFailureGoBackReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateVouchersOrderFailureGoBackReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createVouchersOrderFailureGoBackReq, other.createVouchersOrderFailureGoBackReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVouchersOrderFailureGoBack_args(");
      boolean first = true;

      sb.append("createVouchersOrderFailureGoBackReq:");
      if (this.createVouchersOrderFailureGoBackReq == null) {
        sb.append("null");
      } else {
        sb.append(this.createVouchersOrderFailureGoBackReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (createVouchersOrderFailureGoBackReq != null) {
        createVouchersOrderFailureGoBackReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVouchersOrderFailureGoBack_argsStandardSchemeFactory implements SchemeFactory {
      public createVouchersOrderFailureGoBack_argsStandardScheme getScheme() {
        return new createVouchersOrderFailureGoBack_argsStandardScheme();
      }
    }

    private static class createVouchersOrderFailureGoBack_argsStandardScheme extends StandardScheme<createVouchersOrderFailureGoBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVouchersOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.createVouchersOrderFailureGoBackReq = new com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo();
                struct.createVouchersOrderFailureGoBackReq.read(iprot);
                struct.setCreateVouchersOrderFailureGoBackReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVouchersOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.createVouchersOrderFailureGoBackReq != null) {
          oprot.writeFieldBegin(CREATE_VOUCHERS_ORDER_FAILURE_GO_BACK_REQ_FIELD_DESC);
          struct.createVouchersOrderFailureGoBackReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVouchersOrderFailureGoBack_argsTupleSchemeFactory implements SchemeFactory {
      public createVouchersOrderFailureGoBack_argsTupleScheme getScheme() {
        return new createVouchersOrderFailureGoBack_argsTupleScheme();
      }
    }

    private static class createVouchersOrderFailureGoBack_argsTupleScheme extends TupleScheme<createVouchersOrderFailureGoBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVouchersOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCreateVouchersOrderFailureGoBackReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCreateVouchersOrderFailureGoBackReq()) {
          struct.createVouchersOrderFailureGoBackReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVouchersOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.createVouchersOrderFailureGoBackReq = new com.froad.thrift.vo.active.CreateVouchersOrderFailureGoBackReqVo();
          struct.createVouchersOrderFailureGoBackReq.read(iprot);
          struct.setCreateVouchersOrderFailureGoBackReqIsSet(true);
        }
      }
    }

  }

  public static class createVouchersOrderFailureGoBack_result implements org.apache.thrift.TBase<createVouchersOrderFailureGoBack_result, createVouchersOrderFailureGoBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<createVouchersOrderFailureGoBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVouchersOrderFailureGoBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVouchersOrderFailureGoBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVouchersOrderFailureGoBack_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVouchersOrderFailureGoBack_result.class, metaDataMap);
    }

    public createVouchersOrderFailureGoBack_result() {
    }

    public createVouchersOrderFailureGoBack_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVouchersOrderFailureGoBack_result(createVouchersOrderFailureGoBack_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public createVouchersOrderFailureGoBack_result deepCopy() {
      return new createVouchersOrderFailureGoBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public createVouchersOrderFailureGoBack_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVouchersOrderFailureGoBack_result)
        return this.equals((createVouchersOrderFailureGoBack_result)that);
      return false;
    }

    public boolean equals(createVouchersOrderFailureGoBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createVouchersOrderFailureGoBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVouchersOrderFailureGoBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVouchersOrderFailureGoBack_resultStandardSchemeFactory implements SchemeFactory {
      public createVouchersOrderFailureGoBack_resultStandardScheme getScheme() {
        return new createVouchersOrderFailureGoBack_resultStandardScheme();
      }
    }

    private static class createVouchersOrderFailureGoBack_resultStandardScheme extends StandardScheme<createVouchersOrderFailureGoBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVouchersOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVouchersOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVouchersOrderFailureGoBack_resultTupleSchemeFactory implements SchemeFactory {
      public createVouchersOrderFailureGoBack_resultTupleScheme getScheme() {
        return new createVouchersOrderFailureGoBack_resultTupleScheme();
      }
    }

    private static class createVouchersOrderFailureGoBack_resultTupleScheme extends TupleScheme<createVouchersOrderFailureGoBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVouchersOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVouchersOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class payResultNotice_args implements org.apache.thrift.TBase<payResultNotice_args, payResultNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<payResultNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payResultNotice_args");

    private static final org.apache.thrift.protocol.TField PAY_RESULT_NOTICE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("payResultNoticeReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payResultNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payResultNotice_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAY_RESULT_NOTICE_REQ((short)1, "payResultNoticeReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAY_RESULT_NOTICE_REQ
            return PAY_RESULT_NOTICE_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAY_RESULT_NOTICE_REQ, new org.apache.thrift.meta_data.FieldMetaData("payResultNoticeReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.PayResultNoticeReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payResultNotice_args.class, metaDataMap);
    }

    public payResultNotice_args() {
    }

    public payResultNotice_args(
      com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq)
    {
      this();
      this.payResultNoticeReq = payResultNoticeReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payResultNotice_args(payResultNotice_args other) {
      if (other.isSetPayResultNoticeReq()) {
        this.payResultNoticeReq = new com.froad.thrift.vo.active.PayResultNoticeReqVo(other.payResultNoticeReq);
      }
    }

    public payResultNotice_args deepCopy() {
      return new payResultNotice_args(this);
    }

    @Override
    public void clear() {
      this.payResultNoticeReq = null;
    }

    public com.froad.thrift.vo.active.PayResultNoticeReqVo getPayResultNoticeReq() {
      return this.payResultNoticeReq;
    }

    public payResultNotice_args setPayResultNoticeReq(com.froad.thrift.vo.active.PayResultNoticeReqVo payResultNoticeReq) {
      this.payResultNoticeReq = payResultNoticeReq;
      return this;
    }

    public void unsetPayResultNoticeReq() {
      this.payResultNoticeReq = null;
    }

    /** Returns true if field payResultNoticeReq is set (has been assigned a value) and false otherwise */
    public boolean isSetPayResultNoticeReq() {
      return this.payResultNoticeReq != null;
    }

    public void setPayResultNoticeReqIsSet(boolean value) {
      if (!value) {
        this.payResultNoticeReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAY_RESULT_NOTICE_REQ:
        if (value == null) {
          unsetPayResultNoticeReq();
        } else {
          setPayResultNoticeReq((com.froad.thrift.vo.active.PayResultNoticeReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAY_RESULT_NOTICE_REQ:
        return getPayResultNoticeReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAY_RESULT_NOTICE_REQ:
        return isSetPayResultNoticeReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payResultNotice_args)
        return this.equals((payResultNotice_args)that);
      return false;
    }

    public boolean equals(payResultNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_payResultNoticeReq = true && this.isSetPayResultNoticeReq();
      boolean that_present_payResultNoticeReq = true && that.isSetPayResultNoticeReq();
      if (this_present_payResultNoticeReq || that_present_payResultNoticeReq) {
        if (!(this_present_payResultNoticeReq && that_present_payResultNoticeReq))
          return false;
        if (!this.payResultNoticeReq.equals(that.payResultNoticeReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_payResultNoticeReq = true && (isSetPayResultNoticeReq());
      list.add(present_payResultNoticeReq);
      if (present_payResultNoticeReq)
        list.add(payResultNoticeReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(payResultNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPayResultNoticeReq()).compareTo(other.isSetPayResultNoticeReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayResultNoticeReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payResultNoticeReq, other.payResultNoticeReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payResultNotice_args(");
      boolean first = true;

      sb.append("payResultNoticeReq:");
      if (this.payResultNoticeReq == null) {
        sb.append("null");
      } else {
        sb.append(this.payResultNoticeReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (payResultNoticeReq != null) {
        payResultNoticeReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payResultNotice_argsStandardSchemeFactory implements SchemeFactory {
      public payResultNotice_argsStandardScheme getScheme() {
        return new payResultNotice_argsStandardScheme();
      }
    }

    private static class payResultNotice_argsStandardScheme extends StandardScheme<payResultNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payResultNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAY_RESULT_NOTICE_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.payResultNoticeReq = new com.froad.thrift.vo.active.PayResultNoticeReqVo();
                struct.payResultNoticeReq.read(iprot);
                struct.setPayResultNoticeReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payResultNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.payResultNoticeReq != null) {
          oprot.writeFieldBegin(PAY_RESULT_NOTICE_REQ_FIELD_DESC);
          struct.payResultNoticeReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payResultNotice_argsTupleSchemeFactory implements SchemeFactory {
      public payResultNotice_argsTupleScheme getScheme() {
        return new payResultNotice_argsTupleScheme();
      }
    }

    private static class payResultNotice_argsTupleScheme extends TupleScheme<payResultNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payResultNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPayResultNoticeReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPayResultNoticeReq()) {
          struct.payResultNoticeReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payResultNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.payResultNoticeReq = new com.froad.thrift.vo.active.PayResultNoticeReqVo();
          struct.payResultNoticeReq.read(iprot);
          struct.setPayResultNoticeReqIsSet(true);
        }
      }
    }

  }

  public static class payResultNotice_result implements org.apache.thrift.TBase<payResultNotice_result, payResultNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<payResultNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payResultNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payResultNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payResultNotice_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payResultNotice_result.class, metaDataMap);
    }

    public payResultNotice_result() {
    }

    public payResultNotice_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payResultNotice_result(payResultNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public payResultNotice_result deepCopy() {
      return new payResultNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public payResultNotice_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payResultNotice_result)
        return this.equals((payResultNotice_result)that);
      return false;
    }

    public boolean equals(payResultNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(payResultNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payResultNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payResultNotice_resultStandardSchemeFactory implements SchemeFactory {
      public payResultNotice_resultStandardScheme getScheme() {
        return new payResultNotice_resultStandardScheme();
      }
    }

    private static class payResultNotice_resultStandardScheme extends StandardScheme<payResultNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payResultNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payResultNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payResultNotice_resultTupleSchemeFactory implements SchemeFactory {
      public payResultNotice_resultTupleScheme getScheme() {
        return new payResultNotice_resultTupleScheme();
      }
    }

    private static class payResultNotice_resultTupleScheme extends TupleScheme<payResultNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payResultNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payResultNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeVouchersOrder_args implements org.apache.thrift.TBase<closeVouchersOrder_args, closeVouchersOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeVouchersOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeVouchersOrder_args");

    private static final org.apache.thrift.protocol.TField CLOSE_VOUCHERS_ORDER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("closeVouchersOrderReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeVouchersOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeVouchersOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOSE_VOUCHERS_ORDER_REQ((short)1, "closeVouchersOrderReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOSE_VOUCHERS_ORDER_REQ
            return CLOSE_VOUCHERS_ORDER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOSE_VOUCHERS_ORDER_REQ, new org.apache.thrift.meta_data.FieldMetaData("closeVouchersOrderReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CloseVouchersOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeVouchersOrder_args.class, metaDataMap);
    }

    public closeVouchersOrder_args() {
    }

    public closeVouchersOrder_args(
      com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq)
    {
      this();
      this.closeVouchersOrderReq = closeVouchersOrderReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeVouchersOrder_args(closeVouchersOrder_args other) {
      if (other.isSetCloseVouchersOrderReq()) {
        this.closeVouchersOrderReq = new com.froad.thrift.vo.active.CloseVouchersOrderReqVo(other.closeVouchersOrderReq);
      }
    }

    public closeVouchersOrder_args deepCopy() {
      return new closeVouchersOrder_args(this);
    }

    @Override
    public void clear() {
      this.closeVouchersOrderReq = null;
    }

    public com.froad.thrift.vo.active.CloseVouchersOrderReqVo getCloseVouchersOrderReq() {
      return this.closeVouchersOrderReq;
    }

    public closeVouchersOrder_args setCloseVouchersOrderReq(com.froad.thrift.vo.active.CloseVouchersOrderReqVo closeVouchersOrderReq) {
      this.closeVouchersOrderReq = closeVouchersOrderReq;
      return this;
    }

    public void unsetCloseVouchersOrderReq() {
      this.closeVouchersOrderReq = null;
    }

    /** Returns true if field closeVouchersOrderReq is set (has been assigned a value) and false otherwise */
    public boolean isSetCloseVouchersOrderReq() {
      return this.closeVouchersOrderReq != null;
    }

    public void setCloseVouchersOrderReqIsSet(boolean value) {
      if (!value) {
        this.closeVouchersOrderReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLOSE_VOUCHERS_ORDER_REQ:
        if (value == null) {
          unsetCloseVouchersOrderReq();
        } else {
          setCloseVouchersOrderReq((com.froad.thrift.vo.active.CloseVouchersOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOSE_VOUCHERS_ORDER_REQ:
        return getCloseVouchersOrderReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLOSE_VOUCHERS_ORDER_REQ:
        return isSetCloseVouchersOrderReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeVouchersOrder_args)
        return this.equals((closeVouchersOrder_args)that);
      return false;
    }

    public boolean equals(closeVouchersOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_closeVouchersOrderReq = true && this.isSetCloseVouchersOrderReq();
      boolean that_present_closeVouchersOrderReq = true && that.isSetCloseVouchersOrderReq();
      if (this_present_closeVouchersOrderReq || that_present_closeVouchersOrderReq) {
        if (!(this_present_closeVouchersOrderReq && that_present_closeVouchersOrderReq))
          return false;
        if (!this.closeVouchersOrderReq.equals(that.closeVouchersOrderReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_closeVouchersOrderReq = true && (isSetCloseVouchersOrderReq());
      list.add(present_closeVouchersOrderReq);
      if (present_closeVouchersOrderReq)
        list.add(closeVouchersOrderReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeVouchersOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCloseVouchersOrderReq()).compareTo(other.isSetCloseVouchersOrderReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloseVouchersOrderReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeVouchersOrderReq, other.closeVouchersOrderReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeVouchersOrder_args(");
      boolean first = true;

      sb.append("closeVouchersOrderReq:");
      if (this.closeVouchersOrderReq == null) {
        sb.append("null");
      } else {
        sb.append(this.closeVouchersOrderReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (closeVouchersOrderReq != null) {
        closeVouchersOrderReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeVouchersOrder_argsStandardSchemeFactory implements SchemeFactory {
      public closeVouchersOrder_argsStandardScheme getScheme() {
        return new closeVouchersOrder_argsStandardScheme();
      }
    }

    private static class closeVouchersOrder_argsStandardScheme extends StandardScheme<closeVouchersOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeVouchersOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOSE_VOUCHERS_ORDER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.closeVouchersOrderReq = new com.froad.thrift.vo.active.CloseVouchersOrderReqVo();
                struct.closeVouchersOrderReq.read(iprot);
                struct.setCloseVouchersOrderReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeVouchersOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.closeVouchersOrderReq != null) {
          oprot.writeFieldBegin(CLOSE_VOUCHERS_ORDER_REQ_FIELD_DESC);
          struct.closeVouchersOrderReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeVouchersOrder_argsTupleSchemeFactory implements SchemeFactory {
      public closeVouchersOrder_argsTupleScheme getScheme() {
        return new closeVouchersOrder_argsTupleScheme();
      }
    }

    private static class closeVouchersOrder_argsTupleScheme extends TupleScheme<closeVouchersOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeVouchersOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCloseVouchersOrderReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloseVouchersOrderReq()) {
          struct.closeVouchersOrderReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeVouchersOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.closeVouchersOrderReq = new com.froad.thrift.vo.active.CloseVouchersOrderReqVo();
          struct.closeVouchersOrderReq.read(iprot);
          struct.setCloseVouchersOrderReqIsSet(true);
        }
      }
    }

  }

  public static class closeVouchersOrder_result implements org.apache.thrift.TBase<closeVouchersOrder_result, closeVouchersOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeVouchersOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeVouchersOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeVouchersOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeVouchersOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeVouchersOrder_result.class, metaDataMap);
    }

    public closeVouchersOrder_result() {
    }

    public closeVouchersOrder_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeVouchersOrder_result(closeVouchersOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public closeVouchersOrder_result deepCopy() {
      return new closeVouchersOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public closeVouchersOrder_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeVouchersOrder_result)
        return this.equals((closeVouchersOrder_result)that);
      return false;
    }

    public boolean equals(closeVouchersOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeVouchersOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeVouchersOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeVouchersOrder_resultStandardSchemeFactory implements SchemeFactory {
      public closeVouchersOrder_resultStandardScheme getScheme() {
        return new closeVouchersOrder_resultStandardScheme();
      }
    }

    private static class closeVouchersOrder_resultStandardScheme extends StandardScheme<closeVouchersOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeVouchersOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeVouchersOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeVouchersOrder_resultTupleSchemeFactory implements SchemeFactory {
      public closeVouchersOrder_resultTupleScheme getScheme() {
        return new closeVouchersOrder_resultTupleScheme();
      }
    }

    private static class closeVouchersOrder_resultTupleScheme extends TupleScheme<closeVouchersOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeVouchersOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeVouchersOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class vouchersToRedPack_args implements org.apache.thrift.TBase<vouchersToRedPack_args, vouchersToRedPack_args._Fields>, java.io.Serializable, Cloneable, Comparable<vouchersToRedPack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vouchersToRedPack_args");

    private static final org.apache.thrift.protocol.TField VOUCHERS_TO_RED_PACK_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersToRedPackReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new vouchersToRedPack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new vouchersToRedPack_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOUCHERS_TO_RED_PACK_REQ_VO((short)1, "vouchersToRedPackReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOUCHERS_TO_RED_PACK_REQ_VO
            return VOUCHERS_TO_RED_PACK_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOUCHERS_TO_RED_PACK_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("vouchersToRedPackReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.VouchersToRedPackReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vouchersToRedPack_args.class, metaDataMap);
    }

    public vouchersToRedPack_args() {
    }

    public vouchersToRedPack_args(
      com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo)
    {
      this();
      this.vouchersToRedPackReqVo = vouchersToRedPackReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public vouchersToRedPack_args(vouchersToRedPack_args other) {
      if (other.isSetVouchersToRedPackReqVo()) {
        this.vouchersToRedPackReqVo = new com.froad.thrift.vo.active.VouchersToRedPackReqVo(other.vouchersToRedPackReqVo);
      }
    }

    public vouchersToRedPack_args deepCopy() {
      return new vouchersToRedPack_args(this);
    }

    @Override
    public void clear() {
      this.vouchersToRedPackReqVo = null;
    }

    public com.froad.thrift.vo.active.VouchersToRedPackReqVo getVouchersToRedPackReqVo() {
      return this.vouchersToRedPackReqVo;
    }

    public vouchersToRedPack_args setVouchersToRedPackReqVo(com.froad.thrift.vo.active.VouchersToRedPackReqVo vouchersToRedPackReqVo) {
      this.vouchersToRedPackReqVo = vouchersToRedPackReqVo;
      return this;
    }

    public void unsetVouchersToRedPackReqVo() {
      this.vouchersToRedPackReqVo = null;
    }

    /** Returns true if field vouchersToRedPackReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVouchersToRedPackReqVo() {
      return this.vouchersToRedPackReqVo != null;
    }

    public void setVouchersToRedPackReqVoIsSet(boolean value) {
      if (!value) {
        this.vouchersToRedPackReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOUCHERS_TO_RED_PACK_REQ_VO:
        if (value == null) {
          unsetVouchersToRedPackReqVo();
        } else {
          setVouchersToRedPackReqVo((com.froad.thrift.vo.active.VouchersToRedPackReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOUCHERS_TO_RED_PACK_REQ_VO:
        return getVouchersToRedPackReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOUCHERS_TO_RED_PACK_REQ_VO:
        return isSetVouchersToRedPackReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof vouchersToRedPack_args)
        return this.equals((vouchersToRedPack_args)that);
      return false;
    }

    public boolean equals(vouchersToRedPack_args that) {
      if (that == null)
        return false;

      boolean this_present_vouchersToRedPackReqVo = true && this.isSetVouchersToRedPackReqVo();
      boolean that_present_vouchersToRedPackReqVo = true && that.isSetVouchersToRedPackReqVo();
      if (this_present_vouchersToRedPackReqVo || that_present_vouchersToRedPackReqVo) {
        if (!(this_present_vouchersToRedPackReqVo && that_present_vouchersToRedPackReqVo))
          return false;
        if (!this.vouchersToRedPackReqVo.equals(that.vouchersToRedPackReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vouchersToRedPackReqVo = true && (isSetVouchersToRedPackReqVo());
      list.add(present_vouchersToRedPackReqVo);
      if (present_vouchersToRedPackReqVo)
        list.add(vouchersToRedPackReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(vouchersToRedPack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVouchersToRedPackReqVo()).compareTo(other.isSetVouchersToRedPackReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVouchersToRedPackReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersToRedPackReqVo, other.vouchersToRedPackReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("vouchersToRedPack_args(");
      boolean first = true;

      sb.append("vouchersToRedPackReqVo:");
      if (this.vouchersToRedPackReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersToRedPackReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vouchersToRedPackReqVo != null) {
        vouchersToRedPackReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class vouchersToRedPack_argsStandardSchemeFactory implements SchemeFactory {
      public vouchersToRedPack_argsStandardScheme getScheme() {
        return new vouchersToRedPack_argsStandardScheme();
      }
    }

    private static class vouchersToRedPack_argsStandardScheme extends StandardScheme<vouchersToRedPack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, vouchersToRedPack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOUCHERS_TO_RED_PACK_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vouchersToRedPackReqVo = new com.froad.thrift.vo.active.VouchersToRedPackReqVo();
                struct.vouchersToRedPackReqVo.read(iprot);
                struct.setVouchersToRedPackReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, vouchersToRedPack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vouchersToRedPackReqVo != null) {
          oprot.writeFieldBegin(VOUCHERS_TO_RED_PACK_REQ_VO_FIELD_DESC);
          struct.vouchersToRedPackReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class vouchersToRedPack_argsTupleSchemeFactory implements SchemeFactory {
      public vouchersToRedPack_argsTupleScheme getScheme() {
        return new vouchersToRedPack_argsTupleScheme();
      }
    }

    private static class vouchersToRedPack_argsTupleScheme extends TupleScheme<vouchersToRedPack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, vouchersToRedPack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVouchersToRedPackReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVouchersToRedPackReqVo()) {
          struct.vouchersToRedPackReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, vouchersToRedPack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vouchersToRedPackReqVo = new com.froad.thrift.vo.active.VouchersToRedPackReqVo();
          struct.vouchersToRedPackReqVo.read(iprot);
          struct.setVouchersToRedPackReqVoIsSet(true);
        }
      }
    }

  }

  public static class vouchersToRedPack_result implements org.apache.thrift.TBase<vouchersToRedPack_result, vouchersToRedPack_result._Fields>, java.io.Serializable, Cloneable, Comparable<vouchersToRedPack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vouchersToRedPack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new vouchersToRedPack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new vouchersToRedPack_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vouchersToRedPack_result.class, metaDataMap);
    }

    public vouchersToRedPack_result() {
    }

    public vouchersToRedPack_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public vouchersToRedPack_result(vouchersToRedPack_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public vouchersToRedPack_result deepCopy() {
      return new vouchersToRedPack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public vouchersToRedPack_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof vouchersToRedPack_result)
        return this.equals((vouchersToRedPack_result)that);
      return false;
    }

    public boolean equals(vouchersToRedPack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(vouchersToRedPack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("vouchersToRedPack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class vouchersToRedPack_resultStandardSchemeFactory implements SchemeFactory {
      public vouchersToRedPack_resultStandardScheme getScheme() {
        return new vouchersToRedPack_resultStandardScheme();
      }
    }

    private static class vouchersToRedPack_resultStandardScheme extends StandardScheme<vouchersToRedPack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, vouchersToRedPack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, vouchersToRedPack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class vouchersToRedPack_resultTupleSchemeFactory implements SchemeFactory {
      public vouchersToRedPack_resultTupleScheme getScheme() {
        return new vouchersToRedPack_resultTupleScheme();
      }
    }

    private static class vouchersToRedPack_resultTupleScheme extends TupleScheme<vouchersToRedPack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, vouchersToRedPack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, vouchersToRedPack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
