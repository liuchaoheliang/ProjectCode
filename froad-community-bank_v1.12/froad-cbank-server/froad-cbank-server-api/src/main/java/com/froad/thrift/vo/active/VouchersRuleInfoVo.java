/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 代金券规则信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersRuleInfoVo implements org.apache.thrift.TBase<VouchersRuleInfoVo, VouchersRuleInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<VouchersRuleInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VouchersRuleInfoVo");

  private static final org.apache.thrift.protocol.TField ACTIVE_TAG_RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTagRelation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_BASE_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeBaseRule", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VOUCHERS_DETAIL_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersDetailRule", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VouchersRuleInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VouchersRuleInfoVoTupleSchemeFactory());
  }

  /**
   * 营销活动标签关联
   */
  public ActiveTagRelationVo activeTagRelation; // required
  /**
   * 营销活动基础规则
   */
  public ActiveBaseRuleVo activeBaseRule; // required
  /**
   * 代金券详细规则
   */
  public VouchersDetailRuleVo vouchersDetailRule; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 营销活动标签关联
     */
    ACTIVE_TAG_RELATION((short)1, "activeTagRelation"),
    /**
     * 营销活动基础规则
     */
    ACTIVE_BASE_RULE((short)2, "activeBaseRule"),
    /**
     * 代金券详细规则
     */
    VOUCHERS_DETAIL_RULE((short)3, "vouchersDetailRule");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVE_TAG_RELATION
          return ACTIVE_TAG_RELATION;
        case 2: // ACTIVE_BASE_RULE
          return ACTIVE_BASE_RULE;
        case 3: // VOUCHERS_DETAIL_RULE
          return VOUCHERS_DETAIL_RULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVE_TAG_RELATION, new org.apache.thrift.meta_data.FieldMetaData("activeTagRelation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActiveTagRelationVo.class)));
    tmpMap.put(_Fields.ACTIVE_BASE_RULE, new org.apache.thrift.meta_data.FieldMetaData("activeBaseRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActiveBaseRuleVo.class)));
    tmpMap.put(_Fields.VOUCHERS_DETAIL_RULE, new org.apache.thrift.meta_data.FieldMetaData("vouchersDetailRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "VouchersDetailRuleVo")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VouchersRuleInfoVo.class, metaDataMap);
  }

  public VouchersRuleInfoVo() {
  }

  public VouchersRuleInfoVo(
    ActiveTagRelationVo activeTagRelation,
    ActiveBaseRuleVo activeBaseRule,
    VouchersDetailRuleVo vouchersDetailRule)
  {
    this();
    this.activeTagRelation = activeTagRelation;
    this.activeBaseRule = activeBaseRule;
    this.vouchersDetailRule = vouchersDetailRule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VouchersRuleInfoVo(VouchersRuleInfoVo other) {
    if (other.isSetActiveTagRelation()) {
      this.activeTagRelation = new ActiveTagRelationVo(other.activeTagRelation);
    }
    if (other.isSetActiveBaseRule()) {
      this.activeBaseRule = new ActiveBaseRuleVo(other.activeBaseRule);
    }
    if (other.isSetVouchersDetailRule()) {
      this.vouchersDetailRule = other.vouchersDetailRule;
    }
  }

  public VouchersRuleInfoVo deepCopy() {
    return new VouchersRuleInfoVo(this);
  }

  @Override
  public void clear() {
    this.activeTagRelation = null;
    this.activeBaseRule = null;
    this.vouchersDetailRule = null;
  }

  /**
   * 营销活动标签关联
   */
  public ActiveTagRelationVo getActiveTagRelation() {
    return this.activeTagRelation;
  }

  /**
   * 营销活动标签关联
   */
  public VouchersRuleInfoVo setActiveTagRelation(ActiveTagRelationVo activeTagRelation) {
    this.activeTagRelation = activeTagRelation;
    return this;
  }

  public void unsetActiveTagRelation() {
    this.activeTagRelation = null;
  }

  /** Returns true if field activeTagRelation is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTagRelation() {
    return this.activeTagRelation != null;
  }

  public void setActiveTagRelationIsSet(boolean value) {
    if (!value) {
      this.activeTagRelation = null;
    }
  }

  /**
   * 营销活动基础规则
   */
  public ActiveBaseRuleVo getActiveBaseRule() {
    return this.activeBaseRule;
  }

  /**
   * 营销活动基础规则
   */
  public VouchersRuleInfoVo setActiveBaseRule(ActiveBaseRuleVo activeBaseRule) {
    this.activeBaseRule = activeBaseRule;
    return this;
  }

  public void unsetActiveBaseRule() {
    this.activeBaseRule = null;
  }

  /** Returns true if field activeBaseRule is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveBaseRule() {
    return this.activeBaseRule != null;
  }

  public void setActiveBaseRuleIsSet(boolean value) {
    if (!value) {
      this.activeBaseRule = null;
    }
  }

  /**
   * 代金券详细规则
   */
  public VouchersDetailRuleVo getVouchersDetailRule() {
    return this.vouchersDetailRule;
  }

  /**
   * 代金券详细规则
   */
  public VouchersRuleInfoVo setVouchersDetailRule(VouchersDetailRuleVo vouchersDetailRule) {
    this.vouchersDetailRule = vouchersDetailRule;
    return this;
  }

  public void unsetVouchersDetailRule() {
    this.vouchersDetailRule = null;
  }

  /** Returns true if field vouchersDetailRule is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersDetailRule() {
    return this.vouchersDetailRule != null;
  }

  public void setVouchersDetailRuleIsSet(boolean value) {
    if (!value) {
      this.vouchersDetailRule = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVE_TAG_RELATION:
      if (value == null) {
        unsetActiveTagRelation();
      } else {
        setActiveTagRelation((ActiveTagRelationVo)value);
      }
      break;

    case ACTIVE_BASE_RULE:
      if (value == null) {
        unsetActiveBaseRule();
      } else {
        setActiveBaseRule((ActiveBaseRuleVo)value);
      }
      break;

    case VOUCHERS_DETAIL_RULE:
      if (value == null) {
        unsetVouchersDetailRule();
      } else {
        setVouchersDetailRule((VouchersDetailRuleVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVE_TAG_RELATION:
      return getActiveTagRelation();

    case ACTIVE_BASE_RULE:
      return getActiveBaseRule();

    case VOUCHERS_DETAIL_RULE:
      return getVouchersDetailRule();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVE_TAG_RELATION:
      return isSetActiveTagRelation();
    case ACTIVE_BASE_RULE:
      return isSetActiveBaseRule();
    case VOUCHERS_DETAIL_RULE:
      return isSetVouchersDetailRule();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VouchersRuleInfoVo)
      return this.equals((VouchersRuleInfoVo)that);
    return false;
  }

  public boolean equals(VouchersRuleInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_activeTagRelation = true && this.isSetActiveTagRelation();
    boolean that_present_activeTagRelation = true && that.isSetActiveTagRelation();
    if (this_present_activeTagRelation || that_present_activeTagRelation) {
      if (!(this_present_activeTagRelation && that_present_activeTagRelation))
        return false;
      if (!this.activeTagRelation.equals(that.activeTagRelation))
        return false;
    }

    boolean this_present_activeBaseRule = true && this.isSetActiveBaseRule();
    boolean that_present_activeBaseRule = true && that.isSetActiveBaseRule();
    if (this_present_activeBaseRule || that_present_activeBaseRule) {
      if (!(this_present_activeBaseRule && that_present_activeBaseRule))
        return false;
      if (!this.activeBaseRule.equals(that.activeBaseRule))
        return false;
    }

    boolean this_present_vouchersDetailRule = true && this.isSetVouchersDetailRule();
    boolean that_present_vouchersDetailRule = true && that.isSetVouchersDetailRule();
    if (this_present_vouchersDetailRule || that_present_vouchersDetailRule) {
      if (!(this_present_vouchersDetailRule && that_present_vouchersDetailRule))
        return false;
      if (!this.vouchersDetailRule.equals(that.vouchersDetailRule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_activeTagRelation = true && (isSetActiveTagRelation());
    list.add(present_activeTagRelation);
    if (present_activeTagRelation)
      list.add(activeTagRelation);

    boolean present_activeBaseRule = true && (isSetActiveBaseRule());
    list.add(present_activeBaseRule);
    if (present_activeBaseRule)
      list.add(activeBaseRule);

    boolean present_vouchersDetailRule = true && (isSetVouchersDetailRule());
    list.add(present_vouchersDetailRule);
    if (present_vouchersDetailRule)
      list.add(vouchersDetailRule);

    return list.hashCode();
  }

  @Override
  public int compareTo(VouchersRuleInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActiveTagRelation()).compareTo(other.isSetActiveTagRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTagRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTagRelation, other.activeTagRelation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveBaseRule()).compareTo(other.isSetActiveBaseRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveBaseRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeBaseRule, other.activeBaseRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersDetailRule()).compareTo(other.isSetVouchersDetailRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersDetailRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersDetailRule, other.vouchersDetailRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VouchersRuleInfoVo(");
    boolean first = true;

    sb.append("activeTagRelation:");
    if (this.activeTagRelation == null) {
      sb.append("null");
    } else {
      sb.append(this.activeTagRelation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeBaseRule:");
    if (this.activeBaseRule == null) {
      sb.append("null");
    } else {
      sb.append(this.activeBaseRule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersDetailRule:");
    if (this.vouchersDetailRule == null) {
      sb.append("null");
    } else {
      sb.append(this.vouchersDetailRule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (activeTagRelation != null) {
      activeTagRelation.validate();
    }
    if (activeBaseRule != null) {
      activeBaseRule.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VouchersRuleInfoVoStandardSchemeFactory implements SchemeFactory {
    public VouchersRuleInfoVoStandardScheme getScheme() {
      return new VouchersRuleInfoVoStandardScheme();
    }
  }

  private static class VouchersRuleInfoVoStandardScheme extends StandardScheme<VouchersRuleInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VouchersRuleInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVE_TAG_RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activeTagRelation = new ActiveTagRelationVo();
              struct.activeTagRelation.read(iprot);
              struct.setActiveTagRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_BASE_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activeBaseRule = new ActiveBaseRuleVo();
              struct.activeBaseRule.read(iprot);
              struct.setActiveBaseRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOUCHERS_DETAIL_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vouchersDetailRule = new VouchersDetailRuleVo();
              struct.vouchersDetailRule.read(iprot);
              struct.setVouchersDetailRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VouchersRuleInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activeTagRelation != null) {
        oprot.writeFieldBegin(ACTIVE_TAG_RELATION_FIELD_DESC);
        struct.activeTagRelation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.activeBaseRule != null) {
        oprot.writeFieldBegin(ACTIVE_BASE_RULE_FIELD_DESC);
        struct.activeBaseRule.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.vouchersDetailRule != null) {
        oprot.writeFieldBegin(VOUCHERS_DETAIL_RULE_FIELD_DESC);
        struct.vouchersDetailRule.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VouchersRuleInfoVoTupleSchemeFactory implements SchemeFactory {
    public VouchersRuleInfoVoTupleScheme getScheme() {
      return new VouchersRuleInfoVoTupleScheme();
    }
  }

  private static class VouchersRuleInfoVoTupleScheme extends TupleScheme<VouchersRuleInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VouchersRuleInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActiveTagRelation()) {
        optionals.set(0);
      }
      if (struct.isSetActiveBaseRule()) {
        optionals.set(1);
      }
      if (struct.isSetVouchersDetailRule()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetActiveTagRelation()) {
        struct.activeTagRelation.write(oprot);
      }
      if (struct.isSetActiveBaseRule()) {
        struct.activeBaseRule.write(oprot);
      }
      if (struct.isSetVouchersDetailRule()) {
        struct.vouchersDetailRule.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VouchersRuleInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.activeTagRelation = new ActiveTagRelationVo();
        struct.activeTagRelation.read(iprot);
        struct.setActiveTagRelationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activeBaseRule = new ActiveBaseRuleVo();
        struct.activeBaseRule.read(iprot);
        struct.setActiveBaseRuleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vouchersDetailRule = new VouchersDetailRuleVo();
        struct.vouchersDetailRule.read(iprot);
        struct.setVouchersDetailRuleIsSet(true);
      }
    }
  }

}

