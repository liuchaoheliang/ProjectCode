/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FFTOrgService {

  /**
   * 组织管理服务
   * FFTOrgService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 组织查询List
     * @param fftOrgVo 过滤条件对象
     * @return FFTOrgListVoRes
     * 
     * @param fftOrgVo
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByList(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException;

    /**
     * 组织查询Page
     * @param page 分页对象
     * @param fftOrgVo  组织对象过滤信息
     * @return BossProductCategoryInfoRes
     * 
     * @param page
     * @param fftOrgVo
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes getFFTOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException;

    /**
     * 组织Id多集合查询
     * @param orgIds 组织Id集合
     * @return FFTOrgNameListVoRes
     * 
     * @param orgIds
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes getFFTOrgByOrgIds(List<String> orgIds) throws org.apache.thrift.TException;

    /**
     * 主键id多集合查询
     * @param ids 主键id集合
     * @return FFTOrgListVoRes
     * 
     * @param ids
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByIds(List<Long> ids) throws org.apache.thrift.TException;

    /**
     * 组织列表拉取-查全部
     * @param userId 用户Id
     * @return FFTOrgListVoRes
     * 
     * @param userId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserId(long userId) throws org.apache.thrift.TException;

    /**
     * 组织列表拉取-查顶级2级
     * @param userId 用户Id
     * @return FFTOrgListVoRes
     * 
     * @param userId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdTwoLevel(long userId) throws org.apache.thrift.TException;

    /**
     * 组织列表拉取-查用户下组织id下的子组织
     * @param userId 用户Id
     * @param orgId 组织Id
     * @return FFTOrgListVoRes
     * 
     * @param userId
     * @param orgId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdOrgId(long userId, String orgId) throws org.apache.thrift.TException;

    /**
     * 组织详情
     * @param id 主键Id
     * @param orgId 组织Id
     * @return FFTOrgDetailVo
     * 
     * @param id
     * @param orgId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo getFFTOrgDetail(long id, String orgId) throws org.apache.thrift.TException;

    /**
     * 验证组织下是否有下级组织
     * @param id 主键Id
     * @return isNextFFTOrgVo集合
     * 
     * @param userId
     * @param ids
     */
    public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> isNextFFTOrg(long userId, List<Long> ids) throws org.apache.thrift.TException;

    /**
     * 新增 组织
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param fftOrgVo 组织信息对象
     * @param roleIds 角色分配
     * @param roleIds 数据权限
     * @return CommonAddVoRes
     * 
     * @param originVo
     * @param fftOrgVo
     * @param roleIds
     * @param reOrgIds
     */
    public com.froad.thrift.vo.CommonAddVoRes addFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException;

    /**
     * 删除  组织
     * @param OriginVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param id 主键Id
     * @return ResultVo
     * 
     * @param originVo
     * @param id
     */
    public com.froad.thrift.vo.ResultVo deleteFFTOrg(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException;

    /**
     * 修改 组织
     * @param OriginVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param fftOrgVo 组织信息对象
     * @param roleIds 角色分配
     * @param roleIds 数据权限
     * @return ResultVo
     * 
     * @param originVo
     * @param fftOrgVo
     * @param roleIds
     * @param reOrgIds
     */
    public com.froad.thrift.vo.ResultVo updateFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException;

    /**
     * 组织数据权限查询
     * @param orgId 组织Id
     * @return FFTOrgReListVoRes
     * 
     * @param orgId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes getFFTOrgReByOrgId(String orgId) throws org.apache.thrift.TException;

    /**
     * 组织角色查询
     * @param orgId 组织Id
     * @return OrgRoleListVoRes
     * 
     * @param orgId
     */
    public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes getOrgRoleByOrgId(String orgId) throws org.apache.thrift.TException;

    /**
     * 组织Id集合查询角色id-去重
     * @param orgIds 组织Id集合
     * @return OrgRoleIdListVoRes
     * 
     * @param orgIds
     */
    public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes getOrgRoleIds(List<String> orgIds) throws org.apache.thrift.TException;

    /**
     * 银行渠道列表(获取银行组织的一级)
     * @param userId 用户Id
     * @return FFTOrgListVoRes
     * 
     * @param userId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgInOneByBank(long userId) throws org.apache.thrift.TException;

    /**
     * 所属组织-数据权限下拉框(获取银行组织非一级组织)
     * @param userId 用户Id
     * @param clientId 客户端Id
     * @return FFTOrgListVoRes
     * 
     * @param userId
     * @param clientId
     */
    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdPlatform(long userId, String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getFFTOrgByList(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByOrgIds(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByUserId(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByUserIdTwoLevel(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByUserIdOrgId(long userId, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgDetail(long id, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isNextFFTOrg(long userId, List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFFTOrg(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgReByOrgId(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgRoleByOrgId(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgRoleIds(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgInOneByBank(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFFTOrgByUserIdPlatform(long userId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByList(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException
    {
      send_getFFTOrgByList(fftOrgVo);
      return recv_getFFTOrgByList();
    }

    public void send_getFFTOrgByList(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException
    {
      getFFTOrgByList_args args = new getFFTOrgByList_args();
      args.setFftOrgVo(fftOrgVo);
      sendBase("getFFTOrgByList", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByList() throws org.apache.thrift.TException
    {
      getFFTOrgByList_result result = new getFFTOrgByList_result();
      receiveBase(result, "getFFTOrgByList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByList failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes getFFTOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException
    {
      send_getFFTOrgByPage(page, fftOrgVo);
      return recv_getFFTOrgByPage();
    }

    public void send_getFFTOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) throws org.apache.thrift.TException
    {
      getFFTOrgByPage_args args = new getFFTOrgByPage_args();
      args.setPage(page);
      args.setFftOrgVo(fftOrgVo);
      sendBase("getFFTOrgByPage", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes recv_getFFTOrgByPage() throws org.apache.thrift.TException
    {
      getFFTOrgByPage_result result = new getFFTOrgByPage_result();
      receiveBase(result, "getFFTOrgByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByPage failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes getFFTOrgByOrgIds(List<String> orgIds) throws org.apache.thrift.TException
    {
      send_getFFTOrgByOrgIds(orgIds);
      return recv_getFFTOrgByOrgIds();
    }

    public void send_getFFTOrgByOrgIds(List<String> orgIds) throws org.apache.thrift.TException
    {
      getFFTOrgByOrgIds_args args = new getFFTOrgByOrgIds_args();
      args.setOrgIds(orgIds);
      sendBase("getFFTOrgByOrgIds", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes recv_getFFTOrgByOrgIds() throws org.apache.thrift.TException
    {
      getFFTOrgByOrgIds_result result = new getFFTOrgByOrgIds_result();
      receiveBase(result, "getFFTOrgByOrgIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByOrgIds failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_getFFTOrgByIds(ids);
      return recv_getFFTOrgByIds();
    }

    public void send_getFFTOrgByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      getFFTOrgByIds_args args = new getFFTOrgByIds_args();
      args.setIds(ids);
      sendBase("getFFTOrgByIds", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByIds() throws org.apache.thrift.TException
    {
      getFFTOrgByIds_result result = new getFFTOrgByIds_result();
      receiveBase(result, "getFFTOrgByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByIds failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserId(long userId) throws org.apache.thrift.TException
    {
      send_getFFTOrgByUserId(userId);
      return recv_getFFTOrgByUserId();
    }

    public void send_getFFTOrgByUserId(long userId) throws org.apache.thrift.TException
    {
      getFFTOrgByUserId_args args = new getFFTOrgByUserId_args();
      args.setUserId(userId);
      sendBase("getFFTOrgByUserId", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByUserId() throws org.apache.thrift.TException
    {
      getFFTOrgByUserId_result result = new getFFTOrgByUserId_result();
      receiveBase(result, "getFFTOrgByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByUserId failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdTwoLevel(long userId) throws org.apache.thrift.TException
    {
      send_getFFTOrgByUserIdTwoLevel(userId);
      return recv_getFFTOrgByUserIdTwoLevel();
    }

    public void send_getFFTOrgByUserIdTwoLevel(long userId) throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdTwoLevel_args args = new getFFTOrgByUserIdTwoLevel_args();
      args.setUserId(userId);
      sendBase("getFFTOrgByUserIdTwoLevel", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByUserIdTwoLevel() throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdTwoLevel_result result = new getFFTOrgByUserIdTwoLevel_result();
      receiveBase(result, "getFFTOrgByUserIdTwoLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByUserIdTwoLevel failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdOrgId(long userId, String orgId) throws org.apache.thrift.TException
    {
      send_getFFTOrgByUserIdOrgId(userId, orgId);
      return recv_getFFTOrgByUserIdOrgId();
    }

    public void send_getFFTOrgByUserIdOrgId(long userId, String orgId) throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdOrgId_args args = new getFFTOrgByUserIdOrgId_args();
      args.setUserId(userId);
      args.setOrgId(orgId);
      sendBase("getFFTOrgByUserIdOrgId", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByUserIdOrgId() throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdOrgId_result result = new getFFTOrgByUserIdOrgId_result();
      receiveBase(result, "getFFTOrgByUserIdOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByUserIdOrgId failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo getFFTOrgDetail(long id, String orgId) throws org.apache.thrift.TException
    {
      send_getFFTOrgDetail(id, orgId);
      return recv_getFFTOrgDetail();
    }

    public void send_getFFTOrgDetail(long id, String orgId) throws org.apache.thrift.TException
    {
      getFFTOrgDetail_args args = new getFFTOrgDetail_args();
      args.setId(id);
      args.setOrgId(orgId);
      sendBase("getFFTOrgDetail", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo recv_getFFTOrgDetail() throws org.apache.thrift.TException
    {
      getFFTOrgDetail_result result = new getFFTOrgDetail_result();
      receiveBase(result, "getFFTOrgDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgDetail failed: unknown result");
    }

    public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> isNextFFTOrg(long userId, List<Long> ids) throws org.apache.thrift.TException
    {
      send_isNextFFTOrg(userId, ids);
      return recv_isNextFFTOrg();
    }

    public void send_isNextFFTOrg(long userId, List<Long> ids) throws org.apache.thrift.TException
    {
      isNextFFTOrg_args args = new isNextFFTOrg_args();
      args.setUserId(userId);
      args.setIds(ids);
      sendBase("isNextFFTOrg", args);
    }

    public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> recv_isNextFFTOrg() throws org.apache.thrift.TException
    {
      isNextFFTOrg_result result = new isNextFFTOrg_result();
      receiveBase(result, "isNextFFTOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isNextFFTOrg failed: unknown result");
    }

    public com.froad.thrift.vo.CommonAddVoRes addFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException
    {
      send_addFFTOrg(originVo, fftOrgVo, roleIds, reOrgIds);
      return recv_addFFTOrg();
    }

    public void send_addFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException
    {
      addFFTOrg_args args = new addFFTOrg_args();
      args.setOriginVo(originVo);
      args.setFftOrgVo(fftOrgVo);
      args.setRoleIds(roleIds);
      args.setReOrgIds(reOrgIds);
      sendBase("addFFTOrg", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addFFTOrg() throws org.apache.thrift.TException
    {
      addFFTOrg_result result = new addFFTOrg_result();
      receiveBase(result, "addFFTOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFFTOrg failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteFFTOrg(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      send_deleteFFTOrg(originVo, id);
      return recv_deleteFFTOrg();
    }

    public void send_deleteFFTOrg(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      deleteFFTOrg_args args = new deleteFFTOrg_args();
      args.setOriginVo(originVo);
      args.setId(id);
      sendBase("deleteFFTOrg", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteFFTOrg() throws org.apache.thrift.TException
    {
      deleteFFTOrg_result result = new deleteFFTOrg_result();
      receiveBase(result, "deleteFFTOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFFTOrg failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException
    {
      send_updateFFTOrg(originVo, fftOrgVo, roleIds, reOrgIds);
      return recv_updateFFTOrg();
    }

    public void send_updateFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds) throws org.apache.thrift.TException
    {
      updateFFTOrg_args args = new updateFFTOrg_args();
      args.setOriginVo(originVo);
      args.setFftOrgVo(fftOrgVo);
      args.setRoleIds(roleIds);
      args.setReOrgIds(reOrgIds);
      sendBase("updateFFTOrg", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateFFTOrg() throws org.apache.thrift.TException
    {
      updateFFTOrg_result result = new updateFFTOrg_result();
      receiveBase(result, "updateFFTOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFFTOrg failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes getFFTOrgReByOrgId(String orgId) throws org.apache.thrift.TException
    {
      send_getFFTOrgReByOrgId(orgId);
      return recv_getFFTOrgReByOrgId();
    }

    public void send_getFFTOrgReByOrgId(String orgId) throws org.apache.thrift.TException
    {
      getFFTOrgReByOrgId_args args = new getFFTOrgReByOrgId_args();
      args.setOrgId(orgId);
      sendBase("getFFTOrgReByOrgId", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes recv_getFFTOrgReByOrgId() throws org.apache.thrift.TException
    {
      getFFTOrgReByOrgId_result result = new getFFTOrgReByOrgId_result();
      receiveBase(result, "getFFTOrgReByOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgReByOrgId failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes getOrgRoleByOrgId(String orgId) throws org.apache.thrift.TException
    {
      send_getOrgRoleByOrgId(orgId);
      return recv_getOrgRoleByOrgId();
    }

    public void send_getOrgRoleByOrgId(String orgId) throws org.apache.thrift.TException
    {
      getOrgRoleByOrgId_args args = new getOrgRoleByOrgId_args();
      args.setOrgId(orgId);
      sendBase("getOrgRoleByOrgId", args);
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes recv_getOrgRoleByOrgId() throws org.apache.thrift.TException
    {
      getOrgRoleByOrgId_result result = new getOrgRoleByOrgId_result();
      receiveBase(result, "getOrgRoleByOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgRoleByOrgId failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes getOrgRoleIds(List<String> orgIds) throws org.apache.thrift.TException
    {
      send_getOrgRoleIds(orgIds);
      return recv_getOrgRoleIds();
    }

    public void send_getOrgRoleIds(List<String> orgIds) throws org.apache.thrift.TException
    {
      getOrgRoleIds_args args = new getOrgRoleIds_args();
      args.setOrgIds(orgIds);
      sendBase("getOrgRoleIds", args);
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes recv_getOrgRoleIds() throws org.apache.thrift.TException
    {
      getOrgRoleIds_result result = new getOrgRoleIds_result();
      receiveBase(result, "getOrgRoleIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgRoleIds failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgInOneByBank(long userId) throws org.apache.thrift.TException
    {
      send_getFFTOrgInOneByBank(userId);
      return recv_getFFTOrgInOneByBank();
    }

    public void send_getFFTOrgInOneByBank(long userId) throws org.apache.thrift.TException
    {
      getFFTOrgInOneByBank_args args = new getFFTOrgInOneByBank_args();
      args.setUserId(userId);
      sendBase("getFFTOrgInOneByBank", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgInOneByBank() throws org.apache.thrift.TException
    {
      getFFTOrgInOneByBank_result result = new getFFTOrgInOneByBank_result();
      receiveBase(result, "getFFTOrgInOneByBank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgInOneByBank failed: unknown result");
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getFFTOrgByUserIdPlatform(long userId, String clientId) throws org.apache.thrift.TException
    {
      send_getFFTOrgByUserIdPlatform(userId, clientId);
      return recv_getFFTOrgByUserIdPlatform();
    }

    public void send_getFFTOrgByUserIdPlatform(long userId, String clientId) throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdPlatform_args args = new getFFTOrgByUserIdPlatform_args();
      args.setUserId(userId);
      args.setClientId(clientId);
      sendBase("getFFTOrgByUserIdPlatform", args);
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes recv_getFFTOrgByUserIdPlatform() throws org.apache.thrift.TException
    {
      getFFTOrgByUserIdPlatform_result result = new getFFTOrgByUserIdPlatform_result();
      receiveBase(result, "getFFTOrgByUserIdPlatform");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFFTOrgByUserIdPlatform failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getFFTOrgByList(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByList_call method_call = new getFFTOrgByList_call(fftOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo;
      public getFFTOrgByList_call(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fftOrgVo = fftOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByList_args args = new getFFTOrgByList_args();
        args.setFftOrgVo(fftOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByList();
      }
    }

    public void getFFTOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByPage_call method_call = new getFFTOrgByPage_call(page, fftOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo;
      public getFFTOrgByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.fftOrgVo = fftOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByPage_args args = new getFFTOrgByPage_args();
        args.setPage(page);
        args.setFftOrgVo(fftOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByPage();
      }
    }

    public void getFFTOrgByOrgIds(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByOrgIds_call method_call = new getFFTOrgByOrgIds_call(orgIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByOrgIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> orgIds;
      public getFFTOrgByOrgIds_call(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgIds = orgIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByOrgIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByOrgIds_args args = new getFFTOrgByOrgIds_args();
        args.setOrgIds(orgIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByOrgIds();
      }
    }

    public void getFFTOrgByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByIds_call method_call = new getFFTOrgByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public getFFTOrgByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByIds_args args = new getFFTOrgByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByIds();
      }
    }

    public void getFFTOrgByUserId(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByUserId_call method_call = new getFFTOrgByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      public getFFTOrgByUserId_call(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByUserId_args args = new getFFTOrgByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByUserId();
      }
    }

    public void getFFTOrgByUserIdTwoLevel(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByUserIdTwoLevel_call method_call = new getFFTOrgByUserIdTwoLevel_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByUserIdTwoLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      public getFFTOrgByUserIdTwoLevel_call(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByUserIdTwoLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByUserIdTwoLevel_args args = new getFFTOrgByUserIdTwoLevel_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByUserIdTwoLevel();
      }
    }

    public void getFFTOrgByUserIdOrgId(long userId, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByUserIdOrgId_call method_call = new getFFTOrgByUserIdOrgId_call(userId, orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByUserIdOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String orgId;
      public getFFTOrgByUserIdOrgId_call(long userId, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByUserIdOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByUserIdOrgId_args args = new getFFTOrgByUserIdOrgId_args();
        args.setUserId(userId);
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByUserIdOrgId();
      }
    }

    public void getFFTOrgDetail(long id, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgDetail_call method_call = new getFFTOrgDetail_call(id, orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String orgId;
      public getFFTOrgDetail_call(long id, String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgDetail_args args = new getFFTOrgDetail_args();
        args.setId(id);
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgDetail();
      }
    }

    public void isNextFFTOrg(long userId, List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isNextFFTOrg_call method_call = new isNextFFTOrg_call(userId, ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isNextFFTOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private List<Long> ids;
      public isNextFFTOrg_call(long userId, List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isNextFFTOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isNextFFTOrg_args args = new isNextFFTOrg_args();
        args.setUserId(userId);
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isNextFFTOrg();
      }
    }

    public void addFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFFTOrg_call method_call = new addFFTOrg_call(originVo, fftOrgVo, roleIds, reOrgIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFFTOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo;
      private List<Long> roleIds;
      private List<String> reOrgIds;
      public addFFTOrg_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.fftOrgVo = fftOrgVo;
        this.roleIds = roleIds;
        this.reOrgIds = reOrgIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFFTOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFFTOrg_args args = new addFFTOrg_args();
        args.setOriginVo(originVo);
        args.setFftOrgVo(fftOrgVo);
        args.setRoleIds(roleIds);
        args.setReOrgIds(reOrgIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFFTOrg();
      }
    }

    public void deleteFFTOrg(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFFTOrg_call method_call = new deleteFFTOrg_call(originVo, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFFTOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long id;
      public deleteFFTOrg_call(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFFTOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFFTOrg_args args = new deleteFFTOrg_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFFTOrg();
      }
    }

    public void updateFFTOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFFTOrg_call method_call = new updateFFTOrg_call(originVo, fftOrgVo, roleIds, reOrgIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFFTOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo;
      private List<Long> roleIds;
      private List<String> reOrgIds;
      public updateFFTOrg_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo, List<Long> roleIds, List<String> reOrgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.fftOrgVo = fftOrgVo;
        this.roleIds = roleIds;
        this.reOrgIds = reOrgIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFFTOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFFTOrg_args args = new updateFFTOrg_args();
        args.setOriginVo(originVo);
        args.setFftOrgVo(fftOrgVo);
        args.setRoleIds(roleIds);
        args.setReOrgIds(reOrgIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFFTOrg();
      }
    }

    public void getFFTOrgReByOrgId(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgReByOrgId_call method_call = new getFFTOrgReByOrgId_call(orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgReByOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orgId;
      public getFFTOrgReByOrgId_call(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgReByOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgReByOrgId_args args = new getFFTOrgReByOrgId_args();
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgReByOrgId();
      }
    }

    public void getOrgRoleByOrgId(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgRoleByOrgId_call method_call = new getOrgRoleByOrgId_call(orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgRoleByOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orgId;
      public getOrgRoleByOrgId_call(String orgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgRoleByOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgRoleByOrgId_args args = new getOrgRoleByOrgId_args();
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgRoleByOrgId();
      }
    }

    public void getOrgRoleIds(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgRoleIds_call method_call = new getOrgRoleIds_call(orgIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgRoleIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> orgIds;
      public getOrgRoleIds_call(List<String> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgIds = orgIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgRoleIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgRoleIds_args args = new getOrgRoleIds_args();
        args.setOrgIds(orgIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgRoleIds();
      }
    }

    public void getFFTOrgInOneByBank(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgInOneByBank_call method_call = new getFFTOrgInOneByBank_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgInOneByBank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      public getFFTOrgInOneByBank_call(long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgInOneByBank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgInOneByBank_args args = new getFFTOrgInOneByBank_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgInOneByBank();
      }
    }

    public void getFFTOrgByUserIdPlatform(long userId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFFTOrgByUserIdPlatform_call method_call = new getFFTOrgByUserIdPlatform_call(userId, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFFTOrgByUserIdPlatform_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String clientId;
      public getFFTOrgByUserIdPlatform_call(long userId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFFTOrgByUserIdPlatform", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFFTOrgByUserIdPlatform_args args = new getFFTOrgByUserIdPlatform_args();
        args.setUserId(userId);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFFTOrgByUserIdPlatform();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getFFTOrgByList", new getFFTOrgByList());
      processMap.put("getFFTOrgByPage", new getFFTOrgByPage());
      processMap.put("getFFTOrgByOrgIds", new getFFTOrgByOrgIds());
      processMap.put("getFFTOrgByIds", new getFFTOrgByIds());
      processMap.put("getFFTOrgByUserId", new getFFTOrgByUserId());
      processMap.put("getFFTOrgByUserIdTwoLevel", new getFFTOrgByUserIdTwoLevel());
      processMap.put("getFFTOrgByUserIdOrgId", new getFFTOrgByUserIdOrgId());
      processMap.put("getFFTOrgDetail", new getFFTOrgDetail());
      processMap.put("isNextFFTOrg", new isNextFFTOrg());
      processMap.put("addFFTOrg", new addFFTOrg());
      processMap.put("deleteFFTOrg", new deleteFFTOrg());
      processMap.put("updateFFTOrg", new updateFFTOrg());
      processMap.put("getFFTOrgReByOrgId", new getFFTOrgReByOrgId());
      processMap.put("getOrgRoleByOrgId", new getOrgRoleByOrgId());
      processMap.put("getOrgRoleIds", new getOrgRoleIds());
      processMap.put("getFFTOrgInOneByBank", new getFFTOrgInOneByBank());
      processMap.put("getFFTOrgByUserIdPlatform", new getFFTOrgByUserIdPlatform());
      return processMap;
    }

    public static class getFFTOrgByList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByList_args> {
      public getFFTOrgByList() {
        super("getFFTOrgByList");
      }

      public getFFTOrgByList_args getEmptyArgsInstance() {
        return new getFFTOrgByList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByList_result getResult(I iface, getFFTOrgByList_args args) throws org.apache.thrift.TException {
        getFFTOrgByList_result result = new getFFTOrgByList_result();
        result.success = iface.getFFTOrgByList(args.fftOrgVo);
        return result;
      }
    }

    public static class getFFTOrgByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByPage_args> {
      public getFFTOrgByPage() {
        super("getFFTOrgByPage");
      }

      public getFFTOrgByPage_args getEmptyArgsInstance() {
        return new getFFTOrgByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByPage_result getResult(I iface, getFFTOrgByPage_args args) throws org.apache.thrift.TException {
        getFFTOrgByPage_result result = new getFFTOrgByPage_result();
        result.success = iface.getFFTOrgByPage(args.page, args.fftOrgVo);
        return result;
      }
    }

    public static class getFFTOrgByOrgIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByOrgIds_args> {
      public getFFTOrgByOrgIds() {
        super("getFFTOrgByOrgIds");
      }

      public getFFTOrgByOrgIds_args getEmptyArgsInstance() {
        return new getFFTOrgByOrgIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByOrgIds_result getResult(I iface, getFFTOrgByOrgIds_args args) throws org.apache.thrift.TException {
        getFFTOrgByOrgIds_result result = new getFFTOrgByOrgIds_result();
        result.success = iface.getFFTOrgByOrgIds(args.orgIds);
        return result;
      }
    }

    public static class getFFTOrgByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByIds_args> {
      public getFFTOrgByIds() {
        super("getFFTOrgByIds");
      }

      public getFFTOrgByIds_args getEmptyArgsInstance() {
        return new getFFTOrgByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByIds_result getResult(I iface, getFFTOrgByIds_args args) throws org.apache.thrift.TException {
        getFFTOrgByIds_result result = new getFFTOrgByIds_result();
        result.success = iface.getFFTOrgByIds(args.ids);
        return result;
      }
    }

    public static class getFFTOrgByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByUserId_args> {
      public getFFTOrgByUserId() {
        super("getFFTOrgByUserId");
      }

      public getFFTOrgByUserId_args getEmptyArgsInstance() {
        return new getFFTOrgByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByUserId_result getResult(I iface, getFFTOrgByUserId_args args) throws org.apache.thrift.TException {
        getFFTOrgByUserId_result result = new getFFTOrgByUserId_result();
        result.success = iface.getFFTOrgByUserId(args.userId);
        return result;
      }
    }

    public static class getFFTOrgByUserIdTwoLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByUserIdTwoLevel_args> {
      public getFFTOrgByUserIdTwoLevel() {
        super("getFFTOrgByUserIdTwoLevel");
      }

      public getFFTOrgByUserIdTwoLevel_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdTwoLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByUserIdTwoLevel_result getResult(I iface, getFFTOrgByUserIdTwoLevel_args args) throws org.apache.thrift.TException {
        getFFTOrgByUserIdTwoLevel_result result = new getFFTOrgByUserIdTwoLevel_result();
        result.success = iface.getFFTOrgByUserIdTwoLevel(args.userId);
        return result;
      }
    }

    public static class getFFTOrgByUserIdOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByUserIdOrgId_args> {
      public getFFTOrgByUserIdOrgId() {
        super("getFFTOrgByUserIdOrgId");
      }

      public getFFTOrgByUserIdOrgId_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdOrgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByUserIdOrgId_result getResult(I iface, getFFTOrgByUserIdOrgId_args args) throws org.apache.thrift.TException {
        getFFTOrgByUserIdOrgId_result result = new getFFTOrgByUserIdOrgId_result();
        result.success = iface.getFFTOrgByUserIdOrgId(args.userId, args.orgId);
        return result;
      }
    }

    public static class getFFTOrgDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgDetail_args> {
      public getFFTOrgDetail() {
        super("getFFTOrgDetail");
      }

      public getFFTOrgDetail_args getEmptyArgsInstance() {
        return new getFFTOrgDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgDetail_result getResult(I iface, getFFTOrgDetail_args args) throws org.apache.thrift.TException {
        getFFTOrgDetail_result result = new getFFTOrgDetail_result();
        result.success = iface.getFFTOrgDetail(args.id, args.orgId);
        return result;
      }
    }

    public static class isNextFFTOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isNextFFTOrg_args> {
      public isNextFFTOrg() {
        super("isNextFFTOrg");
      }

      public isNextFFTOrg_args getEmptyArgsInstance() {
        return new isNextFFTOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isNextFFTOrg_result getResult(I iface, isNextFFTOrg_args args) throws org.apache.thrift.TException {
        isNextFFTOrg_result result = new isNextFFTOrg_result();
        result.success = iface.isNextFFTOrg(args.userId, args.ids);
        return result;
      }
    }

    public static class addFFTOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFFTOrg_args> {
      public addFFTOrg() {
        super("addFFTOrg");
      }

      public addFFTOrg_args getEmptyArgsInstance() {
        return new addFFTOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFFTOrg_result getResult(I iface, addFFTOrg_args args) throws org.apache.thrift.TException {
        addFFTOrg_result result = new addFFTOrg_result();
        result.success = iface.addFFTOrg(args.originVo, args.fftOrgVo, args.roleIds, args.reOrgIds);
        return result;
      }
    }

    public static class deleteFFTOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFFTOrg_args> {
      public deleteFFTOrg() {
        super("deleteFFTOrg");
      }

      public deleteFFTOrg_args getEmptyArgsInstance() {
        return new deleteFFTOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFFTOrg_result getResult(I iface, deleteFFTOrg_args args) throws org.apache.thrift.TException {
        deleteFFTOrg_result result = new deleteFFTOrg_result();
        result.success = iface.deleteFFTOrg(args.originVo, args.id);
        return result;
      }
    }

    public static class updateFFTOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFFTOrg_args> {
      public updateFFTOrg() {
        super("updateFFTOrg");
      }

      public updateFFTOrg_args getEmptyArgsInstance() {
        return new updateFFTOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFFTOrg_result getResult(I iface, updateFFTOrg_args args) throws org.apache.thrift.TException {
        updateFFTOrg_result result = new updateFFTOrg_result();
        result.success = iface.updateFFTOrg(args.originVo, args.fftOrgVo, args.roleIds, args.reOrgIds);
        return result;
      }
    }

    public static class getFFTOrgReByOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgReByOrgId_args> {
      public getFFTOrgReByOrgId() {
        super("getFFTOrgReByOrgId");
      }

      public getFFTOrgReByOrgId_args getEmptyArgsInstance() {
        return new getFFTOrgReByOrgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgReByOrgId_result getResult(I iface, getFFTOrgReByOrgId_args args) throws org.apache.thrift.TException {
        getFFTOrgReByOrgId_result result = new getFFTOrgReByOrgId_result();
        result.success = iface.getFFTOrgReByOrgId(args.orgId);
        return result;
      }
    }

    public static class getOrgRoleByOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgRoleByOrgId_args> {
      public getOrgRoleByOrgId() {
        super("getOrgRoleByOrgId");
      }

      public getOrgRoleByOrgId_args getEmptyArgsInstance() {
        return new getOrgRoleByOrgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgRoleByOrgId_result getResult(I iface, getOrgRoleByOrgId_args args) throws org.apache.thrift.TException {
        getOrgRoleByOrgId_result result = new getOrgRoleByOrgId_result();
        result.success = iface.getOrgRoleByOrgId(args.orgId);
        return result;
      }
    }

    public static class getOrgRoleIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgRoleIds_args> {
      public getOrgRoleIds() {
        super("getOrgRoleIds");
      }

      public getOrgRoleIds_args getEmptyArgsInstance() {
        return new getOrgRoleIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgRoleIds_result getResult(I iface, getOrgRoleIds_args args) throws org.apache.thrift.TException {
        getOrgRoleIds_result result = new getOrgRoleIds_result();
        result.success = iface.getOrgRoleIds(args.orgIds);
        return result;
      }
    }

    public static class getFFTOrgInOneByBank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgInOneByBank_args> {
      public getFFTOrgInOneByBank() {
        super("getFFTOrgInOneByBank");
      }

      public getFFTOrgInOneByBank_args getEmptyArgsInstance() {
        return new getFFTOrgInOneByBank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgInOneByBank_result getResult(I iface, getFFTOrgInOneByBank_args args) throws org.apache.thrift.TException {
        getFFTOrgInOneByBank_result result = new getFFTOrgInOneByBank_result();
        result.success = iface.getFFTOrgInOneByBank(args.userId);
        return result;
      }
    }

    public static class getFFTOrgByUserIdPlatform<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFFTOrgByUserIdPlatform_args> {
      public getFFTOrgByUserIdPlatform() {
        super("getFFTOrgByUserIdPlatform");
      }

      public getFFTOrgByUserIdPlatform_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdPlatform_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFFTOrgByUserIdPlatform_result getResult(I iface, getFFTOrgByUserIdPlatform_args args) throws org.apache.thrift.TException {
        getFFTOrgByUserIdPlatform_result result = new getFFTOrgByUserIdPlatform_result();
        result.success = iface.getFFTOrgByUserIdPlatform(args.userId, args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getFFTOrgByList", new getFFTOrgByList());
      processMap.put("getFFTOrgByPage", new getFFTOrgByPage());
      processMap.put("getFFTOrgByOrgIds", new getFFTOrgByOrgIds());
      processMap.put("getFFTOrgByIds", new getFFTOrgByIds());
      processMap.put("getFFTOrgByUserId", new getFFTOrgByUserId());
      processMap.put("getFFTOrgByUserIdTwoLevel", new getFFTOrgByUserIdTwoLevel());
      processMap.put("getFFTOrgByUserIdOrgId", new getFFTOrgByUserIdOrgId());
      processMap.put("getFFTOrgDetail", new getFFTOrgDetail());
      processMap.put("isNextFFTOrg", new isNextFFTOrg());
      processMap.put("addFFTOrg", new addFFTOrg());
      processMap.put("deleteFFTOrg", new deleteFFTOrg());
      processMap.put("updateFFTOrg", new updateFFTOrg());
      processMap.put("getFFTOrgReByOrgId", new getFFTOrgReByOrgId());
      processMap.put("getOrgRoleByOrgId", new getOrgRoleByOrgId());
      processMap.put("getOrgRoleIds", new getOrgRoleIds());
      processMap.put("getFFTOrgInOneByBank", new getFFTOrgInOneByBank());
      processMap.put("getFFTOrgByUserIdPlatform", new getFFTOrgByUserIdPlatform());
      return processMap;
    }

    public static class getFFTOrgByList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByList_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByList() {
        super("getFFTOrgByList");
      }

      public getFFTOrgByList_args getEmptyArgsInstance() {
        return new getFFTOrgByList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByList_result result = new getFFTOrgByList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByList_result result = new getFFTOrgByList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByList(args.fftOrgVo,resultHandler);
      }
    }

    public static class getFFTOrgByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByPage_args, com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes> {
      public getFFTOrgByPage() {
        super("getFFTOrgByPage");
      }

      public getFFTOrgByPage_args getEmptyArgsInstance() {
        return new getFFTOrgByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes o) {
            getFFTOrgByPage_result result = new getFFTOrgByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByPage_result result = new getFFTOrgByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes> resultHandler) throws TException {
        iface.getFFTOrgByPage(args.page, args.fftOrgVo,resultHandler);
      }
    }

    public static class getFFTOrgByOrgIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByOrgIds_args, com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes> {
      public getFFTOrgByOrgIds() {
        super("getFFTOrgByOrgIds");
      }

      public getFFTOrgByOrgIds_args getEmptyArgsInstance() {
        return new getFFTOrgByOrgIds_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes o) {
            getFFTOrgByOrgIds_result result = new getFFTOrgByOrgIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByOrgIds_result result = new getFFTOrgByOrgIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByOrgIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByOrgIds(args.orgIds,resultHandler);
      }
    }

    public static class getFFTOrgByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByIds_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByIds() {
        super("getFFTOrgByIds");
      }

      public getFFTOrgByIds_args getEmptyArgsInstance() {
        return new getFFTOrgByIds_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByIds_result result = new getFFTOrgByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByIds_result result = new getFFTOrgByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByIds(args.ids,resultHandler);
      }
    }

    public static class getFFTOrgByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByUserId_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByUserId() {
        super("getFFTOrgByUserId");
      }

      public getFFTOrgByUserId_args getEmptyArgsInstance() {
        return new getFFTOrgByUserId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByUserId_result result = new getFFTOrgByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByUserId_result result = new getFFTOrgByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByUserId(args.userId,resultHandler);
      }
    }

    public static class getFFTOrgByUserIdTwoLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByUserIdTwoLevel_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByUserIdTwoLevel() {
        super("getFFTOrgByUserIdTwoLevel");
      }

      public getFFTOrgByUserIdTwoLevel_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdTwoLevel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByUserIdTwoLevel_result result = new getFFTOrgByUserIdTwoLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByUserIdTwoLevel_result result = new getFFTOrgByUserIdTwoLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByUserIdTwoLevel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByUserIdTwoLevel(args.userId,resultHandler);
      }
    }

    public static class getFFTOrgByUserIdOrgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByUserIdOrgId_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByUserIdOrgId() {
        super("getFFTOrgByUserIdOrgId");
      }

      public getFFTOrgByUserIdOrgId_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdOrgId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByUserIdOrgId_result result = new getFFTOrgByUserIdOrgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByUserIdOrgId_result result = new getFFTOrgByUserIdOrgId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByUserIdOrgId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByUserIdOrgId(args.userId, args.orgId,resultHandler);
      }
    }

    public static class getFFTOrgDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgDetail_args, com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo> {
      public getFFTOrgDetail() {
        super("getFFTOrgDetail");
      }

      public getFFTOrgDetail_args getEmptyArgsInstance() {
        return new getFFTOrgDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo o) {
            getFFTOrgDetail_result result = new getFFTOrgDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgDetail_result result = new getFFTOrgDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo> resultHandler) throws TException {
        iface.getFFTOrgDetail(args.id, args.orgId,resultHandler);
      }
    }

    public static class isNextFFTOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isNextFFTOrg_args, List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>> {
      public isNextFFTOrg() {
        super("isNextFFTOrg");
      }

      public isNextFFTOrg_args getEmptyArgsInstance() {
        return new isNextFFTOrg_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> o) {
            isNextFFTOrg_result result = new isNextFFTOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isNextFFTOrg_result result = new isNextFFTOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isNextFFTOrg_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>> resultHandler) throws TException {
        iface.isNextFFTOrg(args.userId, args.ids,resultHandler);
      }
    }

    public static class addFFTOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFFTOrg_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addFFTOrg() {
        super("addFFTOrg");
      }

      public addFFTOrg_args getEmptyArgsInstance() {
        return new addFFTOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addFFTOrg_result result = new addFFTOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFFTOrg_result result = new addFFTOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFFTOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addFFTOrg(args.originVo, args.fftOrgVo, args.roleIds, args.reOrgIds,resultHandler);
      }
    }

    public static class deleteFFTOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFFTOrg_args, com.froad.thrift.vo.ResultVo> {
      public deleteFFTOrg() {
        super("deleteFFTOrg");
      }

      public deleteFFTOrg_args getEmptyArgsInstance() {
        return new deleteFFTOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteFFTOrg_result result = new deleteFFTOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFFTOrg_result result = new deleteFFTOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFFTOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteFFTOrg(args.originVo, args.id,resultHandler);
      }
    }

    public static class updateFFTOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFFTOrg_args, com.froad.thrift.vo.ResultVo> {
      public updateFFTOrg() {
        super("updateFFTOrg");
      }

      public updateFFTOrg_args getEmptyArgsInstance() {
        return new updateFFTOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateFFTOrg_result result = new updateFFTOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFFTOrg_result result = new updateFFTOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFFTOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateFFTOrg(args.originVo, args.fftOrgVo, args.roleIds, args.reOrgIds,resultHandler);
      }
    }

    public static class getFFTOrgReByOrgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgReByOrgId_args, com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes> {
      public getFFTOrgReByOrgId() {
        super("getFFTOrgReByOrgId");
      }

      public getFFTOrgReByOrgId_args getEmptyArgsInstance() {
        return new getFFTOrgReByOrgId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes o) {
            getFFTOrgReByOrgId_result result = new getFFTOrgReByOrgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgReByOrgId_result result = new getFFTOrgReByOrgId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgReByOrgId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes> resultHandler) throws TException {
        iface.getFFTOrgReByOrgId(args.orgId,resultHandler);
      }
    }

    public static class getOrgRoleByOrgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgRoleByOrgId_args, com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes> {
      public getOrgRoleByOrgId() {
        super("getOrgRoleByOrgId");
      }

      public getOrgRoleByOrgId_args getEmptyArgsInstance() {
        return new getOrgRoleByOrgId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes o) {
            getOrgRoleByOrgId_result result = new getOrgRoleByOrgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgRoleByOrgId_result result = new getOrgRoleByOrgId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgRoleByOrgId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes> resultHandler) throws TException {
        iface.getOrgRoleByOrgId(args.orgId,resultHandler);
      }
    }

    public static class getOrgRoleIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgRoleIds_args, com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes> {
      public getOrgRoleIds() {
        super("getOrgRoleIds");
      }

      public getOrgRoleIds_args getEmptyArgsInstance() {
        return new getOrgRoleIds_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes o) {
            getOrgRoleIds_result result = new getOrgRoleIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgRoleIds_result result = new getOrgRoleIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgRoleIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes> resultHandler) throws TException {
        iface.getOrgRoleIds(args.orgIds,resultHandler);
      }
    }

    public static class getFFTOrgInOneByBank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgInOneByBank_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgInOneByBank() {
        super("getFFTOrgInOneByBank");
      }

      public getFFTOrgInOneByBank_args getEmptyArgsInstance() {
        return new getFFTOrgInOneByBank_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgInOneByBank_result result = new getFFTOrgInOneByBank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgInOneByBank_result result = new getFFTOrgInOneByBank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgInOneByBank_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgInOneByBank(args.userId,resultHandler);
      }
    }

    public static class getFFTOrgByUserIdPlatform<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFFTOrgByUserIdPlatform_args, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> {
      public getFFTOrgByUserIdPlatform() {
        super("getFFTOrgByUserIdPlatform");
      }

      public getFFTOrgByUserIdPlatform_args getEmptyArgsInstance() {
        return new getFFTOrgByUserIdPlatform_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes o) {
            getFFTOrgByUserIdPlatform_result result = new getFFTOrgByUserIdPlatform_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFFTOrgByUserIdPlatform_result result = new getFFTOrgByUserIdPlatform_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFFTOrgByUserIdPlatform_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes> resultHandler) throws TException {
        iface.getFFTOrgByUserIdPlatform(args.userId, args.clientId,resultHandler);
      }
    }

  }

  public static class getFFTOrgByList_args implements org.apache.thrift.TBase<getFFTOrgByList_args, getFFTOrgByList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByList_args");

    private static final org.apache.thrift.protocol.TField FFT_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("fftOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FFT_ORG_VO((short)1, "fftOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FFT_ORG_VO
            return FFT_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FFT_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("fftOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByList_args.class, metaDataMap);
    }

    public getFFTOrgByList_args() {
    }

    public getFFTOrgByList_args(
      com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo)
    {
      this();
      this.fftOrgVo = fftOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByList_args(getFFTOrgByList_args other) {
      if (other.isSetFftOrgVo()) {
        this.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo(other.fftOrgVo);
      }
    }

    public getFFTOrgByList_args deepCopy() {
      return new getFFTOrgByList_args(this);
    }

    @Override
    public void clear() {
      this.fftOrgVo = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo getFftOrgVo() {
      return this.fftOrgVo;
    }

    public getFFTOrgByList_args setFftOrgVo(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) {
      this.fftOrgVo = fftOrgVo;
      return this;
    }

    public void unsetFftOrgVo() {
      this.fftOrgVo = null;
    }

    /** Returns true if field fftOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFftOrgVo() {
      return this.fftOrgVo != null;
    }

    public void setFftOrgVoIsSet(boolean value) {
      if (!value) {
        this.fftOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FFT_ORG_VO:
        if (value == null) {
          unsetFftOrgVo();
        } else {
          setFftOrgVo((com.froad.thrift.vo.orgRoleManager.FFTOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FFT_ORG_VO:
        return getFftOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FFT_ORG_VO:
        return isSetFftOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByList_args)
        return this.equals((getFFTOrgByList_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByList_args that) {
      if (that == null)
        return false;

      boolean this_present_fftOrgVo = true && this.isSetFftOrgVo();
      boolean that_present_fftOrgVo = true && that.isSetFftOrgVo();
      if (this_present_fftOrgVo || that_present_fftOrgVo) {
        if (!(this_present_fftOrgVo && that_present_fftOrgVo))
          return false;
        if (!this.fftOrgVo.equals(that.fftOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fftOrgVo = true && (isSetFftOrgVo());
      list.add(present_fftOrgVo);
      if (present_fftOrgVo)
        list.add(fftOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFftOrgVo()).compareTo(other.isSetFftOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFftOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftOrgVo, other.fftOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByList_args(");
      boolean first = true;

      sb.append("fftOrgVo:");
      if (this.fftOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.fftOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fftOrgVo != null) {
        fftOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByList_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByList_argsStandardScheme getScheme() {
        return new getFFTOrgByList_argsStandardScheme();
      }
    }

    private static class getFFTOrgByList_argsStandardScheme extends StandardScheme<getFFTOrgByList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FFT_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
                struct.fftOrgVo.read(iprot);
                struct.setFftOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fftOrgVo != null) {
          oprot.writeFieldBegin(FFT_ORG_VO_FIELD_DESC);
          struct.fftOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByList_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByList_argsTupleScheme getScheme() {
        return new getFFTOrgByList_argsTupleScheme();
      }
    }

    private static class getFFTOrgByList_argsTupleScheme extends TupleScheme<getFFTOrgByList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFftOrgVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFftOrgVo()) {
          struct.fftOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
          struct.fftOrgVo.read(iprot);
          struct.setFftOrgVoIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByList_result implements org.apache.thrift.TBase<getFFTOrgByList_result, getFFTOrgByList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByList_result.class, metaDataMap);
    }

    public getFFTOrgByList_result() {
    }

    public getFFTOrgByList_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByList_result(getFFTOrgByList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByList_result deepCopy() {
      return new getFFTOrgByList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByList_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByList_result)
        return this.equals((getFFTOrgByList_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByList_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByList_resultStandardScheme getScheme() {
        return new getFFTOrgByList_resultStandardScheme();
      }
    }

    private static class getFFTOrgByList_resultStandardScheme extends StandardScheme<getFFTOrgByList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByList_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByList_resultTupleScheme getScheme() {
        return new getFFTOrgByList_resultTupleScheme();
      }
    }

    private static class getFFTOrgByList_resultTupleScheme extends TupleScheme<getFFTOrgByList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByPage_args implements org.apache.thrift.TBase<getFFTOrgByPage_args, getFFTOrgByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FFT_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("fftOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      FFT_ORG_VO((short)2, "fftOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // FFT_ORG_VO
            return FFT_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.FFT_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("fftOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByPage_args.class, metaDataMap);
    }

    public getFFTOrgByPage_args() {
    }

    public getFFTOrgByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo)
    {
      this();
      this.page = page;
      this.fftOrgVo = fftOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByPage_args(getFFTOrgByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetFftOrgVo()) {
        this.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo(other.fftOrgVo);
      }
    }

    public getFFTOrgByPage_args deepCopy() {
      return new getFFTOrgByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.fftOrgVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getFFTOrgByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo getFftOrgVo() {
      return this.fftOrgVo;
    }

    public getFFTOrgByPage_args setFftOrgVo(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) {
      this.fftOrgVo = fftOrgVo;
      return this;
    }

    public void unsetFftOrgVo() {
      this.fftOrgVo = null;
    }

    /** Returns true if field fftOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFftOrgVo() {
      return this.fftOrgVo != null;
    }

    public void setFftOrgVoIsSet(boolean value) {
      if (!value) {
        this.fftOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case FFT_ORG_VO:
        if (value == null) {
          unsetFftOrgVo();
        } else {
          setFftOrgVo((com.froad.thrift.vo.orgRoleManager.FFTOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case FFT_ORG_VO:
        return getFftOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case FFT_ORG_VO:
        return isSetFftOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByPage_args)
        return this.equals((getFFTOrgByPage_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_fftOrgVo = true && this.isSetFftOrgVo();
      boolean that_present_fftOrgVo = true && that.isSetFftOrgVo();
      if (this_present_fftOrgVo || that_present_fftOrgVo) {
        if (!(this_present_fftOrgVo && that_present_fftOrgVo))
          return false;
        if (!this.fftOrgVo.equals(that.fftOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_fftOrgVo = true && (isSetFftOrgVo());
      list.add(present_fftOrgVo);
      if (present_fftOrgVo)
        list.add(fftOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFftOrgVo()).compareTo(other.isSetFftOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFftOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftOrgVo, other.fftOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fftOrgVo:");
      if (this.fftOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.fftOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (fftOrgVo != null) {
        fftOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByPage_argsStandardScheme getScheme() {
        return new getFFTOrgByPage_argsStandardScheme();
      }
    }

    private static class getFFTOrgByPage_argsStandardScheme extends StandardScheme<getFFTOrgByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FFT_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
                struct.fftOrgVo.read(iprot);
                struct.setFftOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fftOrgVo != null) {
          oprot.writeFieldBegin(FFT_ORG_VO_FIELD_DESC);
          struct.fftOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByPage_argsTupleScheme getScheme() {
        return new getFFTOrgByPage_argsTupleScheme();
      }
    }

    private static class getFFTOrgByPage_argsTupleScheme extends TupleScheme<getFFTOrgByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetFftOrgVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetFftOrgVo()) {
          struct.fftOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
          struct.fftOrgVo.read(iprot);
          struct.setFftOrgVoIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByPage_result implements org.apache.thrift.TBase<getFFTOrgByPage_result, getFFTOrgByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByPage_result.class, metaDataMap);
    }

    public getFFTOrgByPage_result() {
    }

    public getFFTOrgByPage_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByPage_result(getFFTOrgByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes(other.success);
      }
    }

    public getFFTOrgByPage_result deepCopy() {
      return new getFFTOrgByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByPage_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByPage_result)
        return this.equals((getFFTOrgByPage_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByPage_resultStandardScheme getScheme() {
        return new getFFTOrgByPage_resultStandardScheme();
      }
    }

    private static class getFFTOrgByPage_resultStandardScheme extends StandardScheme<getFFTOrgByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByPage_resultTupleScheme getScheme() {
        return new getFFTOrgByPage_resultTupleScheme();
      }
    }

    private static class getFFTOrgByPage_resultTupleScheme extends TupleScheme<getFFTOrgByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByOrgIds_args implements org.apache.thrift.TBase<getFFTOrgByOrgIds_args, getFFTOrgByOrgIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByOrgIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByOrgIds_args");

    private static final org.apache.thrift.protocol.TField ORG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orgIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByOrgIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByOrgIds_argsTupleSchemeFactory());
    }

    public List<String> orgIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_IDS((short)1, "orgIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_IDS
            return ORG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_IDS, new org.apache.thrift.meta_data.FieldMetaData("orgIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByOrgIds_args.class, metaDataMap);
    }

    public getFFTOrgByOrgIds_args() {
    }

    public getFFTOrgByOrgIds_args(
      List<String> orgIds)
    {
      this();
      this.orgIds = orgIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByOrgIds_args(getFFTOrgByOrgIds_args other) {
      if (other.isSetOrgIds()) {
        List<String> __this__orgIds = new ArrayList<String>(other.orgIds);
        this.orgIds = __this__orgIds;
      }
    }

    public getFFTOrgByOrgIds_args deepCopy() {
      return new getFFTOrgByOrgIds_args(this);
    }

    @Override
    public void clear() {
      this.orgIds = null;
    }

    public int getOrgIdsSize() {
      return (this.orgIds == null) ? 0 : this.orgIds.size();
    }

    public java.util.Iterator<String> getOrgIdsIterator() {
      return (this.orgIds == null) ? null : this.orgIds.iterator();
    }

    public void addToOrgIds(String elem) {
      if (this.orgIds == null) {
        this.orgIds = new ArrayList<String>();
      }
      this.orgIds.add(elem);
    }

    public List<String> getOrgIds() {
      return this.orgIds;
    }

    public getFFTOrgByOrgIds_args setOrgIds(List<String> orgIds) {
      this.orgIds = orgIds;
      return this;
    }

    public void unsetOrgIds() {
      this.orgIds = null;
    }

    /** Returns true if field orgIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgIds() {
      return this.orgIds != null;
    }

    public void setOrgIdsIsSet(boolean value) {
      if (!value) {
        this.orgIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_IDS:
        if (value == null) {
          unsetOrgIds();
        } else {
          setOrgIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_IDS:
        return getOrgIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_IDS:
        return isSetOrgIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByOrgIds_args)
        return this.equals((getFFTOrgByOrgIds_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByOrgIds_args that) {
      if (that == null)
        return false;

      boolean this_present_orgIds = true && this.isSetOrgIds();
      boolean that_present_orgIds = true && that.isSetOrgIds();
      if (this_present_orgIds || that_present_orgIds) {
        if (!(this_present_orgIds && that_present_orgIds))
          return false;
        if (!this.orgIds.equals(that.orgIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgIds = true && (isSetOrgIds());
      list.add(present_orgIds);
      if (present_orgIds)
        list.add(orgIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByOrgIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgIds()).compareTo(other.isSetOrgIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgIds, other.orgIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByOrgIds_args(");
      boolean first = true;

      sb.append("orgIds:");
      if (this.orgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.orgIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByOrgIds_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByOrgIds_argsStandardScheme getScheme() {
        return new getFFTOrgByOrgIds_argsStandardScheme();
      }
    }

    private static class getFFTOrgByOrgIds_argsStandardScheme extends StandardScheme<getFFTOrgByOrgIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByOrgIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.orgIds = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.orgIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByOrgIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgIds != null) {
          oprot.writeFieldBegin(ORG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgIds.size()));
            for (String _iter3 : struct.orgIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByOrgIds_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByOrgIds_argsTupleScheme getScheme() {
        return new getFFTOrgByOrgIds_argsTupleScheme();
      }
    }

    private static class getFFTOrgByOrgIds_argsTupleScheme extends TupleScheme<getFFTOrgByOrgIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByOrgIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgIds()) {
          {
            oprot.writeI32(struct.orgIds.size());
            for (String _iter4 : struct.orgIds)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByOrgIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orgIds = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.orgIds.add(_elem6);
            }
          }
          struct.setOrgIdsIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByOrgIds_result implements org.apache.thrift.TBase<getFFTOrgByOrgIds_result, getFFTOrgByOrgIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByOrgIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByOrgIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByOrgIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByOrgIds_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByOrgIds_result.class, metaDataMap);
    }

    public getFFTOrgByOrgIds_result() {
    }

    public getFFTOrgByOrgIds_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByOrgIds_result(getFFTOrgByOrgIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes(other.success);
      }
    }

    public getFFTOrgByOrgIds_result deepCopy() {
      return new getFFTOrgByOrgIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByOrgIds_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByOrgIds_result)
        return this.equals((getFFTOrgByOrgIds_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByOrgIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByOrgIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByOrgIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByOrgIds_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByOrgIds_resultStandardScheme getScheme() {
        return new getFFTOrgByOrgIds_resultStandardScheme();
      }
    }

    private static class getFFTOrgByOrgIds_resultStandardScheme extends StandardScheme<getFFTOrgByOrgIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByOrgIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByOrgIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByOrgIds_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByOrgIds_resultTupleScheme getScheme() {
        return new getFFTOrgByOrgIds_resultTupleScheme();
      }
    }

    private static class getFFTOrgByOrgIds_resultTupleScheme extends TupleScheme<getFFTOrgByOrgIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByOrgIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByOrgIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgNameListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByIds_args implements org.apache.thrift.TBase<getFFTOrgByIds_args, getFFTOrgByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByIds_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByIds_args.class, metaDataMap);
    }

    public getFFTOrgByIds_args() {
    }

    public getFFTOrgByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByIds_args(getFFTOrgByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getFFTOrgByIds_args deepCopy() {
      return new getFFTOrgByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public getFFTOrgByIds_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByIds_args)
        return this.equals((getFFTOrgByIds_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByIds_argsStandardScheme getScheme() {
        return new getFFTOrgByIds_argsStandardScheme();
      }
    }

    private static class getFFTOrgByIds_argsStandardScheme extends StandardScheme<getFFTOrgByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.ids.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter11 : struct.ids)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByIds_argsTupleScheme getScheme() {
        return new getFFTOrgByIds_argsTupleScheme();
      }
    }

    private static class getFFTOrgByIds_argsTupleScheme extends TupleScheme<getFFTOrgByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter12 : struct.ids)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.ids.add(_elem14);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByIds_result implements org.apache.thrift.TBase<getFFTOrgByIds_result, getFFTOrgByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByIds_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByIds_result.class, metaDataMap);
    }

    public getFFTOrgByIds_result() {
    }

    public getFFTOrgByIds_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByIds_result(getFFTOrgByIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByIds_result deepCopy() {
      return new getFFTOrgByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByIds_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByIds_result)
        return this.equals((getFFTOrgByIds_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByIds_resultStandardScheme getScheme() {
        return new getFFTOrgByIds_resultStandardScheme();
      }
    }

    private static class getFFTOrgByIds_resultStandardScheme extends StandardScheme<getFFTOrgByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByIds_resultTupleScheme getScheme() {
        return new getFFTOrgByIds_resultTupleScheme();
      }
    }

    private static class getFFTOrgByIds_resultTupleScheme extends TupleScheme<getFFTOrgByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserId_args implements org.apache.thrift.TBase<getFFTOrgByUserId_args, getFFTOrgByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserId_argsTupleSchemeFactory());
    }

    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserId_args.class, metaDataMap);
    }

    public getFFTOrgByUserId_args() {
    }

    public getFFTOrgByUserId_args(
      long userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserId_args(getFFTOrgByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getFFTOrgByUserId_args deepCopy() {
      return new getFFTOrgByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public getFFTOrgByUserId_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserId_args)
        return this.equals((getFFTOrgByUserId_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserId_argsStandardScheme getScheme() {
        return new getFFTOrgByUserId_argsStandardScheme();
      }
    }

    private static class getFFTOrgByUserId_argsStandardScheme extends StandardScheme<getFFTOrgByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserId_argsTupleScheme getScheme() {
        return new getFFTOrgByUserId_argsTupleScheme();
      }
    }

    private static class getFFTOrgByUserId_argsTupleScheme extends TupleScheme<getFFTOrgByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserId_result implements org.apache.thrift.TBase<getFFTOrgByUserId_result, getFFTOrgByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserId_result.class, metaDataMap);
    }

    public getFFTOrgByUserId_result() {
    }

    public getFFTOrgByUserId_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserId_result(getFFTOrgByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByUserId_result deepCopy() {
      return new getFFTOrgByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByUserId_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserId_result)
        return this.equals((getFFTOrgByUserId_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserId_resultStandardScheme getScheme() {
        return new getFFTOrgByUserId_resultStandardScheme();
      }
    }

    private static class getFFTOrgByUserId_resultStandardScheme extends StandardScheme<getFFTOrgByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserId_resultTupleScheme getScheme() {
        return new getFFTOrgByUserId_resultTupleScheme();
      }
    }

    private static class getFFTOrgByUserId_resultTupleScheme extends TupleScheme<getFFTOrgByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdTwoLevel_args implements org.apache.thrift.TBase<getFFTOrgByUserIdTwoLevel_args, getFFTOrgByUserIdTwoLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdTwoLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdTwoLevel_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdTwoLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdTwoLevel_argsTupleSchemeFactory());
    }

    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdTwoLevel_args.class, metaDataMap);
    }

    public getFFTOrgByUserIdTwoLevel_args() {
    }

    public getFFTOrgByUserIdTwoLevel_args(
      long userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdTwoLevel_args(getFFTOrgByUserIdTwoLevel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getFFTOrgByUserIdTwoLevel_args deepCopy() {
      return new getFFTOrgByUserIdTwoLevel_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public getFFTOrgByUserIdTwoLevel_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdTwoLevel_args)
        return this.equals((getFFTOrgByUserIdTwoLevel_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdTwoLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdTwoLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdTwoLevel_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdTwoLevel_argsStandardScheme getScheme() {
        return new getFFTOrgByUserIdTwoLevel_argsStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_argsStandardScheme extends StandardScheme<getFFTOrgByUserIdTwoLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdTwoLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdTwoLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdTwoLevel_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdTwoLevel_argsTupleScheme getScheme() {
        return new getFFTOrgByUserIdTwoLevel_argsTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_argsTupleScheme extends TupleScheme<getFFTOrgByUserIdTwoLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdTwoLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdTwoLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdTwoLevel_result implements org.apache.thrift.TBase<getFFTOrgByUserIdTwoLevel_result, getFFTOrgByUserIdTwoLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdTwoLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdTwoLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdTwoLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdTwoLevel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdTwoLevel_result.class, metaDataMap);
    }

    public getFFTOrgByUserIdTwoLevel_result() {
    }

    public getFFTOrgByUserIdTwoLevel_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdTwoLevel_result(getFFTOrgByUserIdTwoLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByUserIdTwoLevel_result deepCopy() {
      return new getFFTOrgByUserIdTwoLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByUserIdTwoLevel_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdTwoLevel_result)
        return this.equals((getFFTOrgByUserIdTwoLevel_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdTwoLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdTwoLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdTwoLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdTwoLevel_resultStandardScheme getScheme() {
        return new getFFTOrgByUserIdTwoLevel_resultStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_resultStandardScheme extends StandardScheme<getFFTOrgByUserIdTwoLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdTwoLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdTwoLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdTwoLevel_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdTwoLevel_resultTupleScheme getScheme() {
        return new getFFTOrgByUserIdTwoLevel_resultTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdTwoLevel_resultTupleScheme extends TupleScheme<getFFTOrgByUserIdTwoLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdTwoLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdTwoLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdOrgId_args implements org.apache.thrift.TBase<getFFTOrgByUserIdOrgId_args, getFFTOrgByUserIdOrgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdOrgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdOrgId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdOrgId_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      ORG_ID((short)2, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdOrgId_args.class, metaDataMap);
    }

    public getFFTOrgByUserIdOrgId_args() {
    }

    public getFFTOrgByUserIdOrgId_args(
      long userId,
      String orgId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.orgId = orgId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdOrgId_args(getFFTOrgByUserIdOrgId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetOrgId()) {
        this.orgId = other.orgId;
      }
    }

    public getFFTOrgByUserIdOrgId_args deepCopy() {
      return new getFFTOrgByUserIdOrgId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.orgId = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public getFFTOrgByUserIdOrgId_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getOrgId() {
      return this.orgId;
    }

    public getFFTOrgByUserIdOrgId_args setOrgId(String orgId) {
      this.orgId = orgId;
      return this;
    }

    public void unsetOrgId() {
      this.orgId = null;
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return this.orgId != null;
    }

    public void setOrgIdIsSet(boolean value) {
      if (!value) {
        this.orgId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case ORG_ID:
        return getOrgId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdOrgId_args)
        return this.equals((getFFTOrgByUserIdOrgId_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_orgId = true && this.isSetOrgId();
      boolean that_present_orgId = true && that.isSetOrgId();
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (!this.orgId.equals(that.orgId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_orgId = true && (isSetOrgId());
      list.add(present_orgId);
      if (present_orgId)
        list.add(orgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdOrgId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdOrgId_argsStandardScheme getScheme() {
        return new getFFTOrgByUserIdOrgId_argsStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdOrgId_argsStandardScheme extends StandardScheme<getFFTOrgByUserIdOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgId = iprot.readString();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.orgId != null) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdOrgId_argsTupleScheme getScheme() {
        return new getFFTOrgByUserIdOrgId_argsTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdOrgId_argsTupleScheme extends TupleScheme<getFFTOrgByUserIdOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetOrgId()) {
          oprot.writeString(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgId = iprot.readString();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdOrgId_result implements org.apache.thrift.TBase<getFFTOrgByUserIdOrgId_result, getFFTOrgByUserIdOrgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdOrgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdOrgId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdOrgId_result.class, metaDataMap);
    }

    public getFFTOrgByUserIdOrgId_result() {
    }

    public getFFTOrgByUserIdOrgId_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdOrgId_result(getFFTOrgByUserIdOrgId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByUserIdOrgId_result deepCopy() {
      return new getFFTOrgByUserIdOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByUserIdOrgId_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdOrgId_result)
        return this.equals((getFFTOrgByUserIdOrgId_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdOrgId_resultStandardScheme getScheme() {
        return new getFFTOrgByUserIdOrgId_resultStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdOrgId_resultStandardScheme extends StandardScheme<getFFTOrgByUserIdOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdOrgId_resultTupleScheme getScheme() {
        return new getFFTOrgByUserIdOrgId_resultTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdOrgId_resultTupleScheme extends TupleScheme<getFFTOrgByUserIdOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgDetail_args implements org.apache.thrift.TBase<getFFTOrgDetail_args, getFFTOrgDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgDetail_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgDetail_argsTupleSchemeFactory());
    }

    public long id; // required
    public String orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ORG_ID((short)2, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgDetail_args.class, metaDataMap);
    }

    public getFFTOrgDetail_args() {
    }

    public getFFTOrgDetail_args(
      long id,
      String orgId)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.orgId = orgId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgDetail_args(getFFTOrgDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetOrgId()) {
        this.orgId = other.orgId;
      }
    }

    public getFFTOrgDetail_args deepCopy() {
      return new getFFTOrgDetail_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.orgId = null;
    }

    public long getId() {
      return this.id;
    }

    public getFFTOrgDetail_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getOrgId() {
      return this.orgId;
    }

    public getFFTOrgDetail_args setOrgId(String orgId) {
      this.orgId = orgId;
      return this;
    }

    public void unsetOrgId() {
      this.orgId = null;
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return this.orgId != null;
    }

    public void setOrgIdIsSet(boolean value) {
      if (!value) {
        this.orgId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case ORG_ID:
        return getOrgId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgDetail_args)
        return this.equals((getFFTOrgDetail_args)that);
      return false;
    }

    public boolean equals(getFFTOrgDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_orgId = true && this.isSetOrgId();
      boolean that_present_orgId = true && that.isSetOrgId();
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (!this.orgId.equals(that.orgId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_orgId = true && (isSetOrgId());
      list.add(present_orgId);
      if (present_orgId)
        list.add(orgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgDetail_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgDetail_argsStandardScheme getScheme() {
        return new getFFTOrgDetail_argsStandardScheme();
      }
    }

    private static class getFFTOrgDetail_argsStandardScheme extends StandardScheme<getFFTOrgDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgId = iprot.readString();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.orgId != null) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgDetail_argsTupleScheme getScheme() {
        return new getFFTOrgDetail_argsTupleScheme();
      }
    }

    private static class getFFTOrgDetail_argsTupleScheme extends TupleScheme<getFFTOrgDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetOrgId()) {
          oprot.writeString(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgId = iprot.readString();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgDetail_result implements org.apache.thrift.TBase<getFFTOrgDetail_result, getFFTOrgDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgDetail_result.class, metaDataMap);
    }

    public getFFTOrgDetail_result() {
    }

    public getFFTOrgDetail_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgDetail_result(getFFTOrgDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo(other.success);
      }
    }

    public getFFTOrgDetail_result deepCopy() {
      return new getFFTOrgDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo getSuccess() {
      return this.success;
    }

    public getFFTOrgDetail_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgDetail_result)
        return this.equals((getFFTOrgDetail_result)that);
      return false;
    }

    public boolean equals(getFFTOrgDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgDetail_resultStandardScheme getScheme() {
        return new getFFTOrgDetail_resultStandardScheme();
      }
    }

    private static class getFFTOrgDetail_resultStandardScheme extends StandardScheme<getFFTOrgDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgDetail_resultTupleScheme getScheme() {
        return new getFFTOrgDetail_resultTupleScheme();
      }
    }

    private static class getFFTOrgDetail_resultTupleScheme extends TupleScheme<getFFTOrgDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgDetailVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isNextFFTOrg_args implements org.apache.thrift.TBase<isNextFFTOrg_args, isNextFFTOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<isNextFFTOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isNextFFTOrg_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isNextFFTOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isNextFFTOrg_argsTupleSchemeFactory());
    }

    public long userId; // required
    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      IDS((short)2, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isNextFFTOrg_args.class, metaDataMap);
    }

    public isNextFFTOrg_args() {
    }

    public isNextFFTOrg_args(
      long userId,
      List<Long> ids)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isNextFFTOrg_args(isNextFFTOrg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public isNextFFTOrg_args deepCopy() {
      return new isNextFFTOrg_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.ids = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public isNextFFTOrg_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public isNextFFTOrg_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isNextFFTOrg_args)
        return this.equals((isNextFFTOrg_args)that);
      return false;
    }

    public boolean equals(isNextFFTOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(isNextFFTOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isNextFFTOrg_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isNextFFTOrg_argsStandardSchemeFactory implements SchemeFactory {
      public isNextFFTOrg_argsStandardScheme getScheme() {
        return new isNextFFTOrg_argsStandardScheme();
      }
    }

    private static class isNextFFTOrg_argsStandardScheme extends StandardScheme<isNextFFTOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isNextFFTOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list16.size);
                  long _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI64();
                    struct.ids.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isNextFFTOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter19 : struct.ids)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isNextFFTOrg_argsTupleSchemeFactory implements SchemeFactory {
      public isNextFFTOrg_argsTupleScheme getScheme() {
        return new isNextFFTOrg_argsTupleScheme();
      }
    }

    private static class isNextFFTOrg_argsTupleScheme extends TupleScheme<isNextFFTOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isNextFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter20 : struct.ids)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isNextFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.ids.add(_elem22);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class isNextFFTOrg_result implements org.apache.thrift.TBase<isNextFFTOrg_result, isNextFFTOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<isNextFFTOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isNextFFTOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isNextFFTOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isNextFFTOrg_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isNextFFTOrg_result.class, metaDataMap);
    }

    public isNextFFTOrg_result() {
    }

    public isNextFFTOrg_result(
      List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isNextFFTOrg_result(isNextFFTOrg_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> __this__success = new ArrayList<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>(other.success.size());
        for (com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public isNextFFTOrg_result deepCopy() {
      return new isNextFFTOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> getSuccess() {
      return this.success;
    }

    public isNextFFTOrg_result setSuccess(List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isNextFFTOrg_result)
        return this.equals((isNextFFTOrg_result)that);
      return false;
    }

    public boolean equals(isNextFFTOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isNextFFTOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isNextFFTOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isNextFFTOrg_resultStandardSchemeFactory implements SchemeFactory {
      public isNextFFTOrg_resultStandardScheme getScheme() {
        return new isNextFFTOrg_resultStandardScheme();
      }
    }

    private static class isNextFFTOrg_resultStandardScheme extends StandardScheme<isNextFFTOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isNextFFTOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>(_list24.size);
                  com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isNextFFTOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isNextFFTOrg_resultTupleSchemeFactory implements SchemeFactory {
      public isNextFFTOrg_resultTupleScheme getScheme() {
        return new isNextFFTOrg_resultTupleScheme();
      }
    }

    private static class isNextFFTOrg_resultTupleScheme extends TupleScheme<isNextFFTOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isNextFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isNextFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo>(_list29.size);
            com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.orgRoleManager.isNextFFTOrgVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addFFTOrg_args implements org.apache.thrift.TBase<addFFTOrg_args, addFFTOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFFTOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFFTOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FFT_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("fftOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("roleIds", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField RE_ORG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("reOrgIds", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFFTOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFFTOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo; // required
    public List<Long> roleIds; // required
    public List<String> reOrgIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      FFT_ORG_VO((short)2, "fftOrgVo"),
      ROLE_IDS((short)3, "roleIds"),
      RE_ORG_IDS((short)4, "reOrgIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // FFT_ORG_VO
            return FFT_ORG_VO;
          case 3: // ROLE_IDS
            return ROLE_IDS;
          case 4: // RE_ORG_IDS
            return RE_ORG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.FFT_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("fftOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgVo.class)));
      tmpMap.put(_Fields.ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("roleIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.RE_ORG_IDS, new org.apache.thrift.meta_data.FieldMetaData("reOrgIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFFTOrg_args.class, metaDataMap);
    }

    public addFFTOrg_args() {
    }

    public addFFTOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo,
      List<Long> roleIds,
      List<String> reOrgIds)
    {
      this();
      this.originVo = originVo;
      this.fftOrgVo = fftOrgVo;
      this.roleIds = roleIds;
      this.reOrgIds = reOrgIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFFTOrg_args(addFFTOrg_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetFftOrgVo()) {
        this.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo(other.fftOrgVo);
      }
      if (other.isSetRoleIds()) {
        List<Long> __this__roleIds = new ArrayList<Long>(other.roleIds);
        this.roleIds = __this__roleIds;
      }
      if (other.isSetReOrgIds()) {
        List<String> __this__reOrgIds = new ArrayList<String>(other.reOrgIds);
        this.reOrgIds = __this__reOrgIds;
      }
    }

    public addFFTOrg_args deepCopy() {
      return new addFFTOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.fftOrgVo = null;
      this.roleIds = null;
      this.reOrgIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addFFTOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo getFftOrgVo() {
      return this.fftOrgVo;
    }

    public addFFTOrg_args setFftOrgVo(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) {
      this.fftOrgVo = fftOrgVo;
      return this;
    }

    public void unsetFftOrgVo() {
      this.fftOrgVo = null;
    }

    /** Returns true if field fftOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFftOrgVo() {
      return this.fftOrgVo != null;
    }

    public void setFftOrgVoIsSet(boolean value) {
      if (!value) {
        this.fftOrgVo = null;
      }
    }

    public int getRoleIdsSize() {
      return (this.roleIds == null) ? 0 : this.roleIds.size();
    }

    public java.util.Iterator<Long> getRoleIdsIterator() {
      return (this.roleIds == null) ? null : this.roleIds.iterator();
    }

    public void addToRoleIds(long elem) {
      if (this.roleIds == null) {
        this.roleIds = new ArrayList<Long>();
      }
      this.roleIds.add(elem);
    }

    public List<Long> getRoleIds() {
      return this.roleIds;
    }

    public addFFTOrg_args setRoleIds(List<Long> roleIds) {
      this.roleIds = roleIds;
      return this;
    }

    public void unsetRoleIds() {
      this.roleIds = null;
    }

    /** Returns true if field roleIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleIds() {
      return this.roleIds != null;
    }

    public void setRoleIdsIsSet(boolean value) {
      if (!value) {
        this.roleIds = null;
      }
    }

    public int getReOrgIdsSize() {
      return (this.reOrgIds == null) ? 0 : this.reOrgIds.size();
    }

    public java.util.Iterator<String> getReOrgIdsIterator() {
      return (this.reOrgIds == null) ? null : this.reOrgIds.iterator();
    }

    public void addToReOrgIds(String elem) {
      if (this.reOrgIds == null) {
        this.reOrgIds = new ArrayList<String>();
      }
      this.reOrgIds.add(elem);
    }

    public List<String> getReOrgIds() {
      return this.reOrgIds;
    }

    public addFFTOrg_args setReOrgIds(List<String> reOrgIds) {
      this.reOrgIds = reOrgIds;
      return this;
    }

    public void unsetReOrgIds() {
      this.reOrgIds = null;
    }

    /** Returns true if field reOrgIds is set (has been assigned a value) and false otherwise */
    public boolean isSetReOrgIds() {
      return this.reOrgIds != null;
    }

    public void setReOrgIdsIsSet(boolean value) {
      if (!value) {
        this.reOrgIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case FFT_ORG_VO:
        if (value == null) {
          unsetFftOrgVo();
        } else {
          setFftOrgVo((com.froad.thrift.vo.orgRoleManager.FFTOrgVo)value);
        }
        break;

      case ROLE_IDS:
        if (value == null) {
          unsetRoleIds();
        } else {
          setRoleIds((List<Long>)value);
        }
        break;

      case RE_ORG_IDS:
        if (value == null) {
          unsetReOrgIds();
        } else {
          setReOrgIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case FFT_ORG_VO:
        return getFftOrgVo();

      case ROLE_IDS:
        return getRoleIds();

      case RE_ORG_IDS:
        return getReOrgIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case FFT_ORG_VO:
        return isSetFftOrgVo();
      case ROLE_IDS:
        return isSetRoleIds();
      case RE_ORG_IDS:
        return isSetReOrgIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFFTOrg_args)
        return this.equals((addFFTOrg_args)that);
      return false;
    }

    public boolean equals(addFFTOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_fftOrgVo = true && this.isSetFftOrgVo();
      boolean that_present_fftOrgVo = true && that.isSetFftOrgVo();
      if (this_present_fftOrgVo || that_present_fftOrgVo) {
        if (!(this_present_fftOrgVo && that_present_fftOrgVo))
          return false;
        if (!this.fftOrgVo.equals(that.fftOrgVo))
          return false;
      }

      boolean this_present_roleIds = true && this.isSetRoleIds();
      boolean that_present_roleIds = true && that.isSetRoleIds();
      if (this_present_roleIds || that_present_roleIds) {
        if (!(this_present_roleIds && that_present_roleIds))
          return false;
        if (!this.roleIds.equals(that.roleIds))
          return false;
      }

      boolean this_present_reOrgIds = true && this.isSetReOrgIds();
      boolean that_present_reOrgIds = true && that.isSetReOrgIds();
      if (this_present_reOrgIds || that_present_reOrgIds) {
        if (!(this_present_reOrgIds && that_present_reOrgIds))
          return false;
        if (!this.reOrgIds.equals(that.reOrgIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_fftOrgVo = true && (isSetFftOrgVo());
      list.add(present_fftOrgVo);
      if (present_fftOrgVo)
        list.add(fftOrgVo);

      boolean present_roleIds = true && (isSetRoleIds());
      list.add(present_roleIds);
      if (present_roleIds)
        list.add(roleIds);

      boolean present_reOrgIds = true && (isSetReOrgIds());
      list.add(present_reOrgIds);
      if (present_reOrgIds)
        list.add(reOrgIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFFTOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFftOrgVo()).compareTo(other.isSetFftOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFftOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftOrgVo, other.fftOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleIds()).compareTo(other.isSetRoleIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleIds, other.roleIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReOrgIds()).compareTo(other.isSetReOrgIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReOrgIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reOrgIds, other.reOrgIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFFTOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fftOrgVo:");
      if (this.fftOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.fftOrgVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleIds:");
      if (this.roleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.roleIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reOrgIds:");
      if (this.reOrgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.reOrgIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (fftOrgVo != null) {
        fftOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFFTOrg_argsStandardSchemeFactory implements SchemeFactory {
      public addFFTOrg_argsStandardScheme getScheme() {
        return new addFFTOrg_argsStandardScheme();
      }
    }

    private static class addFFTOrg_argsStandardScheme extends StandardScheme<addFFTOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFFTOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FFT_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
                struct.fftOrgVo.read(iprot);
                struct.setFftOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROLE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.roleIds = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.roleIds.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setRoleIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE_ORG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                  struct.reOrgIds = new ArrayList<String>(_list35.size);
                  String _elem36;
                  for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                  {
                    _elem36 = iprot.readString();
                    struct.reOrgIds.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setReOrgIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFFTOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fftOrgVo != null) {
          oprot.writeFieldBegin(FFT_ORG_VO_FIELD_DESC);
          struct.fftOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.roleIds != null) {
          oprot.writeFieldBegin(ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.roleIds.size()));
            for (long _iter38 : struct.roleIds)
            {
              oprot.writeI64(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.reOrgIds != null) {
          oprot.writeFieldBegin(RE_ORG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reOrgIds.size()));
            for (String _iter39 : struct.reOrgIds)
            {
              oprot.writeString(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFFTOrg_argsTupleSchemeFactory implements SchemeFactory {
      public addFFTOrg_argsTupleScheme getScheme() {
        return new addFFTOrg_argsTupleScheme();
      }
    }

    private static class addFFTOrg_argsTupleScheme extends TupleScheme<addFFTOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetFftOrgVo()) {
          optionals.set(1);
        }
        if (struct.isSetRoleIds()) {
          optionals.set(2);
        }
        if (struct.isSetReOrgIds()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetFftOrgVo()) {
          struct.fftOrgVo.write(oprot);
        }
        if (struct.isSetRoleIds()) {
          {
            oprot.writeI32(struct.roleIds.size());
            for (long _iter40 : struct.roleIds)
            {
              oprot.writeI64(_iter40);
            }
          }
        }
        if (struct.isSetReOrgIds()) {
          {
            oprot.writeI32(struct.reOrgIds.size());
            for (String _iter41 : struct.reOrgIds)
            {
              oprot.writeString(_iter41);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
          struct.fftOrgVo.read(iprot);
          struct.setFftOrgVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.roleIds = new ArrayList<Long>(_list42.size);
            long _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              _elem43 = iprot.readI64();
              struct.roleIds.add(_elem43);
            }
          }
          struct.setRoleIdsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.reOrgIds = new ArrayList<String>(_list45.size);
            String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.reOrgIds.add(_elem46);
            }
          }
          struct.setReOrgIdsIsSet(true);
        }
      }
    }

  }

  public static class addFFTOrg_result implements org.apache.thrift.TBase<addFFTOrg_result, addFFTOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFFTOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFFTOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFFTOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFFTOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFFTOrg_result.class, metaDataMap);
    }

    public addFFTOrg_result() {
    }

    public addFFTOrg_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFFTOrg_result(addFFTOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addFFTOrg_result deepCopy() {
      return new addFFTOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addFFTOrg_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFFTOrg_result)
        return this.equals((addFFTOrg_result)that);
      return false;
    }

    public boolean equals(addFFTOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFFTOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFFTOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFFTOrg_resultStandardSchemeFactory implements SchemeFactory {
      public addFFTOrg_resultStandardScheme getScheme() {
        return new addFFTOrg_resultStandardScheme();
      }
    }

    private static class addFFTOrg_resultStandardScheme extends StandardScheme<addFFTOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFFTOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFFTOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFFTOrg_resultTupleSchemeFactory implements SchemeFactory {
      public addFFTOrg_resultTupleScheme getScheme() {
        return new addFFTOrg_resultTupleScheme();
      }
    }

    private static class addFFTOrg_resultTupleScheme extends TupleScheme<addFFTOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFFTOrg_args implements org.apache.thrift.TBase<deleteFFTOrg_args, deleteFFTOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFFTOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFFTOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFFTOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFFTOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFFTOrg_args.class, metaDataMap);
    }

    public deleteFFTOrg_args() {
    }

    public deleteFFTOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      long id)
    {
      this();
      this.originVo = originVo;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFFTOrg_args(deleteFFTOrg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.id = other.id;
    }

    public deleteFFTOrg_args deepCopy() {
      return new deleteFFTOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteFFTOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public deleteFFTOrg_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFFTOrg_args)
        return this.equals((deleteFFTOrg_args)that);
      return false;
    }

    public boolean equals(deleteFFTOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFFTOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFFTOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFFTOrg_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFFTOrg_argsStandardScheme getScheme() {
        return new deleteFFTOrg_argsStandardScheme();
      }
    }

    private static class deleteFFTOrg_argsStandardScheme extends StandardScheme<deleteFFTOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFFTOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFFTOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFFTOrg_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFFTOrg_argsTupleScheme getScheme() {
        return new deleteFFTOrg_argsTupleScheme();
      }
    }

    private static class deleteFFTOrg_argsTupleScheme extends TupleScheme<deleteFFTOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFFTOrg_result implements org.apache.thrift.TBase<deleteFFTOrg_result, deleteFFTOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFFTOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFFTOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFFTOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFFTOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFFTOrg_result.class, metaDataMap);
    }

    public deleteFFTOrg_result() {
    }

    public deleteFFTOrg_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFFTOrg_result(deleteFFTOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteFFTOrg_result deepCopy() {
      return new deleteFFTOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteFFTOrg_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFFTOrg_result)
        return this.equals((deleteFFTOrg_result)that);
      return false;
    }

    public boolean equals(deleteFFTOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFFTOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFFTOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFFTOrg_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFFTOrg_resultStandardScheme getScheme() {
        return new deleteFFTOrg_resultStandardScheme();
      }
    }

    private static class deleteFFTOrg_resultStandardScheme extends StandardScheme<deleteFFTOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFFTOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFFTOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFFTOrg_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFFTOrg_resultTupleScheme getScheme() {
        return new deleteFFTOrg_resultTupleScheme();
      }
    }

    private static class deleteFFTOrg_resultTupleScheme extends TupleScheme<deleteFFTOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFFTOrg_args implements org.apache.thrift.TBase<updateFFTOrg_args, updateFFTOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFFTOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFFTOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FFT_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("fftOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("roleIds", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField RE_ORG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("reOrgIds", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFFTOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFFTOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo; // required
    public List<Long> roleIds; // required
    public List<String> reOrgIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      FFT_ORG_VO((short)2, "fftOrgVo"),
      ROLE_IDS((short)3, "roleIds"),
      RE_ORG_IDS((short)4, "reOrgIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // FFT_ORG_VO
            return FFT_ORG_VO;
          case 3: // ROLE_IDS
            return ROLE_IDS;
          case 4: // RE_ORG_IDS
            return RE_ORG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.FFT_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("fftOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgVo.class)));
      tmpMap.put(_Fields.ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("roleIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.RE_ORG_IDS, new org.apache.thrift.meta_data.FieldMetaData("reOrgIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFFTOrg_args.class, metaDataMap);
    }

    public updateFFTOrg_args() {
    }

    public updateFFTOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo,
      List<Long> roleIds,
      List<String> reOrgIds)
    {
      this();
      this.originVo = originVo;
      this.fftOrgVo = fftOrgVo;
      this.roleIds = roleIds;
      this.reOrgIds = reOrgIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFFTOrg_args(updateFFTOrg_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetFftOrgVo()) {
        this.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo(other.fftOrgVo);
      }
      if (other.isSetRoleIds()) {
        List<Long> __this__roleIds = new ArrayList<Long>(other.roleIds);
        this.roleIds = __this__roleIds;
      }
      if (other.isSetReOrgIds()) {
        List<String> __this__reOrgIds = new ArrayList<String>(other.reOrgIds);
        this.reOrgIds = __this__reOrgIds;
      }
    }

    public updateFFTOrg_args deepCopy() {
      return new updateFFTOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.fftOrgVo = null;
      this.roleIds = null;
      this.reOrgIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateFFTOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgVo getFftOrgVo() {
      return this.fftOrgVo;
    }

    public updateFFTOrg_args setFftOrgVo(com.froad.thrift.vo.orgRoleManager.FFTOrgVo fftOrgVo) {
      this.fftOrgVo = fftOrgVo;
      return this;
    }

    public void unsetFftOrgVo() {
      this.fftOrgVo = null;
    }

    /** Returns true if field fftOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFftOrgVo() {
      return this.fftOrgVo != null;
    }

    public void setFftOrgVoIsSet(boolean value) {
      if (!value) {
        this.fftOrgVo = null;
      }
    }

    public int getRoleIdsSize() {
      return (this.roleIds == null) ? 0 : this.roleIds.size();
    }

    public java.util.Iterator<Long> getRoleIdsIterator() {
      return (this.roleIds == null) ? null : this.roleIds.iterator();
    }

    public void addToRoleIds(long elem) {
      if (this.roleIds == null) {
        this.roleIds = new ArrayList<Long>();
      }
      this.roleIds.add(elem);
    }

    public List<Long> getRoleIds() {
      return this.roleIds;
    }

    public updateFFTOrg_args setRoleIds(List<Long> roleIds) {
      this.roleIds = roleIds;
      return this;
    }

    public void unsetRoleIds() {
      this.roleIds = null;
    }

    /** Returns true if field roleIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleIds() {
      return this.roleIds != null;
    }

    public void setRoleIdsIsSet(boolean value) {
      if (!value) {
        this.roleIds = null;
      }
    }

    public int getReOrgIdsSize() {
      return (this.reOrgIds == null) ? 0 : this.reOrgIds.size();
    }

    public java.util.Iterator<String> getReOrgIdsIterator() {
      return (this.reOrgIds == null) ? null : this.reOrgIds.iterator();
    }

    public void addToReOrgIds(String elem) {
      if (this.reOrgIds == null) {
        this.reOrgIds = new ArrayList<String>();
      }
      this.reOrgIds.add(elem);
    }

    public List<String> getReOrgIds() {
      return this.reOrgIds;
    }

    public updateFFTOrg_args setReOrgIds(List<String> reOrgIds) {
      this.reOrgIds = reOrgIds;
      return this;
    }

    public void unsetReOrgIds() {
      this.reOrgIds = null;
    }

    /** Returns true if field reOrgIds is set (has been assigned a value) and false otherwise */
    public boolean isSetReOrgIds() {
      return this.reOrgIds != null;
    }

    public void setReOrgIdsIsSet(boolean value) {
      if (!value) {
        this.reOrgIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case FFT_ORG_VO:
        if (value == null) {
          unsetFftOrgVo();
        } else {
          setFftOrgVo((com.froad.thrift.vo.orgRoleManager.FFTOrgVo)value);
        }
        break;

      case ROLE_IDS:
        if (value == null) {
          unsetRoleIds();
        } else {
          setRoleIds((List<Long>)value);
        }
        break;

      case RE_ORG_IDS:
        if (value == null) {
          unsetReOrgIds();
        } else {
          setReOrgIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case FFT_ORG_VO:
        return getFftOrgVo();

      case ROLE_IDS:
        return getRoleIds();

      case RE_ORG_IDS:
        return getReOrgIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case FFT_ORG_VO:
        return isSetFftOrgVo();
      case ROLE_IDS:
        return isSetRoleIds();
      case RE_ORG_IDS:
        return isSetReOrgIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFFTOrg_args)
        return this.equals((updateFFTOrg_args)that);
      return false;
    }

    public boolean equals(updateFFTOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_fftOrgVo = true && this.isSetFftOrgVo();
      boolean that_present_fftOrgVo = true && that.isSetFftOrgVo();
      if (this_present_fftOrgVo || that_present_fftOrgVo) {
        if (!(this_present_fftOrgVo && that_present_fftOrgVo))
          return false;
        if (!this.fftOrgVo.equals(that.fftOrgVo))
          return false;
      }

      boolean this_present_roleIds = true && this.isSetRoleIds();
      boolean that_present_roleIds = true && that.isSetRoleIds();
      if (this_present_roleIds || that_present_roleIds) {
        if (!(this_present_roleIds && that_present_roleIds))
          return false;
        if (!this.roleIds.equals(that.roleIds))
          return false;
      }

      boolean this_present_reOrgIds = true && this.isSetReOrgIds();
      boolean that_present_reOrgIds = true && that.isSetReOrgIds();
      if (this_present_reOrgIds || that_present_reOrgIds) {
        if (!(this_present_reOrgIds && that_present_reOrgIds))
          return false;
        if (!this.reOrgIds.equals(that.reOrgIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_fftOrgVo = true && (isSetFftOrgVo());
      list.add(present_fftOrgVo);
      if (present_fftOrgVo)
        list.add(fftOrgVo);

      boolean present_roleIds = true && (isSetRoleIds());
      list.add(present_roleIds);
      if (present_roleIds)
        list.add(roleIds);

      boolean present_reOrgIds = true && (isSetReOrgIds());
      list.add(present_reOrgIds);
      if (present_reOrgIds)
        list.add(reOrgIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFFTOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFftOrgVo()).compareTo(other.isSetFftOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFftOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftOrgVo, other.fftOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleIds()).compareTo(other.isSetRoleIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleIds, other.roleIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReOrgIds()).compareTo(other.isSetReOrgIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReOrgIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reOrgIds, other.reOrgIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFFTOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fftOrgVo:");
      if (this.fftOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.fftOrgVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleIds:");
      if (this.roleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.roleIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reOrgIds:");
      if (this.reOrgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.reOrgIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (fftOrgVo != null) {
        fftOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFFTOrg_argsStandardSchemeFactory implements SchemeFactory {
      public updateFFTOrg_argsStandardScheme getScheme() {
        return new updateFFTOrg_argsStandardScheme();
      }
    }

    private static class updateFFTOrg_argsStandardScheme extends StandardScheme<updateFFTOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFFTOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FFT_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
                struct.fftOrgVo.read(iprot);
                struct.setFftOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROLE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.roleIds = new ArrayList<Long>(_list48.size);
                  long _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI64();
                    struct.roleIds.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setRoleIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RE_ORG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                  struct.reOrgIds = new ArrayList<String>(_list51.size);
                  String _elem52;
                  for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                  {
                    _elem52 = iprot.readString();
                    struct.reOrgIds.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setReOrgIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFFTOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fftOrgVo != null) {
          oprot.writeFieldBegin(FFT_ORG_VO_FIELD_DESC);
          struct.fftOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.roleIds != null) {
          oprot.writeFieldBegin(ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.roleIds.size()));
            for (long _iter54 : struct.roleIds)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.reOrgIds != null) {
          oprot.writeFieldBegin(RE_ORG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reOrgIds.size()));
            for (String _iter55 : struct.reOrgIds)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFFTOrg_argsTupleSchemeFactory implements SchemeFactory {
      public updateFFTOrg_argsTupleScheme getScheme() {
        return new updateFFTOrg_argsTupleScheme();
      }
    }

    private static class updateFFTOrg_argsTupleScheme extends TupleScheme<updateFFTOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetFftOrgVo()) {
          optionals.set(1);
        }
        if (struct.isSetRoleIds()) {
          optionals.set(2);
        }
        if (struct.isSetReOrgIds()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetFftOrgVo()) {
          struct.fftOrgVo.write(oprot);
        }
        if (struct.isSetRoleIds()) {
          {
            oprot.writeI32(struct.roleIds.size());
            for (long _iter56 : struct.roleIds)
            {
              oprot.writeI64(_iter56);
            }
          }
        }
        if (struct.isSetReOrgIds()) {
          {
            oprot.writeI32(struct.reOrgIds.size());
            for (String _iter57 : struct.reOrgIds)
            {
              oprot.writeString(_iter57);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFFTOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fftOrgVo = new com.froad.thrift.vo.orgRoleManager.FFTOrgVo();
          struct.fftOrgVo.read(iprot);
          struct.setFftOrgVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.roleIds = new ArrayList<Long>(_list58.size);
            long _elem59;
            for (int _i60 = 0; _i60 < _list58.size; ++_i60)
            {
              _elem59 = iprot.readI64();
              struct.roleIds.add(_elem59);
            }
          }
          struct.setRoleIdsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.reOrgIds = new ArrayList<String>(_list61.size);
            String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.reOrgIds.add(_elem62);
            }
          }
          struct.setReOrgIdsIsSet(true);
        }
      }
    }

  }

  public static class updateFFTOrg_result implements org.apache.thrift.TBase<updateFFTOrg_result, updateFFTOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFFTOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFFTOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFFTOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFFTOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFFTOrg_result.class, metaDataMap);
    }

    public updateFFTOrg_result() {
    }

    public updateFFTOrg_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFFTOrg_result(updateFFTOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateFFTOrg_result deepCopy() {
      return new updateFFTOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateFFTOrg_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFFTOrg_result)
        return this.equals((updateFFTOrg_result)that);
      return false;
    }

    public boolean equals(updateFFTOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFFTOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFFTOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFFTOrg_resultStandardSchemeFactory implements SchemeFactory {
      public updateFFTOrg_resultStandardScheme getScheme() {
        return new updateFFTOrg_resultStandardScheme();
      }
    }

    private static class updateFFTOrg_resultStandardScheme extends StandardScheme<updateFFTOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFFTOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFFTOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFFTOrg_resultTupleSchemeFactory implements SchemeFactory {
      public updateFFTOrg_resultTupleScheme getScheme() {
        return new updateFFTOrg_resultTupleScheme();
      }
    }

    private static class updateFFTOrg_resultTupleScheme extends TupleScheme<updateFFTOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFFTOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgReByOrgId_args implements org.apache.thrift.TBase<getFFTOrgReByOrgId_args, getFFTOrgReByOrgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgReByOrgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgReByOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgReByOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgReByOrgId_argsTupleSchemeFactory());
    }

    public String orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgReByOrgId_args.class, metaDataMap);
    }

    public getFFTOrgReByOrgId_args() {
    }

    public getFFTOrgReByOrgId_args(
      String orgId)
    {
      this();
      this.orgId = orgId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgReByOrgId_args(getFFTOrgReByOrgId_args other) {
      if (other.isSetOrgId()) {
        this.orgId = other.orgId;
      }
    }

    public getFFTOrgReByOrgId_args deepCopy() {
      return new getFFTOrgReByOrgId_args(this);
    }

    @Override
    public void clear() {
      this.orgId = null;
    }

    public String getOrgId() {
      return this.orgId;
    }

    public getFFTOrgReByOrgId_args setOrgId(String orgId) {
      this.orgId = orgId;
      return this;
    }

    public void unsetOrgId() {
      this.orgId = null;
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return this.orgId != null;
    }

    public void setOrgIdIsSet(boolean value) {
      if (!value) {
        this.orgId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return getOrgId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgReByOrgId_args)
        return this.equals((getFFTOrgReByOrgId_args)that);
      return false;
    }

    public boolean equals(getFFTOrgReByOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgId = true && this.isSetOrgId();
      boolean that_present_orgId = true && that.isSetOrgId();
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (!this.orgId.equals(that.orgId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgId = true && (isSetOrgId());
      list.add(present_orgId);
      if (present_orgId)
        list.add(orgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgReByOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgReByOrgId_args(");
      boolean first = true;

      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgReByOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgReByOrgId_argsStandardScheme getScheme() {
        return new getFFTOrgReByOrgId_argsStandardScheme();
      }
    }

    private static class getFFTOrgReByOrgId_argsStandardScheme extends StandardScheme<getFFTOrgReByOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgReByOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgId = iprot.readString();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgReByOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgId != null) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgReByOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgReByOrgId_argsTupleScheme getScheme() {
        return new getFFTOrgReByOrgId_argsTupleScheme();
      }
    }

    private static class getFFTOrgReByOrgId_argsTupleScheme extends TupleScheme<getFFTOrgReByOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgReByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgId()) {
          oprot.writeString(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgReByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orgId = iprot.readString();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgReByOrgId_result implements org.apache.thrift.TBase<getFFTOrgReByOrgId_result, getFFTOrgReByOrgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgReByOrgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgReByOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgReByOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgReByOrgId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgReByOrgId_result.class, metaDataMap);
    }

    public getFFTOrgReByOrgId_result() {
    }

    public getFFTOrgReByOrgId_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgReByOrgId_result(getFFTOrgReByOrgId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes(other.success);
      }
    }

    public getFFTOrgReByOrgId_result deepCopy() {
      return new getFFTOrgReByOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgReByOrgId_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgReByOrgId_result)
        return this.equals((getFFTOrgReByOrgId_result)that);
      return false;
    }

    public boolean equals(getFFTOrgReByOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgReByOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgReByOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgReByOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgReByOrgId_resultStandardScheme getScheme() {
        return new getFFTOrgReByOrgId_resultStandardScheme();
      }
    }

    private static class getFFTOrgReByOrgId_resultStandardScheme extends StandardScheme<getFFTOrgReByOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgReByOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgReByOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgReByOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgReByOrgId_resultTupleScheme getScheme() {
        return new getFFTOrgReByOrgId_resultTupleScheme();
      }
    }

    private static class getFFTOrgReByOrgId_resultTupleScheme extends TupleScheme<getFFTOrgReByOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgReByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgReByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgReListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgRoleByOrgId_args implements org.apache.thrift.TBase<getOrgRoleByOrgId_args, getOrgRoleByOrgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgRoleByOrgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgRoleByOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgRoleByOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgRoleByOrgId_argsTupleSchemeFactory());
    }

    public String orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgRoleByOrgId_args.class, metaDataMap);
    }

    public getOrgRoleByOrgId_args() {
    }

    public getOrgRoleByOrgId_args(
      String orgId)
    {
      this();
      this.orgId = orgId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgRoleByOrgId_args(getOrgRoleByOrgId_args other) {
      if (other.isSetOrgId()) {
        this.orgId = other.orgId;
      }
    }

    public getOrgRoleByOrgId_args deepCopy() {
      return new getOrgRoleByOrgId_args(this);
    }

    @Override
    public void clear() {
      this.orgId = null;
    }

    public String getOrgId() {
      return this.orgId;
    }

    public getOrgRoleByOrgId_args setOrgId(String orgId) {
      this.orgId = orgId;
      return this;
    }

    public void unsetOrgId() {
      this.orgId = null;
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return this.orgId != null;
    }

    public void setOrgIdIsSet(boolean value) {
      if (!value) {
        this.orgId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return getOrgId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgRoleByOrgId_args)
        return this.equals((getOrgRoleByOrgId_args)that);
      return false;
    }

    public boolean equals(getOrgRoleByOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgId = true && this.isSetOrgId();
      boolean that_present_orgId = true && that.isSetOrgId();
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (!this.orgId.equals(that.orgId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgId = true && (isSetOrgId());
      list.add(present_orgId);
      if (present_orgId)
        list.add(orgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgRoleByOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgRoleByOrgId_args(");
      boolean first = true;

      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgRoleByOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgRoleByOrgId_argsStandardScheme getScheme() {
        return new getOrgRoleByOrgId_argsStandardScheme();
      }
    }

    private static class getOrgRoleByOrgId_argsStandardScheme extends StandardScheme<getOrgRoleByOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgRoleByOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgId = iprot.readString();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgRoleByOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgId != null) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgRoleByOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgRoleByOrgId_argsTupleScheme getScheme() {
        return new getOrgRoleByOrgId_argsTupleScheme();
      }
    }

    private static class getOrgRoleByOrgId_argsTupleScheme extends TupleScheme<getOrgRoleByOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgRoleByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgId()) {
          oprot.writeString(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgRoleByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orgId = iprot.readString();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class getOrgRoleByOrgId_result implements org.apache.thrift.TBase<getOrgRoleByOrgId_result, getOrgRoleByOrgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgRoleByOrgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgRoleByOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgRoleByOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgRoleByOrgId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgRoleByOrgId_result.class, metaDataMap);
    }

    public getOrgRoleByOrgId_result() {
    }

    public getOrgRoleByOrgId_result(
      com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgRoleByOrgId_result(getOrgRoleByOrgId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes(other.success);
      }
    }

    public getOrgRoleByOrgId_result deepCopy() {
      return new getOrgRoleByOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes getSuccess() {
      return this.success;
    }

    public getOrgRoleByOrgId_result setSuccess(com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgRoleByOrgId_result)
        return this.equals((getOrgRoleByOrgId_result)that);
      return false;
    }

    public boolean equals(getOrgRoleByOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgRoleByOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgRoleByOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgRoleByOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgRoleByOrgId_resultStandardScheme getScheme() {
        return new getOrgRoleByOrgId_resultStandardScheme();
      }
    }

    private static class getOrgRoleByOrgId_resultStandardScheme extends StandardScheme<getOrgRoleByOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgRoleByOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgRoleByOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgRoleByOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgRoleByOrgId_resultTupleScheme getScheme() {
        return new getOrgRoleByOrgId_resultTupleScheme();
      }
    }

    private static class getOrgRoleByOrgId_resultTupleScheme extends TupleScheme<getOrgRoleByOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgRoleByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgRoleByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgRoleIds_args implements org.apache.thrift.TBase<getOrgRoleIds_args, getOrgRoleIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgRoleIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgRoleIds_args");

    private static final org.apache.thrift.protocol.TField ORG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orgIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgRoleIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgRoleIds_argsTupleSchemeFactory());
    }

    public List<String> orgIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_IDS((short)1, "orgIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_IDS
            return ORG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_IDS, new org.apache.thrift.meta_data.FieldMetaData("orgIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgRoleIds_args.class, metaDataMap);
    }

    public getOrgRoleIds_args() {
    }

    public getOrgRoleIds_args(
      List<String> orgIds)
    {
      this();
      this.orgIds = orgIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgRoleIds_args(getOrgRoleIds_args other) {
      if (other.isSetOrgIds()) {
        List<String> __this__orgIds = new ArrayList<String>(other.orgIds);
        this.orgIds = __this__orgIds;
      }
    }

    public getOrgRoleIds_args deepCopy() {
      return new getOrgRoleIds_args(this);
    }

    @Override
    public void clear() {
      this.orgIds = null;
    }

    public int getOrgIdsSize() {
      return (this.orgIds == null) ? 0 : this.orgIds.size();
    }

    public java.util.Iterator<String> getOrgIdsIterator() {
      return (this.orgIds == null) ? null : this.orgIds.iterator();
    }

    public void addToOrgIds(String elem) {
      if (this.orgIds == null) {
        this.orgIds = new ArrayList<String>();
      }
      this.orgIds.add(elem);
    }

    public List<String> getOrgIds() {
      return this.orgIds;
    }

    public getOrgRoleIds_args setOrgIds(List<String> orgIds) {
      this.orgIds = orgIds;
      return this;
    }

    public void unsetOrgIds() {
      this.orgIds = null;
    }

    /** Returns true if field orgIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgIds() {
      return this.orgIds != null;
    }

    public void setOrgIdsIsSet(boolean value) {
      if (!value) {
        this.orgIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_IDS:
        if (value == null) {
          unsetOrgIds();
        } else {
          setOrgIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_IDS:
        return getOrgIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_IDS:
        return isSetOrgIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgRoleIds_args)
        return this.equals((getOrgRoleIds_args)that);
      return false;
    }

    public boolean equals(getOrgRoleIds_args that) {
      if (that == null)
        return false;

      boolean this_present_orgIds = true && this.isSetOrgIds();
      boolean that_present_orgIds = true && that.isSetOrgIds();
      if (this_present_orgIds || that_present_orgIds) {
        if (!(this_present_orgIds && that_present_orgIds))
          return false;
        if (!this.orgIds.equals(that.orgIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgIds = true && (isSetOrgIds());
      list.add(present_orgIds);
      if (present_orgIds)
        list.add(orgIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgRoleIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgIds()).compareTo(other.isSetOrgIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgIds, other.orgIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgRoleIds_args(");
      boolean first = true;

      sb.append("orgIds:");
      if (this.orgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.orgIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgRoleIds_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgRoleIds_argsStandardScheme getScheme() {
        return new getOrgRoleIds_argsStandardScheme();
      }
    }

    private static class getOrgRoleIds_argsStandardScheme extends StandardScheme<getOrgRoleIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgRoleIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.orgIds = new ArrayList<String>(_list64.size);
                  String _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readString();
                    struct.orgIds.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgRoleIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgIds != null) {
          oprot.writeFieldBegin(ORG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgIds.size()));
            for (String _iter67 : struct.orgIds)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgRoleIds_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgRoleIds_argsTupleScheme getScheme() {
        return new getOrgRoleIds_argsTupleScheme();
      }
    }

    private static class getOrgRoleIds_argsTupleScheme extends TupleScheme<getOrgRoleIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgRoleIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgIds()) {
          {
            oprot.writeI32(struct.orgIds.size());
            for (String _iter68 : struct.orgIds)
            {
              oprot.writeString(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgRoleIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orgIds = new ArrayList<String>(_list69.size);
            String _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readString();
              struct.orgIds.add(_elem70);
            }
          }
          struct.setOrgIdsIsSet(true);
        }
      }
    }

  }

  public static class getOrgRoleIds_result implements org.apache.thrift.TBase<getOrgRoleIds_result, getOrgRoleIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgRoleIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgRoleIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgRoleIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgRoleIds_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgRoleIds_result.class, metaDataMap);
    }

    public getOrgRoleIds_result() {
    }

    public getOrgRoleIds_result(
      com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgRoleIds_result(getOrgRoleIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes(other.success);
      }
    }

    public getOrgRoleIds_result deepCopy() {
      return new getOrgRoleIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes getSuccess() {
      return this.success;
    }

    public getOrgRoleIds_result setSuccess(com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgRoleIds_result)
        return this.equals((getOrgRoleIds_result)that);
      return false;
    }

    public boolean equals(getOrgRoleIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgRoleIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgRoleIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgRoleIds_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgRoleIds_resultStandardScheme getScheme() {
        return new getOrgRoleIds_resultStandardScheme();
      }
    }

    private static class getOrgRoleIds_resultStandardScheme extends StandardScheme<getOrgRoleIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgRoleIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgRoleIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgRoleIds_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgRoleIds_resultTupleScheme getScheme() {
        return new getOrgRoleIds_resultTupleScheme();
      }
    }

    private static class getOrgRoleIds_resultTupleScheme extends TupleScheme<getOrgRoleIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgRoleIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgRoleIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.OrgRoleIdListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgInOneByBank_args implements org.apache.thrift.TBase<getFFTOrgInOneByBank_args, getFFTOrgInOneByBank_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgInOneByBank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgInOneByBank_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgInOneByBank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgInOneByBank_argsTupleSchemeFactory());
    }

    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgInOneByBank_args.class, metaDataMap);
    }

    public getFFTOrgInOneByBank_args() {
    }

    public getFFTOrgInOneByBank_args(
      long userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgInOneByBank_args(getFFTOrgInOneByBank_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getFFTOrgInOneByBank_args deepCopy() {
      return new getFFTOrgInOneByBank_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public getFFTOrgInOneByBank_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgInOneByBank_args)
        return this.equals((getFFTOrgInOneByBank_args)that);
      return false;
    }

    public boolean equals(getFFTOrgInOneByBank_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgInOneByBank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgInOneByBank_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgInOneByBank_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgInOneByBank_argsStandardScheme getScheme() {
        return new getFFTOrgInOneByBank_argsStandardScheme();
      }
    }

    private static class getFFTOrgInOneByBank_argsStandardScheme extends StandardScheme<getFFTOrgInOneByBank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgInOneByBank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgInOneByBank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgInOneByBank_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgInOneByBank_argsTupleScheme getScheme() {
        return new getFFTOrgInOneByBank_argsTupleScheme();
      }
    }

    private static class getFFTOrgInOneByBank_argsTupleScheme extends TupleScheme<getFFTOrgInOneByBank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgInOneByBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgInOneByBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgInOneByBank_result implements org.apache.thrift.TBase<getFFTOrgInOneByBank_result, getFFTOrgInOneByBank_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgInOneByBank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgInOneByBank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgInOneByBank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgInOneByBank_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgInOneByBank_result.class, metaDataMap);
    }

    public getFFTOrgInOneByBank_result() {
    }

    public getFFTOrgInOneByBank_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgInOneByBank_result(getFFTOrgInOneByBank_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgInOneByBank_result deepCopy() {
      return new getFFTOrgInOneByBank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgInOneByBank_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgInOneByBank_result)
        return this.equals((getFFTOrgInOneByBank_result)that);
      return false;
    }

    public boolean equals(getFFTOrgInOneByBank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgInOneByBank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgInOneByBank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgInOneByBank_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgInOneByBank_resultStandardScheme getScheme() {
        return new getFFTOrgInOneByBank_resultStandardScheme();
      }
    }

    private static class getFFTOrgInOneByBank_resultStandardScheme extends StandardScheme<getFFTOrgInOneByBank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgInOneByBank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgInOneByBank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgInOneByBank_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgInOneByBank_resultTupleScheme getScheme() {
        return new getFFTOrgInOneByBank_resultTupleScheme();
      }
    }

    private static class getFFTOrgInOneByBank_resultTupleScheme extends TupleScheme<getFFTOrgInOneByBank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgInOneByBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgInOneByBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdPlatform_args implements org.apache.thrift.TBase<getFFTOrgByUserIdPlatform_args, getFFTOrgByUserIdPlatform_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdPlatform_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdPlatform_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdPlatform_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdPlatform_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdPlatform_args.class, metaDataMap);
    }

    public getFFTOrgByUserIdPlatform_args() {
    }

    public getFFTOrgByUserIdPlatform_args(
      long userId,
      String clientId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdPlatform_args(getFFTOrgByUserIdPlatform_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getFFTOrgByUserIdPlatform_args deepCopy() {
      return new getFFTOrgByUserIdPlatform_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.clientId = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public getFFTOrgByUserIdPlatform_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getFFTOrgByUserIdPlatform_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdPlatform_args)
        return this.equals((getFFTOrgByUserIdPlatform_args)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdPlatform_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdPlatform_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdPlatform_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdPlatform_argsStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdPlatform_argsStandardScheme getScheme() {
        return new getFFTOrgByUserIdPlatform_argsStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdPlatform_argsStandardScheme extends StandardScheme<getFFTOrgByUserIdPlatform_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdPlatform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdPlatform_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdPlatform_argsTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdPlatform_argsTupleScheme getScheme() {
        return new getFFTOrgByUserIdPlatform_argsTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdPlatform_argsTupleScheme extends TupleScheme<getFFTOrgByUserIdPlatform_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdPlatform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdPlatform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getFFTOrgByUserIdPlatform_result implements org.apache.thrift.TBase<getFFTOrgByUserIdPlatform_result, getFFTOrgByUserIdPlatform_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFFTOrgByUserIdPlatform_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFFTOrgByUserIdPlatform_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFFTOrgByUserIdPlatform_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFFTOrgByUserIdPlatform_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFFTOrgByUserIdPlatform_result.class, metaDataMap);
    }

    public getFFTOrgByUserIdPlatform_result() {
    }

    public getFFTOrgByUserIdPlatform_result(
      com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFFTOrgByUserIdPlatform_result(getFFTOrgByUserIdPlatform_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes(other.success);
      }
    }

    public getFFTOrgByUserIdPlatform_result deepCopy() {
      return new getFFTOrgByUserIdPlatform_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes getSuccess() {
      return this.success;
    }

    public getFFTOrgByUserIdPlatform_result setSuccess(com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFFTOrgByUserIdPlatform_result)
        return this.equals((getFFTOrgByUserIdPlatform_result)that);
      return false;
    }

    public boolean equals(getFFTOrgByUserIdPlatform_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFFTOrgByUserIdPlatform_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFFTOrgByUserIdPlatform_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFFTOrgByUserIdPlatform_resultStandardSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdPlatform_resultStandardScheme getScheme() {
        return new getFFTOrgByUserIdPlatform_resultStandardScheme();
      }
    }

    private static class getFFTOrgByUserIdPlatform_resultStandardScheme extends StandardScheme<getFFTOrgByUserIdPlatform_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFFTOrgByUserIdPlatform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFFTOrgByUserIdPlatform_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFFTOrgByUserIdPlatform_resultTupleSchemeFactory implements SchemeFactory {
      public getFFTOrgByUserIdPlatform_resultTupleScheme getScheme() {
        return new getFFTOrgByUserIdPlatform_resultTupleScheme();
      }
    }

    private static class getFFTOrgByUserIdPlatform_resultTupleScheme extends TupleScheme<getFFTOrgByUserIdPlatform_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdPlatform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFFTOrgByUserIdPlatform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.orgRoleManager.FFTOrgListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
