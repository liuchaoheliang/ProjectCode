/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 20.是否跳收银台接口响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class CashierVoRes implements org.apache.thrift.TBase<CashierVoRes, CashierVoRes._Fields>, java.io.Serializable, Cloneable, Comparable<CashierVoRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CashierVoRes");

  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FROAD_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("froadPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BANK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoint", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_NEED_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedCash", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CashierVoResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CashierVoResTupleSchemeFactory());
  }

  /**
   * 结果信息
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required
  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 总金额
   */
  public double totalPrice; // required
  /**
   * 现金
   */
  public double cash; // required
  /**
   * 方付通积分
   */
  public double froadPoint; // required
  /**
   * 银行积分
   */
  public int bankPoint; // required
  /**
   * 0:不跳收银台，1：跳收银台  2：（全红包/现金券）订单已支付完成
   */
  public String isNeedCash; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 结果信息
     */
    RESULT_VO((short)1, "resultVo"),
    /**
     * 订单ID
     */
    ORDER_ID((short)2, "orderId"),
    /**
     * 总金额
     */
    TOTAL_PRICE((short)3, "totalPrice"),
    /**
     * 现金
     */
    CASH((short)4, "cash"),
    /**
     * 方付通积分
     */
    FROAD_POINT((short)5, "froadPoint"),
    /**
     * 银行积分
     */
    BANK_POINT((short)6, "bankPoint"),
    /**
     * 0:不跳收银台，1：跳收银台  2：（全红包/现金券）订单已支付完成
     */
    IS_NEED_CASH((short)7, "isNeedCash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_VO
          return RESULT_VO;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 4: // CASH
          return CASH;
        case 5: // FROAD_POINT
          return FROAD_POINT;
        case 6: // BANK_POINT
          return BANK_POINT;
        case 7: // IS_NEED_CASH
          return IS_NEED_CASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPRICE_ISSET_ID = 0;
  private static final int __CASH_ISSET_ID = 1;
  private static final int __FROADPOINT_ISSET_ID = 2;
  private static final int __BANKPOINT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROAD_POINT, new org.apache.thrift.meta_data.FieldMetaData("froadPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINT, new org.apache.thrift.meta_data.FieldMetaData("bankPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_CASH, new org.apache.thrift.meta_data.FieldMetaData("isNeedCash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CashierVoRes.class, metaDataMap);
  }

  public CashierVoRes() {
  }

  public CashierVoRes(
    com.froad.thrift.vo.ResultVo resultVo,
    String orderId,
    double totalPrice,
    double cash,
    double froadPoint,
    int bankPoint,
    String isNeedCash)
  {
    this();
    this.resultVo = resultVo;
    this.orderId = orderId;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.cash = cash;
    setCashIsSet(true);
    this.froadPoint = froadPoint;
    setFroadPointIsSet(true);
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    this.isNeedCash = isNeedCash;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CashierVoRes(CashierVoRes other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.totalPrice = other.totalPrice;
    this.cash = other.cash;
    this.froadPoint = other.froadPoint;
    this.bankPoint = other.bankPoint;
    if (other.isSetIsNeedCash()) {
      this.isNeedCash = other.isNeedCash;
    }
  }

  public CashierVoRes deepCopy() {
    return new CashierVoRes(this);
  }

  @Override
  public void clear() {
    this.resultVo = null;
    this.orderId = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setCashIsSet(false);
    this.cash = 0.0;
    setFroadPointIsSet(false);
    this.froadPoint = 0.0;
    setBankPointIsSet(false);
    this.bankPoint = 0;
    this.isNeedCash = null;
  }

  /**
   * 结果信息
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * 结果信息
   */
  public CashierVoRes setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public CashierVoRes setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总金额
   */
  public CashierVoRes setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 现金
   */
  public double getCash() {
    return this.cash;
  }

  /**
   * 现金
   */
  public CashierVoRes setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  /**
   * 方付通积分
   */
  public double getFroadPoint() {
    return this.froadPoint;
  }

  /**
   * 方付通积分
   */
  public CashierVoRes setFroadPoint(double froadPoint) {
    this.froadPoint = froadPoint;
    setFroadPointIsSet(true);
    return this;
  }

  public void unsetFroadPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROADPOINT_ISSET_ID);
  }

  /** Returns true if field froadPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetFroadPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __FROADPOINT_ISSET_ID);
  }

  public void setFroadPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROADPOINT_ISSET_ID, value);
  }

  /**
   * 银行积分
   */
  public int getBankPoint() {
    return this.bankPoint;
  }

  /**
   * 银行积分
   */
  public CashierVoRes setBankPoint(int bankPoint) {
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    return this;
  }

  public void unsetBankPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  /** Returns true if field bankPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  public void setBankPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINT_ISSET_ID, value);
  }

  /**
   * 0:不跳收银台，1：跳收银台  2：（全红包/现金券）订单已支付完成
   */
  public String getIsNeedCash() {
    return this.isNeedCash;
  }

  /**
   * 0:不跳收银台，1：跳收银台  2：（全红包/现金券）订单已支付完成
   */
  public CashierVoRes setIsNeedCash(String isNeedCash) {
    this.isNeedCash = isNeedCash;
    return this;
  }

  public void unsetIsNeedCash() {
    this.isNeedCash = null;
  }

  /** Returns true if field isNeedCash is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedCash() {
    return this.isNeedCash != null;
  }

  public void setIsNeedCashIsSet(boolean value) {
    if (!value) {
      this.isNeedCash = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case FROAD_POINT:
      if (value == null) {
        unsetFroadPoint();
      } else {
        setFroadPoint((Double)value);
      }
      break;

    case BANK_POINT:
      if (value == null) {
        unsetBankPoint();
      } else {
        setBankPoint((Integer)value);
      }
      break;

    case IS_NEED_CASH:
      if (value == null) {
        unsetIsNeedCash();
      } else {
        setIsNeedCash((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_VO:
      return getResultVo();

    case ORDER_ID:
      return getOrderId();

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case CASH:
      return Double.valueOf(getCash());

    case FROAD_POINT:
      return Double.valueOf(getFroadPoint());

    case BANK_POINT:
      return Integer.valueOf(getBankPoint());

    case IS_NEED_CASH:
      return getIsNeedCash();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_VO:
      return isSetResultVo();
    case ORDER_ID:
      return isSetOrderId();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case CASH:
      return isSetCash();
    case FROAD_POINT:
      return isSetFroadPoint();
    case BANK_POINT:
      return isSetBankPoint();
    case IS_NEED_CASH:
      return isSetIsNeedCash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CashierVoRes)
      return this.equals((CashierVoRes)that);
    return false;
  }

  public boolean equals(CashierVoRes that) {
    if (that == null)
      return false;

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_cash = true;
    boolean that_present_cash = true;
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_froadPoint = true;
    boolean that_present_froadPoint = true;
    if (this_present_froadPoint || that_present_froadPoint) {
      if (!(this_present_froadPoint && that_present_froadPoint))
        return false;
      if (this.froadPoint != that.froadPoint)
        return false;
    }

    boolean this_present_bankPoint = true;
    boolean that_present_bankPoint = true;
    if (this_present_bankPoint || that_present_bankPoint) {
      if (!(this_present_bankPoint && that_present_bankPoint))
        return false;
      if (this.bankPoint != that.bankPoint)
        return false;
    }

    boolean this_present_isNeedCash = true && this.isSetIsNeedCash();
    boolean that_present_isNeedCash = true && that.isSetIsNeedCash();
    if (this_present_isNeedCash || that_present_isNeedCash) {
      if (!(this_present_isNeedCash && that_present_isNeedCash))
        return false;
      if (!this.isNeedCash.equals(that.isNeedCash))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_cash = true;
    list.add(present_cash);
    if (present_cash)
      list.add(cash);

    boolean present_froadPoint = true;
    list.add(present_froadPoint);
    if (present_froadPoint)
      list.add(froadPoint);

    boolean present_bankPoint = true;
    list.add(present_bankPoint);
    if (present_bankPoint)
      list.add(bankPoint);

    boolean present_isNeedCash = true && (isSetIsNeedCash());
    list.add(present_isNeedCash);
    if (present_isNeedCash)
      list.add(isNeedCash);

    return list.hashCode();
  }

  @Override
  public int compareTo(CashierVoRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFroadPoint()).compareTo(other.isSetFroadPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFroadPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.froadPoint, other.froadPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoint()).compareTo(other.isSetBankPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoint, other.bankPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedCash()).compareTo(other.isSetIsNeedCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedCash, other.isNeedCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CashierVoRes(");
    boolean first = true;

    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cash:");
    sb.append(this.cash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("froadPoint:");
    sb.append(this.froadPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPoint:");
    sb.append(this.bankPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedCash:");
    if (this.isNeedCash == null) {
      sb.append("null");
    } else {
      sb.append(this.isNeedCash);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CashierVoResStandardSchemeFactory implements SchemeFactory {
    public CashierVoResStandardScheme getScheme() {
      return new CashierVoResStandardScheme();
    }
  }

  private static class CashierVoResStandardScheme extends StandardScheme<CashierVoRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CashierVoRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FROAD_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.froadPoint = iprot.readDouble();
              struct.setFroadPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BANK_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankPoint = iprot.readI32();
              struct.setBankPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_NEED_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isNeedCash = iprot.readString();
              struct.setIsNeedCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CashierVoRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_FIELD_DESC);
      oprot.writeDouble(struct.cash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROAD_POINT_FIELD_DESC);
      oprot.writeDouble(struct.froadPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_POINT_FIELD_DESC);
      oprot.writeI32(struct.bankPoint);
      oprot.writeFieldEnd();
      if (struct.isNeedCash != null) {
        oprot.writeFieldBegin(IS_NEED_CASH_FIELD_DESC);
        oprot.writeString(struct.isNeedCash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CashierVoResTupleSchemeFactory implements SchemeFactory {
    public CashierVoResTupleScheme getScheme() {
      return new CashierVoResTupleScheme();
    }
  }

  private static class CashierVoResTupleScheme extends TupleScheme<CashierVoRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CashierVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultVo()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(2);
      }
      if (struct.isSetCash()) {
        optionals.set(3);
      }
      if (struct.isSetFroadPoint()) {
        optionals.set(4);
      }
      if (struct.isSetBankPoint()) {
        optionals.set(5);
      }
      if (struct.isSetIsNeedCash()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetFroadPoint()) {
        oprot.writeDouble(struct.froadPoint);
      }
      if (struct.isSetBankPoint()) {
        oprot.writeI32(struct.bankPoint);
      }
      if (struct.isSetIsNeedCash()) {
        oprot.writeString(struct.isNeedCash);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CashierVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(4)) {
        struct.froadPoint = iprot.readDouble();
        struct.setFroadPointIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bankPoint = iprot.readI32();
        struct.setBankPointIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isNeedCash = iprot.readString();
        struct.setIsNeedCashIsSet(true);
      }
    }
  }

}

