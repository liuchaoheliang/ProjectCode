/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.coremodule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单指标信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportOrderQuotaVo implements org.apache.thrift.TBase<ReportOrderQuotaVo, ReportOrderQuotaVo._Fields>, java.io.Serializable, Cloneable, Comparable<ReportOrderQuotaVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportOrderQuotaVo");

  private static final org.apache.thrift.protocol.TField ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_UMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orderUmulation", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRefund", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTotalCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTurnover", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_CUMULATION_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCumulationTurnover", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportOrderQuotaVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportOrderQuotaVoTupleSchemeFactory());
  }

  /**
   * 订单*
   */
  public long orderCount; // optional
  /**
   * 累计订单*
   */
  public long orderUmulation; // optional
  /**
   * 退款订单*
   */
  public long orderRefund; // optional
  /**
   * 累计退款订单*
   */
  public long refundTotalCount; // optional
  /**
   * 成交订单=订单-退款订单*
   */
  public long orderTurnover; // optional
  /**
   * 累积成交订单=累积订单-累积退款订单*
   */
  public long orderCumulationTurnover; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单*
     */
    ORDER_COUNT((short)1, "orderCount"),
    /**
     * 累计订单*
     */
    ORDER_UMULATION((short)2, "orderUmulation"),
    /**
     * 退款订单*
     */
    ORDER_REFUND((short)3, "orderRefund"),
    /**
     * 累计退款订单*
     */
    REFUND_TOTAL_COUNT((short)4, "refundTotalCount"),
    /**
     * 成交订单=订单-退款订单*
     */
    ORDER_TURNOVER((short)5, "orderTurnover"),
    /**
     * 累积成交订单=累积订单-累积退款订单*
     */
    ORDER_CUMULATION_TURNOVER((short)6, "orderCumulationTurnover");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_COUNT
          return ORDER_COUNT;
        case 2: // ORDER_UMULATION
          return ORDER_UMULATION;
        case 3: // ORDER_REFUND
          return ORDER_REFUND;
        case 4: // REFUND_TOTAL_COUNT
          return REFUND_TOTAL_COUNT;
        case 5: // ORDER_TURNOVER
          return ORDER_TURNOVER;
        case 6: // ORDER_CUMULATION_TURNOVER
          return ORDER_CUMULATION_TURNOVER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERCOUNT_ISSET_ID = 0;
  private static final int __ORDERUMULATION_ISSET_ID = 1;
  private static final int __ORDERREFUND_ISSET_ID = 2;
  private static final int __REFUNDTOTALCOUNT_ISSET_ID = 3;
  private static final int __ORDERTURNOVER_ISSET_ID = 4;
  private static final int __ORDERCUMULATIONTURNOVER_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_COUNT,_Fields.ORDER_UMULATION,_Fields.ORDER_REFUND,_Fields.REFUND_TOTAL_COUNT,_Fields.ORDER_TURNOVER,_Fields.ORDER_CUMULATION_TURNOVER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("orderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_UMULATION, new org.apache.thrift.meta_data.FieldMetaData("orderUmulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_REFUND, new org.apache.thrift.meta_data.FieldMetaData("orderRefund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("refundTotalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("orderTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_CUMULATION_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("orderCumulationTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportOrderQuotaVo.class, metaDataMap);
  }

  public ReportOrderQuotaVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportOrderQuotaVo(ReportOrderQuotaVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderCount = other.orderCount;
    this.orderUmulation = other.orderUmulation;
    this.orderRefund = other.orderRefund;
    this.refundTotalCount = other.refundTotalCount;
    this.orderTurnover = other.orderTurnover;
    this.orderCumulationTurnover = other.orderCumulationTurnover;
  }

  public ReportOrderQuotaVo deepCopy() {
    return new ReportOrderQuotaVo(this);
  }

  @Override
  public void clear() {
    setOrderCountIsSet(false);
    this.orderCount = 0;
    setOrderUmulationIsSet(false);
    this.orderUmulation = 0;
    setOrderRefundIsSet(false);
    this.orderRefund = 0;
    setRefundTotalCountIsSet(false);
    this.refundTotalCount = 0;
    setOrderTurnoverIsSet(false);
    this.orderTurnover = 0;
    setOrderCumulationTurnoverIsSet(false);
    this.orderCumulationTurnover = 0;
  }

  /**
   * 订单*
   */
  public long getOrderCount() {
    return this.orderCount;
  }

  /**
   * 订单*
   */
  public ReportOrderQuotaVo setOrderCount(long orderCount) {
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    return this;
  }

  public void unsetOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field orderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  public void setOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 累计订单*
   */
  public long getOrderUmulation() {
    return this.orderUmulation;
  }

  /**
   * 累计订单*
   */
  public ReportOrderQuotaVo setOrderUmulation(long orderUmulation) {
    this.orderUmulation = orderUmulation;
    setOrderUmulationIsSet(true);
    return this;
  }

  public void unsetOrderUmulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERUMULATION_ISSET_ID);
  }

  /** Returns true if field orderUmulation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderUmulation() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERUMULATION_ISSET_ID);
  }

  public void setOrderUmulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERUMULATION_ISSET_ID, value);
  }

  /**
   * 退款订单*
   */
  public long getOrderRefund() {
    return this.orderRefund;
  }

  /**
   * 退款订单*
   */
  public ReportOrderQuotaVo setOrderRefund(long orderRefund) {
    this.orderRefund = orderRefund;
    setOrderRefundIsSet(true);
    return this;
  }

  public void unsetOrderRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERREFUND_ISSET_ID);
  }

  /** Returns true if field orderRefund is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERREFUND_ISSET_ID);
  }

  public void setOrderRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERREFUND_ISSET_ID, value);
  }

  /**
   * 累计退款订单*
   */
  public long getRefundTotalCount() {
    return this.refundTotalCount;
  }

  /**
   * 累计退款订单*
   */
  public ReportOrderQuotaVo setRefundTotalCount(long refundTotalCount) {
    this.refundTotalCount = refundTotalCount;
    setRefundTotalCountIsSet(true);
    return this;
  }

  public void unsetRefundTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field refundTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDTOTALCOUNT_ISSET_ID);
  }

  public void setRefundTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 成交订单=订单-退款订单*
   */
  public long getOrderTurnover() {
    return this.orderTurnover;
  }

  /**
   * 成交订单=订单-退款订单*
   */
  public ReportOrderQuotaVo setOrderTurnover(long orderTurnover) {
    this.orderTurnover = orderTurnover;
    setOrderTurnoverIsSet(true);
    return this;
  }

  public void unsetOrderTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTURNOVER_ISSET_ID);
  }

  /** Returns true if field orderTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTURNOVER_ISSET_ID);
  }

  public void setOrderTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTURNOVER_ISSET_ID, value);
  }

  /**
   * 累积成交订单=累积订单-累积退款订单*
   */
  public long getOrderCumulationTurnover() {
    return this.orderCumulationTurnover;
  }

  /**
   * 累积成交订单=累积订单-累积退款订单*
   */
  public ReportOrderQuotaVo setOrderCumulationTurnover(long orderCumulationTurnover) {
    this.orderCumulationTurnover = orderCumulationTurnover;
    setOrderCumulationTurnoverIsSet(true);
    return this;
  }

  public void unsetOrderCumulationTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCUMULATIONTURNOVER_ISSET_ID);
  }

  /** Returns true if field orderCumulationTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCumulationTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCUMULATIONTURNOVER_ISSET_ID);
  }

  public void setOrderCumulationTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCUMULATIONTURNOVER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_COUNT:
      if (value == null) {
        unsetOrderCount();
      } else {
        setOrderCount((Long)value);
      }
      break;

    case ORDER_UMULATION:
      if (value == null) {
        unsetOrderUmulation();
      } else {
        setOrderUmulation((Long)value);
      }
      break;

    case ORDER_REFUND:
      if (value == null) {
        unsetOrderRefund();
      } else {
        setOrderRefund((Long)value);
      }
      break;

    case REFUND_TOTAL_COUNT:
      if (value == null) {
        unsetRefundTotalCount();
      } else {
        setRefundTotalCount((Long)value);
      }
      break;

    case ORDER_TURNOVER:
      if (value == null) {
        unsetOrderTurnover();
      } else {
        setOrderTurnover((Long)value);
      }
      break;

    case ORDER_CUMULATION_TURNOVER:
      if (value == null) {
        unsetOrderCumulationTurnover();
      } else {
        setOrderCumulationTurnover((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_COUNT:
      return Long.valueOf(getOrderCount());

    case ORDER_UMULATION:
      return Long.valueOf(getOrderUmulation());

    case ORDER_REFUND:
      return Long.valueOf(getOrderRefund());

    case REFUND_TOTAL_COUNT:
      return Long.valueOf(getRefundTotalCount());

    case ORDER_TURNOVER:
      return Long.valueOf(getOrderTurnover());

    case ORDER_CUMULATION_TURNOVER:
      return Long.valueOf(getOrderCumulationTurnover());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_COUNT:
      return isSetOrderCount();
    case ORDER_UMULATION:
      return isSetOrderUmulation();
    case ORDER_REFUND:
      return isSetOrderRefund();
    case REFUND_TOTAL_COUNT:
      return isSetRefundTotalCount();
    case ORDER_TURNOVER:
      return isSetOrderTurnover();
    case ORDER_CUMULATION_TURNOVER:
      return isSetOrderCumulationTurnover();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportOrderQuotaVo)
      return this.equals((ReportOrderQuotaVo)that);
    return false;
  }

  public boolean equals(ReportOrderQuotaVo that) {
    if (that == null)
      return false;

    boolean this_present_orderCount = true && this.isSetOrderCount();
    boolean that_present_orderCount = true && that.isSetOrderCount();
    if (this_present_orderCount || that_present_orderCount) {
      if (!(this_present_orderCount && that_present_orderCount))
        return false;
      if (this.orderCount != that.orderCount)
        return false;
    }

    boolean this_present_orderUmulation = true && this.isSetOrderUmulation();
    boolean that_present_orderUmulation = true && that.isSetOrderUmulation();
    if (this_present_orderUmulation || that_present_orderUmulation) {
      if (!(this_present_orderUmulation && that_present_orderUmulation))
        return false;
      if (this.orderUmulation != that.orderUmulation)
        return false;
    }

    boolean this_present_orderRefund = true && this.isSetOrderRefund();
    boolean that_present_orderRefund = true && that.isSetOrderRefund();
    if (this_present_orderRefund || that_present_orderRefund) {
      if (!(this_present_orderRefund && that_present_orderRefund))
        return false;
      if (this.orderRefund != that.orderRefund)
        return false;
    }

    boolean this_present_refundTotalCount = true && this.isSetRefundTotalCount();
    boolean that_present_refundTotalCount = true && that.isSetRefundTotalCount();
    if (this_present_refundTotalCount || that_present_refundTotalCount) {
      if (!(this_present_refundTotalCount && that_present_refundTotalCount))
        return false;
      if (this.refundTotalCount != that.refundTotalCount)
        return false;
    }

    boolean this_present_orderTurnover = true && this.isSetOrderTurnover();
    boolean that_present_orderTurnover = true && that.isSetOrderTurnover();
    if (this_present_orderTurnover || that_present_orderTurnover) {
      if (!(this_present_orderTurnover && that_present_orderTurnover))
        return false;
      if (this.orderTurnover != that.orderTurnover)
        return false;
    }

    boolean this_present_orderCumulationTurnover = true && this.isSetOrderCumulationTurnover();
    boolean that_present_orderCumulationTurnover = true && that.isSetOrderCumulationTurnover();
    if (this_present_orderCumulationTurnover || that_present_orderCumulationTurnover) {
      if (!(this_present_orderCumulationTurnover && that_present_orderCumulationTurnover))
        return false;
      if (this.orderCumulationTurnover != that.orderCumulationTurnover)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderCount = true && (isSetOrderCount());
    list.add(present_orderCount);
    if (present_orderCount)
      list.add(orderCount);

    boolean present_orderUmulation = true && (isSetOrderUmulation());
    list.add(present_orderUmulation);
    if (present_orderUmulation)
      list.add(orderUmulation);

    boolean present_orderRefund = true && (isSetOrderRefund());
    list.add(present_orderRefund);
    if (present_orderRefund)
      list.add(orderRefund);

    boolean present_refundTotalCount = true && (isSetRefundTotalCount());
    list.add(present_refundTotalCount);
    if (present_refundTotalCount)
      list.add(refundTotalCount);

    boolean present_orderTurnover = true && (isSetOrderTurnover());
    list.add(present_orderTurnover);
    if (present_orderTurnover)
      list.add(orderTurnover);

    boolean present_orderCumulationTurnover = true && (isSetOrderCumulationTurnover());
    list.add(present_orderCumulationTurnover);
    if (present_orderCumulationTurnover)
      list.add(orderCumulationTurnover);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportOrderQuotaVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderCount()).compareTo(other.isSetOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCount, other.orderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderUmulation()).compareTo(other.isSetOrderUmulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderUmulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderUmulation, other.orderUmulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRefund()).compareTo(other.isSetOrderRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRefund, other.orderRefund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTotalCount()).compareTo(other.isSetRefundTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTotalCount, other.refundTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTurnover()).compareTo(other.isSetOrderTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTurnover, other.orderTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCumulationTurnover()).compareTo(other.isSetOrderCumulationTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCumulationTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCumulationTurnover, other.orderCumulationTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportOrderQuotaVo(");
    boolean first = true;

    if (isSetOrderCount()) {
      sb.append("orderCount:");
      sb.append(this.orderCount);
      first = false;
    }
    if (isSetOrderUmulation()) {
      if (!first) sb.append(", ");
      sb.append("orderUmulation:");
      sb.append(this.orderUmulation);
      first = false;
    }
    if (isSetOrderRefund()) {
      if (!first) sb.append(", ");
      sb.append("orderRefund:");
      sb.append(this.orderRefund);
      first = false;
    }
    if (isSetRefundTotalCount()) {
      if (!first) sb.append(", ");
      sb.append("refundTotalCount:");
      sb.append(this.refundTotalCount);
      first = false;
    }
    if (isSetOrderTurnover()) {
      if (!first) sb.append(", ");
      sb.append("orderTurnover:");
      sb.append(this.orderTurnover);
      first = false;
    }
    if (isSetOrderCumulationTurnover()) {
      if (!first) sb.append(", ");
      sb.append("orderCumulationTurnover:");
      sb.append(this.orderCumulationTurnover);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportOrderQuotaVoStandardSchemeFactory implements SchemeFactory {
    public ReportOrderQuotaVoStandardScheme getScheme() {
      return new ReportOrderQuotaVoStandardScheme();
    }
  }

  private static class ReportOrderQuotaVoStandardScheme extends StandardScheme<ReportOrderQuotaVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportOrderQuotaVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderCount = iprot.readI64();
              struct.setOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_UMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderUmulation = iprot.readI64();
              struct.setOrderUmulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderRefund = iprot.readI64();
              struct.setOrderRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundTotalCount = iprot.readI64();
              struct.setRefundTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderTurnover = iprot.readI64();
              struct.setOrderTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_CUMULATION_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderCumulationTurnover = iprot.readI64();
              struct.setOrderCumulationTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportOrderQuotaVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOrderCount()) {
        oprot.writeFieldBegin(ORDER_COUNT_FIELD_DESC);
        oprot.writeI64(struct.orderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderUmulation()) {
        oprot.writeFieldBegin(ORDER_UMULATION_FIELD_DESC);
        oprot.writeI64(struct.orderUmulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderRefund()) {
        oprot.writeFieldBegin(ORDER_REFUND_FIELD_DESC);
        oprot.writeI64(struct.orderRefund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRefundTotalCount()) {
        oprot.writeFieldBegin(REFUND_TOTAL_COUNT_FIELD_DESC);
        oprot.writeI64(struct.refundTotalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderTurnover()) {
        oprot.writeFieldBegin(ORDER_TURNOVER_FIELD_DESC);
        oprot.writeI64(struct.orderTurnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderCumulationTurnover()) {
        oprot.writeFieldBegin(ORDER_CUMULATION_TURNOVER_FIELD_DESC);
        oprot.writeI64(struct.orderCumulationTurnover);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportOrderQuotaVoTupleSchemeFactory implements SchemeFactory {
    public ReportOrderQuotaVoTupleScheme getScheme() {
      return new ReportOrderQuotaVoTupleScheme();
    }
  }

  private static class ReportOrderQuotaVoTupleScheme extends TupleScheme<ReportOrderQuotaVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportOrderQuotaVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderCount()) {
        optionals.set(0);
      }
      if (struct.isSetOrderUmulation()) {
        optionals.set(1);
      }
      if (struct.isSetOrderRefund()) {
        optionals.set(2);
      }
      if (struct.isSetRefundTotalCount()) {
        optionals.set(3);
      }
      if (struct.isSetOrderTurnover()) {
        optionals.set(4);
      }
      if (struct.isSetOrderCumulationTurnover()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOrderCount()) {
        oprot.writeI64(struct.orderCount);
      }
      if (struct.isSetOrderUmulation()) {
        oprot.writeI64(struct.orderUmulation);
      }
      if (struct.isSetOrderRefund()) {
        oprot.writeI64(struct.orderRefund);
      }
      if (struct.isSetRefundTotalCount()) {
        oprot.writeI64(struct.refundTotalCount);
      }
      if (struct.isSetOrderTurnover()) {
        oprot.writeI64(struct.orderTurnover);
      }
      if (struct.isSetOrderCumulationTurnover()) {
        oprot.writeI64(struct.orderCumulationTurnover);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportOrderQuotaVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.orderCount = iprot.readI64();
        struct.setOrderCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderUmulation = iprot.readI64();
        struct.setOrderUmulationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderRefund = iprot.readI64();
        struct.setOrderRefundIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundTotalCount = iprot.readI64();
        struct.setRefundTotalCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderTurnover = iprot.readI64();
        struct.setOrderTurnoverIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderCumulationTurnover = iprot.readI64();
        struct.setOrderCumulationTurnoverIsSet(true);
      }
    }
  }

}

