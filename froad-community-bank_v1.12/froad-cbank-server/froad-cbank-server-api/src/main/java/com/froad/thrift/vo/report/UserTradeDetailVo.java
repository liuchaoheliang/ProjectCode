/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 用户交易支付详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class UserTradeDetailVo implements org.apache.thrift.TBase<UserTradeDetailVo, UserTradeDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<UserTradeDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTradeDetailVo");

  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("regTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("regType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOrderNumber", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_ORDER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOrderAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointNumber", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_QUICK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalQuickNumber", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_QUICK_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalQuickAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_FILM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFilmNumber", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_FILM_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFilmAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_FILM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointFilmNumber", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_FILM_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointFilmAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_QUICK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointQuickNumber", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_QUICK_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointQuickAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserTradeDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTradeDetailVoTupleSchemeFactory());
  }

  /**
   * 机构码 *
   */
  public String orgCode; // required
  /**
   * 机构名称 *
   */
  public String orgName; // required
  /**
   * 用户名称*
   */
  public String userName; // optional
  /**
   * 注册手机号 *
   */
  public String mobile; // optional
  /**
   * 注册日期 *
   */
  public long regTime; // optional
  /**
   * 注册类型 *
   */
  public String regType; // optional
  /**
   * 订单数 *
   */
  public int totalOrderNumber; // required
  /**
   * 订单金额 *
   */
  public double totalOrderAmount; // required
  /**
   * 积分支付笔数 *
   */
  public int totalPointNumber; // required
  /**
   * 积分支付金额 *
   */
  public double totalPointAmount; // required
  /**
   * 快捷支付笔数 *
   */
  public int totalQuickNumber; // required
  /**
   * 快捷支付金额 *
   */
  public double totalQuickAmount; // required
  /**
   * 贴膜卡支付笔数 *
   */
  public int totalFilmNumber; // required
  /**
   * 贴膜卡支付金额 *
   */
  public double totalFilmAmount; // required
  /**
   * 积分+贴膜卡支付笔数 *
   */
  public int totalPointFilmNumber; // required
  /**
   * 积分+贴膜卡支付金额 *
   */
  public double totalPointFilmAmount; // required
  /**
   * 积分+快捷支付笔数 *
   */
  public int totalPointQuickNumber; // required
  /**
   * 积分+快捷支付金额 *
   */
  public double totalPointQuickAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 机构码 *
     */
    ORG_CODE((short)1, "orgCode"),
    /**
     * 机构名称 *
     */
    ORG_NAME((short)2, "orgName"),
    /**
     * 用户名称*
     */
    USER_NAME((short)3, "userName"),
    /**
     * 注册手机号 *
     */
    MOBILE((short)4, "mobile"),
    /**
     * 注册日期 *
     */
    REG_TIME((short)5, "regTime"),
    /**
     * 注册类型 *
     */
    REG_TYPE((short)6, "regType"),
    /**
     * 订单数 *
     */
    TOTAL_ORDER_NUMBER((short)7, "totalOrderNumber"),
    /**
     * 订单金额 *
     */
    TOTAL_ORDER_AMOUNT((short)8, "totalOrderAmount"),
    /**
     * 积分支付笔数 *
     */
    TOTAL_POINT_NUMBER((short)9, "totalPointNumber"),
    /**
     * 积分支付金额 *
     */
    TOTAL_POINT_AMOUNT((short)10, "totalPointAmount"),
    /**
     * 快捷支付笔数 *
     */
    TOTAL_QUICK_NUMBER((short)11, "totalQuickNumber"),
    /**
     * 快捷支付金额 *
     */
    TOTAL_QUICK_AMOUNT((short)12, "totalQuickAmount"),
    /**
     * 贴膜卡支付笔数 *
     */
    TOTAL_FILM_NUMBER((short)13, "totalFilmNumber"),
    /**
     * 贴膜卡支付金额 *
     */
    TOTAL_FILM_AMOUNT((short)14, "totalFilmAmount"),
    /**
     * 积分+贴膜卡支付笔数 *
     */
    TOTAL_POINT_FILM_NUMBER((short)15, "totalPointFilmNumber"),
    /**
     * 积分+贴膜卡支付金额 *
     */
    TOTAL_POINT_FILM_AMOUNT((short)16, "totalPointFilmAmount"),
    /**
     * 积分+快捷支付笔数 *
     */
    TOTAL_POINT_QUICK_NUMBER((short)17, "totalPointQuickNumber"),
    /**
     * 积分+快捷支付金额 *
     */
    TOTAL_POINT_QUICK_AMOUNT((short)18, "totalPointQuickAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_CODE
          return ORG_CODE;
        case 2: // ORG_NAME
          return ORG_NAME;
        case 3: // USER_NAME
          return USER_NAME;
        case 4: // MOBILE
          return MOBILE;
        case 5: // REG_TIME
          return REG_TIME;
        case 6: // REG_TYPE
          return REG_TYPE;
        case 7: // TOTAL_ORDER_NUMBER
          return TOTAL_ORDER_NUMBER;
        case 8: // TOTAL_ORDER_AMOUNT
          return TOTAL_ORDER_AMOUNT;
        case 9: // TOTAL_POINT_NUMBER
          return TOTAL_POINT_NUMBER;
        case 10: // TOTAL_POINT_AMOUNT
          return TOTAL_POINT_AMOUNT;
        case 11: // TOTAL_QUICK_NUMBER
          return TOTAL_QUICK_NUMBER;
        case 12: // TOTAL_QUICK_AMOUNT
          return TOTAL_QUICK_AMOUNT;
        case 13: // TOTAL_FILM_NUMBER
          return TOTAL_FILM_NUMBER;
        case 14: // TOTAL_FILM_AMOUNT
          return TOTAL_FILM_AMOUNT;
        case 15: // TOTAL_POINT_FILM_NUMBER
          return TOTAL_POINT_FILM_NUMBER;
        case 16: // TOTAL_POINT_FILM_AMOUNT
          return TOTAL_POINT_FILM_AMOUNT;
        case 17: // TOTAL_POINT_QUICK_NUMBER
          return TOTAL_POINT_QUICK_NUMBER;
        case 18: // TOTAL_POINT_QUICK_AMOUNT
          return TOTAL_POINT_QUICK_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGTIME_ISSET_ID = 0;
  private static final int __TOTALORDERNUMBER_ISSET_ID = 1;
  private static final int __TOTALORDERAMOUNT_ISSET_ID = 2;
  private static final int __TOTALPOINTNUMBER_ISSET_ID = 3;
  private static final int __TOTALPOINTAMOUNT_ISSET_ID = 4;
  private static final int __TOTALQUICKNUMBER_ISSET_ID = 5;
  private static final int __TOTALQUICKAMOUNT_ISSET_ID = 6;
  private static final int __TOTALFILMNUMBER_ISSET_ID = 7;
  private static final int __TOTALFILMAMOUNT_ISSET_ID = 8;
  private static final int __TOTALPOINTFILMNUMBER_ISSET_ID = 9;
  private static final int __TOTALPOINTFILMAMOUNT_ISSET_ID = 10;
  private static final int __TOTALPOINTQUICKNUMBER_ISSET_ID = 11;
  private static final int __TOTALPOINTQUICKAMOUNT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_NAME,_Fields.MOBILE,_Fields.REG_TIME,_Fields.REG_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_TIME, new org.apache.thrift.meta_data.FieldMetaData("regTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("regType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_ORDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalOrderNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_ORDER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalOrderAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_POINT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalPointNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalPointAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_QUICK_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalQuickNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_QUICK_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalQuickAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_FILM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalFilmNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_FILM_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalFilmAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_POINT_FILM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalPointFilmNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT_FILM_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalPointFilmAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_POINT_QUICK_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalPointQuickNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT_QUICK_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalPointQuickAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTradeDetailVo.class, metaDataMap);
  }

  public UserTradeDetailVo() {
  }

  public UserTradeDetailVo(
    String orgCode,
    String orgName,
    int totalOrderNumber,
    double totalOrderAmount,
    int totalPointNumber,
    double totalPointAmount,
    int totalQuickNumber,
    double totalQuickAmount,
    int totalFilmNumber,
    double totalFilmAmount,
    int totalPointFilmNumber,
    double totalPointFilmAmount,
    int totalPointQuickNumber,
    double totalPointQuickAmount)
  {
    this();
    this.orgCode = orgCode;
    this.orgName = orgName;
    this.totalOrderNumber = totalOrderNumber;
    setTotalOrderNumberIsSet(true);
    this.totalOrderAmount = totalOrderAmount;
    setTotalOrderAmountIsSet(true);
    this.totalPointNumber = totalPointNumber;
    setTotalPointNumberIsSet(true);
    this.totalPointAmount = totalPointAmount;
    setTotalPointAmountIsSet(true);
    this.totalQuickNumber = totalQuickNumber;
    setTotalQuickNumberIsSet(true);
    this.totalQuickAmount = totalQuickAmount;
    setTotalQuickAmountIsSet(true);
    this.totalFilmNumber = totalFilmNumber;
    setTotalFilmNumberIsSet(true);
    this.totalFilmAmount = totalFilmAmount;
    setTotalFilmAmountIsSet(true);
    this.totalPointFilmNumber = totalPointFilmNumber;
    setTotalPointFilmNumberIsSet(true);
    this.totalPointFilmAmount = totalPointFilmAmount;
    setTotalPointFilmAmountIsSet(true);
    this.totalPointQuickNumber = totalPointQuickNumber;
    setTotalPointQuickNumberIsSet(true);
    this.totalPointQuickAmount = totalPointQuickAmount;
    setTotalPointQuickAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTradeDetailVo(UserTradeDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    this.regTime = other.regTime;
    if (other.isSetRegType()) {
      this.regType = other.regType;
    }
    this.totalOrderNumber = other.totalOrderNumber;
    this.totalOrderAmount = other.totalOrderAmount;
    this.totalPointNumber = other.totalPointNumber;
    this.totalPointAmount = other.totalPointAmount;
    this.totalQuickNumber = other.totalQuickNumber;
    this.totalQuickAmount = other.totalQuickAmount;
    this.totalFilmNumber = other.totalFilmNumber;
    this.totalFilmAmount = other.totalFilmAmount;
    this.totalPointFilmNumber = other.totalPointFilmNumber;
    this.totalPointFilmAmount = other.totalPointFilmAmount;
    this.totalPointQuickNumber = other.totalPointQuickNumber;
    this.totalPointQuickAmount = other.totalPointQuickAmount;
  }

  public UserTradeDetailVo deepCopy() {
    return new UserTradeDetailVo(this);
  }

  @Override
  public void clear() {
    this.orgCode = null;
    this.orgName = null;
    this.userName = null;
    this.mobile = null;
    setRegTimeIsSet(false);
    this.regTime = 0;
    this.regType = null;
    setTotalOrderNumberIsSet(false);
    this.totalOrderNumber = 0;
    setTotalOrderAmountIsSet(false);
    this.totalOrderAmount = 0.0;
    setTotalPointNumberIsSet(false);
    this.totalPointNumber = 0;
    setTotalPointAmountIsSet(false);
    this.totalPointAmount = 0.0;
    setTotalQuickNumberIsSet(false);
    this.totalQuickNumber = 0;
    setTotalQuickAmountIsSet(false);
    this.totalQuickAmount = 0.0;
    setTotalFilmNumberIsSet(false);
    this.totalFilmNumber = 0;
    setTotalFilmAmountIsSet(false);
    this.totalFilmAmount = 0.0;
    setTotalPointFilmNumberIsSet(false);
    this.totalPointFilmNumber = 0;
    setTotalPointFilmAmountIsSet(false);
    this.totalPointFilmAmount = 0.0;
    setTotalPointQuickNumberIsSet(false);
    this.totalPointQuickNumber = 0;
    setTotalPointQuickAmountIsSet(false);
    this.totalPointQuickAmount = 0.0;
  }

  /**
   * 机构码 *
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构码 *
   */
  public UserTradeDetailVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 机构名称 *
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 机构名称 *
   */
  public UserTradeDetailVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 用户名称*
   */
  public String getUserName() {
    return this.userName;
  }

  /**
   * 用户名称*
   */
  public UserTradeDetailVo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  /**
   * 注册手机号 *
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 注册手机号 *
   */
  public UserTradeDetailVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 注册日期 *
   */
  public long getRegTime() {
    return this.regTime;
  }

  /**
   * 注册日期 *
   */
  public UserTradeDetailVo setRegTime(long regTime) {
    this.regTime = regTime;
    setRegTimeIsSet(true);
    return this;
  }

  public void unsetRegTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGTIME_ISSET_ID);
  }

  /** Returns true if field regTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REGTIME_ISSET_ID);
  }

  public void setRegTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGTIME_ISSET_ID, value);
  }

  /**
   * 注册类型 *
   */
  public String getRegType() {
    return this.regType;
  }

  /**
   * 注册类型 *
   */
  public UserTradeDetailVo setRegType(String regType) {
    this.regType = regType;
    return this;
  }

  public void unsetRegType() {
    this.regType = null;
  }

  /** Returns true if field regType is set (has been assigned a value) and false otherwise */
  public boolean isSetRegType() {
    return this.regType != null;
  }

  public void setRegTypeIsSet(boolean value) {
    if (!value) {
      this.regType = null;
    }
  }

  /**
   * 订单数 *
   */
  public int getTotalOrderNumber() {
    return this.totalOrderNumber;
  }

  /**
   * 订单数 *
   */
  public UserTradeDetailVo setTotalOrderNumber(int totalOrderNumber) {
    this.totalOrderNumber = totalOrderNumber;
    setTotalOrderNumberIsSet(true);
    return this;
  }

  public void unsetTotalOrderNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALORDERNUMBER_ISSET_ID);
  }

  /** Returns true if field totalOrderNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOrderNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALORDERNUMBER_ISSET_ID);
  }

  public void setTotalOrderNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALORDERNUMBER_ISSET_ID, value);
  }

  /**
   * 订单金额 *
   */
  public double getTotalOrderAmount() {
    return this.totalOrderAmount;
  }

  /**
   * 订单金额 *
   */
  public UserTradeDetailVo setTotalOrderAmount(double totalOrderAmount) {
    this.totalOrderAmount = totalOrderAmount;
    setTotalOrderAmountIsSet(true);
    return this;
  }

  public void unsetTotalOrderAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALORDERAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalOrderAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOrderAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALORDERAMOUNT_ISSET_ID);
  }

  public void setTotalOrderAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALORDERAMOUNT_ISSET_ID, value);
  }

  /**
   * 积分支付笔数 *
   */
  public int getTotalPointNumber() {
    return this.totalPointNumber;
  }

  /**
   * 积分支付笔数 *
   */
  public UserTradeDetailVo setTotalPointNumber(int totalPointNumber) {
    this.totalPointNumber = totalPointNumber;
    setTotalPointNumberIsSet(true);
    return this;
  }

  public void unsetTotalPointNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTNUMBER_ISSET_ID);
  }

  /** Returns true if field totalPointNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTNUMBER_ISSET_ID);
  }

  public void setTotalPointNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTNUMBER_ISSET_ID, value);
  }

  /**
   * 积分支付金额 *
   */
  public double getTotalPointAmount() {
    return this.totalPointAmount;
  }

  /**
   * 积分支付金额 *
   */
  public UserTradeDetailVo setTotalPointAmount(double totalPointAmount) {
    this.totalPointAmount = totalPointAmount;
    setTotalPointAmountIsSet(true);
    return this;
  }

  public void unsetTotalPointAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalPointAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTAMOUNT_ISSET_ID);
  }

  public void setTotalPointAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTAMOUNT_ISSET_ID, value);
  }

  /**
   * 快捷支付笔数 *
   */
  public int getTotalQuickNumber() {
    return this.totalQuickNumber;
  }

  /**
   * 快捷支付笔数 *
   */
  public UserTradeDetailVo setTotalQuickNumber(int totalQuickNumber) {
    this.totalQuickNumber = totalQuickNumber;
    setTotalQuickNumberIsSet(true);
    return this;
  }

  public void unsetTotalQuickNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALQUICKNUMBER_ISSET_ID);
  }

  /** Returns true if field totalQuickNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalQuickNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALQUICKNUMBER_ISSET_ID);
  }

  public void setTotalQuickNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALQUICKNUMBER_ISSET_ID, value);
  }

  /**
   * 快捷支付金额 *
   */
  public double getTotalQuickAmount() {
    return this.totalQuickAmount;
  }

  /**
   * 快捷支付金额 *
   */
  public UserTradeDetailVo setTotalQuickAmount(double totalQuickAmount) {
    this.totalQuickAmount = totalQuickAmount;
    setTotalQuickAmountIsSet(true);
    return this;
  }

  public void unsetTotalQuickAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALQUICKAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalQuickAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalQuickAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALQUICKAMOUNT_ISSET_ID);
  }

  public void setTotalQuickAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALQUICKAMOUNT_ISSET_ID, value);
  }

  /**
   * 贴膜卡支付笔数 *
   */
  public int getTotalFilmNumber() {
    return this.totalFilmNumber;
  }

  /**
   * 贴膜卡支付笔数 *
   */
  public UserTradeDetailVo setTotalFilmNumber(int totalFilmNumber) {
    this.totalFilmNumber = totalFilmNumber;
    setTotalFilmNumberIsSet(true);
    return this;
  }

  public void unsetTotalFilmNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALFILMNUMBER_ISSET_ID);
  }

  /** Returns true if field totalFilmNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFilmNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALFILMNUMBER_ISSET_ID);
  }

  public void setTotalFilmNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALFILMNUMBER_ISSET_ID, value);
  }

  /**
   * 贴膜卡支付金额 *
   */
  public double getTotalFilmAmount() {
    return this.totalFilmAmount;
  }

  /**
   * 贴膜卡支付金额 *
   */
  public UserTradeDetailVo setTotalFilmAmount(double totalFilmAmount) {
    this.totalFilmAmount = totalFilmAmount;
    setTotalFilmAmountIsSet(true);
    return this;
  }

  public void unsetTotalFilmAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALFILMAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalFilmAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFilmAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALFILMAMOUNT_ISSET_ID);
  }

  public void setTotalFilmAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALFILMAMOUNT_ISSET_ID, value);
  }

  /**
   * 积分+贴膜卡支付笔数 *
   */
  public int getTotalPointFilmNumber() {
    return this.totalPointFilmNumber;
  }

  /**
   * 积分+贴膜卡支付笔数 *
   */
  public UserTradeDetailVo setTotalPointFilmNumber(int totalPointFilmNumber) {
    this.totalPointFilmNumber = totalPointFilmNumber;
    setTotalPointFilmNumberIsSet(true);
    return this;
  }

  public void unsetTotalPointFilmNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTFILMNUMBER_ISSET_ID);
  }

  /** Returns true if field totalPointFilmNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointFilmNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTFILMNUMBER_ISSET_ID);
  }

  public void setTotalPointFilmNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTFILMNUMBER_ISSET_ID, value);
  }

  /**
   * 积分+贴膜卡支付金额 *
   */
  public double getTotalPointFilmAmount() {
    return this.totalPointFilmAmount;
  }

  /**
   * 积分+贴膜卡支付金额 *
   */
  public UserTradeDetailVo setTotalPointFilmAmount(double totalPointFilmAmount) {
    this.totalPointFilmAmount = totalPointFilmAmount;
    setTotalPointFilmAmountIsSet(true);
    return this;
  }

  public void unsetTotalPointFilmAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTFILMAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalPointFilmAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointFilmAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTFILMAMOUNT_ISSET_ID);
  }

  public void setTotalPointFilmAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTFILMAMOUNT_ISSET_ID, value);
  }

  /**
   * 积分+快捷支付笔数 *
   */
  public int getTotalPointQuickNumber() {
    return this.totalPointQuickNumber;
  }

  /**
   * 积分+快捷支付笔数 *
   */
  public UserTradeDetailVo setTotalPointQuickNumber(int totalPointQuickNumber) {
    this.totalPointQuickNumber = totalPointQuickNumber;
    setTotalPointQuickNumberIsSet(true);
    return this;
  }

  public void unsetTotalPointQuickNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTQUICKNUMBER_ISSET_ID);
  }

  /** Returns true if field totalPointQuickNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointQuickNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTQUICKNUMBER_ISSET_ID);
  }

  public void setTotalPointQuickNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTQUICKNUMBER_ISSET_ID, value);
  }

  /**
   * 积分+快捷支付金额 *
   */
  public double getTotalPointQuickAmount() {
    return this.totalPointQuickAmount;
  }

  /**
   * 积分+快捷支付金额 *
   */
  public UserTradeDetailVo setTotalPointQuickAmount(double totalPointQuickAmount) {
    this.totalPointQuickAmount = totalPointQuickAmount;
    setTotalPointQuickAmountIsSet(true);
    return this;
  }

  public void unsetTotalPointQuickAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOINTQUICKAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalPointQuickAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointQuickAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOINTQUICKAMOUNT_ISSET_ID);
  }

  public void setTotalPointQuickAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOINTQUICKAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case REG_TIME:
      if (value == null) {
        unsetRegTime();
      } else {
        setRegTime((Long)value);
      }
      break;

    case REG_TYPE:
      if (value == null) {
        unsetRegType();
      } else {
        setRegType((String)value);
      }
      break;

    case TOTAL_ORDER_NUMBER:
      if (value == null) {
        unsetTotalOrderNumber();
      } else {
        setTotalOrderNumber((Integer)value);
      }
      break;

    case TOTAL_ORDER_AMOUNT:
      if (value == null) {
        unsetTotalOrderAmount();
      } else {
        setTotalOrderAmount((Double)value);
      }
      break;

    case TOTAL_POINT_NUMBER:
      if (value == null) {
        unsetTotalPointNumber();
      } else {
        setTotalPointNumber((Integer)value);
      }
      break;

    case TOTAL_POINT_AMOUNT:
      if (value == null) {
        unsetTotalPointAmount();
      } else {
        setTotalPointAmount((Double)value);
      }
      break;

    case TOTAL_QUICK_NUMBER:
      if (value == null) {
        unsetTotalQuickNumber();
      } else {
        setTotalQuickNumber((Integer)value);
      }
      break;

    case TOTAL_QUICK_AMOUNT:
      if (value == null) {
        unsetTotalQuickAmount();
      } else {
        setTotalQuickAmount((Double)value);
      }
      break;

    case TOTAL_FILM_NUMBER:
      if (value == null) {
        unsetTotalFilmNumber();
      } else {
        setTotalFilmNumber((Integer)value);
      }
      break;

    case TOTAL_FILM_AMOUNT:
      if (value == null) {
        unsetTotalFilmAmount();
      } else {
        setTotalFilmAmount((Double)value);
      }
      break;

    case TOTAL_POINT_FILM_NUMBER:
      if (value == null) {
        unsetTotalPointFilmNumber();
      } else {
        setTotalPointFilmNumber((Integer)value);
      }
      break;

    case TOTAL_POINT_FILM_AMOUNT:
      if (value == null) {
        unsetTotalPointFilmAmount();
      } else {
        setTotalPointFilmAmount((Double)value);
      }
      break;

    case TOTAL_POINT_QUICK_NUMBER:
      if (value == null) {
        unsetTotalPointQuickNumber();
      } else {
        setTotalPointQuickNumber((Integer)value);
      }
      break;

    case TOTAL_POINT_QUICK_AMOUNT:
      if (value == null) {
        unsetTotalPointQuickAmount();
      } else {
        setTotalPointQuickAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_CODE:
      return getOrgCode();

    case ORG_NAME:
      return getOrgName();

    case USER_NAME:
      return getUserName();

    case MOBILE:
      return getMobile();

    case REG_TIME:
      return Long.valueOf(getRegTime());

    case REG_TYPE:
      return getRegType();

    case TOTAL_ORDER_NUMBER:
      return Integer.valueOf(getTotalOrderNumber());

    case TOTAL_ORDER_AMOUNT:
      return Double.valueOf(getTotalOrderAmount());

    case TOTAL_POINT_NUMBER:
      return Integer.valueOf(getTotalPointNumber());

    case TOTAL_POINT_AMOUNT:
      return Double.valueOf(getTotalPointAmount());

    case TOTAL_QUICK_NUMBER:
      return Integer.valueOf(getTotalQuickNumber());

    case TOTAL_QUICK_AMOUNT:
      return Double.valueOf(getTotalQuickAmount());

    case TOTAL_FILM_NUMBER:
      return Integer.valueOf(getTotalFilmNumber());

    case TOTAL_FILM_AMOUNT:
      return Double.valueOf(getTotalFilmAmount());

    case TOTAL_POINT_FILM_NUMBER:
      return Integer.valueOf(getTotalPointFilmNumber());

    case TOTAL_POINT_FILM_AMOUNT:
      return Double.valueOf(getTotalPointFilmAmount());

    case TOTAL_POINT_QUICK_NUMBER:
      return Integer.valueOf(getTotalPointQuickNumber());

    case TOTAL_POINT_QUICK_AMOUNT:
      return Double.valueOf(getTotalPointQuickAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_NAME:
      return isSetOrgName();
    case USER_NAME:
      return isSetUserName();
    case MOBILE:
      return isSetMobile();
    case REG_TIME:
      return isSetRegTime();
    case REG_TYPE:
      return isSetRegType();
    case TOTAL_ORDER_NUMBER:
      return isSetTotalOrderNumber();
    case TOTAL_ORDER_AMOUNT:
      return isSetTotalOrderAmount();
    case TOTAL_POINT_NUMBER:
      return isSetTotalPointNumber();
    case TOTAL_POINT_AMOUNT:
      return isSetTotalPointAmount();
    case TOTAL_QUICK_NUMBER:
      return isSetTotalQuickNumber();
    case TOTAL_QUICK_AMOUNT:
      return isSetTotalQuickAmount();
    case TOTAL_FILM_NUMBER:
      return isSetTotalFilmNumber();
    case TOTAL_FILM_AMOUNT:
      return isSetTotalFilmAmount();
    case TOTAL_POINT_FILM_NUMBER:
      return isSetTotalPointFilmNumber();
    case TOTAL_POINT_FILM_AMOUNT:
      return isSetTotalPointFilmAmount();
    case TOTAL_POINT_QUICK_NUMBER:
      return isSetTotalPointQuickNumber();
    case TOTAL_POINT_QUICK_AMOUNT:
      return isSetTotalPointQuickAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTradeDetailVo)
      return this.equals((UserTradeDetailVo)that);
    return false;
  }

  public boolean equals(UserTradeDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_regTime = true && this.isSetRegTime();
    boolean that_present_regTime = true && that.isSetRegTime();
    if (this_present_regTime || that_present_regTime) {
      if (!(this_present_regTime && that_present_regTime))
        return false;
      if (this.regTime != that.regTime)
        return false;
    }

    boolean this_present_regType = true && this.isSetRegType();
    boolean that_present_regType = true && that.isSetRegType();
    if (this_present_regType || that_present_regType) {
      if (!(this_present_regType && that_present_regType))
        return false;
      if (!this.regType.equals(that.regType))
        return false;
    }

    boolean this_present_totalOrderNumber = true;
    boolean that_present_totalOrderNumber = true;
    if (this_present_totalOrderNumber || that_present_totalOrderNumber) {
      if (!(this_present_totalOrderNumber && that_present_totalOrderNumber))
        return false;
      if (this.totalOrderNumber != that.totalOrderNumber)
        return false;
    }

    boolean this_present_totalOrderAmount = true;
    boolean that_present_totalOrderAmount = true;
    if (this_present_totalOrderAmount || that_present_totalOrderAmount) {
      if (!(this_present_totalOrderAmount && that_present_totalOrderAmount))
        return false;
      if (this.totalOrderAmount != that.totalOrderAmount)
        return false;
    }

    boolean this_present_totalPointNumber = true;
    boolean that_present_totalPointNumber = true;
    if (this_present_totalPointNumber || that_present_totalPointNumber) {
      if (!(this_present_totalPointNumber && that_present_totalPointNumber))
        return false;
      if (this.totalPointNumber != that.totalPointNumber)
        return false;
    }

    boolean this_present_totalPointAmount = true;
    boolean that_present_totalPointAmount = true;
    if (this_present_totalPointAmount || that_present_totalPointAmount) {
      if (!(this_present_totalPointAmount && that_present_totalPointAmount))
        return false;
      if (this.totalPointAmount != that.totalPointAmount)
        return false;
    }

    boolean this_present_totalQuickNumber = true;
    boolean that_present_totalQuickNumber = true;
    if (this_present_totalQuickNumber || that_present_totalQuickNumber) {
      if (!(this_present_totalQuickNumber && that_present_totalQuickNumber))
        return false;
      if (this.totalQuickNumber != that.totalQuickNumber)
        return false;
    }

    boolean this_present_totalQuickAmount = true;
    boolean that_present_totalQuickAmount = true;
    if (this_present_totalQuickAmount || that_present_totalQuickAmount) {
      if (!(this_present_totalQuickAmount && that_present_totalQuickAmount))
        return false;
      if (this.totalQuickAmount != that.totalQuickAmount)
        return false;
    }

    boolean this_present_totalFilmNumber = true;
    boolean that_present_totalFilmNumber = true;
    if (this_present_totalFilmNumber || that_present_totalFilmNumber) {
      if (!(this_present_totalFilmNumber && that_present_totalFilmNumber))
        return false;
      if (this.totalFilmNumber != that.totalFilmNumber)
        return false;
    }

    boolean this_present_totalFilmAmount = true;
    boolean that_present_totalFilmAmount = true;
    if (this_present_totalFilmAmount || that_present_totalFilmAmount) {
      if (!(this_present_totalFilmAmount && that_present_totalFilmAmount))
        return false;
      if (this.totalFilmAmount != that.totalFilmAmount)
        return false;
    }

    boolean this_present_totalPointFilmNumber = true;
    boolean that_present_totalPointFilmNumber = true;
    if (this_present_totalPointFilmNumber || that_present_totalPointFilmNumber) {
      if (!(this_present_totalPointFilmNumber && that_present_totalPointFilmNumber))
        return false;
      if (this.totalPointFilmNumber != that.totalPointFilmNumber)
        return false;
    }

    boolean this_present_totalPointFilmAmount = true;
    boolean that_present_totalPointFilmAmount = true;
    if (this_present_totalPointFilmAmount || that_present_totalPointFilmAmount) {
      if (!(this_present_totalPointFilmAmount && that_present_totalPointFilmAmount))
        return false;
      if (this.totalPointFilmAmount != that.totalPointFilmAmount)
        return false;
    }

    boolean this_present_totalPointQuickNumber = true;
    boolean that_present_totalPointQuickNumber = true;
    if (this_present_totalPointQuickNumber || that_present_totalPointQuickNumber) {
      if (!(this_present_totalPointQuickNumber && that_present_totalPointQuickNumber))
        return false;
      if (this.totalPointQuickNumber != that.totalPointQuickNumber)
        return false;
    }

    boolean this_present_totalPointQuickAmount = true;
    boolean that_present_totalPointQuickAmount = true;
    if (this_present_totalPointQuickAmount || that_present_totalPointQuickAmount) {
      if (!(this_present_totalPointQuickAmount && that_present_totalPointQuickAmount))
        return false;
      if (this.totalPointQuickAmount != that.totalPointQuickAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_regTime = true && (isSetRegTime());
    list.add(present_regTime);
    if (present_regTime)
      list.add(regTime);

    boolean present_regType = true && (isSetRegType());
    list.add(present_regType);
    if (present_regType)
      list.add(regType);

    boolean present_totalOrderNumber = true;
    list.add(present_totalOrderNumber);
    if (present_totalOrderNumber)
      list.add(totalOrderNumber);

    boolean present_totalOrderAmount = true;
    list.add(present_totalOrderAmount);
    if (present_totalOrderAmount)
      list.add(totalOrderAmount);

    boolean present_totalPointNumber = true;
    list.add(present_totalPointNumber);
    if (present_totalPointNumber)
      list.add(totalPointNumber);

    boolean present_totalPointAmount = true;
    list.add(present_totalPointAmount);
    if (present_totalPointAmount)
      list.add(totalPointAmount);

    boolean present_totalQuickNumber = true;
    list.add(present_totalQuickNumber);
    if (present_totalQuickNumber)
      list.add(totalQuickNumber);

    boolean present_totalQuickAmount = true;
    list.add(present_totalQuickAmount);
    if (present_totalQuickAmount)
      list.add(totalQuickAmount);

    boolean present_totalFilmNumber = true;
    list.add(present_totalFilmNumber);
    if (present_totalFilmNumber)
      list.add(totalFilmNumber);

    boolean present_totalFilmAmount = true;
    list.add(present_totalFilmAmount);
    if (present_totalFilmAmount)
      list.add(totalFilmAmount);

    boolean present_totalPointFilmNumber = true;
    list.add(present_totalPointFilmNumber);
    if (present_totalPointFilmNumber)
      list.add(totalPointFilmNumber);

    boolean present_totalPointFilmAmount = true;
    list.add(present_totalPointFilmAmount);
    if (present_totalPointFilmAmount)
      list.add(totalPointFilmAmount);

    boolean present_totalPointQuickNumber = true;
    list.add(present_totalPointQuickNumber);
    if (present_totalPointQuickNumber)
      list.add(totalPointQuickNumber);

    boolean present_totalPointQuickAmount = true;
    list.add(present_totalPointQuickAmount);
    if (present_totalPointQuickAmount)
      list.add(totalPointQuickAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserTradeDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegTime()).compareTo(other.isSetRegTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regTime, other.regTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegType()).compareTo(other.isSetRegType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regType, other.regType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalOrderNumber()).compareTo(other.isSetTotalOrderNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOrderNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOrderNumber, other.totalOrderNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalOrderAmount()).compareTo(other.isSetTotalOrderAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOrderAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOrderAmount, other.totalOrderAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointNumber()).compareTo(other.isSetTotalPointNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointNumber, other.totalPointNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointAmount()).compareTo(other.isSetTotalPointAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointAmount, other.totalPointAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalQuickNumber()).compareTo(other.isSetTotalQuickNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalQuickNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalQuickNumber, other.totalQuickNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalQuickAmount()).compareTo(other.isSetTotalQuickAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalQuickAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalQuickAmount, other.totalQuickAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFilmNumber()).compareTo(other.isSetTotalFilmNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFilmNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFilmNumber, other.totalFilmNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFilmAmount()).compareTo(other.isSetTotalFilmAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFilmAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFilmAmount, other.totalFilmAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointFilmNumber()).compareTo(other.isSetTotalPointFilmNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointFilmNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointFilmNumber, other.totalPointFilmNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointFilmAmount()).compareTo(other.isSetTotalPointFilmAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointFilmAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointFilmAmount, other.totalPointFilmAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointQuickNumber()).compareTo(other.isSetTotalPointQuickNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointQuickNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointQuickNumber, other.totalPointQuickNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointQuickAmount()).compareTo(other.isSetTotalPointQuickAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointQuickAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointQuickAmount, other.totalPointQuickAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserTradeDetailVo(");
    boolean first = true;

    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetRegTime()) {
      if (!first) sb.append(", ");
      sb.append("regTime:");
      sb.append(this.regTime);
      first = false;
    }
    if (isSetRegType()) {
      if (!first) sb.append(", ");
      sb.append("regType:");
      if (this.regType == null) {
        sb.append("null");
      } else {
        sb.append(this.regType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("totalOrderNumber:");
    sb.append(this.totalOrderNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOrderAmount:");
    sb.append(this.totalOrderAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointNumber:");
    sb.append(this.totalPointNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointAmount:");
    sb.append(this.totalPointAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalQuickNumber:");
    sb.append(this.totalQuickNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalQuickAmount:");
    sb.append(this.totalQuickAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFilmNumber:");
    sb.append(this.totalFilmNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFilmAmount:");
    sb.append(this.totalFilmAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointFilmNumber:");
    sb.append(this.totalPointFilmNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointFilmAmount:");
    sb.append(this.totalPointFilmAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointQuickNumber:");
    sb.append(this.totalPointQuickNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointQuickAmount:");
    sb.append(this.totalPointQuickAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orgCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgCode' was not present! Struct: " + toString());
    }
    if (orgName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalOrderNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalOrderAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalQuickNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalQuickAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalFilmNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalFilmAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointFilmNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointFilmAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointQuickNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPointQuickAmount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTradeDetailVoStandardSchemeFactory implements SchemeFactory {
    public UserTradeDetailVoStandardScheme getScheme() {
      return new UserTradeDetailVoStandardScheme();
    }
  }

  private static class UserTradeDetailVoStandardScheme extends StandardScheme<UserTradeDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTradeDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regTime = iprot.readI64();
              struct.setRegTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regType = iprot.readString();
              struct.setRegTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_ORDER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalOrderNumber = iprot.readI32();
              struct.setTotalOrderNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_ORDER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalOrderAmount = iprot.readDouble();
              struct.setTotalOrderAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_POINT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointNumber = iprot.readI32();
              struct.setTotalPointNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_POINT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPointAmount = iprot.readDouble();
              struct.setTotalPointAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_QUICK_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalQuickNumber = iprot.readI32();
              struct.setTotalQuickNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_QUICK_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalQuickAmount = iprot.readDouble();
              struct.setTotalQuickAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_FILM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalFilmNumber = iprot.readI32();
              struct.setTotalFilmNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_FILM_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalFilmAmount = iprot.readDouble();
              struct.setTotalFilmAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOTAL_POINT_FILM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointFilmNumber = iprot.readI32();
              struct.setTotalPointFilmNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_POINT_FILM_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPointFilmAmount = iprot.readDouble();
              struct.setTotalPointFilmAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOTAL_POINT_QUICK_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointQuickNumber = iprot.readI32();
              struct.setTotalPointQuickNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TOTAL_POINT_QUICK_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPointQuickAmount = iprot.readDouble();
              struct.setTotalPointQuickAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalOrderNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalOrderNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalOrderAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalOrderAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalQuickNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalQuickNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalQuickAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalQuickAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalFilmNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalFilmNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalFilmAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalFilmAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointFilmNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointFilmNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointFilmAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointFilmAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointQuickNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointQuickNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPointQuickAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPointQuickAmount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTradeDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegTime()) {
        oprot.writeFieldBegin(REG_TIME_FIELD_DESC);
        oprot.writeI64(struct.regTime);
        oprot.writeFieldEnd();
      }
      if (struct.regType != null) {
        if (struct.isSetRegType()) {
          oprot.writeFieldBegin(REG_TYPE_FIELD_DESC);
          oprot.writeString(struct.regType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TOTAL_ORDER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalOrderNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_ORDER_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalOrderAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalPointNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalPointAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_QUICK_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalQuickNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_QUICK_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalQuickAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FILM_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalFilmNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FILM_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalFilmAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_FILM_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalPointFilmNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_FILM_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalPointFilmAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_QUICK_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalPointQuickNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_QUICK_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalPointQuickAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTradeDetailVoTupleSchemeFactory implements SchemeFactory {
    public UserTradeDetailVoTupleScheme getScheme() {
      return new UserTradeDetailVoTupleScheme();
    }
  }

  private static class UserTradeDetailVoTupleScheme extends TupleScheme<UserTradeDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTradeDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.orgCode);
      oprot.writeString(struct.orgName);
      oprot.writeI32(struct.totalOrderNumber);
      oprot.writeDouble(struct.totalOrderAmount);
      oprot.writeI32(struct.totalPointNumber);
      oprot.writeDouble(struct.totalPointAmount);
      oprot.writeI32(struct.totalQuickNumber);
      oprot.writeDouble(struct.totalQuickAmount);
      oprot.writeI32(struct.totalFilmNumber);
      oprot.writeDouble(struct.totalFilmAmount);
      oprot.writeI32(struct.totalPointFilmNumber);
      oprot.writeDouble(struct.totalPointFilmAmount);
      oprot.writeI32(struct.totalPointQuickNumber);
      oprot.writeDouble(struct.totalPointQuickAmount);
      BitSet optionals = new BitSet();
      if (struct.isSetUserName()) {
        optionals.set(0);
      }
      if (struct.isSetMobile()) {
        optionals.set(1);
      }
      if (struct.isSetRegTime()) {
        optionals.set(2);
      }
      if (struct.isSetRegType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetRegTime()) {
        oprot.writeI64(struct.regTime);
      }
      if (struct.isSetRegType()) {
        oprot.writeString(struct.regType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTradeDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.orgCode = iprot.readString();
      struct.setOrgCodeIsSet(true);
      struct.orgName = iprot.readString();
      struct.setOrgNameIsSet(true);
      struct.totalOrderNumber = iprot.readI32();
      struct.setTotalOrderNumberIsSet(true);
      struct.totalOrderAmount = iprot.readDouble();
      struct.setTotalOrderAmountIsSet(true);
      struct.totalPointNumber = iprot.readI32();
      struct.setTotalPointNumberIsSet(true);
      struct.totalPointAmount = iprot.readDouble();
      struct.setTotalPointAmountIsSet(true);
      struct.totalQuickNumber = iprot.readI32();
      struct.setTotalQuickNumberIsSet(true);
      struct.totalQuickAmount = iprot.readDouble();
      struct.setTotalQuickAmountIsSet(true);
      struct.totalFilmNumber = iprot.readI32();
      struct.setTotalFilmNumberIsSet(true);
      struct.totalFilmAmount = iprot.readDouble();
      struct.setTotalFilmAmountIsSet(true);
      struct.totalPointFilmNumber = iprot.readI32();
      struct.setTotalPointFilmNumberIsSet(true);
      struct.totalPointFilmAmount = iprot.readDouble();
      struct.setTotalPointFilmAmountIsSet(true);
      struct.totalPointQuickNumber = iprot.readI32();
      struct.setTotalPointQuickNumberIsSet(true);
      struct.totalPointQuickAmount = iprot.readDouble();
      struct.setTotalPointQuickAmountIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regTime = iprot.readI64();
        struct.setRegTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regType = iprot.readString();
        struct.setRegTypeIsSet(true);
      }
    }
  }

}

