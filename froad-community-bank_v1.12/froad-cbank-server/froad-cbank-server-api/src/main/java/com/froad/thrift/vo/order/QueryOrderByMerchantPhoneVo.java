/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单列表商户手机端显示
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QueryOrderByMerchantPhoneVo implements org.apache.thrift.TBase<QueryOrderByMerchantPhoneVo, QueryOrderByMerchantPhoneVo._Fields>, java.io.Serializable, Cloneable, Comparable<QueryOrderByMerchantPhoneVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryOrderByMerchantPhoneVo");

  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("productImages", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DELIVERY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryStatus", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField REAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("realPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementStatus", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOrderByMerchantPhoneVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOrderByMerchantPhoneVoTupleSchemeFactory());
  }

  public String subOrderId; // required
  public List<String> productImages; // required
  public int quantity; // required
  public String orderStatus; // required
  public String memberName; // required
  public long createTime; // required
  public double subTotalMoney; // required
  /**
   * 大订单号
   */
  public String orderId; // required
  /**
   * 退款状态：1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款（2015-5-25 新增）
   */
  public String refundState; // required
  /**
   * 发货状态： 0.未发货，1.已发货，2.已收货，3.未提货，4.已提货
   */
  public String deliveryStatus; // required
  /**
   * 手机号码
   */
  public String phone; // required
  /**
   * 支付时间
   */
  public long paymentTime; // required
  /**
   * 消费总额
   */
  public double totalPrice; // required
  /**
   * 实际付款
   */
  public double realPrice; // required
  /**
   * 操作员ID
   */
  public long merchantUserId; // required
  /**
   * 操作员名
   */
  public String merchantUserName; // required
  /**
   * 结算状态 0:未结算 1:结算中  2:结算成功 3:结算失败
   */
  public String settlementStatus; // required
  /**
   * 门店ID
   */
  public String outletId; // required
  /**
   * 门店名称
   */
  public String outletName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ORDER_ID((short)1, "subOrderId"),
    PRODUCT_IMAGES((short)2, "productImages"),
    QUANTITY((short)3, "quantity"),
    ORDER_STATUS((short)4, "orderStatus"),
    MEMBER_NAME((short)5, "memberName"),
    CREATE_TIME((short)6, "createTime"),
    SUB_TOTAL_MONEY((short)7, "subTotalMoney"),
    /**
     * 大订单号
     */
    ORDER_ID((short)8, "orderId"),
    /**
     * 退款状态：1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款（2015-5-25 新增）
     */
    REFUND_STATE((short)9, "refundState"),
    /**
     * 发货状态： 0.未发货，1.已发货，2.已收货，3.未提货，4.已提货
     */
    DELIVERY_STATUS((short)10, "deliveryStatus"),
    /**
     * 手机号码
     */
    PHONE((short)11, "phone"),
    /**
     * 支付时间
     */
    PAYMENT_TIME((short)12, "paymentTime"),
    /**
     * 消费总额
     */
    TOTAL_PRICE((short)13, "totalPrice"),
    /**
     * 实际付款
     */
    REAL_PRICE((short)14, "realPrice"),
    /**
     * 操作员ID
     */
    MERCHANT_USER_ID((short)15, "merchantUserId"),
    /**
     * 操作员名
     */
    MERCHANT_USER_NAME((short)16, "merchantUserName"),
    /**
     * 结算状态 0:未结算 1:结算中  2:结算成功 3:结算失败
     */
    SETTLEMENT_STATUS((short)17, "settlementStatus"),
    /**
     * 门店ID
     */
    OUTLET_ID((short)18, "outletId"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)19, "outletName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 2: // PRODUCT_IMAGES
          return PRODUCT_IMAGES;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // ORDER_STATUS
          return ORDER_STATUS;
        case 5: // MEMBER_NAME
          return MEMBER_NAME;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 8: // ORDER_ID
          return ORDER_ID;
        case 9: // REFUND_STATE
          return REFUND_STATE;
        case 10: // DELIVERY_STATUS
          return DELIVERY_STATUS;
        case 11: // PHONE
          return PHONE;
        case 12: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 13: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 14: // REAL_PRICE
          return REAL_PRICE;
        case 15: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        case 16: // MERCHANT_USER_NAME
          return MERCHANT_USER_NAME;
        case 17: // SETTLEMENT_STATUS
          return SETTLEMENT_STATUS;
        case 18: // OUTLET_ID
          return OUTLET_ID;
        case 19: // OUTLET_NAME
          return OUTLET_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITY_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __SUBTOTALMONEY_ISSET_ID = 2;
  private static final int __PAYMENTTIME_ISSET_ID = 3;
  private static final int __TOTALPRICE_ISSET_ID = 4;
  private static final int __REALPRICE_ISSET_ID = 5;
  private static final int __MERCHANTUSERID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("productImages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("deliveryStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("realPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settlementStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryOrderByMerchantPhoneVo.class, metaDataMap);
  }

  public QueryOrderByMerchantPhoneVo() {
  }

  public QueryOrderByMerchantPhoneVo(
    String subOrderId,
    List<String> productImages,
    int quantity,
    String orderStatus,
    String memberName,
    long createTime,
    double subTotalMoney,
    String orderId,
    String refundState,
    String deliveryStatus,
    String phone,
    long paymentTime,
    double totalPrice,
    double realPrice,
    long merchantUserId,
    String merchantUserName,
    String settlementStatus,
    String outletId,
    String outletName)
  {
    this();
    this.subOrderId = subOrderId;
    this.productImages = productImages;
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.orderStatus = orderStatus;
    this.memberName = memberName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.orderId = orderId;
    this.refundState = refundState;
    this.deliveryStatus = deliveryStatus;
    this.phone = phone;
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    this.merchantUserName = merchantUserName;
    this.settlementStatus = settlementStatus;
    this.outletId = outletId;
    this.outletName = outletName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOrderByMerchantPhoneVo(QueryOrderByMerchantPhoneVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetProductImages()) {
      List<String> __this__productImages = new ArrayList<String>(other.productImages);
      this.productImages = __this__productImages;
    }
    this.quantity = other.quantity;
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    this.createTime = other.createTime;
    this.subTotalMoney = other.subTotalMoney;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    if (other.isSetDeliveryStatus()) {
      this.deliveryStatus = other.deliveryStatus;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    this.paymentTime = other.paymentTime;
    this.totalPrice = other.totalPrice;
    this.realPrice = other.realPrice;
    this.merchantUserId = other.merchantUserId;
    if (other.isSetMerchantUserName()) {
      this.merchantUserName = other.merchantUserName;
    }
    if (other.isSetSettlementStatus()) {
      this.settlementStatus = other.settlementStatus;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
  }

  public QueryOrderByMerchantPhoneVo deepCopy() {
    return new QueryOrderByMerchantPhoneVo(this);
  }

  @Override
  public void clear() {
    this.subOrderId = null;
    this.productImages = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.orderStatus = null;
    this.memberName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    this.orderId = null;
    this.refundState = null;
    this.deliveryStatus = null;
    this.phone = null;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setRealPriceIsSet(false);
    this.realPrice = 0.0;
    setMerchantUserIdIsSet(false);
    this.merchantUserId = 0;
    this.merchantUserName = null;
    this.settlementStatus = null;
    this.outletId = null;
    this.outletName = null;
  }

  public String getSubOrderId() {
    return this.subOrderId;
  }

  public QueryOrderByMerchantPhoneVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  public int getProductImagesSize() {
    return (this.productImages == null) ? 0 : this.productImages.size();
  }

  public java.util.Iterator<String> getProductImagesIterator() {
    return (this.productImages == null) ? null : this.productImages.iterator();
  }

  public void addToProductImages(String elem) {
    if (this.productImages == null) {
      this.productImages = new ArrayList<String>();
    }
    this.productImages.add(elem);
  }

  public List<String> getProductImages() {
    return this.productImages;
  }

  public QueryOrderByMerchantPhoneVo setProductImages(List<String> productImages) {
    this.productImages = productImages;
    return this;
  }

  public void unsetProductImages() {
    this.productImages = null;
  }

  /** Returns true if field productImages is set (has been assigned a value) and false otherwise */
  public boolean isSetProductImages() {
    return this.productImages != null;
  }

  public void setProductImagesIsSet(boolean value) {
    if (!value) {
      this.productImages = null;
    }
  }

  public int getQuantity() {
    return this.quantity;
  }

  public QueryOrderByMerchantPhoneVo setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public String getOrderStatus() {
    return this.orderStatus;
  }

  public QueryOrderByMerchantPhoneVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  public String getMemberName() {
    return this.memberName;
  }

  public QueryOrderByMerchantPhoneVo setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public QueryOrderByMerchantPhoneVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  public QueryOrderByMerchantPhoneVo setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 大订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 大订单号
   */
  public QueryOrderByMerchantPhoneVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 退款状态：1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款（2015-5-25 新增）
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 退款状态：1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款（2015-5-25 新增）
   */
  public QueryOrderByMerchantPhoneVo setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 发货状态： 0.未发货，1.已发货，2.已收货，3.未提货，4.已提货
   */
  public String getDeliveryStatus() {
    return this.deliveryStatus;
  }

  /**
   * 发货状态： 0.未发货，1.已发货，2.已收货，3.未提货，4.已提货
   */
  public QueryOrderByMerchantPhoneVo setDeliveryStatus(String deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
    return this;
  }

  public void unsetDeliveryStatus() {
    this.deliveryStatus = null;
  }

  /** Returns true if field deliveryStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryStatus() {
    return this.deliveryStatus != null;
  }

  public void setDeliveryStatusIsSet(boolean value) {
    if (!value) {
      this.deliveryStatus = null;
    }
  }

  /**
   * 手机号码
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 手机号码
   */
  public QueryOrderByMerchantPhoneVo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间
   */
  public QueryOrderByMerchantPhoneVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 消费总额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 消费总额
   */
  public QueryOrderByMerchantPhoneVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 实际付款
   */
  public double getRealPrice() {
    return this.realPrice;
  }

  /**
   * 实际付款
   */
  public QueryOrderByMerchantPhoneVo setRealPrice(double realPrice) {
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    return this;
  }

  public void unsetRealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  /** Returns true if field realPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  public void setRealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALPRICE_ISSET_ID, value);
  }

  /**
   * 操作员ID
   */
  public long getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 操作员ID
   */
  public QueryOrderByMerchantPhoneVo setMerchantUserId(long merchantUserId) {
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    return this;
  }

  public void unsetMerchantUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  public void setMerchantUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID, value);
  }

  /**
   * 操作员名
   */
  public String getMerchantUserName() {
    return this.merchantUserName;
  }

  /**
   * 操作员名
   */
  public QueryOrderByMerchantPhoneVo setMerchantUserName(String merchantUserName) {
    this.merchantUserName = merchantUserName;
    return this;
  }

  public void unsetMerchantUserName() {
    this.merchantUserName = null;
  }

  /** Returns true if field merchantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserName() {
    return this.merchantUserName != null;
  }

  public void setMerchantUserNameIsSet(boolean value) {
    if (!value) {
      this.merchantUserName = null;
    }
  }

  /**
   * 结算状态 0:未结算 1:结算中  2:结算成功 3:结算失败
   */
  public String getSettlementStatus() {
    return this.settlementStatus;
  }

  /**
   * 结算状态 0:未结算 1:结算中  2:结算成功 3:结算失败
   */
  public QueryOrderByMerchantPhoneVo setSettlementStatus(String settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

  public void unsetSettlementStatus() {
    this.settlementStatus = null;
  }

  /** Returns true if field settlementStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementStatus() {
    return this.settlementStatus != null;
  }

  public void setSettlementStatusIsSet(boolean value) {
    if (!value) {
      this.settlementStatus = null;
    }
  }

  /**
   * 门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店ID
   */
  public QueryOrderByMerchantPhoneVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public QueryOrderByMerchantPhoneVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case PRODUCT_IMAGES:
      if (value == null) {
        unsetProductImages();
      } else {
        setProductImages((List<String>)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case DELIVERY_STATUS:
      if (value == null) {
        unsetDeliveryStatus();
      } else {
        setDeliveryStatus((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case REAL_PRICE:
      if (value == null) {
        unsetRealPrice();
      } else {
        setRealPrice((Double)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((Long)value);
      }
      break;

    case MERCHANT_USER_NAME:
      if (value == null) {
        unsetMerchantUserName();
      } else {
        setMerchantUserName((String)value);
      }
      break;

    case SETTLEMENT_STATUS:
      if (value == null) {
        unsetSettlementStatus();
      } else {
        setSettlementStatus((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ORDER_ID:
      return getSubOrderId();

    case PRODUCT_IMAGES:
      return getProductImages();

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case ORDER_STATUS:
      return getOrderStatus();

    case MEMBER_NAME:
      return getMemberName();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case ORDER_ID:
      return getOrderId();

    case REFUND_STATE:
      return getRefundState();

    case DELIVERY_STATUS:
      return getDeliveryStatus();

    case PHONE:
      return getPhone();

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case REAL_PRICE:
      return Double.valueOf(getRealPrice());

    case MERCHANT_USER_ID:
      return Long.valueOf(getMerchantUserId());

    case MERCHANT_USER_NAME:
      return getMerchantUserName();

    case SETTLEMENT_STATUS:
      return getSettlementStatus();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case PRODUCT_IMAGES:
      return isSetProductImages();
    case QUANTITY:
      return isSetQuantity();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case MEMBER_NAME:
      return isSetMemberName();
    case CREATE_TIME:
      return isSetCreateTime();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case ORDER_ID:
      return isSetOrderId();
    case REFUND_STATE:
      return isSetRefundState();
    case DELIVERY_STATUS:
      return isSetDeliveryStatus();
    case PHONE:
      return isSetPhone();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case REAL_PRICE:
      return isSetRealPrice();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    case MERCHANT_USER_NAME:
      return isSetMerchantUserName();
    case SETTLEMENT_STATUS:
      return isSetSettlementStatus();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOrderByMerchantPhoneVo)
      return this.equals((QueryOrderByMerchantPhoneVo)that);
    return false;
  }

  public boolean equals(QueryOrderByMerchantPhoneVo that) {
    if (that == null)
      return false;

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_productImages = true && this.isSetProductImages();
    boolean that_present_productImages = true && that.isSetProductImages();
    if (this_present_productImages || that_present_productImages) {
      if (!(this_present_productImages && that_present_productImages))
        return false;
      if (!this.productImages.equals(that.productImages))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_deliveryStatus = true && this.isSetDeliveryStatus();
    boolean that_present_deliveryStatus = true && that.isSetDeliveryStatus();
    if (this_present_deliveryStatus || that_present_deliveryStatus) {
      if (!(this_present_deliveryStatus && that_present_deliveryStatus))
        return false;
      if (!this.deliveryStatus.equals(that.deliveryStatus))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_realPrice = true;
    boolean that_present_realPrice = true;
    if (this_present_realPrice || that_present_realPrice) {
      if (!(this_present_realPrice && that_present_realPrice))
        return false;
      if (this.realPrice != that.realPrice)
        return false;
    }

    boolean this_present_merchantUserId = true;
    boolean that_present_merchantUserId = true;
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (this.merchantUserId != that.merchantUserId)
        return false;
    }

    boolean this_present_merchantUserName = true && this.isSetMerchantUserName();
    boolean that_present_merchantUserName = true && that.isSetMerchantUserName();
    if (this_present_merchantUserName || that_present_merchantUserName) {
      if (!(this_present_merchantUserName && that_present_merchantUserName))
        return false;
      if (!this.merchantUserName.equals(that.merchantUserName))
        return false;
    }

    boolean this_present_settlementStatus = true && this.isSetSettlementStatus();
    boolean that_present_settlementStatus = true && that.isSetSettlementStatus();
    if (this_present_settlementStatus || that_present_settlementStatus) {
      if (!(this_present_settlementStatus && that_present_settlementStatus))
        return false;
      if (!this.settlementStatus.equals(that.settlementStatus))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_productImages = true && (isSetProductImages());
    list.add(present_productImages);
    if (present_productImages)
      list.add(productImages);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_deliveryStatus = true && (isSetDeliveryStatus());
    list.add(present_deliveryStatus);
    if (present_deliveryStatus)
      list.add(deliveryStatus);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_realPrice = true;
    list.add(present_realPrice);
    if (present_realPrice)
      list.add(realPrice);

    boolean present_merchantUserId = true;
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    boolean present_merchantUserName = true && (isSetMerchantUserName());
    list.add(present_merchantUserName);
    if (present_merchantUserName)
      list.add(merchantUserName);

    boolean present_settlementStatus = true && (isSetSettlementStatus());
    list.add(present_settlementStatus);
    if (present_settlementStatus)
      list.add(settlementStatus);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryOrderByMerchantPhoneVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductImages()).compareTo(other.isSetProductImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productImages, other.productImages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryStatus()).compareTo(other.isSetDeliveryStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryStatus, other.deliveryStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealPrice()).compareTo(other.isSetRealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realPrice, other.realPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserName()).compareTo(other.isSetMerchantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserName, other.merchantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementStatus()).compareTo(other.isSetSettlementStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementStatus, other.settlementStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOrderByMerchantPhoneVo(");
    boolean first = true;

    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productImages:");
    if (this.productImages == null) {
      sb.append("null");
    } else {
      sb.append(this.productImages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryStatus:");
    if (this.deliveryStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realPrice:");
    sb.append(this.realPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    sb.append(this.merchantUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserName:");
    if (this.merchantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementStatus:");
    if (this.settlementStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOrderByMerchantPhoneVoStandardSchemeFactory implements SchemeFactory {
    public QueryOrderByMerchantPhoneVoStandardScheme getScheme() {
      return new QueryOrderByMerchantPhoneVoStandardScheme();
    }
  }

  private static class QueryOrderByMerchantPhoneVoStandardScheme extends StandardScheme<QueryOrderByMerchantPhoneVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryOrderByMerchantPhoneVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.productImages = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.productImages.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setProductImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELIVERY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryStatus = iprot.readString();
              struct.setDeliveryStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realPrice = iprot.readDouble();
              struct.setRealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantUserId = iprot.readI64();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MERCHANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantUserName = iprot.readString();
              struct.setMerchantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SETTLEMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementStatus = iprot.readString();
              struct.setSettlementStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryOrderByMerchantPhoneVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.productImages != null) {
        oprot.writeFieldBegin(PRODUCT_IMAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.productImages.size()));
          for (String _iter3 : struct.productImages)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryStatus != null) {
        oprot.writeFieldBegin(DELIVERY_STATUS_FIELD_DESC);
        oprot.writeString(struct.deliveryStatus);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.realPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantUserId);
      oprot.writeFieldEnd();
      if (struct.merchantUserName != null) {
        oprot.writeFieldBegin(MERCHANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantUserName);
        oprot.writeFieldEnd();
      }
      if (struct.settlementStatus != null) {
        oprot.writeFieldBegin(SETTLEMENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.settlementStatus);
        oprot.writeFieldEnd();
      }
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOrderByMerchantPhoneVoTupleSchemeFactory implements SchemeFactory {
    public QueryOrderByMerchantPhoneVoTupleScheme getScheme() {
      return new QueryOrderByMerchantPhoneVoTupleScheme();
    }
  }

  private static class QueryOrderByMerchantPhoneVoTupleScheme extends TupleScheme<QueryOrderByMerchantPhoneVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryOrderByMerchantPhoneVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetProductImages()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(3);
      }
      if (struct.isSetMemberName()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(6);
      }
      if (struct.isSetOrderId()) {
        optionals.set(7);
      }
      if (struct.isSetRefundState()) {
        optionals.set(8);
      }
      if (struct.isSetDeliveryStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPhone()) {
        optionals.set(10);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(11);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(12);
      }
      if (struct.isSetRealPrice()) {
        optionals.set(13);
      }
      if (struct.isSetMerchantUserId()) {
        optionals.set(14);
      }
      if (struct.isSetMerchantUserName()) {
        optionals.set(15);
      }
      if (struct.isSetSettlementStatus()) {
        optionals.set(16);
      }
      if (struct.isSetOutletId()) {
        optionals.set(17);
      }
      if (struct.isSetOutletName()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetProductImages()) {
        {
          oprot.writeI32(struct.productImages.size());
          for (String _iter4 : struct.productImages)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetDeliveryStatus()) {
        oprot.writeString(struct.deliveryStatus);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetRealPrice()) {
        oprot.writeDouble(struct.realPrice);
      }
      if (struct.isSetMerchantUserId()) {
        oprot.writeI64(struct.merchantUserId);
      }
      if (struct.isSetMerchantUserName()) {
        oprot.writeString(struct.merchantUserName);
      }
      if (struct.isSetSettlementStatus()) {
        oprot.writeString(struct.settlementStatus);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryOrderByMerchantPhoneVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.productImages = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.productImages.add(_elem6);
          }
        }
        struct.setProductImagesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deliveryStatus = iprot.readString();
        struct.setDeliveryStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.realPrice = iprot.readDouble();
        struct.setRealPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.merchantUserId = iprot.readI64();
        struct.setMerchantUserIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.merchantUserName = iprot.readString();
        struct.setMerchantUserNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.settlementStatus = iprot.readString();
        struct.setSettlementStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
    }
  }

}

