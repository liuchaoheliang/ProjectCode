/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 1.创建秒杀订单请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AddSeckillOrderVoReq implements org.apache.thrift.TBase<AddSeckillOrderVoReq, AddSeckillOrderVoReq._Fields>, java.io.Serializable, Cloneable, Comparable<AddSeckillOrderVoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSeckillOrderVoReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("productImage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VIP_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField VIP_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipQuantity", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField POINT_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pointOrgNo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CASH_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cashOrgNo", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CASH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField POINT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField CASH_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField FOIL_CARD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("foilCardNum", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ADD_DELIVERY_INFO_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addDeliveryInfoVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddSeckillOrderVoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddSeckillOrderVoReqTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 会员号
   */
  public long memberCode; // required
  /**
   * 会员名称
   */
  public String memberName; // required
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 请求号
   */
  public String reqId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 商品图片
   */
  public String productImage; // required
  /**
   * 商品类型
   */
  public String productType; // required
  /**
   * 普通价
   */
  public double money; // required
  /**
   * 普通价购买数量
   */
  public int quantity; // required
  /**
   * VIP价：没有就传0
   */
  public double vipMoney; // required
  /**
   * VIP价购买数量：没有就传0
   */
  public int vipQuantity; // required
  /**
   * 运费
   */
  public double deliveryMoney; // required
  /**
   * 备注
   */
  public String remark; // optional
  /**
   * 积分机构号
   */
  public String pointOrgNo; // optional
  /**
   * 现金机构号
   */
  public String cashOrgNo; // optional
  /**
   * 支付类型
   */
  public int payType; // optional
  /**
   * 现金支付类型
   */
  public int cashType; // optional
  /**
   * 积分值
   */
  public double pointAmount; // optional
  /**
   * 现金值
   */
  public double cashAmount; // optional
  /**
   * 贴膜卡号码
   */
  public String foilCardNum; // optional
  public String token; // optional
  /**
   * 商品默认配送方式
   */
  public String deliveryOption; // required
  /**
   * 补全收货信息
   */
  public AddDeliveryInfoVoReq addDeliveryInfoVoReq; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 会员名称
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)4, "createSource"),
    /**
     * 请求号
     */
    REQ_ID((short)5, "reqId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)6, "merchantId"),
    /**
     * 商品ID
     */
    PRODUCT_ID((short)7, "productId"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)8, "productName"),
    /**
     * 商品图片
     */
    PRODUCT_IMAGE((short)9, "productImage"),
    /**
     * 商品类型
     */
    PRODUCT_TYPE((short)10, "productType"),
    /**
     * 普通价
     */
    MONEY((short)11, "money"),
    /**
     * 普通价购买数量
     */
    QUANTITY((short)12, "quantity"),
    /**
     * VIP价：没有就传0
     */
    VIP_MONEY((short)13, "vipMoney"),
    /**
     * VIP价购买数量：没有就传0
     */
    VIP_QUANTITY((short)14, "vipQuantity"),
    /**
     * 运费
     */
    DELIVERY_MONEY((short)15, "deliveryMoney"),
    /**
     * 备注
     */
    REMARK((short)16, "remark"),
    /**
     * 积分机构号
     */
    POINT_ORG_NO((short)17, "pointOrgNo"),
    /**
     * 现金机构号
     */
    CASH_ORG_NO((short)18, "cashOrgNo"),
    /**
     * 支付类型
     */
    PAY_TYPE((short)19, "payType"),
    /**
     * 现金支付类型
     */
    CASH_TYPE((short)20, "cashType"),
    /**
     * 积分值
     */
    POINT_AMOUNT((short)21, "pointAmount"),
    /**
     * 现金值
     */
    CASH_AMOUNT((short)22, "cashAmount"),
    /**
     * 贴膜卡号码
     */
    FOIL_CARD_NUM((short)23, "foilCardNum"),
    TOKEN((short)24, "token"),
    /**
     * 商品默认配送方式
     */
    DELIVERY_OPTION((short)25, "deliveryOption"),
    /**
     * 补全收货信息
     */
    ADD_DELIVERY_INFO_VO_REQ((short)26, "addDeliveryInfoVoReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 5: // REQ_ID
          return REQ_ID;
        case 6: // MERCHANT_ID
          return MERCHANT_ID;
        case 7: // PRODUCT_ID
          return PRODUCT_ID;
        case 8: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 9: // PRODUCT_IMAGE
          return PRODUCT_IMAGE;
        case 10: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 11: // MONEY
          return MONEY;
        case 12: // QUANTITY
          return QUANTITY;
        case 13: // VIP_MONEY
          return VIP_MONEY;
        case 14: // VIP_QUANTITY
          return VIP_QUANTITY;
        case 15: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 16: // REMARK
          return REMARK;
        case 17: // POINT_ORG_NO
          return POINT_ORG_NO;
        case 18: // CASH_ORG_NO
          return CASH_ORG_NO;
        case 19: // PAY_TYPE
          return PAY_TYPE;
        case 20: // CASH_TYPE
          return CASH_TYPE;
        case 21: // POINT_AMOUNT
          return POINT_AMOUNT;
        case 22: // CASH_AMOUNT
          return CASH_AMOUNT;
        case 23: // FOIL_CARD_NUM
          return FOIL_CARD_NUM;
        case 24: // TOKEN
          return TOKEN;
        case 25: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 26: // ADD_DELIVERY_INFO_VO_REQ
          return ADD_DELIVERY_INFO_VO_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private static final int __QUANTITY_ISSET_ID = 2;
  private static final int __VIPMONEY_ISSET_ID = 3;
  private static final int __VIPQUANTITY_ISSET_ID = 4;
  private static final int __DELIVERYMONEY_ISSET_ID = 5;
  private static final int __PAYTYPE_ISSET_ID = 6;
  private static final int __CASHTYPE_ISSET_ID = 7;
  private static final int __POINTAMOUNT_ISSET_ID = 8;
  private static final int __CASHAMOUNT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REMARK,_Fields.POINT_ORG_NO,_Fields.CASH_ORG_NO,_Fields.PAY_TYPE,_Fields.CASH_TYPE,_Fields.POINT_AMOUNT,_Fields.CASH_AMOUNT,_Fields.FOIL_CARD_NUM,_Fields.TOKEN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("productImage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipMoney", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("vipQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("pointOrgNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("cashOrgNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CASH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cashType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("pointAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("cashAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FOIL_CARD_NUM, new org.apache.thrift.meta_data.FieldMetaData("foilCardNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_DELIVERY_INFO_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addDeliveryInfoVoReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "AddDeliveryInfoVoReq")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSeckillOrderVoReq.class, metaDataMap);
  }

  public AddSeckillOrderVoReq() {
  }

  public AddSeckillOrderVoReq(
    String clientId,
    long memberCode,
    String memberName,
    String createSource,
    String reqId,
    String merchantId,
    String productId,
    String productName,
    String productImage,
    String productType,
    double money,
    int quantity,
    double vipMoney,
    int vipQuantity,
    double deliveryMoney,
    String deliveryOption,
    AddDeliveryInfoVoReq addDeliveryInfoVoReq)
  {
    this();
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberName = memberName;
    this.createSource = createSource;
    this.reqId = reqId;
    this.merchantId = merchantId;
    this.productId = productId;
    this.productName = productName;
    this.productImage = productImage;
    this.productType = productType;
    this.money = money;
    setMoneyIsSet(true);
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    this.deliveryOption = deliveryOption;
    this.addDeliveryInfoVoReq = addDeliveryInfoVoReq;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddSeckillOrderVoReq(AddSeckillOrderVoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetReqId()) {
      this.reqId = other.reqId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetProductImage()) {
      this.productImage = other.productImage;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    this.money = other.money;
    this.quantity = other.quantity;
    this.vipMoney = other.vipMoney;
    this.vipQuantity = other.vipQuantity;
    this.deliveryMoney = other.deliveryMoney;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPointOrgNo()) {
      this.pointOrgNo = other.pointOrgNo;
    }
    if (other.isSetCashOrgNo()) {
      this.cashOrgNo = other.cashOrgNo;
    }
    this.payType = other.payType;
    this.cashType = other.cashType;
    this.pointAmount = other.pointAmount;
    this.cashAmount = other.cashAmount;
    if (other.isSetFoilCardNum()) {
      this.foilCardNum = other.foilCardNum;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    if (other.isSetAddDeliveryInfoVoReq()) {
      this.addDeliveryInfoVoReq = other.addDeliveryInfoVoReq;
    }
  }

  public AddSeckillOrderVoReq deepCopy() {
    return new AddSeckillOrderVoReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.memberName = null;
    this.createSource = null;
    this.reqId = null;
    this.merchantId = null;
    this.productId = null;
    this.productName = null;
    this.productImage = null;
    this.productType = null;
    setMoneyIsSet(false);
    this.money = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    setVipMoneyIsSet(false);
    this.vipMoney = 0.0;
    setVipQuantityIsSet(false);
    this.vipQuantity = 0;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    this.remark = null;
    this.pointOrgNo = null;
    this.cashOrgNo = null;
    setPayTypeIsSet(false);
    this.payType = 0;
    setCashTypeIsSet(false);
    this.cashType = 0;
    setPointAmountIsSet(false);
    this.pointAmount = 0.0;
    setCashAmountIsSet(false);
    this.cashAmount = 0.0;
    this.foilCardNum = null;
    this.token = null;
    this.deliveryOption = null;
    this.addDeliveryInfoVoReq = null;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public AddSeckillOrderVoReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 会员号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public AddSeckillOrderVoReq setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 会员名称
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名称
   */
  public AddSeckillOrderVoReq setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public AddSeckillOrderVoReq setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 请求号
   */
  public String getReqId() {
    return this.reqId;
  }

  /**
   * 请求号
   */
  public AddSeckillOrderVoReq setReqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

  public void unsetReqId() {
    this.reqId = null;
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return this.reqId != null;
  }

  public void setReqIdIsSet(boolean value) {
    if (!value) {
      this.reqId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public AddSeckillOrderVoReq setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public AddSeckillOrderVoReq setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public AddSeckillOrderVoReq setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品图片
   */
  public String getProductImage() {
    return this.productImage;
  }

  /**
   * 商品图片
   */
  public AddSeckillOrderVoReq setProductImage(String productImage) {
    this.productImage = productImage;
    return this;
  }

  public void unsetProductImage() {
    this.productImage = null;
  }

  /** Returns true if field productImage is set (has been assigned a value) and false otherwise */
  public boolean isSetProductImage() {
    return this.productImage != null;
  }

  public void setProductImageIsSet(boolean value) {
    if (!value) {
      this.productImage = null;
    }
  }

  /**
   * 商品类型
   */
  public String getProductType() {
    return this.productType;
  }

  /**
   * 商品类型
   */
  public AddSeckillOrderVoReq setProductType(String productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  /**
   * 普通价
   */
  public double getMoney() {
    return this.money;
  }

  /**
   * 普通价
   */
  public AddSeckillOrderVoReq setMoney(double money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  /**
   * 普通价购买数量
   */
  public int getQuantity() {
    return this.quantity;
  }

  /**
   * 普通价购买数量
   */
  public AddSeckillOrderVoReq setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * VIP价：没有就传0
   */
  public double getVipMoney() {
    return this.vipMoney;
  }

  /**
   * VIP价：没有就传0
   */
  public AddSeckillOrderVoReq setVipMoney(double vipMoney) {
    this.vipMoney = vipMoney;
    setVipMoneyIsSet(true);
    return this;
  }

  public void unsetVipMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  /** Returns true if field vipMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPMONEY_ISSET_ID);
  }

  public void setVipMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPMONEY_ISSET_ID, value);
  }

  /**
   * VIP价购买数量：没有就传0
   */
  public int getVipQuantity() {
    return this.vipQuantity;
  }

  /**
   * VIP价购买数量：没有就传0
   */
  public AddSeckillOrderVoReq setVipQuantity(int vipQuantity) {
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    return this;
  }

  public void unsetVipQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  /** Returns true if field vipQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetVipQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  public void setVipQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID, value);
  }

  /**
   * 运费
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费
   */
  public AddSeckillOrderVoReq setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public AddSeckillOrderVoReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 积分机构号
   */
  public String getPointOrgNo() {
    return this.pointOrgNo;
  }

  /**
   * 积分机构号
   */
  public AddSeckillOrderVoReq setPointOrgNo(String pointOrgNo) {
    this.pointOrgNo = pointOrgNo;
    return this;
  }

  public void unsetPointOrgNo() {
    this.pointOrgNo = null;
  }

  /** Returns true if field pointOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPointOrgNo() {
    return this.pointOrgNo != null;
  }

  public void setPointOrgNoIsSet(boolean value) {
    if (!value) {
      this.pointOrgNo = null;
    }
  }

  /**
   * 现金机构号
   */
  public String getCashOrgNo() {
    return this.cashOrgNo;
  }

  /**
   * 现金机构号
   */
  public AddSeckillOrderVoReq setCashOrgNo(String cashOrgNo) {
    this.cashOrgNo = cashOrgNo;
    return this;
  }

  public void unsetCashOrgNo() {
    this.cashOrgNo = null;
  }

  /** Returns true if field cashOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCashOrgNo() {
    return this.cashOrgNo != null;
  }

  public void setCashOrgNoIsSet(boolean value) {
    if (!value) {
      this.cashOrgNo = null;
    }
  }

  /**
   * 支付类型
   */
  public int getPayType() {
    return this.payType;
  }

  /**
   * 支付类型
   */
  public AddSeckillOrderVoReq setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  /**
   * 现金支付类型
   */
  public int getCashType() {
    return this.cashType;
  }

  /**
   * 现金支付类型
   */
  public AddSeckillOrderVoReq setCashType(int cashType) {
    this.cashType = cashType;
    setCashTypeIsSet(true);
    return this;
  }

  public void unsetCashType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHTYPE_ISSET_ID);
  }

  /** Returns true if field cashType is set (has been assigned a value) and false otherwise */
  public boolean isSetCashType() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHTYPE_ISSET_ID);
  }

  public void setCashTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHTYPE_ISSET_ID, value);
  }

  /**
   * 积分值
   */
  public double getPointAmount() {
    return this.pointAmount;
  }

  /**
   * 积分值
   */
  public AddSeckillOrderVoReq setPointAmount(double pointAmount) {
    this.pointAmount = pointAmount;
    setPointAmountIsSet(true);
    return this;
  }

  public void unsetPointAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID);
  }

  /** Returns true if field pointAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPointAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID);
  }

  public void setPointAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID, value);
  }

  /**
   * 现金值
   */
  public double getCashAmount() {
    return this.cashAmount;
  }

  /**
   * 现金值
   */
  public AddSeckillOrderVoReq setCashAmount(double cashAmount) {
    this.cashAmount = cashAmount;
    setCashAmountIsSet(true);
    return this;
  }

  public void unsetCashAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  /** Returns true if field cashAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCashAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  public void setCashAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID, value);
  }

  /**
   * 贴膜卡号码
   */
  public String getFoilCardNum() {
    return this.foilCardNum;
  }

  /**
   * 贴膜卡号码
   */
  public AddSeckillOrderVoReq setFoilCardNum(String foilCardNum) {
    this.foilCardNum = foilCardNum;
    return this;
  }

  public void unsetFoilCardNum() {
    this.foilCardNum = null;
  }

  /** Returns true if field foilCardNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFoilCardNum() {
    return this.foilCardNum != null;
  }

  public void setFoilCardNumIsSet(boolean value) {
    if (!value) {
      this.foilCardNum = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public AddSeckillOrderVoReq setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * 商品默认配送方式
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 商品默认配送方式
   */
  public AddSeckillOrderVoReq setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 补全收货信息
   */
  public AddDeliveryInfoVoReq getAddDeliveryInfoVoReq() {
    return this.addDeliveryInfoVoReq;
  }

  /**
   * 补全收货信息
   */
  public AddSeckillOrderVoReq setAddDeliveryInfoVoReq(AddDeliveryInfoVoReq addDeliveryInfoVoReq) {
    this.addDeliveryInfoVoReq = addDeliveryInfoVoReq;
    return this;
  }

  public void unsetAddDeliveryInfoVoReq() {
    this.addDeliveryInfoVoReq = null;
  }

  /** Returns true if field addDeliveryInfoVoReq is set (has been assigned a value) and false otherwise */
  public boolean isSetAddDeliveryInfoVoReq() {
    return this.addDeliveryInfoVoReq != null;
  }

  public void setAddDeliveryInfoVoReqIsSet(boolean value) {
    if (!value) {
      this.addDeliveryInfoVoReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_IMAGE:
      if (value == null) {
        unsetProductImage();
      } else {
        setProductImage((String)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case VIP_MONEY:
      if (value == null) {
        unsetVipMoney();
      } else {
        setVipMoney((Double)value);
      }
      break;

    case VIP_QUANTITY:
      if (value == null) {
        unsetVipQuantity();
      } else {
        setVipQuantity((Integer)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case POINT_ORG_NO:
      if (value == null) {
        unsetPointOrgNo();
      } else {
        setPointOrgNo((String)value);
      }
      break;

    case CASH_ORG_NO:
      if (value == null) {
        unsetCashOrgNo();
      } else {
        setCashOrgNo((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case CASH_TYPE:
      if (value == null) {
        unsetCashType();
      } else {
        setCashType((Integer)value);
      }
      break;

    case POINT_AMOUNT:
      if (value == null) {
        unsetPointAmount();
      } else {
        setPointAmount((Double)value);
      }
      break;

    case CASH_AMOUNT:
      if (value == null) {
        unsetCashAmount();
      } else {
        setCashAmount((Double)value);
      }
      break;

    case FOIL_CARD_NUM:
      if (value == null) {
        unsetFoilCardNum();
      } else {
        setFoilCardNum((String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case ADD_DELIVERY_INFO_VO_REQ:
      if (value == null) {
        unsetAddDeliveryInfoVoReq();
      } else {
        setAddDeliveryInfoVoReq((AddDeliveryInfoVoReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_NAME:
      return getMemberName();

    case CREATE_SOURCE:
      return getCreateSource();

    case REQ_ID:
      return getReqId();

    case MERCHANT_ID:
      return getMerchantId();

    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_IMAGE:
      return getProductImage();

    case PRODUCT_TYPE:
      return getProductType();

    case MONEY:
      return Double.valueOf(getMoney());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case VIP_MONEY:
      return Double.valueOf(getVipMoney());

    case VIP_QUANTITY:
      return Integer.valueOf(getVipQuantity());

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case REMARK:
      return getRemark();

    case POINT_ORG_NO:
      return getPointOrgNo();

    case CASH_ORG_NO:
      return getCashOrgNo();

    case PAY_TYPE:
      return Integer.valueOf(getPayType());

    case CASH_TYPE:
      return Integer.valueOf(getCashType());

    case POINT_AMOUNT:
      return Double.valueOf(getPointAmount());

    case CASH_AMOUNT:
      return Double.valueOf(getCashAmount());

    case FOIL_CARD_NUM:
      return getFoilCardNum();

    case TOKEN:
      return getToken();

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case ADD_DELIVERY_INFO_VO_REQ:
      return getAddDeliveryInfoVoReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case REQ_ID:
      return isSetReqId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_IMAGE:
      return isSetProductImage();
    case PRODUCT_TYPE:
      return isSetProductType();
    case MONEY:
      return isSetMoney();
    case QUANTITY:
      return isSetQuantity();
    case VIP_MONEY:
      return isSetVipMoney();
    case VIP_QUANTITY:
      return isSetVipQuantity();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case REMARK:
      return isSetRemark();
    case POINT_ORG_NO:
      return isSetPointOrgNo();
    case CASH_ORG_NO:
      return isSetCashOrgNo();
    case PAY_TYPE:
      return isSetPayType();
    case CASH_TYPE:
      return isSetCashType();
    case POINT_AMOUNT:
      return isSetPointAmount();
    case CASH_AMOUNT:
      return isSetCashAmount();
    case FOIL_CARD_NUM:
      return isSetFoilCardNum();
    case TOKEN:
      return isSetToken();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case ADD_DELIVERY_INFO_VO_REQ:
      return isSetAddDeliveryInfoVoReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddSeckillOrderVoReq)
      return this.equals((AddSeckillOrderVoReq)that);
    return false;
  }

  public boolean equals(AddSeckillOrderVoReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_reqId = true && this.isSetReqId();
    boolean that_present_reqId = true && that.isSetReqId();
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (!this.reqId.equals(that.reqId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productImage = true && this.isSetProductImage();
    boolean that_present_productImage = true && that.isSetProductImage();
    if (this_present_productImage || that_present_productImage) {
      if (!(this_present_productImage && that_present_productImage))
        return false;
      if (!this.productImage.equals(that.productImage))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_vipMoney = true;
    boolean that_present_vipMoney = true;
    if (this_present_vipMoney || that_present_vipMoney) {
      if (!(this_present_vipMoney && that_present_vipMoney))
        return false;
      if (this.vipMoney != that.vipMoney)
        return false;
    }

    boolean this_present_vipQuantity = true;
    boolean that_present_vipQuantity = true;
    if (this_present_vipQuantity || that_present_vipQuantity) {
      if (!(this_present_vipQuantity && that_present_vipQuantity))
        return false;
      if (this.vipQuantity != that.vipQuantity)
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_pointOrgNo = true && this.isSetPointOrgNo();
    boolean that_present_pointOrgNo = true && that.isSetPointOrgNo();
    if (this_present_pointOrgNo || that_present_pointOrgNo) {
      if (!(this_present_pointOrgNo && that_present_pointOrgNo))
        return false;
      if (!this.pointOrgNo.equals(that.pointOrgNo))
        return false;
    }

    boolean this_present_cashOrgNo = true && this.isSetCashOrgNo();
    boolean that_present_cashOrgNo = true && that.isSetCashOrgNo();
    if (this_present_cashOrgNo || that_present_cashOrgNo) {
      if (!(this_present_cashOrgNo && that_present_cashOrgNo))
        return false;
      if (!this.cashOrgNo.equals(that.cashOrgNo))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_cashType = true && this.isSetCashType();
    boolean that_present_cashType = true && that.isSetCashType();
    if (this_present_cashType || that_present_cashType) {
      if (!(this_present_cashType && that_present_cashType))
        return false;
      if (this.cashType != that.cashType)
        return false;
    }

    boolean this_present_pointAmount = true && this.isSetPointAmount();
    boolean that_present_pointAmount = true && that.isSetPointAmount();
    if (this_present_pointAmount || that_present_pointAmount) {
      if (!(this_present_pointAmount && that_present_pointAmount))
        return false;
      if (this.pointAmount != that.pointAmount)
        return false;
    }

    boolean this_present_cashAmount = true && this.isSetCashAmount();
    boolean that_present_cashAmount = true && that.isSetCashAmount();
    if (this_present_cashAmount || that_present_cashAmount) {
      if (!(this_present_cashAmount && that_present_cashAmount))
        return false;
      if (this.cashAmount != that.cashAmount)
        return false;
    }

    boolean this_present_foilCardNum = true && this.isSetFoilCardNum();
    boolean that_present_foilCardNum = true && that.isSetFoilCardNum();
    if (this_present_foilCardNum || that_present_foilCardNum) {
      if (!(this_present_foilCardNum && that_present_foilCardNum))
        return false;
      if (!this.foilCardNum.equals(that.foilCardNum))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_addDeliveryInfoVoReq = true && this.isSetAddDeliveryInfoVoReq();
    boolean that_present_addDeliveryInfoVoReq = true && that.isSetAddDeliveryInfoVoReq();
    if (this_present_addDeliveryInfoVoReq || that_present_addDeliveryInfoVoReq) {
      if (!(this_present_addDeliveryInfoVoReq && that_present_addDeliveryInfoVoReq))
        return false;
      if (!this.addDeliveryInfoVoReq.equals(that.addDeliveryInfoVoReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_reqId = true && (isSetReqId());
    list.add(present_reqId);
    if (present_reqId)
      list.add(reqId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productImage = true && (isSetProductImage());
    list.add(present_productImage);
    if (present_productImage)
      list.add(productImage);

    boolean present_productType = true && (isSetProductType());
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_money = true;
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_vipMoney = true;
    list.add(present_vipMoney);
    if (present_vipMoney)
      list.add(vipMoney);

    boolean present_vipQuantity = true;
    list.add(present_vipQuantity);
    if (present_vipQuantity)
      list.add(vipQuantity);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_pointOrgNo = true && (isSetPointOrgNo());
    list.add(present_pointOrgNo);
    if (present_pointOrgNo)
      list.add(pointOrgNo);

    boolean present_cashOrgNo = true && (isSetCashOrgNo());
    list.add(present_cashOrgNo);
    if (present_cashOrgNo)
      list.add(cashOrgNo);

    boolean present_payType = true && (isSetPayType());
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    boolean present_cashType = true && (isSetCashType());
    list.add(present_cashType);
    if (present_cashType)
      list.add(cashType);

    boolean present_pointAmount = true && (isSetPointAmount());
    list.add(present_pointAmount);
    if (present_pointAmount)
      list.add(pointAmount);

    boolean present_cashAmount = true && (isSetCashAmount());
    list.add(present_cashAmount);
    if (present_cashAmount)
      list.add(cashAmount);

    boolean present_foilCardNum = true && (isSetFoilCardNum());
    list.add(present_foilCardNum);
    if (present_foilCardNum)
      list.add(foilCardNum);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_addDeliveryInfoVoReq = true && (isSetAddDeliveryInfoVoReq());
    list.add(present_addDeliveryInfoVoReq);
    if (present_addDeliveryInfoVoReq)
      list.add(addDeliveryInfoVoReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddSeckillOrderVoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductImage()).compareTo(other.isSetProductImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productImage, other.productImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipMoney()).compareTo(other.isSetVipMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipMoney, other.vipMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipQuantity()).compareTo(other.isSetVipQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipQuantity, other.vipQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointOrgNo()).compareTo(other.isSetPointOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointOrgNo, other.pointOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashOrgNo()).compareTo(other.isSetCashOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashOrgNo, other.cashOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashType()).compareTo(other.isSetCashType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashType, other.cashType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointAmount()).compareTo(other.isSetPointAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointAmount, other.pointAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashAmount()).compareTo(other.isSetCashAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashAmount, other.cashAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoilCardNum()).compareTo(other.isSetFoilCardNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoilCardNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foilCardNum, other.foilCardNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddDeliveryInfoVoReq()).compareTo(other.isSetAddDeliveryInfoVoReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddDeliveryInfoVoReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addDeliveryInfoVoReq, other.addDeliveryInfoVoReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddSeckillOrderVoReq(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqId:");
    if (this.reqId == null) {
      sb.append("null");
    } else {
      sb.append(this.reqId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productImage:");
    if (this.productImage == null) {
      sb.append("null");
    } else {
      sb.append(this.productImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipMoney:");
    sb.append(this.vipMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipQuantity:");
    sb.append(this.vipQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetPointOrgNo()) {
      if (!first) sb.append(", ");
      sb.append("pointOrgNo:");
      if (this.pointOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.pointOrgNo);
      }
      first = false;
    }
    if (isSetCashOrgNo()) {
      if (!first) sb.append(", ");
      sb.append("cashOrgNo:");
      if (this.cashOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cashOrgNo);
      }
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      sb.append(this.payType);
      first = false;
    }
    if (isSetCashType()) {
      if (!first) sb.append(", ");
      sb.append("cashType:");
      sb.append(this.cashType);
      first = false;
    }
    if (isSetPointAmount()) {
      if (!first) sb.append(", ");
      sb.append("pointAmount:");
      sb.append(this.pointAmount);
      first = false;
    }
    if (isSetCashAmount()) {
      if (!first) sb.append(", ");
      sb.append("cashAmount:");
      sb.append(this.cashAmount);
      first = false;
    }
    if (isSetFoilCardNum()) {
      if (!first) sb.append(", ");
      sb.append("foilCardNum:");
      if (this.foilCardNum == null) {
        sb.append("null");
      } else {
        sb.append(this.foilCardNum);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addDeliveryInfoVoReq:");
    if (this.addDeliveryInfoVoReq == null) {
      sb.append("null");
    } else {
      sb.append(this.addDeliveryInfoVoReq);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clientId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'memberCode' because it's a primitive and you chose the non-beans generator.
    if (memberName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberName' was not present! Struct: " + toString());
    }
    if (createSource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createSource' was not present! Struct: " + toString());
    }
    if (reqId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reqId' was not present! Struct: " + toString());
    }
    if (merchantId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'merchantId' was not present! Struct: " + toString());
    }
    if (productId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not present! Struct: " + toString());
    }
    if (productName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productName' was not present! Struct: " + toString());
    }
    if (productImage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productImage' was not present! Struct: " + toString());
    }
    if (productType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'money' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'quantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vipMoney' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vipQuantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'deliveryMoney' because it's a primitive and you chose the non-beans generator.
    if (deliveryOption == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryOption' was not present! Struct: " + toString());
    }
    if (addDeliveryInfoVoReq == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addDeliveryInfoVoReq' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddSeckillOrderVoReqStandardSchemeFactory implements SchemeFactory {
    public AddSeckillOrderVoReqStandardScheme getScheme() {
      return new AddSeckillOrderVoReqStandardScheme();
    }
  }

  private static class AddSeckillOrderVoReqStandardScheme extends StandardScheme<AddSeckillOrderVoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddSeckillOrderVoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqId = iprot.readString();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productImage = iprot.readString();
              struct.setProductImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productType = iprot.readString();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.money = iprot.readDouble();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIP_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipMoney = iprot.readDouble();
              struct.setVipMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VIP_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipQuantity = iprot.readI32();
              struct.setVipQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POINT_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointOrgNo = iprot.readString();
              struct.setPointOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CASH_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashOrgNo = iprot.readString();
              struct.setCashOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CASH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cashType = iprot.readI32();
              struct.setCashTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // POINT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointAmount = iprot.readDouble();
              struct.setPointAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CASH_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashAmount = iprot.readDouble();
              struct.setCashAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FOIL_CARD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foilCardNum = iprot.readString();
              struct.setFoilCardNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ADD_DELIVERY_INFO_VO_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.addDeliveryInfoVoReq = new AddDeliveryInfoVoReq();
              struct.addDeliveryInfoVoReq.read(iprot);
              struct.setAddDeliveryInfoVoReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemberCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberCode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'money' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQuantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVipMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vipMoney' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVipQuantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vipQuantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDeliveryMoney()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryMoney' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddSeckillOrderVoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      if (struct.reqId != null) {
        oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
        oprot.writeString(struct.reqId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.productImage != null) {
        oprot.writeFieldBegin(PRODUCT_IMAGE_FIELD_DESC);
        oprot.writeString(struct.productImage);
        oprot.writeFieldEnd();
      }
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.productType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeDouble(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pointOrgNo != null) {
        if (struct.isSetPointOrgNo()) {
          oprot.writeFieldBegin(POINT_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.pointOrgNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cashOrgNo != null) {
        if (struct.isSetCashOrgNo()) {
          oprot.writeFieldBegin(CASH_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.cashOrgNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPayType()) {
        oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.payType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashType()) {
        oprot.writeFieldBegin(CASH_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cashType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointAmount()) {
        oprot.writeFieldBegin(POINT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.pointAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashAmount()) {
        oprot.writeFieldBegin(CASH_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.cashAmount);
        oprot.writeFieldEnd();
      }
      if (struct.foilCardNum != null) {
        if (struct.isSetFoilCardNum()) {
          oprot.writeFieldBegin(FOIL_CARD_NUM_FIELD_DESC);
          oprot.writeString(struct.foilCardNum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      if (struct.addDeliveryInfoVoReq != null) {
        oprot.writeFieldBegin(ADD_DELIVERY_INFO_VO_REQ_FIELD_DESC);
        struct.addDeliveryInfoVoReq.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddSeckillOrderVoReqTupleSchemeFactory implements SchemeFactory {
    public AddSeckillOrderVoReqTupleScheme getScheme() {
      return new AddSeckillOrderVoReqTupleScheme();
    }
  }

  private static class AddSeckillOrderVoReqTupleScheme extends TupleScheme<AddSeckillOrderVoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddSeckillOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientId);
      oprot.writeI64(struct.memberCode);
      oprot.writeString(struct.memberName);
      oprot.writeString(struct.createSource);
      oprot.writeString(struct.reqId);
      oprot.writeString(struct.merchantId);
      oprot.writeString(struct.productId);
      oprot.writeString(struct.productName);
      oprot.writeString(struct.productImage);
      oprot.writeString(struct.productType);
      oprot.writeDouble(struct.money);
      oprot.writeI32(struct.quantity);
      oprot.writeDouble(struct.vipMoney);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeString(struct.deliveryOption);
      struct.addDeliveryInfoVoReq.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      if (struct.isSetPointOrgNo()) {
        optionals.set(1);
      }
      if (struct.isSetCashOrgNo()) {
        optionals.set(2);
      }
      if (struct.isSetPayType()) {
        optionals.set(3);
      }
      if (struct.isSetCashType()) {
        optionals.set(4);
      }
      if (struct.isSetPointAmount()) {
        optionals.set(5);
      }
      if (struct.isSetCashAmount()) {
        optionals.set(6);
      }
      if (struct.isSetFoilCardNum()) {
        optionals.set(7);
      }
      if (struct.isSetToken()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPointOrgNo()) {
        oprot.writeString(struct.pointOrgNo);
      }
      if (struct.isSetCashOrgNo()) {
        oprot.writeString(struct.cashOrgNo);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetCashType()) {
        oprot.writeI32(struct.cashType);
      }
      if (struct.isSetPointAmount()) {
        oprot.writeDouble(struct.pointAmount);
      }
      if (struct.isSetCashAmount()) {
        oprot.writeDouble(struct.cashAmount);
      }
      if (struct.isSetFoilCardNum()) {
        oprot.writeString(struct.foilCardNum);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddSeckillOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientId = iprot.readString();
      struct.setClientIdIsSet(true);
      struct.memberCode = iprot.readI64();
      struct.setMemberCodeIsSet(true);
      struct.memberName = iprot.readString();
      struct.setMemberNameIsSet(true);
      struct.createSource = iprot.readString();
      struct.setCreateSourceIsSet(true);
      struct.reqId = iprot.readString();
      struct.setReqIdIsSet(true);
      struct.merchantId = iprot.readString();
      struct.setMerchantIdIsSet(true);
      struct.productId = iprot.readString();
      struct.setProductIdIsSet(true);
      struct.productName = iprot.readString();
      struct.setProductNameIsSet(true);
      struct.productImage = iprot.readString();
      struct.setProductImageIsSet(true);
      struct.productType = iprot.readString();
      struct.setProductTypeIsSet(true);
      struct.money = iprot.readDouble();
      struct.setMoneyIsSet(true);
      struct.quantity = iprot.readI32();
      struct.setQuantityIsSet(true);
      struct.vipMoney = iprot.readDouble();
      struct.setVipMoneyIsSet(true);
      struct.vipQuantity = iprot.readI32();
      struct.setVipQuantityIsSet(true);
      struct.deliveryMoney = iprot.readDouble();
      struct.setDeliveryMoneyIsSet(true);
      struct.deliveryOption = iprot.readString();
      struct.setDeliveryOptionIsSet(true);
      struct.addDeliveryInfoVoReq = new AddDeliveryInfoVoReq();
      struct.addDeliveryInfoVoReq.read(iprot);
      struct.setAddDeliveryInfoVoReqIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pointOrgNo = iprot.readString();
        struct.setPointOrgNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cashOrgNo = iprot.readString();
        struct.setCashOrgNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cashType = iprot.readI32();
        struct.setCashTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pointAmount = iprot.readDouble();
        struct.setPointAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cashAmount = iprot.readDouble();
        struct.setCashAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.foilCardNum = iprot.readString();
        struct.setFoilCardNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }
  }

}

