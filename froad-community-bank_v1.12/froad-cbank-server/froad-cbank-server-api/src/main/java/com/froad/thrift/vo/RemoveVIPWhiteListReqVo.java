/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RemoveVIPWhiteListReqVo implements org.apache.thrift.TBase<RemoveVIPWhiteListReqVo, RemoveVIPWhiteListReqVo._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveVIPWhiteListReqVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveVIPWhiteListReqVo");

  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RemoveVIPWhiteListReqVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RemoveVIPWhiteListReqVoTupleSchemeFactory());
  }

  /**
   * 源对象信息
   */
  public com.froad.thrift.vo.OriginVo origin; // required
  /**
   * 会员编号
   */
  public List<Long> memberCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 源对象信息
     */
    ORIGIN((short)1, "origin"),
    /**
     * 会员编号
     */
    MEMBER_CODE((short)2, "memberCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGIN
          return ORIGIN;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveVIPWhiteListReqVo.class, metaDataMap);
  }

  public RemoveVIPWhiteListReqVo() {
  }

  public RemoveVIPWhiteListReqVo(
    com.froad.thrift.vo.OriginVo origin,
    List<Long> memberCode)
  {
    this();
    this.origin = origin;
    this.memberCode = memberCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoveVIPWhiteListReqVo(RemoveVIPWhiteListReqVo other) {
    if (other.isSetOrigin()) {
      this.origin = new com.froad.thrift.vo.OriginVo(other.origin);
    }
    if (other.isSetMemberCode()) {
      List<Long> __this__memberCode = new ArrayList<Long>(other.memberCode);
      this.memberCode = __this__memberCode;
    }
  }

  public RemoveVIPWhiteListReqVo deepCopy() {
    return new RemoveVIPWhiteListReqVo(this);
  }

  @Override
  public void clear() {
    this.origin = null;
    this.memberCode = null;
  }

  /**
   * 源对象信息
   */
  public com.froad.thrift.vo.OriginVo getOrigin() {
    return this.origin;
  }

  /**
   * 源对象信息
   */
  public RemoveVIPWhiteListReqVo setOrigin(com.froad.thrift.vo.OriginVo origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public int getMemberCodeSize() {
    return (this.memberCode == null) ? 0 : this.memberCode.size();
  }

  public java.util.Iterator<Long> getMemberCodeIterator() {
    return (this.memberCode == null) ? null : this.memberCode.iterator();
  }

  public void addToMemberCode(long elem) {
    if (this.memberCode == null) {
      this.memberCode = new ArrayList<Long>();
    }
    this.memberCode.add(elem);
  }

  /**
   * 会员编号
   */
  public List<Long> getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员编号
   */
  public RemoveVIPWhiteListReqVo setMemberCode(List<Long> memberCode) {
    this.memberCode = memberCode;
    return this;
  }

  public void unsetMemberCode() {
    this.memberCode = null;
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return this.memberCode != null;
  }

  public void setMemberCodeIsSet(boolean value) {
    if (!value) {
      this.memberCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((com.froad.thrift.vo.OriginVo)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGIN:
      return getOrigin();

    case MEMBER_CODE:
      return getMemberCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORIGIN:
      return isSetOrigin();
    case MEMBER_CODE:
      return isSetMemberCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RemoveVIPWhiteListReqVo)
      return this.equals((RemoveVIPWhiteListReqVo)that);
    return false;
  }

  public boolean equals(RemoveVIPWhiteListReqVo that) {
    if (that == null)
      return false;

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_memberCode = true && this.isSetMemberCode();
    boolean that_present_memberCode = true && that.isSetMemberCode();
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (!this.memberCode.equals(that.memberCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_origin = true && (isSetOrigin());
    list.add(present_origin);
    if (present_origin)
      list.add(origin);

    boolean present_memberCode = true && (isSetMemberCode());
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(RemoveVIPWhiteListReqVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RemoveVIPWhiteListReqVo(");
    boolean first = true;

    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    if (this.memberCode == null) {
      sb.append("null");
    } else {
      sb.append(this.memberCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (origin != null) {
      origin.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemoveVIPWhiteListReqVoStandardSchemeFactory implements SchemeFactory {
    public RemoveVIPWhiteListReqVoStandardScheme getScheme() {
      return new RemoveVIPWhiteListReqVoStandardScheme();
    }
  }

  private static class RemoveVIPWhiteListReqVoStandardScheme extends StandardScheme<RemoveVIPWhiteListReqVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveVIPWhiteListReqVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.origin = new com.froad.thrift.vo.OriginVo();
              struct.origin.read(iprot);
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.memberCode = new ArrayList<Long>(_list8.size);
                long _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI64();
                  struct.memberCode.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveVIPWhiteListReqVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        struct.origin.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.memberCode != null) {
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.memberCode.size()));
          for (long _iter11 : struct.memberCode)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemoveVIPWhiteListReqVoTupleSchemeFactory implements SchemeFactory {
    public RemoveVIPWhiteListReqVoTupleScheme getScheme() {
      return new RemoveVIPWhiteListReqVoTupleScheme();
    }
  }

  private static class RemoveVIPWhiteListReqVoTupleScheme extends TupleScheme<RemoveVIPWhiteListReqVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RemoveVIPWhiteListReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrigin()) {
        optionals.set(0);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOrigin()) {
        struct.origin.write(oprot);
      }
      if (struct.isSetMemberCode()) {
        {
          oprot.writeI32(struct.memberCode.size());
          for (long _iter12 : struct.memberCode)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RemoveVIPWhiteListReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.origin = new com.froad.thrift.vo.OriginVo();
        struct.origin.read(iprot);
        struct.setOriginIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.memberCode = new ArrayList<Long>(_list13.size);
          long _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI64();
            struct.memberCode.add(_elem14);
          }
        }
        struct.setMemberCodeIsSet(true);
      }
    }
  }

}

