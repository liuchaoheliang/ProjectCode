/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.bankcard;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 积分平台请求响应参数封装
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class PointApiRes implements org.apache.thrift.TBase<PointApiRes, PointApiRes._Fields>, java.io.Serializable, Cloneable, Comparable<PointApiRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointApiRes");

  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("resultDesc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRESENT_POINTS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("presentPointsNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CASH_POINTS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cashPointsNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFUND_POINTS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPointsNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXCHANGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeRate", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointApiResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointApiResTupleSchemeFactory());
  }

  /**
   * 结果
   */
  public String resultCode; // required
  /**
   * 结果描述
   */
  public String resultDesc; // required
  /**
   * 积分消费号
   * 3:string payPointsNo;
   * /** 赠送积分号
   */
  public String presentPointsNo; // required
  /**
   * 积分提现号
   */
  public String cashPointsNo; // required
  /**
   * 退积分好
   */
  public String refundPointsNo; // required
  /**
   * 积分兑换比例
   */
  public String exchangeRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 结果
     */
    RESULT_CODE((short)1, "resultCode"),
    /**
     * 结果描述
     */
    RESULT_DESC((short)2, "resultDesc"),
    /**
     * 积分消费号
     * 3:string payPointsNo;
     * /** 赠送积分号
     */
    PRESENT_POINTS_NO((short)4, "presentPointsNo"),
    /**
     * 积分提现号
     */
    CASH_POINTS_NO((short)5, "cashPointsNo"),
    /**
     * 退积分好
     */
    REFUND_POINTS_NO((short)6, "refundPointsNo"),
    /**
     * 积分兑换比例
     */
    EXCHANGE_RATE((short)7, "exchangeRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_CODE
          return RESULT_CODE;
        case 2: // RESULT_DESC
          return RESULT_DESC;
        case 4: // PRESENT_POINTS_NO
          return PRESENT_POINTS_NO;
        case 5: // CASH_POINTS_NO
          return CASH_POINTS_NO;
        case 6: // REFUND_POINTS_NO
          return REFUND_POINTS_NO;
        case 7: // EXCHANGE_RATE
          return EXCHANGE_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_DESC, new org.apache.thrift.meta_data.FieldMetaData("resultDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESENT_POINTS_NO, new org.apache.thrift.meta_data.FieldMetaData("presentPointsNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_POINTS_NO, new org.apache.thrift.meta_data.FieldMetaData("cashPointsNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_POINTS_NO, new org.apache.thrift.meta_data.FieldMetaData("refundPointsNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("exchangeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointApiRes.class, metaDataMap);
  }

  public PointApiRes() {
  }

  public PointApiRes(
    String resultCode,
    String resultDesc,
    String presentPointsNo,
    String cashPointsNo,
    String refundPointsNo,
    String exchangeRate)
  {
    this();
    this.resultCode = resultCode;
    this.resultDesc = resultDesc;
    this.presentPointsNo = presentPointsNo;
    this.cashPointsNo = cashPointsNo;
    this.refundPointsNo = refundPointsNo;
    this.exchangeRate = exchangeRate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointApiRes(PointApiRes other) {
    if (other.isSetResultCode()) {
      this.resultCode = other.resultCode;
    }
    if (other.isSetResultDesc()) {
      this.resultDesc = other.resultDesc;
    }
    if (other.isSetPresentPointsNo()) {
      this.presentPointsNo = other.presentPointsNo;
    }
    if (other.isSetCashPointsNo()) {
      this.cashPointsNo = other.cashPointsNo;
    }
    if (other.isSetRefundPointsNo()) {
      this.refundPointsNo = other.refundPointsNo;
    }
    if (other.isSetExchangeRate()) {
      this.exchangeRate = other.exchangeRate;
    }
  }

  public PointApiRes deepCopy() {
    return new PointApiRes(this);
  }

  @Override
  public void clear() {
    this.resultCode = null;
    this.resultDesc = null;
    this.presentPointsNo = null;
    this.cashPointsNo = null;
    this.refundPointsNo = null;
    this.exchangeRate = null;
  }

  /**
   * 结果
   */
  public String getResultCode() {
    return this.resultCode;
  }

  /**
   * 结果
   */
  public PointApiRes setResultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  public void unsetResultCode() {
    this.resultCode = null;
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.resultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.resultCode = null;
    }
  }

  /**
   * 结果描述
   */
  public String getResultDesc() {
    return this.resultDesc;
  }

  /**
   * 结果描述
   */
  public PointApiRes setResultDesc(String resultDesc) {
    this.resultDesc = resultDesc;
    return this;
  }

  public void unsetResultDesc() {
    this.resultDesc = null;
  }

  /** Returns true if field resultDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetResultDesc() {
    return this.resultDesc != null;
  }

  public void setResultDescIsSet(boolean value) {
    if (!value) {
      this.resultDesc = null;
    }
  }

  /**
   * 积分消费号
   * 3:string payPointsNo;
   * /** 赠送积分号
   */
  public String getPresentPointsNo() {
    return this.presentPointsNo;
  }

  /**
   * 积分消费号
   * 3:string payPointsNo;
   * /** 赠送积分号
   */
  public PointApiRes setPresentPointsNo(String presentPointsNo) {
    this.presentPointsNo = presentPointsNo;
    return this;
  }

  public void unsetPresentPointsNo() {
    this.presentPointsNo = null;
  }

  /** Returns true if field presentPointsNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPresentPointsNo() {
    return this.presentPointsNo != null;
  }

  public void setPresentPointsNoIsSet(boolean value) {
    if (!value) {
      this.presentPointsNo = null;
    }
  }

  /**
   * 积分提现号
   */
  public String getCashPointsNo() {
    return this.cashPointsNo;
  }

  /**
   * 积分提现号
   */
  public PointApiRes setCashPointsNo(String cashPointsNo) {
    this.cashPointsNo = cashPointsNo;
    return this;
  }

  public void unsetCashPointsNo() {
    this.cashPointsNo = null;
  }

  /** Returns true if field cashPointsNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCashPointsNo() {
    return this.cashPointsNo != null;
  }

  public void setCashPointsNoIsSet(boolean value) {
    if (!value) {
      this.cashPointsNo = null;
    }
  }

  /**
   * 退积分好
   */
  public String getRefundPointsNo() {
    return this.refundPointsNo;
  }

  /**
   * 退积分好
   */
  public PointApiRes setRefundPointsNo(String refundPointsNo) {
    this.refundPointsNo = refundPointsNo;
    return this;
  }

  public void unsetRefundPointsNo() {
    this.refundPointsNo = null;
  }

  /** Returns true if field refundPointsNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundPointsNo() {
    return this.refundPointsNo != null;
  }

  public void setRefundPointsNoIsSet(boolean value) {
    if (!value) {
      this.refundPointsNo = null;
    }
  }

  /**
   * 积分兑换比例
   */
  public String getExchangeRate() {
    return this.exchangeRate;
  }

  /**
   * 积分兑换比例
   */
  public PointApiRes setExchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  public void unsetExchangeRate() {
    this.exchangeRate = null;
  }

  /** Returns true if field exchangeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeRate() {
    return this.exchangeRate != null;
  }

  public void setExchangeRateIsSet(boolean value) {
    if (!value) {
      this.exchangeRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((String)value);
      }
      break;

    case RESULT_DESC:
      if (value == null) {
        unsetResultDesc();
      } else {
        setResultDesc((String)value);
      }
      break;

    case PRESENT_POINTS_NO:
      if (value == null) {
        unsetPresentPointsNo();
      } else {
        setPresentPointsNo((String)value);
      }
      break;

    case CASH_POINTS_NO:
      if (value == null) {
        unsetCashPointsNo();
      } else {
        setCashPointsNo((String)value);
      }
      break;

    case REFUND_POINTS_NO:
      if (value == null) {
        unsetRefundPointsNo();
      } else {
        setRefundPointsNo((String)value);
      }
      break;

    case EXCHANGE_RATE:
      if (value == null) {
        unsetExchangeRate();
      } else {
        setExchangeRate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_CODE:
      return getResultCode();

    case RESULT_DESC:
      return getResultDesc();

    case PRESENT_POINTS_NO:
      return getPresentPointsNo();

    case CASH_POINTS_NO:
      return getCashPointsNo();

    case REFUND_POINTS_NO:
      return getRefundPointsNo();

    case EXCHANGE_RATE:
      return getExchangeRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_CODE:
      return isSetResultCode();
    case RESULT_DESC:
      return isSetResultDesc();
    case PRESENT_POINTS_NO:
      return isSetPresentPointsNo();
    case CASH_POINTS_NO:
      return isSetCashPointsNo();
    case REFUND_POINTS_NO:
      return isSetRefundPointsNo();
    case EXCHANGE_RATE:
      return isSetExchangeRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PointApiRes)
      return this.equals((PointApiRes)that);
    return false;
  }

  public boolean equals(PointApiRes that) {
    if (that == null)
      return false;

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (!this.resultCode.equals(that.resultCode))
        return false;
    }

    boolean this_present_resultDesc = true && this.isSetResultDesc();
    boolean that_present_resultDesc = true && that.isSetResultDesc();
    if (this_present_resultDesc || that_present_resultDesc) {
      if (!(this_present_resultDesc && that_present_resultDesc))
        return false;
      if (!this.resultDesc.equals(that.resultDesc))
        return false;
    }

    boolean this_present_presentPointsNo = true && this.isSetPresentPointsNo();
    boolean that_present_presentPointsNo = true && that.isSetPresentPointsNo();
    if (this_present_presentPointsNo || that_present_presentPointsNo) {
      if (!(this_present_presentPointsNo && that_present_presentPointsNo))
        return false;
      if (!this.presentPointsNo.equals(that.presentPointsNo))
        return false;
    }

    boolean this_present_cashPointsNo = true && this.isSetCashPointsNo();
    boolean that_present_cashPointsNo = true && that.isSetCashPointsNo();
    if (this_present_cashPointsNo || that_present_cashPointsNo) {
      if (!(this_present_cashPointsNo && that_present_cashPointsNo))
        return false;
      if (!this.cashPointsNo.equals(that.cashPointsNo))
        return false;
    }

    boolean this_present_refundPointsNo = true && this.isSetRefundPointsNo();
    boolean that_present_refundPointsNo = true && that.isSetRefundPointsNo();
    if (this_present_refundPointsNo || that_present_refundPointsNo) {
      if (!(this_present_refundPointsNo && that_present_refundPointsNo))
        return false;
      if (!this.refundPointsNo.equals(that.refundPointsNo))
        return false;
    }

    boolean this_present_exchangeRate = true && this.isSetExchangeRate();
    boolean that_present_exchangeRate = true && that.isSetExchangeRate();
    if (this_present_exchangeRate || that_present_exchangeRate) {
      if (!(this_present_exchangeRate && that_present_exchangeRate))
        return false;
      if (!this.exchangeRate.equals(that.exchangeRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultCode = true && (isSetResultCode());
    list.add(present_resultCode);
    if (present_resultCode)
      list.add(resultCode);

    boolean present_resultDesc = true && (isSetResultDesc());
    list.add(present_resultDesc);
    if (present_resultDesc)
      list.add(resultDesc);

    boolean present_presentPointsNo = true && (isSetPresentPointsNo());
    list.add(present_presentPointsNo);
    if (present_presentPointsNo)
      list.add(presentPointsNo);

    boolean present_cashPointsNo = true && (isSetCashPointsNo());
    list.add(present_cashPointsNo);
    if (present_cashPointsNo)
      list.add(cashPointsNo);

    boolean present_refundPointsNo = true && (isSetRefundPointsNo());
    list.add(present_refundPointsNo);
    if (present_refundPointsNo)
      list.add(refundPointsNo);

    boolean present_exchangeRate = true && (isSetExchangeRate());
    list.add(present_exchangeRate);
    if (present_exchangeRate)
      list.add(exchangeRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(PointApiRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultDesc()).compareTo(other.isSetResultDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultDesc, other.resultDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresentPointsNo()).compareTo(other.isSetPresentPointsNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresentPointsNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presentPointsNo, other.presentPointsNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashPointsNo()).compareTo(other.isSetCashPointsNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashPointsNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashPointsNo, other.cashPointsNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundPointsNo()).compareTo(other.isSetRefundPointsNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundPointsNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPointsNo, other.refundPointsNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeRate()).compareTo(other.isSetExchangeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeRate, other.exchangeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PointApiRes(");
    boolean first = true;

    sb.append("resultCode:");
    if (this.resultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultDesc:");
    if (this.resultDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.resultDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("presentPointsNo:");
    if (this.presentPointsNo == null) {
      sb.append("null");
    } else {
      sb.append(this.presentPointsNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashPointsNo:");
    if (this.cashPointsNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cashPointsNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundPointsNo:");
    if (this.refundPointsNo == null) {
      sb.append("null");
    } else {
      sb.append(this.refundPointsNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeRate:");
    if (this.exchangeRate == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeRate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointApiResStandardSchemeFactory implements SchemeFactory {
    public PointApiResStandardScheme getScheme() {
      return new PointApiResStandardScheme();
    }
  }

  private static class PointApiResStandardScheme extends StandardScheme<PointApiRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointApiRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultCode = iprot.readString();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultDesc = iprot.readString();
              struct.setResultDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRESENT_POINTS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.presentPointsNo = iprot.readString();
              struct.setPresentPointsNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CASH_POINTS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashPointsNo = iprot.readString();
              struct.setCashPointsNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFUND_POINTS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundPointsNo = iprot.readString();
              struct.setRefundPointsNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXCHANGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeRate = iprot.readString();
              struct.setExchangeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointApiRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeString(struct.resultCode);
        oprot.writeFieldEnd();
      }
      if (struct.resultDesc != null) {
        oprot.writeFieldBegin(RESULT_DESC_FIELD_DESC);
        oprot.writeString(struct.resultDesc);
        oprot.writeFieldEnd();
      }
      if (struct.presentPointsNo != null) {
        oprot.writeFieldBegin(PRESENT_POINTS_NO_FIELD_DESC);
        oprot.writeString(struct.presentPointsNo);
        oprot.writeFieldEnd();
      }
      if (struct.cashPointsNo != null) {
        oprot.writeFieldBegin(CASH_POINTS_NO_FIELD_DESC);
        oprot.writeString(struct.cashPointsNo);
        oprot.writeFieldEnd();
      }
      if (struct.refundPointsNo != null) {
        oprot.writeFieldBegin(REFUND_POINTS_NO_FIELD_DESC);
        oprot.writeString(struct.refundPointsNo);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeRate != null) {
        oprot.writeFieldBegin(EXCHANGE_RATE_FIELD_DESC);
        oprot.writeString(struct.exchangeRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointApiResTupleSchemeFactory implements SchemeFactory {
    public PointApiResTupleScheme getScheme() {
      return new PointApiResTupleScheme();
    }
  }

  private static class PointApiResTupleScheme extends TupleScheme<PointApiRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointApiRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultCode()) {
        optionals.set(0);
      }
      if (struct.isSetResultDesc()) {
        optionals.set(1);
      }
      if (struct.isSetPresentPointsNo()) {
        optionals.set(2);
      }
      if (struct.isSetCashPointsNo()) {
        optionals.set(3);
      }
      if (struct.isSetRefundPointsNo()) {
        optionals.set(4);
      }
      if (struct.isSetExchangeRate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetResultCode()) {
        oprot.writeString(struct.resultCode);
      }
      if (struct.isSetResultDesc()) {
        oprot.writeString(struct.resultDesc);
      }
      if (struct.isSetPresentPointsNo()) {
        oprot.writeString(struct.presentPointsNo);
      }
      if (struct.isSetCashPointsNo()) {
        oprot.writeString(struct.cashPointsNo);
      }
      if (struct.isSetRefundPointsNo()) {
        oprot.writeString(struct.refundPointsNo);
      }
      if (struct.isSetExchangeRate()) {
        oprot.writeString(struct.exchangeRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointApiRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.resultCode = iprot.readString();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultDesc = iprot.readString();
        struct.setResultDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.presentPointsNo = iprot.readString();
        struct.setPresentPointsNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cashPointsNo = iprot.readString();
        struct.setCashPointsNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refundPointsNo = iprot.readString();
        struct.setRefundPointsNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exchangeRate = iprot.readString();
        struct.setExchangeRateIsSet(true);
      }
    }
  }

}

