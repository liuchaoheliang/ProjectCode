/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OutletService {

  /**
   * OutletService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 Outlet
     * @param outlet
     * @return outletId 门店编号
     * 
     * @param originVo
     * @param outletVo
     */
    public com.froad.thrift.vo.OutletAddVoRes addOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * 增加 Outlet
     * @param outlet
     * @return list<OutletServiceVo.OutletAddVoRes>    结果集
     * 
     * @param originVo
     * @param outletVoList
     */
    public List<com.froad.thrift.vo.OutletAddVoRes> addOutletByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList) throws org.apache.thrift.TException;

    /**
     * 删除 Outlet
     * @param outlet
     * @return boolean
     * 
     * @param originVo
     * @param outletVo
     */
    public com.froad.thrift.vo.ResultVo deleteOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * 物理删除(添加门店错误时回滚用) Outlet
     * @param outletId
     * @return boolean
     * 
     * @param originVo
     * @param outletId
     */
    public com.froad.thrift.vo.ResultVo removeOutlet(com.froad.thrift.vo.OriginVo originVo, String outletId) throws org.apache.thrift.TException;

    /**
     * 修改 Outlet
     * @param outlet
     * @return boolean
     * 
     * @param originVo
     * @param outletVo
     */
    public com.froad.thrift.vo.ResultVo updateOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * * 根据门店id查询单个 Outlet
     *    * @param outletId
     *    * @return OutletVo
     * 
     * @param outletId
     */
    public com.froad.thrift.vo.OutletVo getOutletByOutletId(String outletId) throws org.apache.thrift.TException;

    /**
     * 查询 Outlet
     * @param outlet
     * @return List<OutletVo>
     * 
     * @param outletVo
     */
    public List<com.froad.thrift.vo.OutletVo> getOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * 统计 Outlet
     * @param outlet
     * @return int
     * 
     * @param outletVo
     */
    public int countOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * 查询机构对应的虚拟门店信息
     * @param outlet
     * @return OutletVo
     * 
     * @param client_id
     * @param org_code
     */
    public com.froad.thrift.vo.OutletVo getBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException;

    /**
     * 查询提货网点(预售用到)
     * @param outlet
     * @return List<OutletVo>
     * 
     * @param client_id
     * @param org_code
     */
    public List<com.froad.thrift.vo.OutletVo> getSubBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException;

    /**
     * 分页查询 Outlet
     * @param outlet
     * @return OutletPageVoRes
     * 
     * @param page
     * @param outletVo
     */
    public com.froad.thrift.vo.OutletPageVoRes getOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    /**
     * 查询 Outlet详情
     * @param outletId
     * @return OutletDetailVo
     * 
     * @param outletId
     */
    public com.froad.thrift.vo.OutletDetailVo getOutletDetail(String outletId) throws org.apache.thrift.TException;

    /**
     * 分页查询 OutletDetail
     * @param outletDetail
     * @return OutletDetailPageVoRes
     * 
     * @param page
     * @param outletDetailVo
     */
    public com.froad.thrift.vo.OutletDetailPageVoRes getOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException;

    /**
     * 分页查询人气(收藏数)最好的 Outlet(个人H5用到)
     * @param outlet
     * @return OutletDetailPageVoRes
     * 
     * @param page
     * @param outletDetailVo
     */
    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getHottestOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException;

    /**
     * 分页搜索附近的 OutletDetail(个人H5用到)
     * @param outletDetail 门店查询条件
     * @param pageSize 每页显示多少条
     * @param distance 查询多少距离以内的门店
     * @param orderBy 排序 1-人气，2-距离
     * @return OutletDetailVo
     * 
     * @param page
     * @param outletDetailVo
     * @param distance
     * @param orderBy
     */
    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getNearbyOutlet(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy) throws org.apache.thrift.TException;

    /**
     * 分页搜索附近的 OutletDetailSimpleVo(个人H5特惠商品用)
     * @param outletDetail 门店查询条件
     * @param pageSize 每页显示多少条
     * @param distance 查询多少距离以内的门店
     * @return OutletDetailVo
     * 
     * @param page
     * @param outletDetailVo
     * @param distance
     * @param skip
     */
    public com.froad.thrift.vo.OutletDetailSimplePageVoRes getNearbyOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip) throws org.apache.thrift.TException;

    /**
     * 根据门店id集合查询详情
     * @param outletIdList 门店id集合
     * @return OutletDetailVo
     * 
     * @param outletIdList
     */
    public List<com.froad.thrift.vo.OutletDetailVo> getOutletDetailbyOutletIdList(List<String> outletIdList) throws org.apache.thrift.TException;

    /**
     * 根据经纬度和商户ID查询门店信息列表和相对距离
     * @param latitude
     * @param longitude
     * @param merchantId
     * @return List<OutletVo>
     * 
     * @param page
     * @param longitude
     * @param latitude
     * @param merchantId
     */
    public com.froad.thrift.vo.OutletMongoInfoPageVoRes getOutletMongoInfoVoByPage(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId) throws org.apache.thrift.TException;

    /**
     * 同步白名单操作时，根据客户端id和商户id同步商户门店信息.
     * @param merchantId 商户id
     * @param merchantId 门店id
     * @param clientId    客户端id
     * @param isSynSucc  0-同步成功，1-同步失败
     * @param synType 0-同步通知，1-审核通知
     * @return Common.ResultVo
     * 
     * @param outletVo
     * @param isSynSucc
     * @param synType
     */
    public com.froad.thrift.vo.ResultVo syncOutletInfo(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType) throws org.apache.thrift.TException;

    /**
     * 门店管理点击提交审核触发事件实现接口(录入审核：outlet表录入审核状态=非审核通过状态),(编辑审核：outlet表录入审核状态为审核通过)
     * @param outletId  门店Id
     * @param auditId   审核流水号
     * @return boolean
     * 
     * @param outletId
     * @param auditId
     */
    public com.froad.thrift.vo.ResultVo commitAuditOutlet(String outletId, String auditId) throws org.apache.thrift.TException;

    /**
     * 门店录入审核通过后，点击修改操作接口.
     * @param outletTempVo 门店临时vo
     * @return
     * 
     * @param originVo
     * @param outletTempVo
     */
    public com.froad.thrift.vo.OutletTempAddVoRes saveOutletTempEditOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo) throws org.apache.thrift.TException;

    /**
     * 查询一个门店临时信息.
     * @param outletId 门店Id
     * @return OutletTempVo
     * 
     * @param outletId
     */
    public com.froad.thrift.vo.OutletTempVo getOutletModifyInfos(String outletId) throws org.apache.thrift.TException;

    /**
     * 银行管理平台审核箱中门店审核根据审核流水号和门店id查询一个门店临时信息.
     * @param outletId 门店Id
     * @param auditId 审核流水号
     * @return OutletTempVo
     * 
     * @param outletId
     * @param auditId
     */
    public com.froad.thrift.vo.OutletTempVo getOutletModifyInfoByAuditBox(String outletId, String auditId) throws org.apache.thrift.TException;

    /**
     * 门店惠付分页查询 OutletPreferVo
     * @param OutletPreferVo
     * @return OutletPreferPageVoRes
     * 
     * @param page
     * @param outletPreferVo
     */
    public com.froad.thrift.vo.OutletPreferPageVoRes getOutletPreferByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException;

    /**
     * 门店报表导出
     * @param outletPreferVo
     * @return Common.ExportResultRes
     * 
     * @param outletPreferVo
     */
    public com.froad.thrift.vo.ExportResultRes getOutletExport(com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOutletByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeOutlet(com.froad.thrift.vo.OriginVo originVo, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletByOutletId(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutlet(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countOutlet(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankOutlet(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSubBankOutlet(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletDetail(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHottestOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNearbyOutlet(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNearbyOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletDetailbyOutletIdList(List<String> outletIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletMongoInfoVoByPage(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncOutletInfo(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commitAuditOutlet(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveOutletTempEditOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletModifyInfos(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletModifyInfoByAuditBox(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletPreferByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletExport(com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.OutletAddVoRes addOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_addOutlet(originVo, outletVo);
      return recv_addOutlet();
    }

    public void send_addOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      addOutlet_args args = new addOutlet_args();
      args.setOriginVo(originVo);
      args.setOutletVo(outletVo);
      sendBase("addOutlet", args);
    }

    public com.froad.thrift.vo.OutletAddVoRes recv_addOutlet() throws org.apache.thrift.TException
    {
      addOutlet_result result = new addOutlet_result();
      receiveBase(result, "addOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutlet failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletAddVoRes> addOutletByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList) throws org.apache.thrift.TException
    {
      send_addOutletByBatch(originVo, outletVoList);
      return recv_addOutletByBatch();
    }

    public void send_addOutletByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList) throws org.apache.thrift.TException
    {
      addOutletByBatch_args args = new addOutletByBatch_args();
      args.setOriginVo(originVo);
      args.setOutletVoList(outletVoList);
      sendBase("addOutletByBatch", args);
    }

    public List<com.froad.thrift.vo.OutletAddVoRes> recv_addOutletByBatch() throws org.apache.thrift.TException
    {
      addOutletByBatch_result result = new addOutletByBatch_result();
      receiveBase(result, "addOutletByBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutletByBatch failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_deleteOutlet(originVo, outletVo);
      return recv_deleteOutlet();
    }

    public void send_deleteOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      deleteOutlet_args args = new deleteOutlet_args();
      args.setOriginVo(originVo);
      args.setOutletVo(outletVo);
      sendBase("deleteOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteOutlet() throws org.apache.thrift.TException
    {
      deleteOutlet_result result = new deleteOutlet_result();
      receiveBase(result, "deleteOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo removeOutlet(com.froad.thrift.vo.OriginVo originVo, String outletId) throws org.apache.thrift.TException
    {
      send_removeOutlet(originVo, outletId);
      return recv_removeOutlet();
    }

    public void send_removeOutlet(com.froad.thrift.vo.OriginVo originVo, String outletId) throws org.apache.thrift.TException
    {
      removeOutlet_args args = new removeOutlet_args();
      args.setOriginVo(originVo);
      args.setOutletId(outletId);
      sendBase("removeOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_removeOutlet() throws org.apache.thrift.TException
    {
      removeOutlet_result result = new removeOutlet_result();
      receiveBase(result, "removeOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_updateOutlet(originVo, outletVo);
      return recv_updateOutlet();
    }

    public void send_updateOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      updateOutlet_args args = new updateOutlet_args();
      args.setOriginVo(originVo);
      args.setOutletVo(outletVo);
      sendBase("updateOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateOutlet() throws org.apache.thrift.TException
    {
      updateOutlet_result result = new updateOutlet_result();
      receiveBase(result, "updateOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletVo getOutletByOutletId(String outletId) throws org.apache.thrift.TException
    {
      send_getOutletByOutletId(outletId);
      return recv_getOutletByOutletId();
    }

    public void send_getOutletByOutletId(String outletId) throws org.apache.thrift.TException
    {
      getOutletByOutletId_args args = new getOutletByOutletId_args();
      args.setOutletId(outletId);
      sendBase("getOutletByOutletId", args);
    }

    public com.froad.thrift.vo.OutletVo recv_getOutletByOutletId() throws org.apache.thrift.TException
    {
      getOutletByOutletId_result result = new getOutletByOutletId_result();
      receiveBase(result, "getOutletByOutletId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletByOutletId failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletVo> getOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_getOutlet(outletVo);
      return recv_getOutlet();
    }

    public void send_getOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      getOutlet_args args = new getOutlet_args();
      args.setOutletVo(outletVo);
      sendBase("getOutlet", args);
    }

    public List<com.froad.thrift.vo.OutletVo> recv_getOutlet() throws org.apache.thrift.TException
    {
      getOutlet_result result = new getOutlet_result();
      receiveBase(result, "getOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutlet failed: unknown result");
    }

    public int countOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_countOutlet(outletVo);
      return recv_countOutlet();
    }

    public void send_countOutlet(com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      countOutlet_args args = new countOutlet_args();
      args.setOutletVo(outletVo);
      sendBase("countOutlet", args);
    }

    public int recv_countOutlet() throws org.apache.thrift.TException
    {
      countOutlet_result result = new countOutlet_result();
      receiveBase(result, "countOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletVo getBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException
    {
      send_getBankOutlet(client_id, org_code);
      return recv_getBankOutlet();
    }

    public void send_getBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException
    {
      getBankOutlet_args args = new getBankOutlet_args();
      args.setClient_id(client_id);
      args.setOrg_code(org_code);
      sendBase("getBankOutlet", args);
    }

    public com.froad.thrift.vo.OutletVo recv_getBankOutlet() throws org.apache.thrift.TException
    {
      getBankOutlet_result result = new getBankOutlet_result();
      receiveBase(result, "getBankOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankOutlet failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletVo> getSubBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException
    {
      send_getSubBankOutlet(client_id, org_code);
      return recv_getSubBankOutlet();
    }

    public void send_getSubBankOutlet(String client_id, String org_code) throws org.apache.thrift.TException
    {
      getSubBankOutlet_args args = new getSubBankOutlet_args();
      args.setClient_id(client_id);
      args.setOrg_code(org_code);
      sendBase("getSubBankOutlet", args);
    }

    public List<com.froad.thrift.vo.OutletVo> recv_getSubBankOutlet() throws org.apache.thrift.TException
    {
      getSubBankOutlet_result result = new getSubBankOutlet_result();
      receiveBase(result, "getSubBankOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubBankOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletPageVoRes getOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_getOutletByPage(page, outletVo);
      return recv_getOutletByPage();
    }

    public void send_getOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      getOutletByPage_args args = new getOutletByPage_args();
      args.setPage(page);
      args.setOutletVo(outletVo);
      sendBase("getOutletByPage", args);
    }

    public com.froad.thrift.vo.OutletPageVoRes recv_getOutletByPage() throws org.apache.thrift.TException
    {
      getOutletByPage_result result = new getOutletByPage_result();
      receiveBase(result, "getOutletByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletByPage failed: unknown result");
    }

    public com.froad.thrift.vo.OutletDetailVo getOutletDetail(String outletId) throws org.apache.thrift.TException
    {
      send_getOutletDetail(outletId);
      return recv_getOutletDetail();
    }

    public void send_getOutletDetail(String outletId) throws org.apache.thrift.TException
    {
      getOutletDetail_args args = new getOutletDetail_args();
      args.setOutletId(outletId);
      sendBase("getOutletDetail", args);
    }

    public com.froad.thrift.vo.OutletDetailVo recv_getOutletDetail() throws org.apache.thrift.TException
    {
      getOutletDetail_result result = new getOutletDetail_result();
      receiveBase(result, "getOutletDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletDetail failed: unknown result");
    }

    public com.froad.thrift.vo.OutletDetailPageVoRes getOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException
    {
      send_getOutletDetailByPage(page, outletDetailVo);
      return recv_getOutletDetailByPage();
    }

    public void send_getOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException
    {
      getOutletDetailByPage_args args = new getOutletDetailByPage_args();
      args.setPage(page);
      args.setOutletDetailVo(outletDetailVo);
      sendBase("getOutletDetailByPage", args);
    }

    public com.froad.thrift.vo.OutletDetailPageVoRes recv_getOutletDetailByPage() throws org.apache.thrift.TException
    {
      getOutletDetailByPage_result result = new getOutletDetailByPage_result();
      receiveBase(result, "getOutletDetailByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletDetailByPage failed: unknown result");
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getHottestOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException
    {
      send_getHottestOutletDetailByPage(page, outletDetailVo);
      return recv_getHottestOutletDetailByPage();
    }

    public void send_getHottestOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo) throws org.apache.thrift.TException
    {
      getHottestOutletDetailByPage_args args = new getHottestOutletDetailByPage_args();
      args.setPage(page);
      args.setOutletDetailVo(outletDetailVo);
      sendBase("getHottestOutletDetailByPage", args);
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes recv_getHottestOutletDetailByPage() throws org.apache.thrift.TException
    {
      getHottestOutletDetailByPage_result result = new getHottestOutletDetailByPage_result();
      receiveBase(result, "getHottestOutletDetailByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHottestOutletDetailByPage failed: unknown result");
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getNearbyOutlet(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy) throws org.apache.thrift.TException
    {
      send_getNearbyOutlet(page, outletDetailVo, distance, orderBy);
      return recv_getNearbyOutlet();
    }

    public void send_getNearbyOutlet(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy) throws org.apache.thrift.TException
    {
      getNearbyOutlet_args args = new getNearbyOutlet_args();
      args.setPage(page);
      args.setOutletDetailVo(outletDetailVo);
      args.setDistance(distance);
      args.setOrderBy(orderBy);
      sendBase("getNearbyOutlet", args);
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes recv_getNearbyOutlet() throws org.apache.thrift.TException
    {
      getNearbyOutlet_result result = new getNearbyOutlet_result();
      receiveBase(result, "getNearbyOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNearbyOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletDetailSimplePageVoRes getNearbyOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip) throws org.apache.thrift.TException
    {
      send_getNearbyOutletByPage(page, outletDetailVo, distance, skip);
      return recv_getNearbyOutletByPage();
    }

    public void send_getNearbyOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip) throws org.apache.thrift.TException
    {
      getNearbyOutletByPage_args args = new getNearbyOutletByPage_args();
      args.setPage(page);
      args.setOutletDetailVo(outletDetailVo);
      args.setDistance(distance);
      args.setSkip(skip);
      sendBase("getNearbyOutletByPage", args);
    }

    public com.froad.thrift.vo.OutletDetailSimplePageVoRes recv_getNearbyOutletByPage() throws org.apache.thrift.TException
    {
      getNearbyOutletByPage_result result = new getNearbyOutletByPage_result();
      receiveBase(result, "getNearbyOutletByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNearbyOutletByPage failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletDetailVo> getOutletDetailbyOutletIdList(List<String> outletIdList) throws org.apache.thrift.TException
    {
      send_getOutletDetailbyOutletIdList(outletIdList);
      return recv_getOutletDetailbyOutletIdList();
    }

    public void send_getOutletDetailbyOutletIdList(List<String> outletIdList) throws org.apache.thrift.TException
    {
      getOutletDetailbyOutletIdList_args args = new getOutletDetailbyOutletIdList_args();
      args.setOutletIdList(outletIdList);
      sendBase("getOutletDetailbyOutletIdList", args);
    }

    public List<com.froad.thrift.vo.OutletDetailVo> recv_getOutletDetailbyOutletIdList() throws org.apache.thrift.TException
    {
      getOutletDetailbyOutletIdList_result result = new getOutletDetailbyOutletIdList_result();
      receiveBase(result, "getOutletDetailbyOutletIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletDetailbyOutletIdList failed: unknown result");
    }

    public com.froad.thrift.vo.OutletMongoInfoPageVoRes getOutletMongoInfoVoByPage(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId) throws org.apache.thrift.TException
    {
      send_getOutletMongoInfoVoByPage(page, longitude, latitude, merchantId);
      return recv_getOutletMongoInfoVoByPage();
    }

    public void send_getOutletMongoInfoVoByPage(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId) throws org.apache.thrift.TException
    {
      getOutletMongoInfoVoByPage_args args = new getOutletMongoInfoVoByPage_args();
      args.setPage(page);
      args.setLongitude(longitude);
      args.setLatitude(latitude);
      args.setMerchantId(merchantId);
      sendBase("getOutletMongoInfoVoByPage", args);
    }

    public com.froad.thrift.vo.OutletMongoInfoPageVoRes recv_getOutletMongoInfoVoByPage() throws org.apache.thrift.TException
    {
      getOutletMongoInfoVoByPage_result result = new getOutletMongoInfoVoByPage_result();
      receiveBase(result, "getOutletMongoInfoVoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletMongoInfoVoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo syncOutletInfo(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType) throws org.apache.thrift.TException
    {
      send_syncOutletInfo(outletVo, isSynSucc, synType);
      return recv_syncOutletInfo();
    }

    public void send_syncOutletInfo(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType) throws org.apache.thrift.TException
    {
      syncOutletInfo_args args = new syncOutletInfo_args();
      args.setOutletVo(outletVo);
      args.setIsSynSucc(isSynSucc);
      args.setSynType(synType);
      sendBase("syncOutletInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_syncOutletInfo() throws org.apache.thrift.TException
    {
      syncOutletInfo_result result = new syncOutletInfo_result();
      receiveBase(result, "syncOutletInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncOutletInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo commitAuditOutlet(String outletId, String auditId) throws org.apache.thrift.TException
    {
      send_commitAuditOutlet(outletId, auditId);
      return recv_commitAuditOutlet();
    }

    public void send_commitAuditOutlet(String outletId, String auditId) throws org.apache.thrift.TException
    {
      commitAuditOutlet_args args = new commitAuditOutlet_args();
      args.setOutletId(outletId);
      args.setAuditId(auditId);
      sendBase("commitAuditOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_commitAuditOutlet() throws org.apache.thrift.TException
    {
      commitAuditOutlet_result result = new commitAuditOutlet_result();
      receiveBase(result, "commitAuditOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commitAuditOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletTempAddVoRes saveOutletTempEditOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo) throws org.apache.thrift.TException
    {
      send_saveOutletTempEditOutlet(originVo, outletTempVo);
      return recv_saveOutletTempEditOutlet();
    }

    public void send_saveOutletTempEditOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo) throws org.apache.thrift.TException
    {
      saveOutletTempEditOutlet_args args = new saveOutletTempEditOutlet_args();
      args.setOriginVo(originVo);
      args.setOutletTempVo(outletTempVo);
      sendBase("saveOutletTempEditOutlet", args);
    }

    public com.froad.thrift.vo.OutletTempAddVoRes recv_saveOutletTempEditOutlet() throws org.apache.thrift.TException
    {
      saveOutletTempEditOutlet_result result = new saveOutletTempEditOutlet_result();
      receiveBase(result, "saveOutletTempEditOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOutletTempEditOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.OutletTempVo getOutletModifyInfos(String outletId) throws org.apache.thrift.TException
    {
      send_getOutletModifyInfos(outletId);
      return recv_getOutletModifyInfos();
    }

    public void send_getOutletModifyInfos(String outletId) throws org.apache.thrift.TException
    {
      getOutletModifyInfos_args args = new getOutletModifyInfos_args();
      args.setOutletId(outletId);
      sendBase("getOutletModifyInfos", args);
    }

    public com.froad.thrift.vo.OutletTempVo recv_getOutletModifyInfos() throws org.apache.thrift.TException
    {
      getOutletModifyInfos_result result = new getOutletModifyInfos_result();
      receiveBase(result, "getOutletModifyInfos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletModifyInfos failed: unknown result");
    }

    public com.froad.thrift.vo.OutletTempVo getOutletModifyInfoByAuditBox(String outletId, String auditId) throws org.apache.thrift.TException
    {
      send_getOutletModifyInfoByAuditBox(outletId, auditId);
      return recv_getOutletModifyInfoByAuditBox();
    }

    public void send_getOutletModifyInfoByAuditBox(String outletId, String auditId) throws org.apache.thrift.TException
    {
      getOutletModifyInfoByAuditBox_args args = new getOutletModifyInfoByAuditBox_args();
      args.setOutletId(outletId);
      args.setAuditId(auditId);
      sendBase("getOutletModifyInfoByAuditBox", args);
    }

    public com.froad.thrift.vo.OutletTempVo recv_getOutletModifyInfoByAuditBox() throws org.apache.thrift.TException
    {
      getOutletModifyInfoByAuditBox_result result = new getOutletModifyInfoByAuditBox_result();
      receiveBase(result, "getOutletModifyInfoByAuditBox");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletModifyInfoByAuditBox failed: unknown result");
    }

    public com.froad.thrift.vo.OutletPreferPageVoRes getOutletPreferByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException
    {
      send_getOutletPreferByPage(page, outletPreferVo);
      return recv_getOutletPreferByPage();
    }

    public void send_getOutletPreferByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException
    {
      getOutletPreferByPage_args args = new getOutletPreferByPage_args();
      args.setPage(page);
      args.setOutletPreferVo(outletPreferVo);
      sendBase("getOutletPreferByPage", args);
    }

    public com.froad.thrift.vo.OutletPreferPageVoRes recv_getOutletPreferByPage() throws org.apache.thrift.TException
    {
      getOutletPreferByPage_result result = new getOutletPreferByPage_result();
      receiveBase(result, "getOutletPreferByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletPreferByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes getOutletExport(com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException
    {
      send_getOutletExport(outletPreferVo);
      return recv_getOutletExport();
    }

    public void send_getOutletExport(com.froad.thrift.vo.OutletPreferVo outletPreferVo) throws org.apache.thrift.TException
    {
      getOutletExport_args args = new getOutletExport_args();
      args.setOutletPreferVo(outletPreferVo);
      sendBase("getOutletExport", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_getOutletExport() throws org.apache.thrift.TException
    {
      getOutletExport_result result = new getOutletExport_result();
      receiveBase(result, "getOutletExport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletExport failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutlet_call method_call = new addOutlet_call(originVo, outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletVo outletVo;
      public addOutlet_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutlet_args args = new addOutlet_args();
        args.setOriginVo(originVo);
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutlet();
      }
    }

    public void addOutletByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutletByBatch_call method_call = new addOutletByBatch_call(originVo, outletVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutletByBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.OutletVo> outletVoList;
      public addOutletByBatch_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.OutletVo> outletVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletVoList = outletVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutletByBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutletByBatch_args args = new addOutletByBatch_args();
        args.setOriginVo(originVo);
        args.setOutletVoList(outletVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletAddVoRes> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutletByBatch();
      }
    }

    public void deleteOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOutlet_call method_call = new deleteOutlet_call(originVo, outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletVo outletVo;
      public deleteOutlet_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOutlet_args args = new deleteOutlet_args();
        args.setOriginVo(originVo);
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOutlet();
      }
    }

    public void removeOutlet(com.froad.thrift.vo.OriginVo originVo, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeOutlet_call method_call = new removeOutlet_call(originVo, outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String outletId;
      public removeOutlet_call(com.froad.thrift.vo.OriginVo originVo, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeOutlet_args args = new removeOutlet_args();
        args.setOriginVo(originVo);
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeOutlet();
      }
    }

    public void updateOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOutlet_call method_call = new updateOutlet_call(originVo, outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletVo outletVo;
      public updateOutlet_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOutlet_args args = new updateOutlet_args();
        args.setOriginVo(originVo);
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOutlet();
      }
    }

    public void getOutletByOutletId(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletByOutletId_call method_call = new getOutletByOutletId_call(outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletByOutletId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletId;
      public getOutletByOutletId_call(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletByOutletId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletByOutletId_args args = new getOutletByOutletId_args();
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletByOutletId();
      }
    }

    public void getOutlet(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutlet_call method_call = new getOutlet_call(outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletVo outletVo;
      public getOutlet_call(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutlet_args args = new getOutlet_args();
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutlet();
      }
    }

    public void countOutlet(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countOutlet_call method_call = new countOutlet_call(outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletVo outletVo;
      public countOutlet_call(com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countOutlet_args args = new countOutlet_args();
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countOutlet();
      }
    }

    public void getBankOutlet(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankOutlet_call method_call = new getBankOutlet_call(client_id, org_code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String client_id;
      private String org_code;
      public getBankOutlet_call(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.client_id = client_id;
        this.org_code = org_code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankOutlet_args args = new getBankOutlet_args();
        args.setClient_id(client_id);
        args.setOrg_code(org_code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankOutlet();
      }
    }

    public void getSubBankOutlet(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubBankOutlet_call method_call = new getSubBankOutlet_call(client_id, org_code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubBankOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String client_id;
      private String org_code;
      public getSubBankOutlet_call(String client_id, String org_code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.client_id = client_id;
        this.org_code = org_code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubBankOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubBankOutlet_args args = new getSubBankOutlet_args();
        args.setClient_id(client_id);
        args.setOrg_code(org_code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubBankOutlet();
      }
    }

    public void getOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletByPage_call method_call = new getOutletByPage_call(page, outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletVo outletVo;
      public getOutletByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletByPage_args args = new getOutletByPage_args();
        args.setPage(page);
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletByPage();
      }
    }

    public void getOutletDetail(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletDetail_call method_call = new getOutletDetail_call(outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletId;
      public getOutletDetail_call(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletDetail_args args = new getOutletDetail_args();
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletDetailVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletDetail();
      }
    }

    public void getOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletDetailByPage_call method_call = new getOutletDetailByPage_call(page, outletDetailVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletDetailByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletDetailVo outletDetailVo;
      public getOutletDetailByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletDetailVo = outletDetailVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletDetailByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletDetailByPage_args args = new getOutletDetailByPage_args();
        args.setPage(page);
        args.setOutletDetailVo(outletDetailVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletDetailPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletDetailByPage();
      }
    }

    public void getHottestOutletDetailByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHottestOutletDetailByPage_call method_call = new getHottestOutletDetailByPage_call(page, outletDetailVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHottestOutletDetailByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletDetailVo outletDetailVo;
      public getHottestOutletDetailByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletDetailVo = outletDetailVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHottestOutletDetailByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHottestOutletDetailByPage_args args = new getHottestOutletDetailByPage_args();
        args.setPage(page);
        args.setOutletDetailVo(outletDetailVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHottestOutletDetailByPage();
      }
    }

    public void getNearbyOutlet(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNearbyOutlet_call method_call = new getNearbyOutlet_call(page, outletDetailVo, distance, orderBy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNearbyOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletDetailVo outletDetailVo;
      private double distance;
      private int orderBy;
      public getNearbyOutlet_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int orderBy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletDetailVo = outletDetailVo;
        this.distance = distance;
        this.orderBy = orderBy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNearbyOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNearbyOutlet_args args = new getNearbyOutlet_args();
        args.setPage(page);
        args.setOutletDetailVo(outletDetailVo);
        args.setDistance(distance);
        args.setOrderBy(orderBy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNearbyOutlet();
      }
    }

    public void getNearbyOutletByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNearbyOutletByPage_call method_call = new getNearbyOutletByPage_call(page, outletDetailVo, distance, skip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNearbyOutletByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletDetailVo outletDetailVo;
      private double distance;
      private int skip;
      public getNearbyOutletByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletDetailVo outletDetailVo, double distance, int skip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletDetailVo = outletDetailVo;
        this.distance = distance;
        this.skip = skip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNearbyOutletByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNearbyOutletByPage_args args = new getNearbyOutletByPage_args();
        args.setPage(page);
        args.setOutletDetailVo(outletDetailVo);
        args.setDistance(distance);
        args.setSkip(skip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletDetailSimplePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNearbyOutletByPage();
      }
    }

    public void getOutletDetailbyOutletIdList(List<String> outletIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletDetailbyOutletIdList_call method_call = new getOutletDetailbyOutletIdList_call(outletIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletDetailbyOutletIdList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> outletIdList;
      public getOutletDetailbyOutletIdList_call(List<String> outletIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletIdList = outletIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletDetailbyOutletIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletDetailbyOutletIdList_args args = new getOutletDetailbyOutletIdList_args();
        args.setOutletIdList(outletIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletDetailVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletDetailbyOutletIdList();
      }
    }

    public void getOutletMongoInfoVoByPage(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletMongoInfoVoByPage_call method_call = new getOutletMongoInfoVoByPage_call(page, longitude, latitude, merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletMongoInfoVoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private double longitude;
      private double latitude;
      private String merchantId;
      public getOutletMongoInfoVoByPage_call(com.froad.thrift.vo.PageVo page, double longitude, double latitude, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.longitude = longitude;
        this.latitude = latitude;
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletMongoInfoVoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletMongoInfoVoByPage_args args = new getOutletMongoInfoVoByPage_args();
        args.setPage(page);
        args.setLongitude(longitude);
        args.setLatitude(latitude);
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletMongoInfoPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletMongoInfoVoByPage();
      }
    }

    public void syncOutletInfo(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncOutletInfo_call method_call = new syncOutletInfo_call(outletVo, isSynSucc, synType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncOutletInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletVo outletVo;
      private String isSynSucc;
      private String synType;
      public syncOutletInfo_call(com.froad.thrift.vo.OutletVo outletVo, String isSynSucc, String synType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletVo = outletVo;
        this.isSynSucc = isSynSucc;
        this.synType = synType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncOutletInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncOutletInfo_args args = new syncOutletInfo_args();
        args.setOutletVo(outletVo);
        args.setIsSynSucc(isSynSucc);
        args.setSynType(synType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncOutletInfo();
      }
    }

    public void commitAuditOutlet(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commitAuditOutlet_call method_call = new commitAuditOutlet_call(outletId, auditId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commitAuditOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletId;
      private String auditId;
      public commitAuditOutlet_call(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletId = outletId;
        this.auditId = auditId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commitAuditOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commitAuditOutlet_args args = new commitAuditOutlet_args();
        args.setOutletId(outletId);
        args.setAuditId(auditId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commitAuditOutlet();
      }
    }

    public void saveOutletTempEditOutlet(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOutletTempEditOutlet_call method_call = new saveOutletTempEditOutlet_call(originVo, outletTempVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOutletTempEditOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletTempVo outletTempVo;
      public saveOutletTempEditOutlet_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletTempVo outletTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletTempVo = outletTempVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOutletTempEditOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOutletTempEditOutlet_args args = new saveOutletTempEditOutlet_args();
        args.setOriginVo(originVo);
        args.setOutletTempVo(outletTempVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletTempAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOutletTempEditOutlet();
      }
    }

    public void getOutletModifyInfos(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletModifyInfos_call method_call = new getOutletModifyInfos_call(outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletModifyInfos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletId;
      public getOutletModifyInfos_call(String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletModifyInfos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletModifyInfos_args args = new getOutletModifyInfos_args();
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletTempVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletModifyInfos();
      }
    }

    public void getOutletModifyInfoByAuditBox(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletModifyInfoByAuditBox_call method_call = new getOutletModifyInfoByAuditBox_call(outletId, auditId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletModifyInfoByAuditBox_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletId;
      private String auditId;
      public getOutletModifyInfoByAuditBox_call(String outletId, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletId = outletId;
        this.auditId = auditId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletModifyInfoByAuditBox", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletModifyInfoByAuditBox_args args = new getOutletModifyInfoByAuditBox_args();
        args.setOutletId(outletId);
        args.setAuditId(auditId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletTempVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletModifyInfoByAuditBox();
      }
    }

    public void getOutletPreferByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletPreferByPage_call method_call = new getOutletPreferByPage_call(page, outletPreferVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletPreferByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletPreferVo outletPreferVo;
      public getOutletPreferByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletPreferVo = outletPreferVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletPreferByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletPreferByPage_args args = new getOutletPreferByPage_args();
        args.setPage(page);
        args.setOutletPreferVo(outletPreferVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletPreferPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletPreferByPage();
      }
    }

    public void getOutletExport(com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletExport_call method_call = new getOutletExport_call(outletPreferVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletExport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletPreferVo outletPreferVo;
      public getOutletExport_call(com.froad.thrift.vo.OutletPreferVo outletPreferVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletPreferVo = outletPreferVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletExport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletExport_args args = new getOutletExport_args();
        args.setOutletPreferVo(outletPreferVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletExport();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOutlet", new addOutlet());
      processMap.put("addOutletByBatch", new addOutletByBatch());
      processMap.put("deleteOutlet", new deleteOutlet());
      processMap.put("removeOutlet", new removeOutlet());
      processMap.put("updateOutlet", new updateOutlet());
      processMap.put("getOutletByOutletId", new getOutletByOutletId());
      processMap.put("getOutlet", new getOutlet());
      processMap.put("countOutlet", new countOutlet());
      processMap.put("getBankOutlet", new getBankOutlet());
      processMap.put("getSubBankOutlet", new getSubBankOutlet());
      processMap.put("getOutletByPage", new getOutletByPage());
      processMap.put("getOutletDetail", new getOutletDetail());
      processMap.put("getOutletDetailByPage", new getOutletDetailByPage());
      processMap.put("getHottestOutletDetailByPage", new getHottestOutletDetailByPage());
      processMap.put("getNearbyOutlet", new getNearbyOutlet());
      processMap.put("getNearbyOutletByPage", new getNearbyOutletByPage());
      processMap.put("getOutletDetailbyOutletIdList", new getOutletDetailbyOutletIdList());
      processMap.put("getOutletMongoInfoVoByPage", new getOutletMongoInfoVoByPage());
      processMap.put("syncOutletInfo", new syncOutletInfo());
      processMap.put("commitAuditOutlet", new commitAuditOutlet());
      processMap.put("saveOutletTempEditOutlet", new saveOutletTempEditOutlet());
      processMap.put("getOutletModifyInfos", new getOutletModifyInfos());
      processMap.put("getOutletModifyInfoByAuditBox", new getOutletModifyInfoByAuditBox());
      processMap.put("getOutletPreferByPage", new getOutletPreferByPage());
      processMap.put("getOutletExport", new getOutletExport());
      return processMap;
    }

    public static class addOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutlet_args> {
      public addOutlet() {
        super("addOutlet");
      }

      public addOutlet_args getEmptyArgsInstance() {
        return new addOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutlet_result getResult(I iface, addOutlet_args args) throws org.apache.thrift.TException {
        addOutlet_result result = new addOutlet_result();
        result.success = iface.addOutlet(args.originVo, args.outletVo);
        return result;
      }
    }

    public static class addOutletByBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutletByBatch_args> {
      public addOutletByBatch() {
        super("addOutletByBatch");
      }

      public addOutletByBatch_args getEmptyArgsInstance() {
        return new addOutletByBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutletByBatch_result getResult(I iface, addOutletByBatch_args args) throws org.apache.thrift.TException {
        addOutletByBatch_result result = new addOutletByBatch_result();
        result.success = iface.addOutletByBatch(args.originVo, args.outletVoList);
        return result;
      }
    }

    public static class deleteOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOutlet_args> {
      public deleteOutlet() {
        super("deleteOutlet");
      }

      public deleteOutlet_args getEmptyArgsInstance() {
        return new deleteOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOutlet_result getResult(I iface, deleteOutlet_args args) throws org.apache.thrift.TException {
        deleteOutlet_result result = new deleteOutlet_result();
        result.success = iface.deleteOutlet(args.originVo, args.outletVo);
        return result;
      }
    }

    public static class removeOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeOutlet_args> {
      public removeOutlet() {
        super("removeOutlet");
      }

      public removeOutlet_args getEmptyArgsInstance() {
        return new removeOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeOutlet_result getResult(I iface, removeOutlet_args args) throws org.apache.thrift.TException {
        removeOutlet_result result = new removeOutlet_result();
        result.success = iface.removeOutlet(args.originVo, args.outletId);
        return result;
      }
    }

    public static class updateOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOutlet_args> {
      public updateOutlet() {
        super("updateOutlet");
      }

      public updateOutlet_args getEmptyArgsInstance() {
        return new updateOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOutlet_result getResult(I iface, updateOutlet_args args) throws org.apache.thrift.TException {
        updateOutlet_result result = new updateOutlet_result();
        result.success = iface.updateOutlet(args.originVo, args.outletVo);
        return result;
      }
    }

    public static class getOutletByOutletId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletByOutletId_args> {
      public getOutletByOutletId() {
        super("getOutletByOutletId");
      }

      public getOutletByOutletId_args getEmptyArgsInstance() {
        return new getOutletByOutletId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletByOutletId_result getResult(I iface, getOutletByOutletId_args args) throws org.apache.thrift.TException {
        getOutletByOutletId_result result = new getOutletByOutletId_result();
        result.success = iface.getOutletByOutletId(args.outletId);
        return result;
      }
    }

    public static class getOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutlet_args> {
      public getOutlet() {
        super("getOutlet");
      }

      public getOutlet_args getEmptyArgsInstance() {
        return new getOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutlet_result getResult(I iface, getOutlet_args args) throws org.apache.thrift.TException {
        getOutlet_result result = new getOutlet_result();
        result.success = iface.getOutlet(args.outletVo);
        return result;
      }
    }

    public static class countOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countOutlet_args> {
      public countOutlet() {
        super("countOutlet");
      }

      public countOutlet_args getEmptyArgsInstance() {
        return new countOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countOutlet_result getResult(I iface, countOutlet_args args) throws org.apache.thrift.TException {
        countOutlet_result result = new countOutlet_result();
        result.success = iface.countOutlet(args.outletVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBankOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankOutlet_args> {
      public getBankOutlet() {
        super("getBankOutlet");
      }

      public getBankOutlet_args getEmptyArgsInstance() {
        return new getBankOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankOutlet_result getResult(I iface, getBankOutlet_args args) throws org.apache.thrift.TException {
        getBankOutlet_result result = new getBankOutlet_result();
        result.success = iface.getBankOutlet(args.client_id, args.org_code);
        return result;
      }
    }

    public static class getSubBankOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubBankOutlet_args> {
      public getSubBankOutlet() {
        super("getSubBankOutlet");
      }

      public getSubBankOutlet_args getEmptyArgsInstance() {
        return new getSubBankOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubBankOutlet_result getResult(I iface, getSubBankOutlet_args args) throws org.apache.thrift.TException {
        getSubBankOutlet_result result = new getSubBankOutlet_result();
        result.success = iface.getSubBankOutlet(args.client_id, args.org_code);
        return result;
      }
    }

    public static class getOutletByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletByPage_args> {
      public getOutletByPage() {
        super("getOutletByPage");
      }

      public getOutletByPage_args getEmptyArgsInstance() {
        return new getOutletByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletByPage_result getResult(I iface, getOutletByPage_args args) throws org.apache.thrift.TException {
        getOutletByPage_result result = new getOutletByPage_result();
        result.success = iface.getOutletByPage(args.page, args.outletVo);
        return result;
      }
    }

    public static class getOutletDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletDetail_args> {
      public getOutletDetail() {
        super("getOutletDetail");
      }

      public getOutletDetail_args getEmptyArgsInstance() {
        return new getOutletDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletDetail_result getResult(I iface, getOutletDetail_args args) throws org.apache.thrift.TException {
        getOutletDetail_result result = new getOutletDetail_result();
        result.success = iface.getOutletDetail(args.outletId);
        return result;
      }
    }

    public static class getOutletDetailByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletDetailByPage_args> {
      public getOutletDetailByPage() {
        super("getOutletDetailByPage");
      }

      public getOutletDetailByPage_args getEmptyArgsInstance() {
        return new getOutletDetailByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletDetailByPage_result getResult(I iface, getOutletDetailByPage_args args) throws org.apache.thrift.TException {
        getOutletDetailByPage_result result = new getOutletDetailByPage_result();
        result.success = iface.getOutletDetailByPage(args.page, args.outletDetailVo);
        return result;
      }
    }

    public static class getHottestOutletDetailByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHottestOutletDetailByPage_args> {
      public getHottestOutletDetailByPage() {
        super("getHottestOutletDetailByPage");
      }

      public getHottestOutletDetailByPage_args getEmptyArgsInstance() {
        return new getHottestOutletDetailByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHottestOutletDetailByPage_result getResult(I iface, getHottestOutletDetailByPage_args args) throws org.apache.thrift.TException {
        getHottestOutletDetailByPage_result result = new getHottestOutletDetailByPage_result();
        result.success = iface.getHottestOutletDetailByPage(args.page, args.outletDetailVo);
        return result;
      }
    }

    public static class getNearbyOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNearbyOutlet_args> {
      public getNearbyOutlet() {
        super("getNearbyOutlet");
      }

      public getNearbyOutlet_args getEmptyArgsInstance() {
        return new getNearbyOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNearbyOutlet_result getResult(I iface, getNearbyOutlet_args args) throws org.apache.thrift.TException {
        getNearbyOutlet_result result = new getNearbyOutlet_result();
        result.success = iface.getNearbyOutlet(args.page, args.outletDetailVo, args.distance, args.orderBy);
        return result;
      }
    }

    public static class getNearbyOutletByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNearbyOutletByPage_args> {
      public getNearbyOutletByPage() {
        super("getNearbyOutletByPage");
      }

      public getNearbyOutletByPage_args getEmptyArgsInstance() {
        return new getNearbyOutletByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNearbyOutletByPage_result getResult(I iface, getNearbyOutletByPage_args args) throws org.apache.thrift.TException {
        getNearbyOutletByPage_result result = new getNearbyOutletByPage_result();
        result.success = iface.getNearbyOutletByPage(args.page, args.outletDetailVo, args.distance, args.skip);
        return result;
      }
    }

    public static class getOutletDetailbyOutletIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletDetailbyOutletIdList_args> {
      public getOutletDetailbyOutletIdList() {
        super("getOutletDetailbyOutletIdList");
      }

      public getOutletDetailbyOutletIdList_args getEmptyArgsInstance() {
        return new getOutletDetailbyOutletIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletDetailbyOutletIdList_result getResult(I iface, getOutletDetailbyOutletIdList_args args) throws org.apache.thrift.TException {
        getOutletDetailbyOutletIdList_result result = new getOutletDetailbyOutletIdList_result();
        result.success = iface.getOutletDetailbyOutletIdList(args.outletIdList);
        return result;
      }
    }

    public static class getOutletMongoInfoVoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletMongoInfoVoByPage_args> {
      public getOutletMongoInfoVoByPage() {
        super("getOutletMongoInfoVoByPage");
      }

      public getOutletMongoInfoVoByPage_args getEmptyArgsInstance() {
        return new getOutletMongoInfoVoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletMongoInfoVoByPage_result getResult(I iface, getOutletMongoInfoVoByPage_args args) throws org.apache.thrift.TException {
        getOutletMongoInfoVoByPage_result result = new getOutletMongoInfoVoByPage_result();
        result.success = iface.getOutletMongoInfoVoByPage(args.page, args.longitude, args.latitude, args.merchantId);
        return result;
      }
    }

    public static class syncOutletInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncOutletInfo_args> {
      public syncOutletInfo() {
        super("syncOutletInfo");
      }

      public syncOutletInfo_args getEmptyArgsInstance() {
        return new syncOutletInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncOutletInfo_result getResult(I iface, syncOutletInfo_args args) throws org.apache.thrift.TException {
        syncOutletInfo_result result = new syncOutletInfo_result();
        result.success = iface.syncOutletInfo(args.outletVo, args.isSynSucc, args.synType);
        return result;
      }
    }

    public static class commitAuditOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commitAuditOutlet_args> {
      public commitAuditOutlet() {
        super("commitAuditOutlet");
      }

      public commitAuditOutlet_args getEmptyArgsInstance() {
        return new commitAuditOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commitAuditOutlet_result getResult(I iface, commitAuditOutlet_args args) throws org.apache.thrift.TException {
        commitAuditOutlet_result result = new commitAuditOutlet_result();
        result.success = iface.commitAuditOutlet(args.outletId, args.auditId);
        return result;
      }
    }

    public static class saveOutletTempEditOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOutletTempEditOutlet_args> {
      public saveOutletTempEditOutlet() {
        super("saveOutletTempEditOutlet");
      }

      public saveOutletTempEditOutlet_args getEmptyArgsInstance() {
        return new saveOutletTempEditOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOutletTempEditOutlet_result getResult(I iface, saveOutletTempEditOutlet_args args) throws org.apache.thrift.TException {
        saveOutletTempEditOutlet_result result = new saveOutletTempEditOutlet_result();
        result.success = iface.saveOutletTempEditOutlet(args.originVo, args.outletTempVo);
        return result;
      }
    }

    public static class getOutletModifyInfos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletModifyInfos_args> {
      public getOutletModifyInfos() {
        super("getOutletModifyInfos");
      }

      public getOutletModifyInfos_args getEmptyArgsInstance() {
        return new getOutletModifyInfos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletModifyInfos_result getResult(I iface, getOutletModifyInfos_args args) throws org.apache.thrift.TException {
        getOutletModifyInfos_result result = new getOutletModifyInfos_result();
        result.success = iface.getOutletModifyInfos(args.outletId);
        return result;
      }
    }

    public static class getOutletModifyInfoByAuditBox<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletModifyInfoByAuditBox_args> {
      public getOutletModifyInfoByAuditBox() {
        super("getOutletModifyInfoByAuditBox");
      }

      public getOutletModifyInfoByAuditBox_args getEmptyArgsInstance() {
        return new getOutletModifyInfoByAuditBox_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletModifyInfoByAuditBox_result getResult(I iface, getOutletModifyInfoByAuditBox_args args) throws org.apache.thrift.TException {
        getOutletModifyInfoByAuditBox_result result = new getOutletModifyInfoByAuditBox_result();
        result.success = iface.getOutletModifyInfoByAuditBox(args.outletId, args.auditId);
        return result;
      }
    }

    public static class getOutletPreferByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletPreferByPage_args> {
      public getOutletPreferByPage() {
        super("getOutletPreferByPage");
      }

      public getOutletPreferByPage_args getEmptyArgsInstance() {
        return new getOutletPreferByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletPreferByPage_result getResult(I iface, getOutletPreferByPage_args args) throws org.apache.thrift.TException {
        getOutletPreferByPage_result result = new getOutletPreferByPage_result();
        result.success = iface.getOutletPreferByPage(args.page, args.outletPreferVo);
        return result;
      }
    }

    public static class getOutletExport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletExport_args> {
      public getOutletExport() {
        super("getOutletExport");
      }

      public getOutletExport_args getEmptyArgsInstance() {
        return new getOutletExport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletExport_result getResult(I iface, getOutletExport_args args) throws org.apache.thrift.TException {
        getOutletExport_result result = new getOutletExport_result();
        result.success = iface.getOutletExport(args.outletPreferVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOutlet", new addOutlet());
      processMap.put("addOutletByBatch", new addOutletByBatch());
      processMap.put("deleteOutlet", new deleteOutlet());
      processMap.put("removeOutlet", new removeOutlet());
      processMap.put("updateOutlet", new updateOutlet());
      processMap.put("getOutletByOutletId", new getOutletByOutletId());
      processMap.put("getOutlet", new getOutlet());
      processMap.put("countOutlet", new countOutlet());
      processMap.put("getBankOutlet", new getBankOutlet());
      processMap.put("getSubBankOutlet", new getSubBankOutlet());
      processMap.put("getOutletByPage", new getOutletByPage());
      processMap.put("getOutletDetail", new getOutletDetail());
      processMap.put("getOutletDetailByPage", new getOutletDetailByPage());
      processMap.put("getHottestOutletDetailByPage", new getHottestOutletDetailByPage());
      processMap.put("getNearbyOutlet", new getNearbyOutlet());
      processMap.put("getNearbyOutletByPage", new getNearbyOutletByPage());
      processMap.put("getOutletDetailbyOutletIdList", new getOutletDetailbyOutletIdList());
      processMap.put("getOutletMongoInfoVoByPage", new getOutletMongoInfoVoByPage());
      processMap.put("syncOutletInfo", new syncOutletInfo());
      processMap.put("commitAuditOutlet", new commitAuditOutlet());
      processMap.put("saveOutletTempEditOutlet", new saveOutletTempEditOutlet());
      processMap.put("getOutletModifyInfos", new getOutletModifyInfos());
      processMap.put("getOutletModifyInfoByAuditBox", new getOutletModifyInfoByAuditBox());
      processMap.put("getOutletPreferByPage", new getOutletPreferByPage());
      processMap.put("getOutletExport", new getOutletExport());
      return processMap;
    }

    public static class addOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutlet_args, com.froad.thrift.vo.OutletAddVoRes> {
      public addOutlet() {
        super("addOutlet");
      }

      public addOutlet_args getEmptyArgsInstance() {
        return new addOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletAddVoRes o) {
            addOutlet_result result = new addOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutlet_result result = new addOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletAddVoRes> resultHandler) throws TException {
        iface.addOutlet(args.originVo, args.outletVo,resultHandler);
      }
    }

    public static class addOutletByBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutletByBatch_args, List<com.froad.thrift.vo.OutletAddVoRes>> {
      public addOutletByBatch() {
        super("addOutletByBatch");
      }

      public addOutletByBatch_args getEmptyArgsInstance() {
        return new addOutletByBatch_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletAddVoRes>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletAddVoRes>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletAddVoRes> o) {
            addOutletByBatch_result result = new addOutletByBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutletByBatch_result result = new addOutletByBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutletByBatch_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletAddVoRes>> resultHandler) throws TException {
        iface.addOutletByBatch(args.originVo, args.outletVoList,resultHandler);
      }
    }

    public static class deleteOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOutlet_args, com.froad.thrift.vo.ResultVo> {
      public deleteOutlet() {
        super("deleteOutlet");
      }

      public deleteOutlet_args getEmptyArgsInstance() {
        return new deleteOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteOutlet_result result = new deleteOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOutlet_result result = new deleteOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteOutlet(args.originVo, args.outletVo,resultHandler);
      }
    }

    public static class removeOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeOutlet_args, com.froad.thrift.vo.ResultVo> {
      public removeOutlet() {
        super("removeOutlet");
      }

      public removeOutlet_args getEmptyArgsInstance() {
        return new removeOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            removeOutlet_result result = new removeOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeOutlet_result result = new removeOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.removeOutlet(args.originVo, args.outletId,resultHandler);
      }
    }

    public static class updateOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOutlet_args, com.froad.thrift.vo.ResultVo> {
      public updateOutlet() {
        super("updateOutlet");
      }

      public updateOutlet_args getEmptyArgsInstance() {
        return new updateOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateOutlet_result result = new updateOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOutlet_result result = new updateOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateOutlet(args.originVo, args.outletVo,resultHandler);
      }
    }

    public static class getOutletByOutletId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletByOutletId_args, com.froad.thrift.vo.OutletVo> {
      public getOutletByOutletId() {
        super("getOutletByOutletId");
      }

      public getOutletByOutletId_args getEmptyArgsInstance() {
        return new getOutletByOutletId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletVo o) {
            getOutletByOutletId_result result = new getOutletByOutletId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletByOutletId_result result = new getOutletByOutletId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletByOutletId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletVo> resultHandler) throws TException {
        iface.getOutletByOutletId(args.outletId,resultHandler);
      }
    }

    public static class getOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutlet_args, List<com.froad.thrift.vo.OutletVo>> {
      public getOutlet() {
        super("getOutlet");
      }

      public getOutlet_args getEmptyArgsInstance() {
        return new getOutlet_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletVo> o) {
            getOutlet_result result = new getOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutlet_result result = new getOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>> resultHandler) throws TException {
        iface.getOutlet(args.outletVo,resultHandler);
      }
    }

    public static class countOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countOutlet_args, Integer> {
      public countOutlet() {
        super("countOutlet");
      }

      public countOutlet_args getEmptyArgsInstance() {
        return new countOutlet_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countOutlet_result result = new countOutlet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countOutlet_result result = new countOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countOutlet(args.outletVo,resultHandler);
      }
    }

    public static class getBankOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankOutlet_args, com.froad.thrift.vo.OutletVo> {
      public getBankOutlet() {
        super("getBankOutlet");
      }

      public getBankOutlet_args getEmptyArgsInstance() {
        return new getBankOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletVo o) {
            getBankOutlet_result result = new getBankOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankOutlet_result result = new getBankOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletVo> resultHandler) throws TException {
        iface.getBankOutlet(args.client_id, args.org_code,resultHandler);
      }
    }

    public static class getSubBankOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubBankOutlet_args, List<com.froad.thrift.vo.OutletVo>> {
      public getSubBankOutlet() {
        super("getSubBankOutlet");
      }

      public getSubBankOutlet_args getEmptyArgsInstance() {
        return new getSubBankOutlet_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletVo> o) {
            getSubBankOutlet_result result = new getSubBankOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubBankOutlet_result result = new getSubBankOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubBankOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletVo>> resultHandler) throws TException {
        iface.getSubBankOutlet(args.client_id, args.org_code,resultHandler);
      }
    }

    public static class getOutletByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletByPage_args, com.froad.thrift.vo.OutletPageVoRes> {
      public getOutletByPage() {
        super("getOutletByPage");
      }

      public getOutletByPage_args getEmptyArgsInstance() {
        return new getOutletByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletPageVoRes o) {
            getOutletByPage_result result = new getOutletByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletByPage_result result = new getOutletByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletPageVoRes> resultHandler) throws TException {
        iface.getOutletByPage(args.page, args.outletVo,resultHandler);
      }
    }

    public static class getOutletDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletDetail_args, com.froad.thrift.vo.OutletDetailVo> {
      public getOutletDetail() {
        super("getOutletDetail");
      }

      public getOutletDetail_args getEmptyArgsInstance() {
        return new getOutletDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletDetailVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletDetailVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletDetailVo o) {
            getOutletDetail_result result = new getOutletDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletDetail_result result = new getOutletDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletDetailVo> resultHandler) throws TException {
        iface.getOutletDetail(args.outletId,resultHandler);
      }
    }

    public static class getOutletDetailByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletDetailByPage_args, com.froad.thrift.vo.OutletDetailPageVoRes> {
      public getOutletDetailByPage() {
        super("getOutletDetailByPage");
      }

      public getOutletDetailByPage_args getEmptyArgsInstance() {
        return new getOutletDetailByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletDetailPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletDetailPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletDetailPageVoRes o) {
            getOutletDetailByPage_result result = new getOutletDetailByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletDetailByPage_result result = new getOutletDetailByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletDetailByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletDetailPageVoRes> resultHandler) throws TException {
        iface.getOutletDetailByPage(args.page, args.outletDetailVo,resultHandler);
      }
    }

    public static class getHottestOutletDetailByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHottestOutletDetailByPage_args, com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> {
      public getHottestOutletDetailByPage() {
        super("getHottestOutletDetailByPage");
      }

      public getHottestOutletDetailByPage_args getEmptyArgsInstance() {
        return new getHottestOutletDetailByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes o) {
            getHottestOutletDetailByPage_result result = new getHottestOutletDetailByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHottestOutletDetailByPage_result result = new getHottestOutletDetailByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHottestOutletDetailByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> resultHandler) throws TException {
        iface.getHottestOutletDetailByPage(args.page, args.outletDetailVo,resultHandler);
      }
    }

    public static class getNearbyOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNearbyOutlet_args, com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> {
      public getNearbyOutlet() {
        super("getNearbyOutlet");
      }

      public getNearbyOutlet_args getEmptyArgsInstance() {
        return new getNearbyOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes o) {
            getNearbyOutlet_result result = new getNearbyOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNearbyOutlet_result result = new getNearbyOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNearbyOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes> resultHandler) throws TException {
        iface.getNearbyOutlet(args.page, args.outletDetailVo, args.distance, args.orderBy,resultHandler);
      }
    }

    public static class getNearbyOutletByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNearbyOutletByPage_args, com.froad.thrift.vo.OutletDetailSimplePageVoRes> {
      public getNearbyOutletByPage() {
        super("getNearbyOutletByPage");
      }

      public getNearbyOutletByPage_args getEmptyArgsInstance() {
        return new getNearbyOutletByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimplePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimplePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletDetailSimplePageVoRes o) {
            getNearbyOutletByPage_result result = new getNearbyOutletByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNearbyOutletByPage_result result = new getNearbyOutletByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNearbyOutletByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletDetailSimplePageVoRes> resultHandler) throws TException {
        iface.getNearbyOutletByPage(args.page, args.outletDetailVo, args.distance, args.skip,resultHandler);
      }
    }

    public static class getOutletDetailbyOutletIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletDetailbyOutletIdList_args, List<com.froad.thrift.vo.OutletDetailVo>> {
      public getOutletDetailbyOutletIdList() {
        super("getOutletDetailbyOutletIdList");
      }

      public getOutletDetailbyOutletIdList_args getEmptyArgsInstance() {
        return new getOutletDetailbyOutletIdList_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletDetailVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletDetailVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletDetailVo> o) {
            getOutletDetailbyOutletIdList_result result = new getOutletDetailbyOutletIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletDetailbyOutletIdList_result result = new getOutletDetailbyOutletIdList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletDetailbyOutletIdList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletDetailVo>> resultHandler) throws TException {
        iface.getOutletDetailbyOutletIdList(args.outletIdList,resultHandler);
      }
    }

    public static class getOutletMongoInfoVoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletMongoInfoVoByPage_args, com.froad.thrift.vo.OutletMongoInfoPageVoRes> {
      public getOutletMongoInfoVoByPage() {
        super("getOutletMongoInfoVoByPage");
      }

      public getOutletMongoInfoVoByPage_args getEmptyArgsInstance() {
        return new getOutletMongoInfoVoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletMongoInfoPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletMongoInfoPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletMongoInfoPageVoRes o) {
            getOutletMongoInfoVoByPage_result result = new getOutletMongoInfoVoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletMongoInfoVoByPage_result result = new getOutletMongoInfoVoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletMongoInfoVoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletMongoInfoPageVoRes> resultHandler) throws TException {
        iface.getOutletMongoInfoVoByPage(args.page, args.longitude, args.latitude, args.merchantId,resultHandler);
      }
    }

    public static class syncOutletInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncOutletInfo_args, com.froad.thrift.vo.ResultVo> {
      public syncOutletInfo() {
        super("syncOutletInfo");
      }

      public syncOutletInfo_args getEmptyArgsInstance() {
        return new syncOutletInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            syncOutletInfo_result result = new syncOutletInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncOutletInfo_result result = new syncOutletInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncOutletInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.syncOutletInfo(args.outletVo, args.isSynSucc, args.synType,resultHandler);
      }
    }

    public static class commitAuditOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commitAuditOutlet_args, com.froad.thrift.vo.ResultVo> {
      public commitAuditOutlet() {
        super("commitAuditOutlet");
      }

      public commitAuditOutlet_args getEmptyArgsInstance() {
        return new commitAuditOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            commitAuditOutlet_result result = new commitAuditOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commitAuditOutlet_result result = new commitAuditOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commitAuditOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.commitAuditOutlet(args.outletId, args.auditId,resultHandler);
      }
    }

    public static class saveOutletTempEditOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOutletTempEditOutlet_args, com.froad.thrift.vo.OutletTempAddVoRes> {
      public saveOutletTempEditOutlet() {
        super("saveOutletTempEditOutlet");
      }

      public saveOutletTempEditOutlet_args getEmptyArgsInstance() {
        return new saveOutletTempEditOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletTempAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletTempAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletTempAddVoRes o) {
            saveOutletTempEditOutlet_result result = new saveOutletTempEditOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOutletTempEditOutlet_result result = new saveOutletTempEditOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOutletTempEditOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletTempAddVoRes> resultHandler) throws TException {
        iface.saveOutletTempEditOutlet(args.originVo, args.outletTempVo,resultHandler);
      }
    }

    public static class getOutletModifyInfos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletModifyInfos_args, com.froad.thrift.vo.OutletTempVo> {
      public getOutletModifyInfos() {
        super("getOutletModifyInfos");
      }

      public getOutletModifyInfos_args getEmptyArgsInstance() {
        return new getOutletModifyInfos_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletTempVo o) {
            getOutletModifyInfos_result result = new getOutletModifyInfos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletModifyInfos_result result = new getOutletModifyInfos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletModifyInfos_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo> resultHandler) throws TException {
        iface.getOutletModifyInfos(args.outletId,resultHandler);
      }
    }

    public static class getOutletModifyInfoByAuditBox<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletModifyInfoByAuditBox_args, com.froad.thrift.vo.OutletTempVo> {
      public getOutletModifyInfoByAuditBox() {
        super("getOutletModifyInfoByAuditBox");
      }

      public getOutletModifyInfoByAuditBox_args getEmptyArgsInstance() {
        return new getOutletModifyInfoByAuditBox_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletTempVo o) {
            getOutletModifyInfoByAuditBox_result result = new getOutletModifyInfoByAuditBox_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletModifyInfoByAuditBox_result result = new getOutletModifyInfoByAuditBox_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletModifyInfoByAuditBox_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletTempVo> resultHandler) throws TException {
        iface.getOutletModifyInfoByAuditBox(args.outletId, args.auditId,resultHandler);
      }
    }

    public static class getOutletPreferByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletPreferByPage_args, com.froad.thrift.vo.OutletPreferPageVoRes> {
      public getOutletPreferByPage() {
        super("getOutletPreferByPage");
      }

      public getOutletPreferByPage_args getEmptyArgsInstance() {
        return new getOutletPreferByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletPreferPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletPreferPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletPreferPageVoRes o) {
            getOutletPreferByPage_result result = new getOutletPreferByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletPreferByPage_result result = new getOutletPreferByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletPreferByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletPreferPageVoRes> resultHandler) throws TException {
        iface.getOutletPreferByPage(args.page, args.outletPreferVo,resultHandler);
      }
    }

    public static class getOutletExport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletExport_args, com.froad.thrift.vo.ExportResultRes> {
      public getOutletExport() {
        super("getOutletExport");
      }

      public getOutletExport_args getEmptyArgsInstance() {
        return new getOutletExport_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            getOutletExport_result result = new getOutletExport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletExport_result result = new getOutletExport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletExport_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.getOutletExport(args.outletPreferVo,resultHandler);
      }
    }

  }

  public static class addOutlet_args implements org.apache.thrift.TBase<addOutlet_args, addOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutlet_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_VO((short)2, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutlet_args.class, metaDataMap);
    }

    public addOutlet_args() {
    }

    public addOutlet_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.originVo = originVo;
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutlet_args(addOutlet_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public addOutlet_args deepCopy() {
      return new addOutlet_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOutlet_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public addOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutlet_args)
        return this.equals((addOutlet_args)that);
      return false;
    }

    public boolean equals(addOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutlet_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public addOutlet_argsStandardScheme getScheme() {
        return new addOutlet_argsStandardScheme();
      }
    }

    private static class addOutlet_argsStandardScheme extends StandardScheme<addOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public addOutlet_argsTupleScheme getScheme() {
        return new addOutlet_argsTupleScheme();
      }
    }

    private static class addOutlet_argsTupleScheme extends TupleScheme<addOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class addOutlet_result implements org.apache.thrift.TBase<addOutlet_result, addOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutlet_result.class, metaDataMap);
    }

    public addOutlet_result() {
    }

    public addOutlet_result(
      com.froad.thrift.vo.OutletAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutlet_result(addOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletAddVoRes(other.success);
      }
    }

    public addOutlet_result deepCopy() {
      return new addOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletAddVoRes getSuccess() {
      return this.success;
    }

    public addOutlet_result setSuccess(com.froad.thrift.vo.OutletAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutlet_result)
        return this.equals((addOutlet_result)that);
      return false;
    }

    public boolean equals(addOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public addOutlet_resultStandardScheme getScheme() {
        return new addOutlet_resultStandardScheme();
      }
    }

    private static class addOutlet_resultStandardScheme extends StandardScheme<addOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public addOutlet_resultTupleScheme getScheme() {
        return new addOutlet_resultTupleScheme();
      }
    }

    private static class addOutlet_resultTupleScheme extends TupleScheme<addOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOutletByBatch_args implements org.apache.thrift.TBase<addOutletByBatch_args, addOutletByBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletByBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletByBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletByBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletByBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.OutletVo> outletVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_VO_LIST((short)2, "outletVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_VO_LIST
            return OUTLET_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("outletVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletByBatch_args.class, metaDataMap);
    }

    public addOutletByBatch_args() {
    }

    public addOutletByBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.OutletVo> outletVoList)
    {
      this();
      this.originVo = originVo;
      this.outletVoList = outletVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletByBatch_args(addOutletByBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletVoList()) {
        List<com.froad.thrift.vo.OutletVo> __this__outletVoList = new ArrayList<com.froad.thrift.vo.OutletVo>(other.outletVoList.size());
        for (com.froad.thrift.vo.OutletVo other_element : other.outletVoList) {
          __this__outletVoList.add(new com.froad.thrift.vo.OutletVo(other_element));
        }
        this.outletVoList = __this__outletVoList;
      }
    }

    public addOutletByBatch_args deepCopy() {
      return new addOutletByBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOutletByBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getOutletVoListSize() {
      return (this.outletVoList == null) ? 0 : this.outletVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletVo> getOutletVoListIterator() {
      return (this.outletVoList == null) ? null : this.outletVoList.iterator();
    }

    public void addToOutletVoList(com.froad.thrift.vo.OutletVo elem) {
      if (this.outletVoList == null) {
        this.outletVoList = new ArrayList<com.froad.thrift.vo.OutletVo>();
      }
      this.outletVoList.add(elem);
    }

    public List<com.froad.thrift.vo.OutletVo> getOutletVoList() {
      return this.outletVoList;
    }

    public addOutletByBatch_args setOutletVoList(List<com.froad.thrift.vo.OutletVo> outletVoList) {
      this.outletVoList = outletVoList;
      return this;
    }

    public void unsetOutletVoList() {
      this.outletVoList = null;
    }

    /** Returns true if field outletVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVoList() {
      return this.outletVoList != null;
    }

    public void setOutletVoListIsSet(boolean value) {
      if (!value) {
        this.outletVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_VO_LIST:
        if (value == null) {
          unsetOutletVoList();
        } else {
          setOutletVoList((List<com.froad.thrift.vo.OutletVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_VO_LIST:
        return getOutletVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_VO_LIST:
        return isSetOutletVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletByBatch_args)
        return this.equals((addOutletByBatch_args)that);
      return false;
    }

    public boolean equals(addOutletByBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletVoList = true && this.isSetOutletVoList();
      boolean that_present_outletVoList = true && that.isSetOutletVoList();
      if (this_present_outletVoList || that_present_outletVoList) {
        if (!(this_present_outletVoList && that_present_outletVoList))
          return false;
        if (!this.outletVoList.equals(that.outletVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletVoList = true && (isSetOutletVoList());
      list.add(present_outletVoList);
      if (present_outletVoList)
        list.add(outletVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletByBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVoList()).compareTo(other.isSetOutletVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVoList, other.outletVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletByBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVoList:");
      if (this.outletVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletByBatch_argsStandardSchemeFactory implements SchemeFactory {
      public addOutletByBatch_argsStandardScheme getScheme() {
        return new addOutletByBatch_argsStandardScheme();
      }
    }

    private static class addOutletByBatch_argsStandardScheme extends StandardScheme<addOutletByBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletByBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.outletVoList = new ArrayList<com.froad.thrift.vo.OutletVo>(_list0.size);
                  com.froad.thrift.vo.OutletVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.OutletVo();
                    _elem1.read(iprot);
                    struct.outletVoList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOutletVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletByBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletVoList != null) {
          oprot.writeFieldBegin(OUTLET_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outletVoList.size()));
            for (com.froad.thrift.vo.OutletVo _iter3 : struct.outletVoList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletByBatch_argsTupleSchemeFactory implements SchemeFactory {
      public addOutletByBatch_argsTupleScheme getScheme() {
        return new addOutletByBatch_argsTupleScheme();
      }
    }

    private static class addOutletByBatch_argsTupleScheme extends TupleScheme<addOutletByBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletByBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletVoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletVoList()) {
          {
            oprot.writeI32(struct.outletVoList.size());
            for (com.froad.thrift.vo.OutletVo _iter4 : struct.outletVoList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletByBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.outletVoList = new ArrayList<com.froad.thrift.vo.OutletVo>(_list5.size);
            com.froad.thrift.vo.OutletVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.OutletVo();
              _elem6.read(iprot);
              struct.outletVoList.add(_elem6);
            }
          }
          struct.setOutletVoListIsSet(true);
        }
      }
    }

  }

  public static class addOutletByBatch_result implements org.apache.thrift.TBase<addOutletByBatch_result, addOutletByBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletByBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletByBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletByBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletByBatch_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletAddVoRes> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletAddVoRes.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletByBatch_result.class, metaDataMap);
    }

    public addOutletByBatch_result() {
    }

    public addOutletByBatch_result(
      List<com.froad.thrift.vo.OutletAddVoRes> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletByBatch_result(addOutletByBatch_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletAddVoRes> __this__success = new ArrayList<com.froad.thrift.vo.OutletAddVoRes>(other.success.size());
        for (com.froad.thrift.vo.OutletAddVoRes other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletAddVoRes(other_element));
        }
        this.success = __this__success;
      }
    }

    public addOutletByBatch_result deepCopy() {
      return new addOutletByBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletAddVoRes> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletAddVoRes elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletAddVoRes>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletAddVoRes> getSuccess() {
      return this.success;
    }

    public addOutletByBatch_result setSuccess(List<com.froad.thrift.vo.OutletAddVoRes> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletAddVoRes>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletByBatch_result)
        return this.equals((addOutletByBatch_result)that);
      return false;
    }

    public boolean equals(addOutletByBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletByBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletByBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletByBatch_resultStandardSchemeFactory implements SchemeFactory {
      public addOutletByBatch_resultStandardScheme getScheme() {
        return new addOutletByBatch_resultStandardScheme();
      }
    }

    private static class addOutletByBatch_resultStandardScheme extends StandardScheme<addOutletByBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletByBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletAddVoRes>(_list8.size);
                  com.froad.thrift.vo.OutletAddVoRes _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.OutletAddVoRes();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletByBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletAddVoRes _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletByBatch_resultTupleSchemeFactory implements SchemeFactory {
      public addOutletByBatch_resultTupleScheme getScheme() {
        return new addOutletByBatch_resultTupleScheme();
      }
    }

    private static class addOutletByBatch_resultTupleScheme extends TupleScheme<addOutletByBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletByBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletAddVoRes _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletByBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletAddVoRes>(_list13.size);
            com.froad.thrift.vo.OutletAddVoRes _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.OutletAddVoRes();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOutlet_args implements org.apache.thrift.TBase<deleteOutlet_args, deleteOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutlet_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_VO((short)2, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutlet_args.class, metaDataMap);
    }

    public deleteOutlet_args() {
    }

    public deleteOutlet_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.originVo = originVo;
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutlet_args(deleteOutlet_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public deleteOutlet_args deepCopy() {
      return new deleteOutlet_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteOutlet_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public deleteOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutlet_args)
        return this.equals((deleteOutlet_args)that);
      return false;
    }

    public boolean equals(deleteOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutlet_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOutlet_argsStandardScheme getScheme() {
        return new deleteOutlet_argsStandardScheme();
      }
    }

    private static class deleteOutlet_argsStandardScheme extends StandardScheme<deleteOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOutlet_argsTupleScheme getScheme() {
        return new deleteOutlet_argsTupleScheme();
      }
    }

    private static class deleteOutlet_argsTupleScheme extends TupleScheme<deleteOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class deleteOutlet_result implements org.apache.thrift.TBase<deleteOutlet_result, deleteOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutlet_result.class, metaDataMap);
    }

    public deleteOutlet_result() {
    }

    public deleteOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutlet_result(deleteOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteOutlet_result deepCopy() {
      return new deleteOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutlet_result)
        return this.equals((deleteOutlet_result)that);
      return false;
    }

    public boolean equals(deleteOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOutlet_resultStandardScheme getScheme() {
        return new deleteOutlet_resultStandardScheme();
      }
    }

    private static class deleteOutlet_resultStandardScheme extends StandardScheme<deleteOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOutlet_resultTupleScheme getScheme() {
        return new deleteOutlet_resultTupleScheme();
      }
    }

    private static class deleteOutlet_resultTupleScheme extends TupleScheme<deleteOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeOutlet_args implements org.apache.thrift.TBase<removeOutlet_args, removeOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOutlet_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_ID((short)2, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOutlet_args.class, metaDataMap);
    }

    public removeOutlet_args() {
    }

    public removeOutlet_args(
      com.froad.thrift.vo.OriginVo originVo,
      String outletId)
    {
      this();
      this.originVo = originVo;
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOutlet_args(removeOutlet_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public removeOutlet_args deepCopy() {
      return new removeOutlet_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public removeOutlet_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getOutletId() {
      return this.outletId;
    }

    public removeOutlet_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOutlet_args)
        return this.equals((removeOutlet_args)that);
      return false;
    }

    public boolean equals(removeOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOutlet_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public removeOutlet_argsStandardScheme getScheme() {
        return new removeOutlet_argsStandardScheme();
      }
    }

    private static class removeOutlet_argsStandardScheme extends StandardScheme<removeOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public removeOutlet_argsTupleScheme getScheme() {
        return new removeOutlet_argsTupleScheme();
      }
    }

    private static class removeOutlet_argsTupleScheme extends TupleScheme<removeOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class removeOutlet_result implements org.apache.thrift.TBase<removeOutlet_result, removeOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOutlet_result.class, metaDataMap);
    }

    public removeOutlet_result() {
    }

    public removeOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOutlet_result(removeOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public removeOutlet_result deepCopy() {
      return new removeOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public removeOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOutlet_result)
        return this.equals((removeOutlet_result)that);
      return false;
    }

    public boolean equals(removeOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public removeOutlet_resultStandardScheme getScheme() {
        return new removeOutlet_resultStandardScheme();
      }
    }

    private static class removeOutlet_resultStandardScheme extends StandardScheme<removeOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public removeOutlet_resultTupleScheme getScheme() {
        return new removeOutlet_resultTupleScheme();
      }
    }

    private static class removeOutlet_resultTupleScheme extends TupleScheme<removeOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOutlet_args implements org.apache.thrift.TBase<updateOutlet_args, updateOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutlet_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_VO((short)2, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutlet_args.class, metaDataMap);
    }

    public updateOutlet_args() {
    }

    public updateOutlet_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.originVo = originVo;
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutlet_args(updateOutlet_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public updateOutlet_args deepCopy() {
      return new updateOutlet_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateOutlet_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public updateOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutlet_args)
        return this.equals((updateOutlet_args)that);
      return false;
    }

    public boolean equals(updateOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutlet_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public updateOutlet_argsStandardScheme getScheme() {
        return new updateOutlet_argsStandardScheme();
      }
    }

    private static class updateOutlet_argsStandardScheme extends StandardScheme<updateOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public updateOutlet_argsTupleScheme getScheme() {
        return new updateOutlet_argsTupleScheme();
      }
    }

    private static class updateOutlet_argsTupleScheme extends TupleScheme<updateOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class updateOutlet_result implements org.apache.thrift.TBase<updateOutlet_result, updateOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutlet_result.class, metaDataMap);
    }

    public updateOutlet_result() {
    }

    public updateOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutlet_result(updateOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateOutlet_result deepCopy() {
      return new updateOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutlet_result)
        return this.equals((updateOutlet_result)that);
      return false;
    }

    public boolean equals(updateOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public updateOutlet_resultStandardScheme getScheme() {
        return new updateOutlet_resultStandardScheme();
      }
    }

    private static class updateOutlet_resultStandardScheme extends StandardScheme<updateOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public updateOutlet_resultTupleScheme getScheme() {
        return new updateOutlet_resultTupleScheme();
      }
    }

    private static class updateOutlet_resultTupleScheme extends TupleScheme<updateOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletByOutletId_args implements org.apache.thrift.TBase<getOutletByOutletId_args, getOutletByOutletId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletByOutletId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletByOutletId_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletByOutletId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletByOutletId_argsTupleSchemeFactory());
    }

    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID((short)1, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletByOutletId_args.class, metaDataMap);
    }

    public getOutletByOutletId_args() {
    }

    public getOutletByOutletId_args(
      String outletId)
    {
      this();
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletByOutletId_args(getOutletByOutletId_args other) {
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public getOutletByOutletId_args deepCopy() {
      return new getOutletByOutletId_args(this);
    }

    @Override
    public void clear() {
      this.outletId = null;
    }

    public String getOutletId() {
      return this.outletId;
    }

    public getOutletByOutletId_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletByOutletId_args)
        return this.equals((getOutletByOutletId_args)that);
      return false;
    }

    public boolean equals(getOutletByOutletId_args that) {
      if (that == null)
        return false;

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletByOutletId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletByOutletId_args(");
      boolean first = true;

      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletByOutletId_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletByOutletId_argsStandardScheme getScheme() {
        return new getOutletByOutletId_argsStandardScheme();
      }
    }

    private static class getOutletByOutletId_argsStandardScheme extends StandardScheme<getOutletByOutletId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletByOutletId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletByOutletId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletByOutletId_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletByOutletId_argsTupleScheme getScheme() {
        return new getOutletByOutletId_argsTupleScheme();
      }
    }

    private static class getOutletByOutletId_argsTupleScheme extends TupleScheme<getOutletByOutletId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletByOutletId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletByOutletId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletByOutletId_result implements org.apache.thrift.TBase<getOutletByOutletId_result, getOutletByOutletId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletByOutletId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletByOutletId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletByOutletId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletByOutletId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletByOutletId_result.class, metaDataMap);
    }

    public getOutletByOutletId_result() {
    }

    public getOutletByOutletId_result(
      com.froad.thrift.vo.OutletVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletByOutletId_result(getOutletByOutletId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletVo(other.success);
      }
    }

    public getOutletByOutletId_result deepCopy() {
      return new getOutletByOutletId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletVo getSuccess() {
      return this.success;
    }

    public getOutletByOutletId_result setSuccess(com.froad.thrift.vo.OutletVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletByOutletId_result)
        return this.equals((getOutletByOutletId_result)that);
      return false;
    }

    public boolean equals(getOutletByOutletId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletByOutletId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletByOutletId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletByOutletId_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletByOutletId_resultStandardScheme getScheme() {
        return new getOutletByOutletId_resultStandardScheme();
      }
    }

    private static class getOutletByOutletId_resultStandardScheme extends StandardScheme<getOutletByOutletId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletByOutletId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletByOutletId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletByOutletId_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletByOutletId_resultTupleScheme getScheme() {
        return new getOutletByOutletId_resultTupleScheme();
      }
    }

    private static class getOutletByOutletId_resultTupleScheme extends TupleScheme<getOutletByOutletId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletByOutletId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletByOutletId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutlet_args implements org.apache.thrift.TBase<getOutlet_args, getOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutlet_args");

    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_VO((short)1, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutlet_args.class, metaDataMap);
    }

    public getOutlet_args() {
    }

    public getOutlet_args(
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutlet_args(getOutlet_args other) {
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public getOutlet_args deepCopy() {
      return new getOutlet_args(this);
    }

    @Override
    public void clear() {
      this.outletVo = null;
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public getOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutlet_args)
        return this.equals((getOutlet_args)that);
      return false;
    }

    public boolean equals(getOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutlet_args(");
      boolean first = true;

      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public getOutlet_argsStandardScheme getScheme() {
        return new getOutlet_argsStandardScheme();
      }
    }

    private static class getOutlet_argsStandardScheme extends StandardScheme<getOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public getOutlet_argsTupleScheme getScheme() {
        return new getOutlet_argsTupleScheme();
      }
    }

    private static class getOutlet_argsTupleScheme extends TupleScheme<getOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class getOutlet_result implements org.apache.thrift.TBase<getOutlet_result, getOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutlet_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutlet_result.class, metaDataMap);
    }

    public getOutlet_result() {
    }

    public getOutlet_result(
      List<com.froad.thrift.vo.OutletVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutlet_result(getOutlet_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletVo> __this__success = new ArrayList<com.froad.thrift.vo.OutletVo>(other.success.size());
        for (com.froad.thrift.vo.OutletVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOutlet_result deepCopy() {
      return new getOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletVo> getSuccess() {
      return this.success;
    }

    public getOutlet_result setSuccess(List<com.froad.thrift.vo.OutletVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutlet_result)
        return this.equals((getOutlet_result)that);
      return false;
    }

    public boolean equals(getOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public getOutlet_resultStandardScheme getScheme() {
        return new getOutlet_resultStandardScheme();
      }
    }

    private static class getOutlet_resultStandardScheme extends StandardScheme<getOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletVo>(_list16.size);
                  com.froad.thrift.vo.OutletVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.OutletVo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletVo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public getOutlet_resultTupleScheme getScheme() {
        return new getOutlet_resultTupleScheme();
      }
    }

    private static class getOutlet_resultTupleScheme extends TupleScheme<getOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletVo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletVo>(_list21.size);
            com.froad.thrift.vo.OutletVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.OutletVo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countOutlet_args implements org.apache.thrift.TBase<countOutlet_args, countOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<countOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countOutlet_args");

    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_VO((short)1, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countOutlet_args.class, metaDataMap);
    }

    public countOutlet_args() {
    }

    public countOutlet_args(
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countOutlet_args(countOutlet_args other) {
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public countOutlet_args deepCopy() {
      return new countOutlet_args(this);
    }

    @Override
    public void clear() {
      this.outletVo = null;
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public countOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countOutlet_args)
        return this.equals((countOutlet_args)that);
      return false;
    }

    public boolean equals(countOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countOutlet_args(");
      boolean first = true;

      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public countOutlet_argsStandardScheme getScheme() {
        return new countOutlet_argsStandardScheme();
      }
    }

    private static class countOutlet_argsStandardScheme extends StandardScheme<countOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public countOutlet_argsTupleScheme getScheme() {
        return new countOutlet_argsTupleScheme();
      }
    }

    private static class countOutlet_argsTupleScheme extends TupleScheme<countOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class countOutlet_result implements org.apache.thrift.TBase<countOutlet_result, countOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<countOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countOutlet_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countOutlet_result.class, metaDataMap);
    }

    public countOutlet_result() {
    }

    public countOutlet_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countOutlet_result(countOutlet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countOutlet_result deepCopy() {
      return new countOutlet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countOutlet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countOutlet_result)
        return this.equals((countOutlet_result)that);
      return false;
    }

    public boolean equals(countOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countOutlet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public countOutlet_resultStandardScheme getScheme() {
        return new countOutlet_resultStandardScheme();
      }
    }

    private static class countOutlet_resultStandardScheme extends StandardScheme<countOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public countOutlet_resultTupleScheme getScheme() {
        return new countOutlet_resultTupleScheme();
      }
    }

    private static class countOutlet_resultTupleScheme extends TupleScheme<countOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankOutlet_args implements org.apache.thrift.TBase<getBankOutlet_args, getBankOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOutlet_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("org_code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOutlet_argsTupleSchemeFactory());
    }

    public String client_id; // required
    public String org_code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "client_id"),
      ORG_CODE((short)2, "org_code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("org_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOutlet_args.class, metaDataMap);
    }

    public getBankOutlet_args() {
    }

    public getBankOutlet_args(
      String client_id,
      String org_code)
    {
      this();
      this.client_id = client_id;
      this.org_code = org_code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOutlet_args(getBankOutlet_args other) {
      if (other.isSetClient_id()) {
        this.client_id = other.client_id;
      }
      if (other.isSetOrg_code()) {
        this.org_code = other.org_code;
      }
    }

    public getBankOutlet_args deepCopy() {
      return new getBankOutlet_args(this);
    }

    @Override
    public void clear() {
      this.client_id = null;
      this.org_code = null;
    }

    public String getClient_id() {
      return this.client_id;
    }

    public getBankOutlet_args setClient_id(String client_id) {
      this.client_id = client_id;
      return this;
    }

    public void unsetClient_id() {
      this.client_id = null;
    }

    /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
    public boolean isSetClient_id() {
      return this.client_id != null;
    }

    public void setClient_idIsSet(boolean value) {
      if (!value) {
        this.client_id = null;
      }
    }

    public String getOrg_code() {
      return this.org_code;
    }

    public getBankOutlet_args setOrg_code(String org_code) {
      this.org_code = org_code;
      return this;
    }

    public void unsetOrg_code() {
      this.org_code = null;
    }

    /** Returns true if field org_code is set (has been assigned a value) and false otherwise */
    public boolean isSetOrg_code() {
      return this.org_code != null;
    }

    public void setOrg_codeIsSet(boolean value) {
      if (!value) {
        this.org_code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClient_id();
        } else {
          setClient_id((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrg_code();
        } else {
          setOrg_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClient_id();

      case ORG_CODE:
        return getOrg_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClient_id();
      case ORG_CODE:
        return isSetOrg_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOutlet_args)
        return this.equals((getBankOutlet_args)that);
      return false;
    }

    public boolean equals(getBankOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_client_id = true && this.isSetClient_id();
      boolean that_present_client_id = true && that.isSetClient_id();
      if (this_present_client_id || that_present_client_id) {
        if (!(this_present_client_id && that_present_client_id))
          return false;
        if (!this.client_id.equals(that.client_id))
          return false;
      }

      boolean this_present_org_code = true && this.isSetOrg_code();
      boolean that_present_org_code = true && that.isSetOrg_code();
      if (this_present_org_code || that_present_org_code) {
        if (!(this_present_org_code && that_present_org_code))
          return false;
        if (!this.org_code.equals(that.org_code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_client_id = true && (isSetClient_id());
      list.add(present_client_id);
      if (present_client_id)
        list.add(client_id);

      boolean present_org_code = true && (isSetOrg_code());
      list.add(present_org_code);
      if (present_org_code)
        list.add(org_code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClient_id()).compareTo(other.isSetClient_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClient_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrg_code()).compareTo(other.isSetOrg_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrg_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.org_code, other.org_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOutlet_args(");
      boolean first = true;

      sb.append("client_id:");
      if (this.client_id == null) {
        sb.append("null");
      } else {
        sb.append(this.client_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("org_code:");
      if (this.org_code == null) {
        sb.append("null");
      } else {
        sb.append(this.org_code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public getBankOutlet_argsStandardScheme getScheme() {
        return new getBankOutlet_argsStandardScheme();
      }
    }

    private static class getBankOutlet_argsStandardScheme extends StandardScheme<getBankOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.client_id = iprot.readString();
                struct.setClient_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.org_code = iprot.readString();
                struct.setOrg_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.client_id != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.client_id);
          oprot.writeFieldEnd();
        }
        if (struct.org_code != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.org_code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public getBankOutlet_argsTupleScheme getScheme() {
        return new getBankOutlet_argsTupleScheme();
      }
    }

    private static class getBankOutlet_argsTupleScheme extends TupleScheme<getBankOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClient_id()) {
          optionals.set(0);
        }
        if (struct.isSetOrg_code()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClient_id()) {
          oprot.writeString(struct.client_id);
        }
        if (struct.isSetOrg_code()) {
          oprot.writeString(struct.org_code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.client_id = iprot.readString();
          struct.setClient_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.org_code = iprot.readString();
          struct.setOrg_codeIsSet(true);
        }
      }
    }

  }

  public static class getBankOutlet_result implements org.apache.thrift.TBase<getBankOutlet_result, getBankOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOutlet_result.class, metaDataMap);
    }

    public getBankOutlet_result() {
    }

    public getBankOutlet_result(
      com.froad.thrift.vo.OutletVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOutlet_result(getBankOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletVo(other.success);
      }
    }

    public getBankOutlet_result deepCopy() {
      return new getBankOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletVo getSuccess() {
      return this.success;
    }

    public getBankOutlet_result setSuccess(com.froad.thrift.vo.OutletVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOutlet_result)
        return this.equals((getBankOutlet_result)that);
      return false;
    }

    public boolean equals(getBankOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public getBankOutlet_resultStandardScheme getScheme() {
        return new getBankOutlet_resultStandardScheme();
      }
    }

    private static class getBankOutlet_resultStandardScheme extends StandardScheme<getBankOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public getBankOutlet_resultTupleScheme getScheme() {
        return new getBankOutlet_resultTupleScheme();
      }
    }

    private static class getBankOutlet_resultTupleScheme extends TupleScheme<getBankOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSubBankOutlet_args implements org.apache.thrift.TBase<getSubBankOutlet_args, getSubBankOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubBankOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubBankOutlet_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("org_code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubBankOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubBankOutlet_argsTupleSchemeFactory());
    }

    public String client_id; // required
    public String org_code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "client_id"),
      ORG_CODE((short)2, "org_code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("org_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubBankOutlet_args.class, metaDataMap);
    }

    public getSubBankOutlet_args() {
    }

    public getSubBankOutlet_args(
      String client_id,
      String org_code)
    {
      this();
      this.client_id = client_id;
      this.org_code = org_code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubBankOutlet_args(getSubBankOutlet_args other) {
      if (other.isSetClient_id()) {
        this.client_id = other.client_id;
      }
      if (other.isSetOrg_code()) {
        this.org_code = other.org_code;
      }
    }

    public getSubBankOutlet_args deepCopy() {
      return new getSubBankOutlet_args(this);
    }

    @Override
    public void clear() {
      this.client_id = null;
      this.org_code = null;
    }

    public String getClient_id() {
      return this.client_id;
    }

    public getSubBankOutlet_args setClient_id(String client_id) {
      this.client_id = client_id;
      return this;
    }

    public void unsetClient_id() {
      this.client_id = null;
    }

    /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
    public boolean isSetClient_id() {
      return this.client_id != null;
    }

    public void setClient_idIsSet(boolean value) {
      if (!value) {
        this.client_id = null;
      }
    }

    public String getOrg_code() {
      return this.org_code;
    }

    public getSubBankOutlet_args setOrg_code(String org_code) {
      this.org_code = org_code;
      return this;
    }

    public void unsetOrg_code() {
      this.org_code = null;
    }

    /** Returns true if field org_code is set (has been assigned a value) and false otherwise */
    public boolean isSetOrg_code() {
      return this.org_code != null;
    }

    public void setOrg_codeIsSet(boolean value) {
      if (!value) {
        this.org_code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClient_id();
        } else {
          setClient_id((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrg_code();
        } else {
          setOrg_code((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClient_id();

      case ORG_CODE:
        return getOrg_code();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClient_id();
      case ORG_CODE:
        return isSetOrg_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubBankOutlet_args)
        return this.equals((getSubBankOutlet_args)that);
      return false;
    }

    public boolean equals(getSubBankOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_client_id = true && this.isSetClient_id();
      boolean that_present_client_id = true && that.isSetClient_id();
      if (this_present_client_id || that_present_client_id) {
        if (!(this_present_client_id && that_present_client_id))
          return false;
        if (!this.client_id.equals(that.client_id))
          return false;
      }

      boolean this_present_org_code = true && this.isSetOrg_code();
      boolean that_present_org_code = true && that.isSetOrg_code();
      if (this_present_org_code || that_present_org_code) {
        if (!(this_present_org_code && that_present_org_code))
          return false;
        if (!this.org_code.equals(that.org_code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_client_id = true && (isSetClient_id());
      list.add(present_client_id);
      if (present_client_id)
        list.add(client_id);

      boolean present_org_code = true && (isSetOrg_code());
      list.add(present_org_code);
      if (present_org_code)
        list.add(org_code);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubBankOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClient_id()).compareTo(other.isSetClient_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClient_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrg_code()).compareTo(other.isSetOrg_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrg_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.org_code, other.org_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubBankOutlet_args(");
      boolean first = true;

      sb.append("client_id:");
      if (this.client_id == null) {
        sb.append("null");
      } else {
        sb.append(this.client_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("org_code:");
      if (this.org_code == null) {
        sb.append("null");
      } else {
        sb.append(this.org_code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubBankOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public getSubBankOutlet_argsStandardScheme getScheme() {
        return new getSubBankOutlet_argsStandardScheme();
      }
    }

    private static class getSubBankOutlet_argsStandardScheme extends StandardScheme<getSubBankOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubBankOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.client_id = iprot.readString();
                struct.setClient_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.org_code = iprot.readString();
                struct.setOrg_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubBankOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.client_id != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.client_id);
          oprot.writeFieldEnd();
        }
        if (struct.org_code != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.org_code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubBankOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public getSubBankOutlet_argsTupleScheme getScheme() {
        return new getSubBankOutlet_argsTupleScheme();
      }
    }

    private static class getSubBankOutlet_argsTupleScheme extends TupleScheme<getSubBankOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubBankOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClient_id()) {
          optionals.set(0);
        }
        if (struct.isSetOrg_code()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClient_id()) {
          oprot.writeString(struct.client_id);
        }
        if (struct.isSetOrg_code()) {
          oprot.writeString(struct.org_code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubBankOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.client_id = iprot.readString();
          struct.setClient_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.org_code = iprot.readString();
          struct.setOrg_codeIsSet(true);
        }
      }
    }

  }

  public static class getSubBankOutlet_result implements org.apache.thrift.TBase<getSubBankOutlet_result, getSubBankOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubBankOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubBankOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubBankOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubBankOutlet_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubBankOutlet_result.class, metaDataMap);
    }

    public getSubBankOutlet_result() {
    }

    public getSubBankOutlet_result(
      List<com.froad.thrift.vo.OutletVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubBankOutlet_result(getSubBankOutlet_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletVo> __this__success = new ArrayList<com.froad.thrift.vo.OutletVo>(other.success.size());
        for (com.froad.thrift.vo.OutletVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSubBankOutlet_result deepCopy() {
      return new getSubBankOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletVo> getSuccess() {
      return this.success;
    }

    public getSubBankOutlet_result setSuccess(List<com.froad.thrift.vo.OutletVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubBankOutlet_result)
        return this.equals((getSubBankOutlet_result)that);
      return false;
    }

    public boolean equals(getSubBankOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubBankOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubBankOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubBankOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public getSubBankOutlet_resultStandardScheme getScheme() {
        return new getSubBankOutlet_resultStandardScheme();
      }
    }

    private static class getSubBankOutlet_resultStandardScheme extends StandardScheme<getSubBankOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubBankOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletVo>(_list24.size);
                  com.froad.thrift.vo.OutletVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.OutletVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubBankOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubBankOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public getSubBankOutlet_resultTupleScheme getScheme() {
        return new getSubBankOutlet_resultTupleScheme();
      }
    }

    private static class getSubBankOutlet_resultTupleScheme extends TupleScheme<getSubBankOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubBankOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubBankOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletVo>(_list29.size);
            com.froad.thrift.vo.OutletVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.OutletVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletByPage_args implements org.apache.thrift.TBase<getOutletByPage_args, getOutletByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_VO((short)2, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletByPage_args.class, metaDataMap);
    }

    public getOutletByPage_args() {
    }

    public getOutletByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.page = page;
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletByPage_args(getOutletByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public getOutletByPage_args deepCopy() {
      return new getOutletByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public getOutletByPage_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletByPage_args)
        return this.equals((getOutletByPage_args)that);
      return false;
    }

    public boolean equals(getOutletByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletByPage_argsStandardScheme getScheme() {
        return new getOutletByPage_argsStandardScheme();
      }
    }

    private static class getOutletByPage_argsStandardScheme extends StandardScheme<getOutletByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletByPage_argsTupleScheme getScheme() {
        return new getOutletByPage_argsTupleScheme();
      }
    }

    private static class getOutletByPage_argsTupleScheme extends TupleScheme<getOutletByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletByPage_result implements org.apache.thrift.TBase<getOutletByPage_result, getOutletByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletByPage_result.class, metaDataMap);
    }

    public getOutletByPage_result() {
    }

    public getOutletByPage_result(
      com.froad.thrift.vo.OutletPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletByPage_result(getOutletByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletPageVoRes(other.success);
      }
    }

    public getOutletByPage_result deepCopy() {
      return new getOutletByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletByPage_result setSuccess(com.froad.thrift.vo.OutletPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletByPage_result)
        return this.equals((getOutletByPage_result)that);
      return false;
    }

    public boolean equals(getOutletByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletByPage_resultStandardScheme getScheme() {
        return new getOutletByPage_resultStandardScheme();
      }
    }

    private static class getOutletByPage_resultStandardScheme extends StandardScheme<getOutletByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletByPage_resultTupleScheme getScheme() {
        return new getOutletByPage_resultTupleScheme();
      }
    }

    private static class getOutletByPage_resultTupleScheme extends TupleScheme<getOutletByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetail_args implements org.apache.thrift.TBase<getOutletDetail_args, getOutletDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetail_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetail_argsTupleSchemeFactory());
    }

    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID((short)1, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetail_args.class, metaDataMap);
    }

    public getOutletDetail_args() {
    }

    public getOutletDetail_args(
      String outletId)
    {
      this();
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetail_args(getOutletDetail_args other) {
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public getOutletDetail_args deepCopy() {
      return new getOutletDetail_args(this);
    }

    @Override
    public void clear() {
      this.outletId = null;
    }

    public String getOutletId() {
      return this.outletId;
    }

    public getOutletDetail_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetail_args)
        return this.equals((getOutletDetail_args)that);
      return false;
    }

    public boolean equals(getOutletDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetail_args(");
      boolean first = true;

      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletDetail_argsStandardScheme getScheme() {
        return new getOutletDetail_argsStandardScheme();
      }
    }

    private static class getOutletDetail_argsStandardScheme extends StandardScheme<getOutletDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletDetail_argsTupleScheme getScheme() {
        return new getOutletDetail_argsTupleScheme();
      }
    }

    private static class getOutletDetail_argsTupleScheme extends TupleScheme<getOutletDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetail_result implements org.apache.thrift.TBase<getOutletDetail_result, getOutletDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletDetailVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetail_result.class, metaDataMap);
    }

    public getOutletDetail_result() {
    }

    public getOutletDetail_result(
      com.froad.thrift.vo.OutletDetailVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetail_result(getOutletDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletDetailVo(other.success);
      }
    }

    public getOutletDetail_result deepCopy() {
      return new getOutletDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletDetailVo getSuccess() {
      return this.success;
    }

    public getOutletDetail_result setSuccess(com.froad.thrift.vo.OutletDetailVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetail_result)
        return this.equals((getOutletDetail_result)that);
      return false;
    }

    public boolean equals(getOutletDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletDetail_resultStandardScheme getScheme() {
        return new getOutletDetail_resultStandardScheme();
      }
    }

    private static class getOutletDetail_resultStandardScheme extends StandardScheme<getOutletDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletDetailVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletDetail_resultTupleScheme getScheme() {
        return new getOutletDetail_resultTupleScheme();
      }
    }

    private static class getOutletDetail_resultTupleScheme extends TupleScheme<getOutletDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletDetailVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetailByPage_args implements org.apache.thrift.TBase<getOutletDetailByPage_args, getOutletDetailByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetailByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetailByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetailByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetailByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletDetailVo outletDetailVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_DETAIL_VO((short)2, "outletDetailVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_DETAIL_VO
            return OUTLET_DETAIL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("outletDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetailByPage_args.class, metaDataMap);
    }

    public getOutletDetailByPage_args() {
    }

    public getOutletDetailByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletDetailVo outletDetailVo)
    {
      this();
      this.page = page;
      this.outletDetailVo = outletDetailVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetailByPage_args(getOutletDetailByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletDetailVo()) {
        this.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo(other.outletDetailVo);
      }
    }

    public getOutletDetailByPage_args deepCopy() {
      return new getOutletDetailByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletDetailVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletDetailByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletDetailVo getOutletDetailVo() {
      return this.outletDetailVo;
    }

    public getOutletDetailByPage_args setOutletDetailVo(com.froad.thrift.vo.OutletDetailVo outletDetailVo) {
      this.outletDetailVo = outletDetailVo;
      return this;
    }

    public void unsetOutletDetailVo() {
      this.outletDetailVo = null;
    }

    /** Returns true if field outletDetailVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletDetailVo() {
      return this.outletDetailVo != null;
    }

    public void setOutletDetailVoIsSet(boolean value) {
      if (!value) {
        this.outletDetailVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_DETAIL_VO:
        if (value == null) {
          unsetOutletDetailVo();
        } else {
          setOutletDetailVo((com.froad.thrift.vo.OutletDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_DETAIL_VO:
        return getOutletDetailVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_DETAIL_VO:
        return isSetOutletDetailVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetailByPage_args)
        return this.equals((getOutletDetailByPage_args)that);
      return false;
    }

    public boolean equals(getOutletDetailByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletDetailVo = true && this.isSetOutletDetailVo();
      boolean that_present_outletDetailVo = true && that.isSetOutletDetailVo();
      if (this_present_outletDetailVo || that_present_outletDetailVo) {
        if (!(this_present_outletDetailVo && that_present_outletDetailVo))
          return false;
        if (!this.outletDetailVo.equals(that.outletDetailVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletDetailVo = true && (isSetOutletDetailVo());
      list.add(present_outletDetailVo);
      if (present_outletDetailVo)
        list.add(outletDetailVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetailByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletDetailVo()).compareTo(other.isSetOutletDetailVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletDetailVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletDetailVo, other.outletDetailVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetailByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletDetailVo:");
      if (this.outletDetailVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletDetailVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletDetailVo != null) {
        outletDetailVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetailByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletDetailByPage_argsStandardScheme getScheme() {
        return new getOutletDetailByPage_argsStandardScheme();
      }
    }

    private static class getOutletDetailByPage_argsStandardScheme extends StandardScheme<getOutletDetailByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_DETAIL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
                struct.outletDetailVo.read(iprot);
                struct.setOutletDetailVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletDetailVo != null) {
          oprot.writeFieldBegin(OUTLET_DETAIL_VO_FIELD_DESC);
          struct.outletDetailVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetailByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletDetailByPage_argsTupleScheme getScheme() {
        return new getOutletDetailByPage_argsTupleScheme();
      }
    }

    private static class getOutletDetailByPage_argsTupleScheme extends TupleScheme<getOutletDetailByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletDetailVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletDetailVo()) {
          struct.outletDetailVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
          struct.outletDetailVo.read(iprot);
          struct.setOutletDetailVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetailByPage_result implements org.apache.thrift.TBase<getOutletDetailByPage_result, getOutletDetailByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetailByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetailByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetailByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetailByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletDetailPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetailByPage_result.class, metaDataMap);
    }

    public getOutletDetailByPage_result() {
    }

    public getOutletDetailByPage_result(
      com.froad.thrift.vo.OutletDetailPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetailByPage_result(getOutletDetailByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletDetailPageVoRes(other.success);
      }
    }

    public getOutletDetailByPage_result deepCopy() {
      return new getOutletDetailByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletDetailPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletDetailByPage_result setSuccess(com.froad.thrift.vo.OutletDetailPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletDetailPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetailByPage_result)
        return this.equals((getOutletDetailByPage_result)that);
      return false;
    }

    public boolean equals(getOutletDetailByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetailByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetailByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetailByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletDetailByPage_resultStandardScheme getScheme() {
        return new getOutletDetailByPage_resultStandardScheme();
      }
    }

    private static class getOutletDetailByPage_resultStandardScheme extends StandardScheme<getOutletDetailByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletDetailPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetailByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletDetailByPage_resultTupleScheme getScheme() {
        return new getOutletDetailByPage_resultTupleScheme();
      }
    }

    private static class getOutletDetailByPage_resultTupleScheme extends TupleScheme<getOutletDetailByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletDetailPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHottestOutletDetailByPage_args implements org.apache.thrift.TBase<getHottestOutletDetailByPage_args, getHottestOutletDetailByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHottestOutletDetailByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHottestOutletDetailByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHottestOutletDetailByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHottestOutletDetailByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletDetailVo outletDetailVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_DETAIL_VO((short)2, "outletDetailVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_DETAIL_VO
            return OUTLET_DETAIL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("outletDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHottestOutletDetailByPage_args.class, metaDataMap);
    }

    public getHottestOutletDetailByPage_args() {
    }

    public getHottestOutletDetailByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletDetailVo outletDetailVo)
    {
      this();
      this.page = page;
      this.outletDetailVo = outletDetailVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHottestOutletDetailByPage_args(getHottestOutletDetailByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletDetailVo()) {
        this.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo(other.outletDetailVo);
      }
    }

    public getHottestOutletDetailByPage_args deepCopy() {
      return new getHottestOutletDetailByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletDetailVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getHottestOutletDetailByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletDetailVo getOutletDetailVo() {
      return this.outletDetailVo;
    }

    public getHottestOutletDetailByPage_args setOutletDetailVo(com.froad.thrift.vo.OutletDetailVo outletDetailVo) {
      this.outletDetailVo = outletDetailVo;
      return this;
    }

    public void unsetOutletDetailVo() {
      this.outletDetailVo = null;
    }

    /** Returns true if field outletDetailVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletDetailVo() {
      return this.outletDetailVo != null;
    }

    public void setOutletDetailVoIsSet(boolean value) {
      if (!value) {
        this.outletDetailVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_DETAIL_VO:
        if (value == null) {
          unsetOutletDetailVo();
        } else {
          setOutletDetailVo((com.froad.thrift.vo.OutletDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_DETAIL_VO:
        return getOutletDetailVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_DETAIL_VO:
        return isSetOutletDetailVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHottestOutletDetailByPage_args)
        return this.equals((getHottestOutletDetailByPage_args)that);
      return false;
    }

    public boolean equals(getHottestOutletDetailByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletDetailVo = true && this.isSetOutletDetailVo();
      boolean that_present_outletDetailVo = true && that.isSetOutletDetailVo();
      if (this_present_outletDetailVo || that_present_outletDetailVo) {
        if (!(this_present_outletDetailVo && that_present_outletDetailVo))
          return false;
        if (!this.outletDetailVo.equals(that.outletDetailVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletDetailVo = true && (isSetOutletDetailVo());
      list.add(present_outletDetailVo);
      if (present_outletDetailVo)
        list.add(outletDetailVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHottestOutletDetailByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletDetailVo()).compareTo(other.isSetOutletDetailVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletDetailVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletDetailVo, other.outletDetailVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHottestOutletDetailByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletDetailVo:");
      if (this.outletDetailVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletDetailVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletDetailVo != null) {
        outletDetailVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHottestOutletDetailByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getHottestOutletDetailByPage_argsStandardScheme getScheme() {
        return new getHottestOutletDetailByPage_argsStandardScheme();
      }
    }

    private static class getHottestOutletDetailByPage_argsStandardScheme extends StandardScheme<getHottestOutletDetailByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHottestOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_DETAIL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
                struct.outletDetailVo.read(iprot);
                struct.setOutletDetailVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHottestOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletDetailVo != null) {
          oprot.writeFieldBegin(OUTLET_DETAIL_VO_FIELD_DESC);
          struct.outletDetailVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHottestOutletDetailByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getHottestOutletDetailByPage_argsTupleScheme getScheme() {
        return new getHottestOutletDetailByPage_argsTupleScheme();
      }
    }

    private static class getHottestOutletDetailByPage_argsTupleScheme extends TupleScheme<getHottestOutletDetailByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHottestOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletDetailVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletDetailVo()) {
          struct.outletDetailVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHottestOutletDetailByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
          struct.outletDetailVo.read(iprot);
          struct.setOutletDetailVoIsSet(true);
        }
      }
    }

  }

  public static class getHottestOutletDetailByPage_result implements org.apache.thrift.TBase<getHottestOutletDetailByPage_result, getHottestOutletDetailByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHottestOutletDetailByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHottestOutletDetailByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHottestOutletDetailByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHottestOutletDetailByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHottestOutletDetailByPage_result.class, metaDataMap);
    }

    public getHottestOutletDetailByPage_result() {
    }

    public getHottestOutletDetailByPage_result(
      com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHottestOutletDetailByPage_result(getHottestOutletDetailByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes(other.success);
      }
    }

    public getHottestOutletDetailByPage_result deepCopy() {
      return new getHottestOutletDetailByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getSuccess() {
      return this.success;
    }

    public getHottestOutletDetailByPage_result setSuccess(com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHottestOutletDetailByPage_result)
        return this.equals((getHottestOutletDetailByPage_result)that);
      return false;
    }

    public boolean equals(getHottestOutletDetailByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHottestOutletDetailByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHottestOutletDetailByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHottestOutletDetailByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getHottestOutletDetailByPage_resultStandardScheme getScheme() {
        return new getHottestOutletDetailByPage_resultStandardScheme();
      }
    }

    private static class getHottestOutletDetailByPage_resultStandardScheme extends StandardScheme<getHottestOutletDetailByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHottestOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHottestOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHottestOutletDetailByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getHottestOutletDetailByPage_resultTupleScheme getScheme() {
        return new getHottestOutletDetailByPage_resultTupleScheme();
      }
    }

    private static class getHottestOutletDetailByPage_resultTupleScheme extends TupleScheme<getHottestOutletDetailByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHottestOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHottestOutletDetailByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNearbyOutlet_args implements org.apache.thrift.TBase<getNearbyOutlet_args, getNearbyOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNearbyOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNearbyOutlet_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField ORDER_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderBy", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNearbyOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNearbyOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletDetailVo outletDetailVo; // required
    public double distance; // required
    public int orderBy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_DETAIL_VO((short)2, "outletDetailVo"),
      DISTANCE((short)3, "distance"),
      ORDER_BY((short)4, "orderBy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_DETAIL_VO
            return OUTLET_DETAIL_VO;
          case 3: // DISTANCE
            return DISTANCE;
          case 4: // ORDER_BY
            return ORDER_BY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DISTANCE_ISSET_ID = 0;
    private static final int __ORDERBY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("outletDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class)));
      tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ORDER_BY, new org.apache.thrift.meta_data.FieldMetaData("orderBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNearbyOutlet_args.class, metaDataMap);
    }

    public getNearbyOutlet_args() {
    }

    public getNearbyOutlet_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletDetailVo outletDetailVo,
      double distance,
      int orderBy)
    {
      this();
      this.page = page;
      this.outletDetailVo = outletDetailVo;
      this.distance = distance;
      setDistanceIsSet(true);
      this.orderBy = orderBy;
      setOrderByIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNearbyOutlet_args(getNearbyOutlet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletDetailVo()) {
        this.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo(other.outletDetailVo);
      }
      this.distance = other.distance;
      this.orderBy = other.orderBy;
    }

    public getNearbyOutlet_args deepCopy() {
      return new getNearbyOutlet_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletDetailVo = null;
      setDistanceIsSet(false);
      this.distance = 0.0;
      setOrderByIsSet(false);
      this.orderBy = 0;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getNearbyOutlet_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletDetailVo getOutletDetailVo() {
      return this.outletDetailVo;
    }

    public getNearbyOutlet_args setOutletDetailVo(com.froad.thrift.vo.OutletDetailVo outletDetailVo) {
      this.outletDetailVo = outletDetailVo;
      return this;
    }

    public void unsetOutletDetailVo() {
      this.outletDetailVo = null;
    }

    /** Returns true if field outletDetailVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletDetailVo() {
      return this.outletDetailVo != null;
    }

    public void setOutletDetailVoIsSet(boolean value) {
      if (!value) {
        this.outletDetailVo = null;
      }
    }

    public double getDistance() {
      return this.distance;
    }

    public getNearbyOutlet_args setDistance(double distance) {
      this.distance = distance;
      setDistanceIsSet(true);
      return this;
    }

    public void unsetDistance() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    /** Returns true if field distance is set (has been assigned a value) and false otherwise */
    public boolean isSetDistance() {
      return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    public void setDistanceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
    }

    public int getOrderBy() {
      return this.orderBy;
    }

    public getNearbyOutlet_args setOrderBy(int orderBy) {
      this.orderBy = orderBy;
      setOrderByIsSet(true);
      return this;
    }

    public void unsetOrderBy() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERBY_ISSET_ID);
    }

    /** Returns true if field orderBy is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderBy() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERBY_ISSET_ID);
    }

    public void setOrderByIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERBY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_DETAIL_VO:
        if (value == null) {
          unsetOutletDetailVo();
        } else {
          setOutletDetailVo((com.froad.thrift.vo.OutletDetailVo)value);
        }
        break;

      case DISTANCE:
        if (value == null) {
          unsetDistance();
        } else {
          setDistance((Double)value);
        }
        break;

      case ORDER_BY:
        if (value == null) {
          unsetOrderBy();
        } else {
          setOrderBy((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_DETAIL_VO:
        return getOutletDetailVo();

      case DISTANCE:
        return Double.valueOf(getDistance());

      case ORDER_BY:
        return Integer.valueOf(getOrderBy());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_DETAIL_VO:
        return isSetOutletDetailVo();
      case DISTANCE:
        return isSetDistance();
      case ORDER_BY:
        return isSetOrderBy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNearbyOutlet_args)
        return this.equals((getNearbyOutlet_args)that);
      return false;
    }

    public boolean equals(getNearbyOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletDetailVo = true && this.isSetOutletDetailVo();
      boolean that_present_outletDetailVo = true && that.isSetOutletDetailVo();
      if (this_present_outletDetailVo || that_present_outletDetailVo) {
        if (!(this_present_outletDetailVo && that_present_outletDetailVo))
          return false;
        if (!this.outletDetailVo.equals(that.outletDetailVo))
          return false;
      }

      boolean this_present_distance = true;
      boolean that_present_distance = true;
      if (this_present_distance || that_present_distance) {
        if (!(this_present_distance && that_present_distance))
          return false;
        if (this.distance != that.distance)
          return false;
      }

      boolean this_present_orderBy = true;
      boolean that_present_orderBy = true;
      if (this_present_orderBy || that_present_orderBy) {
        if (!(this_present_orderBy && that_present_orderBy))
          return false;
        if (this.orderBy != that.orderBy)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletDetailVo = true && (isSetOutletDetailVo());
      list.add(present_outletDetailVo);
      if (present_outletDetailVo)
        list.add(outletDetailVo);

      boolean present_distance = true;
      list.add(present_distance);
      if (present_distance)
        list.add(distance);

      boolean present_orderBy = true;
      list.add(present_orderBy);
      if (present_orderBy)
        list.add(orderBy);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNearbyOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletDetailVo()).compareTo(other.isSetOutletDetailVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletDetailVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletDetailVo, other.outletDetailVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDistance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderBy()).compareTo(other.isSetOrderBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderBy, other.orderBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNearbyOutlet_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletDetailVo:");
      if (this.outletDetailVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletDetailVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderBy:");
      sb.append(this.orderBy);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletDetailVo != null) {
        outletDetailVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNearbyOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public getNearbyOutlet_argsStandardScheme getScheme() {
        return new getNearbyOutlet_argsStandardScheme();
      }
    }

    private static class getNearbyOutlet_argsStandardScheme extends StandardScheme<getNearbyOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNearbyOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_DETAIL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
                struct.outletDetailVo.read(iprot);
                struct.setOutletDetailVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.distance = iprot.readDouble();
                struct.setDistanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDER_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orderBy = iprot.readI32();
                struct.setOrderByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNearbyOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletDetailVo != null) {
          oprot.writeFieldBegin(OUTLET_DETAIL_VO_FIELD_DESC);
          struct.outletDetailVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ORDER_BY_FIELD_DESC);
        oprot.writeI32(struct.orderBy);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNearbyOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public getNearbyOutlet_argsTupleScheme getScheme() {
        return new getNearbyOutlet_argsTupleScheme();
      }
    }

    private static class getNearbyOutlet_argsTupleScheme extends TupleScheme<getNearbyOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNearbyOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletDetailVo()) {
          optionals.set(1);
        }
        if (struct.isSetDistance()) {
          optionals.set(2);
        }
        if (struct.isSetOrderBy()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletDetailVo()) {
          struct.outletDetailVo.write(oprot);
        }
        if (struct.isSetDistance()) {
          oprot.writeDouble(struct.distance);
        }
        if (struct.isSetOrderBy()) {
          oprot.writeI32(struct.orderBy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNearbyOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
          struct.outletDetailVo.read(iprot);
          struct.setOutletDetailVoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.distance = iprot.readDouble();
          struct.setDistanceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orderBy = iprot.readI32();
          struct.setOrderByIsSet(true);
        }
      }
    }

  }

  public static class getNearbyOutlet_result implements org.apache.thrift.TBase<getNearbyOutlet_result, getNearbyOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNearbyOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNearbyOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNearbyOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNearbyOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNearbyOutlet_result.class, metaDataMap);
    }

    public getNearbyOutlet_result() {
    }

    public getNearbyOutlet_result(
      com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNearbyOutlet_result(getNearbyOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes(other.success);
      }
    }

    public getNearbyOutlet_result deepCopy() {
      return new getNearbyOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes getSuccess() {
      return this.success;
    }

    public getNearbyOutlet_result setSuccess(com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNearbyOutlet_result)
        return this.equals((getNearbyOutlet_result)that);
      return false;
    }

    public boolean equals(getNearbyOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNearbyOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNearbyOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNearbyOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public getNearbyOutlet_resultStandardScheme getScheme() {
        return new getNearbyOutlet_resultStandardScheme();
      }
    }

    private static class getNearbyOutlet_resultStandardScheme extends StandardScheme<getNearbyOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNearbyOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNearbyOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNearbyOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public getNearbyOutlet_resultTupleScheme getScheme() {
        return new getNearbyOutlet_resultTupleScheme();
      }
    }

    private static class getNearbyOutlet_resultTupleScheme extends TupleScheme<getNearbyOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNearbyOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNearbyOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletDetailSimpleInfoPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNearbyOutletByPage_args implements org.apache.thrift.TBase<getNearbyOutletByPage_args, getNearbyOutletByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNearbyOutletByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNearbyOutletByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField SKIP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNearbyOutletByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNearbyOutletByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletDetailVo outletDetailVo; // required
    public double distance; // required
    public int skip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_DETAIL_VO((short)2, "outletDetailVo"),
      DISTANCE((short)3, "distance"),
      SKIP((short)4, "skip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_DETAIL_VO
            return OUTLET_DETAIL_VO;
          case 3: // DISTANCE
            return DISTANCE;
          case 4: // SKIP
            return SKIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DISTANCE_ISSET_ID = 0;
    private static final int __SKIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("outletDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class)));
      tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SKIP, new org.apache.thrift.meta_data.FieldMetaData("skip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNearbyOutletByPage_args.class, metaDataMap);
    }

    public getNearbyOutletByPage_args() {
    }

    public getNearbyOutletByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletDetailVo outletDetailVo,
      double distance,
      int skip)
    {
      this();
      this.page = page;
      this.outletDetailVo = outletDetailVo;
      this.distance = distance;
      setDistanceIsSet(true);
      this.skip = skip;
      setSkipIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNearbyOutletByPage_args(getNearbyOutletByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletDetailVo()) {
        this.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo(other.outletDetailVo);
      }
      this.distance = other.distance;
      this.skip = other.skip;
    }

    public getNearbyOutletByPage_args deepCopy() {
      return new getNearbyOutletByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletDetailVo = null;
      setDistanceIsSet(false);
      this.distance = 0.0;
      setSkipIsSet(false);
      this.skip = 0;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getNearbyOutletByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletDetailVo getOutletDetailVo() {
      return this.outletDetailVo;
    }

    public getNearbyOutletByPage_args setOutletDetailVo(com.froad.thrift.vo.OutletDetailVo outletDetailVo) {
      this.outletDetailVo = outletDetailVo;
      return this;
    }

    public void unsetOutletDetailVo() {
      this.outletDetailVo = null;
    }

    /** Returns true if field outletDetailVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletDetailVo() {
      return this.outletDetailVo != null;
    }

    public void setOutletDetailVoIsSet(boolean value) {
      if (!value) {
        this.outletDetailVo = null;
      }
    }

    public double getDistance() {
      return this.distance;
    }

    public getNearbyOutletByPage_args setDistance(double distance) {
      this.distance = distance;
      setDistanceIsSet(true);
      return this;
    }

    public void unsetDistance() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    /** Returns true if field distance is set (has been assigned a value) and false otherwise */
    public boolean isSetDistance() {
      return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    public void setDistanceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
    }

    public int getSkip() {
      return this.skip;
    }

    public getNearbyOutletByPage_args setSkip(int skip) {
      this.skip = skip;
      setSkipIsSet(true);
      return this;
    }

    public void unsetSkip() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIP_ISSET_ID);
    }

    /** Returns true if field skip is set (has been assigned a value) and false otherwise */
    public boolean isSetSkip() {
      return EncodingUtils.testBit(__isset_bitfield, __SKIP_ISSET_ID);
    }

    public void setSkipIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_DETAIL_VO:
        if (value == null) {
          unsetOutletDetailVo();
        } else {
          setOutletDetailVo((com.froad.thrift.vo.OutletDetailVo)value);
        }
        break;

      case DISTANCE:
        if (value == null) {
          unsetDistance();
        } else {
          setDistance((Double)value);
        }
        break;

      case SKIP:
        if (value == null) {
          unsetSkip();
        } else {
          setSkip((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_DETAIL_VO:
        return getOutletDetailVo();

      case DISTANCE:
        return Double.valueOf(getDistance());

      case SKIP:
        return Integer.valueOf(getSkip());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_DETAIL_VO:
        return isSetOutletDetailVo();
      case DISTANCE:
        return isSetDistance();
      case SKIP:
        return isSetSkip();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNearbyOutletByPage_args)
        return this.equals((getNearbyOutletByPage_args)that);
      return false;
    }

    public boolean equals(getNearbyOutletByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletDetailVo = true && this.isSetOutletDetailVo();
      boolean that_present_outletDetailVo = true && that.isSetOutletDetailVo();
      if (this_present_outletDetailVo || that_present_outletDetailVo) {
        if (!(this_present_outletDetailVo && that_present_outletDetailVo))
          return false;
        if (!this.outletDetailVo.equals(that.outletDetailVo))
          return false;
      }

      boolean this_present_distance = true;
      boolean that_present_distance = true;
      if (this_present_distance || that_present_distance) {
        if (!(this_present_distance && that_present_distance))
          return false;
        if (this.distance != that.distance)
          return false;
      }

      boolean this_present_skip = true;
      boolean that_present_skip = true;
      if (this_present_skip || that_present_skip) {
        if (!(this_present_skip && that_present_skip))
          return false;
        if (this.skip != that.skip)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletDetailVo = true && (isSetOutletDetailVo());
      list.add(present_outletDetailVo);
      if (present_outletDetailVo)
        list.add(outletDetailVo);

      boolean present_distance = true;
      list.add(present_distance);
      if (present_distance)
        list.add(distance);

      boolean present_skip = true;
      list.add(present_skip);
      if (present_skip)
        list.add(skip);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNearbyOutletByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletDetailVo()).compareTo(other.isSetOutletDetailVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletDetailVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletDetailVo, other.outletDetailVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDistance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSkip()).compareTo(other.isSetSkip());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkip()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip, other.skip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNearbyOutletByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletDetailVo:");
      if (this.outletDetailVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletDetailVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
      if (!first) sb.append(", ");
      sb.append("skip:");
      sb.append(this.skip);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletDetailVo != null) {
        outletDetailVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNearbyOutletByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getNearbyOutletByPage_argsStandardScheme getScheme() {
        return new getNearbyOutletByPage_argsStandardScheme();
      }
    }

    private static class getNearbyOutletByPage_argsStandardScheme extends StandardScheme<getNearbyOutletByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNearbyOutletByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_DETAIL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
                struct.outletDetailVo.read(iprot);
                struct.setOutletDetailVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.distance = iprot.readDouble();
                struct.setDistanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SKIP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.skip = iprot.readI32();
                struct.setSkipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNearbyOutletByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletDetailVo != null) {
          oprot.writeFieldBegin(OUTLET_DETAIL_VO_FIELD_DESC);
          struct.outletDetailVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SKIP_FIELD_DESC);
        oprot.writeI32(struct.skip);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNearbyOutletByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getNearbyOutletByPage_argsTupleScheme getScheme() {
        return new getNearbyOutletByPage_argsTupleScheme();
      }
    }

    private static class getNearbyOutletByPage_argsTupleScheme extends TupleScheme<getNearbyOutletByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNearbyOutletByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletDetailVo()) {
          optionals.set(1);
        }
        if (struct.isSetDistance()) {
          optionals.set(2);
        }
        if (struct.isSetSkip()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletDetailVo()) {
          struct.outletDetailVo.write(oprot);
        }
        if (struct.isSetDistance()) {
          oprot.writeDouble(struct.distance);
        }
        if (struct.isSetSkip()) {
          oprot.writeI32(struct.skip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNearbyOutletByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletDetailVo = new com.froad.thrift.vo.OutletDetailVo();
          struct.outletDetailVo.read(iprot);
          struct.setOutletDetailVoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.distance = iprot.readDouble();
          struct.setDistanceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.skip = iprot.readI32();
          struct.setSkipIsSet(true);
        }
      }
    }

  }

  public static class getNearbyOutletByPage_result implements org.apache.thrift.TBase<getNearbyOutletByPage_result, getNearbyOutletByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNearbyOutletByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNearbyOutletByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNearbyOutletByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNearbyOutletByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletDetailSimplePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailSimplePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNearbyOutletByPage_result.class, metaDataMap);
    }

    public getNearbyOutletByPage_result() {
    }

    public getNearbyOutletByPage_result(
      com.froad.thrift.vo.OutletDetailSimplePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNearbyOutletByPage_result(getNearbyOutletByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletDetailSimplePageVoRes(other.success);
      }
    }

    public getNearbyOutletByPage_result deepCopy() {
      return new getNearbyOutletByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletDetailSimplePageVoRes getSuccess() {
      return this.success;
    }

    public getNearbyOutletByPage_result setSuccess(com.froad.thrift.vo.OutletDetailSimplePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletDetailSimplePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNearbyOutletByPage_result)
        return this.equals((getNearbyOutletByPage_result)that);
      return false;
    }

    public boolean equals(getNearbyOutletByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNearbyOutletByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNearbyOutletByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNearbyOutletByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getNearbyOutletByPage_resultStandardScheme getScheme() {
        return new getNearbyOutletByPage_resultStandardScheme();
      }
    }

    private static class getNearbyOutletByPage_resultStandardScheme extends StandardScheme<getNearbyOutletByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNearbyOutletByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletDetailSimplePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNearbyOutletByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNearbyOutletByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getNearbyOutletByPage_resultTupleScheme getScheme() {
        return new getNearbyOutletByPage_resultTupleScheme();
      }
    }

    private static class getNearbyOutletByPage_resultTupleScheme extends TupleScheme<getNearbyOutletByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNearbyOutletByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNearbyOutletByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletDetailSimplePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetailbyOutletIdList_args implements org.apache.thrift.TBase<getOutletDetailbyOutletIdList_args, getOutletDetailbyOutletIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetailbyOutletIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetailbyOutletIdList_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("outletIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetailbyOutletIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetailbyOutletIdList_argsTupleSchemeFactory());
    }

    public List<String> outletIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID_LIST((short)1, "outletIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID_LIST
            return OUTLET_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("outletIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetailbyOutletIdList_args.class, metaDataMap);
    }

    public getOutletDetailbyOutletIdList_args() {
    }

    public getOutletDetailbyOutletIdList_args(
      List<String> outletIdList)
    {
      this();
      this.outletIdList = outletIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetailbyOutletIdList_args(getOutletDetailbyOutletIdList_args other) {
      if (other.isSetOutletIdList()) {
        List<String> __this__outletIdList = new ArrayList<String>(other.outletIdList);
        this.outletIdList = __this__outletIdList;
      }
    }

    public getOutletDetailbyOutletIdList_args deepCopy() {
      return new getOutletDetailbyOutletIdList_args(this);
    }

    @Override
    public void clear() {
      this.outletIdList = null;
    }

    public int getOutletIdListSize() {
      return (this.outletIdList == null) ? 0 : this.outletIdList.size();
    }

    public java.util.Iterator<String> getOutletIdListIterator() {
      return (this.outletIdList == null) ? null : this.outletIdList.iterator();
    }

    public void addToOutletIdList(String elem) {
      if (this.outletIdList == null) {
        this.outletIdList = new ArrayList<String>();
      }
      this.outletIdList.add(elem);
    }

    public List<String> getOutletIdList() {
      return this.outletIdList;
    }

    public getOutletDetailbyOutletIdList_args setOutletIdList(List<String> outletIdList) {
      this.outletIdList = outletIdList;
      return this;
    }

    public void unsetOutletIdList() {
      this.outletIdList = null;
    }

    /** Returns true if field outletIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletIdList() {
      return this.outletIdList != null;
    }

    public void setOutletIdListIsSet(boolean value) {
      if (!value) {
        this.outletIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID_LIST:
        if (value == null) {
          unsetOutletIdList();
        } else {
          setOutletIdList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID_LIST:
        return getOutletIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID_LIST:
        return isSetOutletIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetailbyOutletIdList_args)
        return this.equals((getOutletDetailbyOutletIdList_args)that);
      return false;
    }

    public boolean equals(getOutletDetailbyOutletIdList_args that) {
      if (that == null)
        return false;

      boolean this_present_outletIdList = true && this.isSetOutletIdList();
      boolean that_present_outletIdList = true && that.isSetOutletIdList();
      if (this_present_outletIdList || that_present_outletIdList) {
        if (!(this_present_outletIdList && that_present_outletIdList))
          return false;
        if (!this.outletIdList.equals(that.outletIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletIdList = true && (isSetOutletIdList());
      list.add(present_outletIdList);
      if (present_outletIdList)
        list.add(outletIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetailbyOutletIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletIdList()).compareTo(other.isSetOutletIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletIdList, other.outletIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetailbyOutletIdList_args(");
      boolean first = true;

      sb.append("outletIdList:");
      if (this.outletIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.outletIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetailbyOutletIdList_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletDetailbyOutletIdList_argsStandardScheme getScheme() {
        return new getOutletDetailbyOutletIdList_argsStandardScheme();
      }
    }

    private static class getOutletDetailbyOutletIdList_argsStandardScheme extends StandardScheme<getOutletDetailbyOutletIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetailbyOutletIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.outletIdList = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.outletIdList.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setOutletIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetailbyOutletIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletIdList != null) {
          oprot.writeFieldBegin(OUTLET_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outletIdList.size()));
            for (String _iter35 : struct.outletIdList)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetailbyOutletIdList_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletDetailbyOutletIdList_argsTupleScheme getScheme() {
        return new getOutletDetailbyOutletIdList_argsTupleScheme();
      }
    }

    private static class getOutletDetailbyOutletIdList_argsTupleScheme extends TupleScheme<getOutletDetailbyOutletIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetailbyOutletIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletIdList()) {
          {
            oprot.writeI32(struct.outletIdList.size());
            for (String _iter36 : struct.outletIdList)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetailbyOutletIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outletIdList = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.outletIdList.add(_elem38);
            }
          }
          struct.setOutletIdListIsSet(true);
        }
      }
    }

  }

  public static class getOutletDetailbyOutletIdList_result implements org.apache.thrift.TBase<getOutletDetailbyOutletIdList_result, getOutletDetailbyOutletIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletDetailbyOutletIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletDetailbyOutletIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletDetailbyOutletIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletDetailbyOutletIdList_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletDetailVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletDetailVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletDetailbyOutletIdList_result.class, metaDataMap);
    }

    public getOutletDetailbyOutletIdList_result() {
    }

    public getOutletDetailbyOutletIdList_result(
      List<com.froad.thrift.vo.OutletDetailVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletDetailbyOutletIdList_result(getOutletDetailbyOutletIdList_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletDetailVo> __this__success = new ArrayList<com.froad.thrift.vo.OutletDetailVo>(other.success.size());
        for (com.froad.thrift.vo.OutletDetailVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletDetailVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOutletDetailbyOutletIdList_result deepCopy() {
      return new getOutletDetailbyOutletIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletDetailVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletDetailVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletDetailVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletDetailVo> getSuccess() {
      return this.success;
    }

    public getOutletDetailbyOutletIdList_result setSuccess(List<com.froad.thrift.vo.OutletDetailVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletDetailVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletDetailbyOutletIdList_result)
        return this.equals((getOutletDetailbyOutletIdList_result)that);
      return false;
    }

    public boolean equals(getOutletDetailbyOutletIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletDetailbyOutletIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletDetailbyOutletIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletDetailbyOutletIdList_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletDetailbyOutletIdList_resultStandardScheme getScheme() {
        return new getOutletDetailbyOutletIdList_resultStandardScheme();
      }
    }

    private static class getOutletDetailbyOutletIdList_resultStandardScheme extends StandardScheme<getOutletDetailbyOutletIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletDetailbyOutletIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletDetailVo>(_list40.size);
                  com.froad.thrift.vo.OutletDetailVo _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.froad.thrift.vo.OutletDetailVo();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletDetailbyOutletIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletDetailVo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletDetailbyOutletIdList_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletDetailbyOutletIdList_resultTupleScheme getScheme() {
        return new getOutletDetailbyOutletIdList_resultTupleScheme();
      }
    }

    private static class getOutletDetailbyOutletIdList_resultTupleScheme extends TupleScheme<getOutletDetailbyOutletIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletDetailbyOutletIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletDetailVo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletDetailbyOutletIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletDetailVo>(_list45.size);
            com.froad.thrift.vo.OutletDetailVo _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.froad.thrift.vo.OutletDetailVo();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletMongoInfoVoByPage_args implements org.apache.thrift.TBase<getOutletMongoInfoVoByPage_args, getOutletMongoInfoVoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletMongoInfoVoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletMongoInfoVoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletMongoInfoVoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletMongoInfoVoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public double longitude; // required
    public double latitude; // required
    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      LONGITUDE((short)2, "longitude"),
      LATITUDE((short)3, "latitude"),
      MERCHANT_ID((short)4, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // LONGITUDE
            return LONGITUDE;
          case 3: // LATITUDE
            return LATITUDE;
          case 4: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LONGITUDE_ISSET_ID = 0;
    private static final int __LATITUDE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletMongoInfoVoByPage_args.class, metaDataMap);
    }

    public getOutletMongoInfoVoByPage_args() {
    }

    public getOutletMongoInfoVoByPage_args(
      com.froad.thrift.vo.PageVo page,
      double longitude,
      double latitude,
      String merchantId)
    {
      this();
      this.page = page;
      this.longitude = longitude;
      setLongitudeIsSet(true);
      this.latitude = latitude;
      setLatitudeIsSet(true);
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletMongoInfoVoByPage_args(getOutletMongoInfoVoByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      this.longitude = other.longitude;
      this.latitude = other.latitude;
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public getOutletMongoInfoVoByPage_args deepCopy() {
      return new getOutletMongoInfoVoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      setLongitudeIsSet(false);
      this.longitude = 0.0;
      setLatitudeIsSet(false);
      this.latitude = 0.0;
      this.merchantId = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletMongoInfoVoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public double getLongitude() {
      return this.longitude;
    }

    public getOutletMongoInfoVoByPage_args setLongitude(double longitude) {
      this.longitude = longitude;
      setLongitudeIsSet(true);
      return this;
    }

    public void unsetLongitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLongitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    public void setLongitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
    }

    public double getLatitude() {
      return this.latitude;
    }

    public getOutletMongoInfoVoByPage_args setLatitude(double latitude) {
      this.latitude = latitude;
      setLatitudeIsSet(true);
      return this;
    }

    public void unsetLatitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLatitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    public void setLatitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getOutletMongoInfoVoByPage_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case LONGITUDE:
        if (value == null) {
          unsetLongitude();
        } else {
          setLongitude((Double)value);
        }
        break;

      case LATITUDE:
        if (value == null) {
          unsetLatitude();
        } else {
          setLatitude((Double)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case LONGITUDE:
        return Double.valueOf(getLongitude());

      case LATITUDE:
        return Double.valueOf(getLatitude());

      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case LONGITUDE:
        return isSetLongitude();
      case LATITUDE:
        return isSetLatitude();
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletMongoInfoVoByPage_args)
        return this.equals((getOutletMongoInfoVoByPage_args)that);
      return false;
    }

    public boolean equals(getOutletMongoInfoVoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_longitude = true;
      boolean that_present_longitude = true;
      if (this_present_longitude || that_present_longitude) {
        if (!(this_present_longitude && that_present_longitude))
          return false;
        if (this.longitude != that.longitude)
          return false;
      }

      boolean this_present_latitude = true;
      boolean that_present_latitude = true;
      if (this_present_latitude || that_present_latitude) {
        if (!(this_present_latitude && that_present_latitude))
          return false;
        if (this.latitude != that.latitude)
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_longitude = true;
      list.add(present_longitude);
      if (present_longitude)
        list.add(longitude);

      boolean present_latitude = true;
      list.add(present_latitude);
      if (present_latitude)
        list.add(latitude);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletMongoInfoVoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletMongoInfoVoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletMongoInfoVoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletMongoInfoVoByPage_argsStandardScheme getScheme() {
        return new getOutletMongoInfoVoByPage_argsStandardScheme();
      }
    }

    private static class getOutletMongoInfoVoByPage_argsStandardScheme extends StandardScheme<getOutletMongoInfoVoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletMongoInfoVoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LONGITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.longitude = iprot.readDouble();
                struct.setLongitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LATITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.latitude = iprot.readDouble();
                struct.setLatitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletMongoInfoVoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletMongoInfoVoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletMongoInfoVoByPage_argsTupleScheme getScheme() {
        return new getOutletMongoInfoVoByPage_argsTupleScheme();
      }
    }

    private static class getOutletMongoInfoVoByPage_argsTupleScheme extends TupleScheme<getOutletMongoInfoVoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletMongoInfoVoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetLongitude()) {
          optionals.set(1);
        }
        if (struct.isSetLatitude()) {
          optionals.set(2);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetLongitude()) {
          oprot.writeDouble(struct.longitude);
        }
        if (struct.isSetLatitude()) {
          oprot.writeDouble(struct.latitude);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletMongoInfoVoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.longitude = iprot.readDouble();
          struct.setLongitudeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.latitude = iprot.readDouble();
          struct.setLatitudeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletMongoInfoVoByPage_result implements org.apache.thrift.TBase<getOutletMongoInfoVoByPage_result, getOutletMongoInfoVoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletMongoInfoVoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletMongoInfoVoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletMongoInfoVoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletMongoInfoVoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletMongoInfoPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletMongoInfoPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletMongoInfoVoByPage_result.class, metaDataMap);
    }

    public getOutletMongoInfoVoByPage_result() {
    }

    public getOutletMongoInfoVoByPage_result(
      com.froad.thrift.vo.OutletMongoInfoPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletMongoInfoVoByPage_result(getOutletMongoInfoVoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletMongoInfoPageVoRes(other.success);
      }
    }

    public getOutletMongoInfoVoByPage_result deepCopy() {
      return new getOutletMongoInfoVoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletMongoInfoPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletMongoInfoVoByPage_result setSuccess(com.froad.thrift.vo.OutletMongoInfoPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletMongoInfoPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletMongoInfoVoByPage_result)
        return this.equals((getOutletMongoInfoVoByPage_result)that);
      return false;
    }

    public boolean equals(getOutletMongoInfoVoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletMongoInfoVoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletMongoInfoVoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletMongoInfoVoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletMongoInfoVoByPage_resultStandardScheme getScheme() {
        return new getOutletMongoInfoVoByPage_resultStandardScheme();
      }
    }

    private static class getOutletMongoInfoVoByPage_resultStandardScheme extends StandardScheme<getOutletMongoInfoVoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletMongoInfoVoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletMongoInfoPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletMongoInfoVoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletMongoInfoVoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletMongoInfoVoByPage_resultTupleScheme getScheme() {
        return new getOutletMongoInfoVoByPage_resultTupleScheme();
      }
    }

    private static class getOutletMongoInfoVoByPage_resultTupleScheme extends TupleScheme<getOutletMongoInfoVoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletMongoInfoVoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletMongoInfoVoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletMongoInfoPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncOutletInfo_args implements org.apache.thrift.TBase<syncOutletInfo_args, syncOutletInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncOutletInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncOutletInfo_args");

    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_SYN_SUCC_FIELD_DESC = new org.apache.thrift.protocol.TField("isSynSucc", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SYN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("synType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncOutletInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncOutletInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletVo outletVo; // required
    public String isSynSucc; // required
    public String synType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_VO((short)1, "outletVo"),
      IS_SYN_SUCC((short)2, "isSynSucc"),
      SYN_TYPE((short)3, "synType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_VO
            return OUTLET_VO;
          case 2: // IS_SYN_SUCC
            return IS_SYN_SUCC;
          case 3: // SYN_TYPE
            return SYN_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      tmpMap.put(_Fields.IS_SYN_SUCC, new org.apache.thrift.meta_data.FieldMetaData("isSynSucc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("synType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncOutletInfo_args.class, metaDataMap);
    }

    public syncOutletInfo_args() {
    }

    public syncOutletInfo_args(
      com.froad.thrift.vo.OutletVo outletVo,
      String isSynSucc,
      String synType)
    {
      this();
      this.outletVo = outletVo;
      this.isSynSucc = isSynSucc;
      this.synType = synType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncOutletInfo_args(syncOutletInfo_args other) {
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
      if (other.isSetIsSynSucc()) {
        this.isSynSucc = other.isSynSucc;
      }
      if (other.isSetSynType()) {
        this.synType = other.synType;
      }
    }

    public syncOutletInfo_args deepCopy() {
      return new syncOutletInfo_args(this);
    }

    @Override
    public void clear() {
      this.outletVo = null;
      this.isSynSucc = null;
      this.synType = null;
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public syncOutletInfo_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public String getIsSynSucc() {
      return this.isSynSucc;
    }

    public syncOutletInfo_args setIsSynSucc(String isSynSucc) {
      this.isSynSucc = isSynSucc;
      return this;
    }

    public void unsetIsSynSucc() {
      this.isSynSucc = null;
    }

    /** Returns true if field isSynSucc is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSynSucc() {
      return this.isSynSucc != null;
    }

    public void setIsSynSuccIsSet(boolean value) {
      if (!value) {
        this.isSynSucc = null;
      }
    }

    public String getSynType() {
      return this.synType;
    }

    public syncOutletInfo_args setSynType(String synType) {
      this.synType = synType;
      return this;
    }

    public void unsetSynType() {
      this.synType = null;
    }

    /** Returns true if field synType is set (has been assigned a value) and false otherwise */
    public boolean isSetSynType() {
      return this.synType != null;
    }

    public void setSynTypeIsSet(boolean value) {
      if (!value) {
        this.synType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      case IS_SYN_SUCC:
        if (value == null) {
          unsetIsSynSucc();
        } else {
          setIsSynSucc((String)value);
        }
        break;

      case SYN_TYPE:
        if (value == null) {
          unsetSynType();
        } else {
          setSynType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_VO:
        return getOutletVo();

      case IS_SYN_SUCC:
        return getIsSynSucc();

      case SYN_TYPE:
        return getSynType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_VO:
        return isSetOutletVo();
      case IS_SYN_SUCC:
        return isSetIsSynSucc();
      case SYN_TYPE:
        return isSetSynType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncOutletInfo_args)
        return this.equals((syncOutletInfo_args)that);
      return false;
    }

    public boolean equals(syncOutletInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      boolean this_present_isSynSucc = true && this.isSetIsSynSucc();
      boolean that_present_isSynSucc = true && that.isSetIsSynSucc();
      if (this_present_isSynSucc || that_present_isSynSucc) {
        if (!(this_present_isSynSucc && that_present_isSynSucc))
          return false;
        if (!this.isSynSucc.equals(that.isSynSucc))
          return false;
      }

      boolean this_present_synType = true && this.isSetSynType();
      boolean that_present_synType = true && that.isSetSynType();
      if (this_present_synType || that_present_synType) {
        if (!(this_present_synType && that_present_synType))
          return false;
        if (!this.synType.equals(that.synType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      boolean present_isSynSucc = true && (isSetIsSynSucc());
      list.add(present_isSynSucc);
      if (present_isSynSucc)
        list.add(isSynSucc);

      boolean present_synType = true && (isSetSynType());
      list.add(present_synType);
      if (present_synType)
        list.add(synType);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncOutletInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSynSucc()).compareTo(other.isSetIsSynSucc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSynSucc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSynSucc, other.isSynSucc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSynType()).compareTo(other.isSetSynType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSynType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.synType, other.synType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncOutletInfo_args(");
      boolean first = true;

      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSynSucc:");
      if (this.isSynSucc == null) {
        sb.append("null");
      } else {
        sb.append(this.isSynSucc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("synType:");
      if (this.synType == null) {
        sb.append("null");
      } else {
        sb.append(this.synType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncOutletInfo_argsStandardSchemeFactory implements SchemeFactory {
      public syncOutletInfo_argsStandardScheme getScheme() {
        return new syncOutletInfo_argsStandardScheme();
      }
    }

    private static class syncOutletInfo_argsStandardScheme extends StandardScheme<syncOutletInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncOutletInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_SYN_SUCC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.isSynSucc = iprot.readString();
                struct.setIsSynSuccIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYN_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.synType = iprot.readString();
                struct.setSynTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncOutletInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.isSynSucc != null) {
          oprot.writeFieldBegin(IS_SYN_SUCC_FIELD_DESC);
          oprot.writeString(struct.isSynSucc);
          oprot.writeFieldEnd();
        }
        if (struct.synType != null) {
          oprot.writeFieldBegin(SYN_TYPE_FIELD_DESC);
          oprot.writeString(struct.synType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncOutletInfo_argsTupleSchemeFactory implements SchemeFactory {
      public syncOutletInfo_argsTupleScheme getScheme() {
        return new syncOutletInfo_argsTupleScheme();
      }
    }

    private static class syncOutletInfo_argsTupleScheme extends TupleScheme<syncOutletInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletVo()) {
          optionals.set(0);
        }
        if (struct.isSetIsSynSucc()) {
          optionals.set(1);
        }
        if (struct.isSetSynType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
        if (struct.isSetIsSynSucc()) {
          oprot.writeString(struct.isSynSucc);
        }
        if (struct.isSetSynType()) {
          oprot.writeString(struct.synType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isSynSucc = iprot.readString();
          struct.setIsSynSuccIsSet(true);
        }
        if (incoming.get(2)) {
          struct.synType = iprot.readString();
          struct.setSynTypeIsSet(true);
        }
      }
    }

  }

  public static class syncOutletInfo_result implements org.apache.thrift.TBase<syncOutletInfo_result, syncOutletInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncOutletInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncOutletInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncOutletInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncOutletInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncOutletInfo_result.class, metaDataMap);
    }

    public syncOutletInfo_result() {
    }

    public syncOutletInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncOutletInfo_result(syncOutletInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public syncOutletInfo_result deepCopy() {
      return new syncOutletInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public syncOutletInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncOutletInfo_result)
        return this.equals((syncOutletInfo_result)that);
      return false;
    }

    public boolean equals(syncOutletInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncOutletInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncOutletInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncOutletInfo_resultStandardSchemeFactory implements SchemeFactory {
      public syncOutletInfo_resultStandardScheme getScheme() {
        return new syncOutletInfo_resultStandardScheme();
      }
    }

    private static class syncOutletInfo_resultStandardScheme extends StandardScheme<syncOutletInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncOutletInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncOutletInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncOutletInfo_resultTupleSchemeFactory implements SchemeFactory {
      public syncOutletInfo_resultTupleScheme getScheme() {
        return new syncOutletInfo_resultTupleScheme();
      }
    }

    private static class syncOutletInfo_resultTupleScheme extends TupleScheme<syncOutletInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class commitAuditOutlet_args implements org.apache.thrift.TBase<commitAuditOutlet_args, commitAuditOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<commitAuditOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitAuditOutlet_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitAuditOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitAuditOutlet_argsTupleSchemeFactory());
    }

    public String outletId; // required
    public String auditId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID((short)1, "outletId"),
      AUDIT_ID((short)2, "auditId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID
            return OUTLET_ID;
          case 2: // AUDIT_ID
            return AUDIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitAuditOutlet_args.class, metaDataMap);
    }

    public commitAuditOutlet_args() {
    }

    public commitAuditOutlet_args(
      String outletId,
      String auditId)
    {
      this();
      this.outletId = outletId;
      this.auditId = auditId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitAuditOutlet_args(commitAuditOutlet_args other) {
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
      if (other.isSetAuditId()) {
        this.auditId = other.auditId;
      }
    }

    public commitAuditOutlet_args deepCopy() {
      return new commitAuditOutlet_args(this);
    }

    @Override
    public void clear() {
      this.outletId = null;
      this.auditId = null;
    }

    public String getOutletId() {
      return this.outletId;
    }

    public commitAuditOutlet_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public String getAuditId() {
      return this.auditId;
    }

    public commitAuditOutlet_args setAuditId(String auditId) {
      this.auditId = auditId;
      return this;
    }

    public void unsetAuditId() {
      this.auditId = null;
    }

    /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditId() {
      return this.auditId != null;
    }

    public void setAuditIdIsSet(boolean value) {
      if (!value) {
        this.auditId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      case AUDIT_ID:
        if (value == null) {
          unsetAuditId();
        } else {
          setAuditId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID:
        return getOutletId();

      case AUDIT_ID:
        return getAuditId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID:
        return isSetOutletId();
      case AUDIT_ID:
        return isSetAuditId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitAuditOutlet_args)
        return this.equals((commitAuditOutlet_args)that);
      return false;
    }

    public boolean equals(commitAuditOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      boolean this_present_auditId = true && this.isSetAuditId();
      boolean that_present_auditId = true && that.isSetAuditId();
      if (this_present_auditId || that_present_auditId) {
        if (!(this_present_auditId && that_present_auditId))
          return false;
        if (!this.auditId.equals(that.auditId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      boolean present_auditId = true && (isSetAuditId());
      list.add(present_auditId);
      if (present_auditId)
        list.add(auditId);

      return list.hashCode();
    }

    @Override
    public int compareTo(commitAuditOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitAuditOutlet_args(");
      boolean first = true;

      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditId:");
      if (this.auditId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitAuditOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public commitAuditOutlet_argsStandardScheme getScheme() {
        return new commitAuditOutlet_argsStandardScheme();
      }
    }

    private static class commitAuditOutlet_argsStandardScheme extends StandardScheme<commitAuditOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitAuditOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditId = iprot.readString();
                struct.setAuditIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitAuditOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        if (struct.auditId != null) {
          oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
          oprot.writeString(struct.auditId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitAuditOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public commitAuditOutlet_argsTupleScheme getScheme() {
        return new commitAuditOutlet_argsTupleScheme();
      }
    }

    private static class commitAuditOutlet_argsTupleScheme extends TupleScheme<commitAuditOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitAuditOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
        if (struct.isSetAuditId()) {
          oprot.writeString(struct.auditId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitAuditOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditId = iprot.readString();
          struct.setAuditIdIsSet(true);
        }
      }
    }

  }

  public static class commitAuditOutlet_result implements org.apache.thrift.TBase<commitAuditOutlet_result, commitAuditOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<commitAuditOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitAuditOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitAuditOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitAuditOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitAuditOutlet_result.class, metaDataMap);
    }

    public commitAuditOutlet_result() {
    }

    public commitAuditOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitAuditOutlet_result(commitAuditOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public commitAuditOutlet_result deepCopy() {
      return new commitAuditOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public commitAuditOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitAuditOutlet_result)
        return this.equals((commitAuditOutlet_result)that);
      return false;
    }

    public boolean equals(commitAuditOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(commitAuditOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitAuditOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitAuditOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public commitAuditOutlet_resultStandardScheme getScheme() {
        return new commitAuditOutlet_resultStandardScheme();
      }
    }

    private static class commitAuditOutlet_resultStandardScheme extends StandardScheme<commitAuditOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitAuditOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitAuditOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitAuditOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public commitAuditOutlet_resultTupleScheme getScheme() {
        return new commitAuditOutlet_resultTupleScheme();
      }
    }

    private static class commitAuditOutlet_resultTupleScheme extends TupleScheme<commitAuditOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitAuditOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitAuditOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveOutletTempEditOutlet_args implements org.apache.thrift.TBase<saveOutletTempEditOutlet_args, saveOutletTempEditOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOutletTempEditOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOutletTempEditOutlet_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_TEMP_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletTempVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOutletTempEditOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOutletTempEditOutlet_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletTempVo outletTempVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_TEMP_VO((short)2, "outletTempVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_TEMP_VO
            return OUTLET_TEMP_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_TEMP_VO, new org.apache.thrift.meta_data.FieldMetaData("outletTempVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletTempVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOutletTempEditOutlet_args.class, metaDataMap);
    }

    public saveOutletTempEditOutlet_args() {
    }

    public saveOutletTempEditOutlet_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletTempVo outletTempVo)
    {
      this();
      this.originVo = originVo;
      this.outletTempVo = outletTempVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOutletTempEditOutlet_args(saveOutletTempEditOutlet_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletTempVo()) {
        this.outletTempVo = new com.froad.thrift.vo.OutletTempVo(other.outletTempVo);
      }
    }

    public saveOutletTempEditOutlet_args deepCopy() {
      return new saveOutletTempEditOutlet_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletTempVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public saveOutletTempEditOutlet_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletTempVo getOutletTempVo() {
      return this.outletTempVo;
    }

    public saveOutletTempEditOutlet_args setOutletTempVo(com.froad.thrift.vo.OutletTempVo outletTempVo) {
      this.outletTempVo = outletTempVo;
      return this;
    }

    public void unsetOutletTempVo() {
      this.outletTempVo = null;
    }

    /** Returns true if field outletTempVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletTempVo() {
      return this.outletTempVo != null;
    }

    public void setOutletTempVoIsSet(boolean value) {
      if (!value) {
        this.outletTempVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_TEMP_VO:
        if (value == null) {
          unsetOutletTempVo();
        } else {
          setOutletTempVo((com.froad.thrift.vo.OutletTempVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_TEMP_VO:
        return getOutletTempVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_TEMP_VO:
        return isSetOutletTempVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOutletTempEditOutlet_args)
        return this.equals((saveOutletTempEditOutlet_args)that);
      return false;
    }

    public boolean equals(saveOutletTempEditOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletTempVo = true && this.isSetOutletTempVo();
      boolean that_present_outletTempVo = true && that.isSetOutletTempVo();
      if (this_present_outletTempVo || that_present_outletTempVo) {
        if (!(this_present_outletTempVo && that_present_outletTempVo))
          return false;
        if (!this.outletTempVo.equals(that.outletTempVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletTempVo = true && (isSetOutletTempVo());
      list.add(present_outletTempVo);
      if (present_outletTempVo)
        list.add(outletTempVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOutletTempEditOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletTempVo()).compareTo(other.isSetOutletTempVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletTempVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletTempVo, other.outletTempVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOutletTempEditOutlet_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletTempVo:");
      if (this.outletTempVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletTempVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletTempVo != null) {
        outletTempVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOutletTempEditOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public saveOutletTempEditOutlet_argsStandardScheme getScheme() {
        return new saveOutletTempEditOutlet_argsStandardScheme();
      }
    }

    private static class saveOutletTempEditOutlet_argsStandardScheme extends StandardScheme<saveOutletTempEditOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOutletTempEditOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_TEMP_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletTempVo = new com.froad.thrift.vo.OutletTempVo();
                struct.outletTempVo.read(iprot);
                struct.setOutletTempVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOutletTempEditOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletTempVo != null) {
          oprot.writeFieldBegin(OUTLET_TEMP_VO_FIELD_DESC);
          struct.outletTempVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOutletTempEditOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public saveOutletTempEditOutlet_argsTupleScheme getScheme() {
        return new saveOutletTempEditOutlet_argsTupleScheme();
      }
    }

    private static class saveOutletTempEditOutlet_argsTupleScheme extends TupleScheme<saveOutletTempEditOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOutletTempEditOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletTempVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletTempVo()) {
          struct.outletTempVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOutletTempEditOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletTempVo = new com.froad.thrift.vo.OutletTempVo();
          struct.outletTempVo.read(iprot);
          struct.setOutletTempVoIsSet(true);
        }
      }
    }

  }

  public static class saveOutletTempEditOutlet_result implements org.apache.thrift.TBase<saveOutletTempEditOutlet_result, saveOutletTempEditOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOutletTempEditOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOutletTempEditOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOutletTempEditOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOutletTempEditOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletTempAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletTempAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOutletTempEditOutlet_result.class, metaDataMap);
    }

    public saveOutletTempEditOutlet_result() {
    }

    public saveOutletTempEditOutlet_result(
      com.froad.thrift.vo.OutletTempAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOutletTempEditOutlet_result(saveOutletTempEditOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletTempAddVoRes(other.success);
      }
    }

    public saveOutletTempEditOutlet_result deepCopy() {
      return new saveOutletTempEditOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletTempAddVoRes getSuccess() {
      return this.success;
    }

    public saveOutletTempEditOutlet_result setSuccess(com.froad.thrift.vo.OutletTempAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletTempAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOutletTempEditOutlet_result)
        return this.equals((saveOutletTempEditOutlet_result)that);
      return false;
    }

    public boolean equals(saveOutletTempEditOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOutletTempEditOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOutletTempEditOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOutletTempEditOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public saveOutletTempEditOutlet_resultStandardScheme getScheme() {
        return new saveOutletTempEditOutlet_resultStandardScheme();
      }
    }

    private static class saveOutletTempEditOutlet_resultStandardScheme extends StandardScheme<saveOutletTempEditOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOutletTempEditOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletTempAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOutletTempEditOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOutletTempEditOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public saveOutletTempEditOutlet_resultTupleScheme getScheme() {
        return new saveOutletTempEditOutlet_resultTupleScheme();
      }
    }

    private static class saveOutletTempEditOutlet_resultTupleScheme extends TupleScheme<saveOutletTempEditOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOutletTempEditOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOutletTempEditOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletTempAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletModifyInfos_args implements org.apache.thrift.TBase<getOutletModifyInfos_args, getOutletModifyInfos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletModifyInfos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletModifyInfos_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletModifyInfos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletModifyInfos_argsTupleSchemeFactory());
    }

    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID((short)1, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletModifyInfos_args.class, metaDataMap);
    }

    public getOutletModifyInfos_args() {
    }

    public getOutletModifyInfos_args(
      String outletId)
    {
      this();
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletModifyInfos_args(getOutletModifyInfos_args other) {
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public getOutletModifyInfos_args deepCopy() {
      return new getOutletModifyInfos_args(this);
    }

    @Override
    public void clear() {
      this.outletId = null;
    }

    public String getOutletId() {
      return this.outletId;
    }

    public getOutletModifyInfos_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletModifyInfos_args)
        return this.equals((getOutletModifyInfos_args)that);
      return false;
    }

    public boolean equals(getOutletModifyInfos_args that) {
      if (that == null)
        return false;

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletModifyInfos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletModifyInfos_args(");
      boolean first = true;

      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletModifyInfos_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletModifyInfos_argsStandardScheme getScheme() {
        return new getOutletModifyInfos_argsStandardScheme();
      }
    }

    private static class getOutletModifyInfos_argsStandardScheme extends StandardScheme<getOutletModifyInfos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletModifyInfos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletModifyInfos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletModifyInfos_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletModifyInfos_argsTupleScheme getScheme() {
        return new getOutletModifyInfos_argsTupleScheme();
      }
    }

    private static class getOutletModifyInfos_argsTupleScheme extends TupleScheme<getOutletModifyInfos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletModifyInfos_result implements org.apache.thrift.TBase<getOutletModifyInfos_result, getOutletModifyInfos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletModifyInfos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletModifyInfos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletModifyInfos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletModifyInfos_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletTempVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletTempVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletModifyInfos_result.class, metaDataMap);
    }

    public getOutletModifyInfos_result() {
    }

    public getOutletModifyInfos_result(
      com.froad.thrift.vo.OutletTempVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletModifyInfos_result(getOutletModifyInfos_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletTempVo(other.success);
      }
    }

    public getOutletModifyInfos_result deepCopy() {
      return new getOutletModifyInfos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletTempVo getSuccess() {
      return this.success;
    }

    public getOutletModifyInfos_result setSuccess(com.froad.thrift.vo.OutletTempVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletTempVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletModifyInfos_result)
        return this.equals((getOutletModifyInfos_result)that);
      return false;
    }

    public boolean equals(getOutletModifyInfos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletModifyInfos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletModifyInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletModifyInfos_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletModifyInfos_resultStandardScheme getScheme() {
        return new getOutletModifyInfos_resultStandardScheme();
      }
    }

    private static class getOutletModifyInfos_resultStandardScheme extends StandardScheme<getOutletModifyInfos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletModifyInfos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletTempVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletModifyInfos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletModifyInfos_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletModifyInfos_resultTupleScheme getScheme() {
        return new getOutletModifyInfos_resultTupleScheme();
      }
    }

    private static class getOutletModifyInfos_resultTupleScheme extends TupleScheme<getOutletModifyInfos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletTempVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletModifyInfoByAuditBox_args implements org.apache.thrift.TBase<getOutletModifyInfoByAuditBox_args, getOutletModifyInfoByAuditBox_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletModifyInfoByAuditBox_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletModifyInfoByAuditBox_args");

    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletModifyInfoByAuditBox_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletModifyInfoByAuditBox_argsTupleSchemeFactory());
    }

    public String outletId; // required
    public String auditId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_ID((short)1, "outletId"),
      AUDIT_ID((short)2, "auditId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_ID
            return OUTLET_ID;
          case 2: // AUDIT_ID
            return AUDIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletModifyInfoByAuditBox_args.class, metaDataMap);
    }

    public getOutletModifyInfoByAuditBox_args() {
    }

    public getOutletModifyInfoByAuditBox_args(
      String outletId,
      String auditId)
    {
      this();
      this.outletId = outletId;
      this.auditId = auditId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletModifyInfoByAuditBox_args(getOutletModifyInfoByAuditBox_args other) {
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
      if (other.isSetAuditId()) {
        this.auditId = other.auditId;
      }
    }

    public getOutletModifyInfoByAuditBox_args deepCopy() {
      return new getOutletModifyInfoByAuditBox_args(this);
    }

    @Override
    public void clear() {
      this.outletId = null;
      this.auditId = null;
    }

    public String getOutletId() {
      return this.outletId;
    }

    public getOutletModifyInfoByAuditBox_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public String getAuditId() {
      return this.auditId;
    }

    public getOutletModifyInfoByAuditBox_args setAuditId(String auditId) {
      this.auditId = auditId;
      return this;
    }

    public void unsetAuditId() {
      this.auditId = null;
    }

    /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditId() {
      return this.auditId != null;
    }

    public void setAuditIdIsSet(boolean value) {
      if (!value) {
        this.auditId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      case AUDIT_ID:
        if (value == null) {
          unsetAuditId();
        } else {
          setAuditId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_ID:
        return getOutletId();

      case AUDIT_ID:
        return getAuditId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_ID:
        return isSetOutletId();
      case AUDIT_ID:
        return isSetAuditId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletModifyInfoByAuditBox_args)
        return this.equals((getOutletModifyInfoByAuditBox_args)that);
      return false;
    }

    public boolean equals(getOutletModifyInfoByAuditBox_args that) {
      if (that == null)
        return false;

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      boolean this_present_auditId = true && this.isSetAuditId();
      boolean that_present_auditId = true && that.isSetAuditId();
      if (this_present_auditId || that_present_auditId) {
        if (!(this_present_auditId && that_present_auditId))
          return false;
        if (!this.auditId.equals(that.auditId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      boolean present_auditId = true && (isSetAuditId());
      list.add(present_auditId);
      if (present_auditId)
        list.add(auditId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletModifyInfoByAuditBox_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletModifyInfoByAuditBox_args(");
      boolean first = true;

      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditId:");
      if (this.auditId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletModifyInfoByAuditBox_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletModifyInfoByAuditBox_argsStandardScheme getScheme() {
        return new getOutletModifyInfoByAuditBox_argsStandardScheme();
      }
    }

    private static class getOutletModifyInfoByAuditBox_argsStandardScheme extends StandardScheme<getOutletModifyInfoByAuditBox_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletModifyInfoByAuditBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditId = iprot.readString();
                struct.setAuditIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletModifyInfoByAuditBox_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        if (struct.auditId != null) {
          oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
          oprot.writeString(struct.auditId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletModifyInfoByAuditBox_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletModifyInfoByAuditBox_argsTupleScheme getScheme() {
        return new getOutletModifyInfoByAuditBox_argsTupleScheme();
      }
    }

    private static class getOutletModifyInfoByAuditBox_argsTupleScheme extends TupleScheme<getOutletModifyInfoByAuditBox_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfoByAuditBox_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
        if (struct.isSetAuditId()) {
          oprot.writeString(struct.auditId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfoByAuditBox_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditId = iprot.readString();
          struct.setAuditIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletModifyInfoByAuditBox_result implements org.apache.thrift.TBase<getOutletModifyInfoByAuditBox_result, getOutletModifyInfoByAuditBox_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletModifyInfoByAuditBox_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletModifyInfoByAuditBox_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletModifyInfoByAuditBox_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletModifyInfoByAuditBox_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletTempVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletTempVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletModifyInfoByAuditBox_result.class, metaDataMap);
    }

    public getOutletModifyInfoByAuditBox_result() {
    }

    public getOutletModifyInfoByAuditBox_result(
      com.froad.thrift.vo.OutletTempVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletModifyInfoByAuditBox_result(getOutletModifyInfoByAuditBox_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletTempVo(other.success);
      }
    }

    public getOutletModifyInfoByAuditBox_result deepCopy() {
      return new getOutletModifyInfoByAuditBox_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletTempVo getSuccess() {
      return this.success;
    }

    public getOutletModifyInfoByAuditBox_result setSuccess(com.froad.thrift.vo.OutletTempVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletTempVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletModifyInfoByAuditBox_result)
        return this.equals((getOutletModifyInfoByAuditBox_result)that);
      return false;
    }

    public boolean equals(getOutletModifyInfoByAuditBox_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletModifyInfoByAuditBox_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletModifyInfoByAuditBox_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletModifyInfoByAuditBox_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletModifyInfoByAuditBox_resultStandardScheme getScheme() {
        return new getOutletModifyInfoByAuditBox_resultStandardScheme();
      }
    }

    private static class getOutletModifyInfoByAuditBox_resultStandardScheme extends StandardScheme<getOutletModifyInfoByAuditBox_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletModifyInfoByAuditBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletTempVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletModifyInfoByAuditBox_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletModifyInfoByAuditBox_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletModifyInfoByAuditBox_resultTupleScheme getScheme() {
        return new getOutletModifyInfoByAuditBox_resultTupleScheme();
      }
    }

    private static class getOutletModifyInfoByAuditBox_resultTupleScheme extends TupleScheme<getOutletModifyInfoByAuditBox_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfoByAuditBox_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletModifyInfoByAuditBox_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletTempVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletPreferByPage_args implements org.apache.thrift.TBase<getOutletPreferByPage_args, getOutletPreferByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletPreferByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletPreferByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_PREFER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletPreferVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletPreferByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletPreferByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletPreferVo outletPreferVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_PREFER_VO((short)2, "outletPreferVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_PREFER_VO
            return OUTLET_PREFER_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_PREFER_VO, new org.apache.thrift.meta_data.FieldMetaData("outletPreferVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletPreferVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletPreferByPage_args.class, metaDataMap);
    }

    public getOutletPreferByPage_args() {
    }

    public getOutletPreferByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletPreferVo outletPreferVo)
    {
      this();
      this.page = page;
      this.outletPreferVo = outletPreferVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletPreferByPage_args(getOutletPreferByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletPreferVo()) {
        this.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo(other.outletPreferVo);
      }
    }

    public getOutletPreferByPage_args deepCopy() {
      return new getOutletPreferByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletPreferVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletPreferByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletPreferVo getOutletPreferVo() {
      return this.outletPreferVo;
    }

    public getOutletPreferByPage_args setOutletPreferVo(com.froad.thrift.vo.OutletPreferVo outletPreferVo) {
      this.outletPreferVo = outletPreferVo;
      return this;
    }

    public void unsetOutletPreferVo() {
      this.outletPreferVo = null;
    }

    /** Returns true if field outletPreferVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletPreferVo() {
      return this.outletPreferVo != null;
    }

    public void setOutletPreferVoIsSet(boolean value) {
      if (!value) {
        this.outletPreferVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_PREFER_VO:
        if (value == null) {
          unsetOutletPreferVo();
        } else {
          setOutletPreferVo((com.froad.thrift.vo.OutletPreferVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_PREFER_VO:
        return getOutletPreferVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_PREFER_VO:
        return isSetOutletPreferVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletPreferByPage_args)
        return this.equals((getOutletPreferByPage_args)that);
      return false;
    }

    public boolean equals(getOutletPreferByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletPreferVo = true && this.isSetOutletPreferVo();
      boolean that_present_outletPreferVo = true && that.isSetOutletPreferVo();
      if (this_present_outletPreferVo || that_present_outletPreferVo) {
        if (!(this_present_outletPreferVo && that_present_outletPreferVo))
          return false;
        if (!this.outletPreferVo.equals(that.outletPreferVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletPreferVo = true && (isSetOutletPreferVo());
      list.add(present_outletPreferVo);
      if (present_outletPreferVo)
        list.add(outletPreferVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletPreferByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletPreferVo()).compareTo(other.isSetOutletPreferVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletPreferVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletPreferVo, other.outletPreferVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletPreferByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletPreferVo:");
      if (this.outletPreferVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletPreferVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletPreferVo != null) {
        outletPreferVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletPreferByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletPreferByPage_argsStandardScheme getScheme() {
        return new getOutletPreferByPage_argsStandardScheme();
      }
    }

    private static class getOutletPreferByPage_argsStandardScheme extends StandardScheme<getOutletPreferByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletPreferByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_PREFER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo();
                struct.outletPreferVo.read(iprot);
                struct.setOutletPreferVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletPreferByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletPreferVo != null) {
          oprot.writeFieldBegin(OUTLET_PREFER_VO_FIELD_DESC);
          struct.outletPreferVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletPreferByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletPreferByPage_argsTupleScheme getScheme() {
        return new getOutletPreferByPage_argsTupleScheme();
      }
    }

    private static class getOutletPreferByPage_argsTupleScheme extends TupleScheme<getOutletPreferByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletPreferByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletPreferVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletPreferVo()) {
          struct.outletPreferVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletPreferByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo();
          struct.outletPreferVo.read(iprot);
          struct.setOutletPreferVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletPreferByPage_result implements org.apache.thrift.TBase<getOutletPreferByPage_result, getOutletPreferByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletPreferByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletPreferByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletPreferByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletPreferByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletPreferPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletPreferPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletPreferByPage_result.class, metaDataMap);
    }

    public getOutletPreferByPage_result() {
    }

    public getOutletPreferByPage_result(
      com.froad.thrift.vo.OutletPreferPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletPreferByPage_result(getOutletPreferByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletPreferPageVoRes(other.success);
      }
    }

    public getOutletPreferByPage_result deepCopy() {
      return new getOutletPreferByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletPreferPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletPreferByPage_result setSuccess(com.froad.thrift.vo.OutletPreferPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletPreferPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletPreferByPage_result)
        return this.equals((getOutletPreferByPage_result)that);
      return false;
    }

    public boolean equals(getOutletPreferByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletPreferByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletPreferByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletPreferByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletPreferByPage_resultStandardScheme getScheme() {
        return new getOutletPreferByPage_resultStandardScheme();
      }
    }

    private static class getOutletPreferByPage_resultStandardScheme extends StandardScheme<getOutletPreferByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletPreferByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletPreferPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletPreferByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletPreferByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletPreferByPage_resultTupleScheme getScheme() {
        return new getOutletPreferByPage_resultTupleScheme();
      }
    }

    private static class getOutletPreferByPage_resultTupleScheme extends TupleScheme<getOutletPreferByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletPreferByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletPreferByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletPreferPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletExport_args implements org.apache.thrift.TBase<getOutletExport_args, getOutletExport_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletExport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletExport_args");

    private static final org.apache.thrift.protocol.TField OUTLET_PREFER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletPreferVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletExport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletExport_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletPreferVo outletPreferVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_PREFER_VO((short)1, "outletPreferVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_PREFER_VO
            return OUTLET_PREFER_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_PREFER_VO, new org.apache.thrift.meta_data.FieldMetaData("outletPreferVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletPreferVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletExport_args.class, metaDataMap);
    }

    public getOutletExport_args() {
    }

    public getOutletExport_args(
      com.froad.thrift.vo.OutletPreferVo outletPreferVo)
    {
      this();
      this.outletPreferVo = outletPreferVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletExport_args(getOutletExport_args other) {
      if (other.isSetOutletPreferVo()) {
        this.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo(other.outletPreferVo);
      }
    }

    public getOutletExport_args deepCopy() {
      return new getOutletExport_args(this);
    }

    @Override
    public void clear() {
      this.outletPreferVo = null;
    }

    public com.froad.thrift.vo.OutletPreferVo getOutletPreferVo() {
      return this.outletPreferVo;
    }

    public getOutletExport_args setOutletPreferVo(com.froad.thrift.vo.OutletPreferVo outletPreferVo) {
      this.outletPreferVo = outletPreferVo;
      return this;
    }

    public void unsetOutletPreferVo() {
      this.outletPreferVo = null;
    }

    /** Returns true if field outletPreferVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletPreferVo() {
      return this.outletPreferVo != null;
    }

    public void setOutletPreferVoIsSet(boolean value) {
      if (!value) {
        this.outletPreferVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_PREFER_VO:
        if (value == null) {
          unsetOutletPreferVo();
        } else {
          setOutletPreferVo((com.froad.thrift.vo.OutletPreferVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_PREFER_VO:
        return getOutletPreferVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_PREFER_VO:
        return isSetOutletPreferVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletExport_args)
        return this.equals((getOutletExport_args)that);
      return false;
    }

    public boolean equals(getOutletExport_args that) {
      if (that == null)
        return false;

      boolean this_present_outletPreferVo = true && this.isSetOutletPreferVo();
      boolean that_present_outletPreferVo = true && that.isSetOutletPreferVo();
      if (this_present_outletPreferVo || that_present_outletPreferVo) {
        if (!(this_present_outletPreferVo && that_present_outletPreferVo))
          return false;
        if (!this.outletPreferVo.equals(that.outletPreferVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletPreferVo = true && (isSetOutletPreferVo());
      list.add(present_outletPreferVo);
      if (present_outletPreferVo)
        list.add(outletPreferVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletExport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletPreferVo()).compareTo(other.isSetOutletPreferVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletPreferVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletPreferVo, other.outletPreferVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletExport_args(");
      boolean first = true;

      sb.append("outletPreferVo:");
      if (this.outletPreferVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletPreferVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletPreferVo != null) {
        outletPreferVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletExport_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletExport_argsStandardScheme getScheme() {
        return new getOutletExport_argsStandardScheme();
      }
    }

    private static class getOutletExport_argsStandardScheme extends StandardScheme<getOutletExport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletExport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_PREFER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo();
                struct.outletPreferVo.read(iprot);
                struct.setOutletPreferVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletExport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletPreferVo != null) {
          oprot.writeFieldBegin(OUTLET_PREFER_VO_FIELD_DESC);
          struct.outletPreferVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletExport_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletExport_argsTupleScheme getScheme() {
        return new getOutletExport_argsTupleScheme();
      }
    }

    private static class getOutletExport_argsTupleScheme extends TupleScheme<getOutletExport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletPreferVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletPreferVo()) {
          struct.outletPreferVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletPreferVo = new com.froad.thrift.vo.OutletPreferVo();
          struct.outletPreferVo.read(iprot);
          struct.setOutletPreferVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletExport_result implements org.apache.thrift.TBase<getOutletExport_result, getOutletExport_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletExport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletExport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletExport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletExport_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletExport_result.class, metaDataMap);
    }

    public getOutletExport_result() {
    }

    public getOutletExport_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletExport_result(getOutletExport_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public getOutletExport_result deepCopy() {
      return new getOutletExport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public getOutletExport_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletExport_result)
        return this.equals((getOutletExport_result)that);
      return false;
    }

    public boolean equals(getOutletExport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletExport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletExport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletExport_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletExport_resultStandardScheme getScheme() {
        return new getOutletExport_resultStandardScheme();
      }
    }

    private static class getOutletExport_resultStandardScheme extends StandardScheme<getOutletExport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletExport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletExport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletExport_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletExport_resultTupleScheme getScheme() {
        return new getOutletExport_resultTupleScheme();
      }
    }

    private static class getOutletExport_resultTupleScheme extends TupleScheme<getOutletExport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
