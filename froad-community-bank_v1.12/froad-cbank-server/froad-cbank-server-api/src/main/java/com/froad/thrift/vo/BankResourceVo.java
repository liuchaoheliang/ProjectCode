/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行资源Vo
 * BankResourceVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankResourceVo implements org.apache.thrift.TBase<BankResourceVo, BankResourceVo._Fields>, java.io.Serializable, Cloneable, Comparable<BankResourceVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BankResourceVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentResourceId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField RESOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESOURCE_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIcon", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BankResourceVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BankResourceVoTupleSchemeFactory());
  }

  /**
   * 资源id 主键id
   */
  public long id; // optional
  /**
   * 客户端id
   */
  public String clientId; // optional
  /**
   * 资源名称
   */
  public String resourceName; // optional
  /**
   * 0:菜单1:按钮
   */
  public boolean resourceType; // optional
  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public long parentResourceId; // optional
  /**
   * 0-不可用 1-可用
   */
  public boolean status; // optional
  /**
   * 资源url
   */
  public String resourceUrl; // optional
  /**
   * 资源图标
   */
  public String resourceIcon; // optional
  /**
   * 资源路径(路径连接符为空格)
   */
  public String treePath; // optional
  /**
   * 是否删除 0-未删除 1-删除
   */
  public boolean isDelete; // optional
  /**
   * 资源接口
   */
  public String api; // optional
  /**
   * 资源排序
   */
  public int orderValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 资源id 主键id
     */
    ID((short)1, "id"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 资源名称
     */
    RESOURCE_NAME((short)3, "resourceName"),
    /**
     * 0:菜单1:按钮
     */
    RESOURCE_TYPE((short)4, "resourceType"),
    /**
     * 父级资源Id(顶级资源的父资源ID为0)
     */
    PARENT_RESOURCE_ID((short)5, "parentResourceId"),
    /**
     * 0-不可用 1-可用
     */
    STATUS((short)6, "status"),
    /**
     * 资源url
     */
    RESOURCE_URL((short)7, "resourceUrl"),
    /**
     * 资源图标
     */
    RESOURCE_ICON((short)8, "resourceIcon"),
    /**
     * 资源路径(路径连接符为空格)
     */
    TREE_PATH((short)9, "treePath"),
    /**
     * 是否删除 0-未删除 1-删除
     */
    IS_DELETE((short)10, "isDelete"),
    /**
     * 资源接口
     */
    API((short)11, "api"),
    /**
     * 资源排序
     */
    ORDER_VALUE((short)12, "orderValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 4: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 5: // PARENT_RESOURCE_ID
          return PARENT_RESOURCE_ID;
        case 6: // STATUS
          return STATUS;
        case 7: // RESOURCE_URL
          return RESOURCE_URL;
        case 8: // RESOURCE_ICON
          return RESOURCE_ICON;
        case 9: // TREE_PATH
          return TREE_PATH;
        case 10: // IS_DELETE
          return IS_DELETE;
        case 11: // API
          return API;
        case 12: // ORDER_VALUE
          return ORDER_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RESOURCETYPE_ISSET_ID = 1;
  private static final int __PARENTRESOURCEID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __ISDELETE_ISSET_ID = 4;
  private static final int __ORDERVALUE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.RESOURCE_NAME,_Fields.RESOURCE_TYPE,_Fields.PARENT_RESOURCE_ID,_Fields.STATUS,_Fields.RESOURCE_URL,_Fields.RESOURCE_ICON,_Fields.TREE_PATH,_Fields.IS_DELETE,_Fields.API,_Fields.ORDER_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("parentResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("resourceUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ICON, new org.apache.thrift.meta_data.FieldMetaData("resourceIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BankResourceVo.class, metaDataMap);
  }

  public BankResourceVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BankResourceVo(BankResourceVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    this.resourceType = other.resourceType;
    this.parentResourceId = other.parentResourceId;
    this.status = other.status;
    if (other.isSetResourceUrl()) {
      this.resourceUrl = other.resourceUrl;
    }
    if (other.isSetResourceIcon()) {
      this.resourceIcon = other.resourceIcon;
    }
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    this.isDelete = other.isDelete;
    if (other.isSetApi()) {
      this.api = other.api;
    }
    this.orderValue = other.orderValue;
  }

  public BankResourceVo deepCopy() {
    return new BankResourceVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.resourceName = null;
    setResourceTypeIsSet(false);
    this.resourceType = false;
    setParentResourceIdIsSet(false);
    this.parentResourceId = 0;
    setStatusIsSet(false);
    this.status = false;
    this.resourceUrl = null;
    this.resourceIcon = null;
    this.treePath = null;
    setIsDeleteIsSet(false);
    this.isDelete = false;
    this.api = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
  }

  /**
   * 资源id 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 资源id 主键id
   */
  public BankResourceVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public BankResourceVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 资源名称
   */
  public String getResourceName() {
    return this.resourceName;
  }

  /**
   * 资源名称
   */
  public BankResourceVo setResourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  /**
   * 0:菜单1:按钮
   */
  public boolean isResourceType() {
    return this.resourceType;
  }

  /**
   * 0:菜单1:按钮
   */
  public BankResourceVo setResourceType(boolean resourceType) {
    this.resourceType = resourceType;
    setResourceTypeIsSet(true);
    return this;
  }

  public void unsetResourceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCETYPE_ISSET_ID);
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCETYPE_ISSET_ID);
  }

  public void setResourceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCETYPE_ISSET_ID, value);
  }

  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public long getParentResourceId() {
    return this.parentResourceId;
  }

  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public BankResourceVo setParentResourceId(long parentResourceId) {
    this.parentResourceId = parentResourceId;
    setParentResourceIdIsSet(true);
    return this;
  }

  public void unsetParentResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  /** Returns true if field parentResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  public void setParentResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID, value);
  }

  /**
   * 0-不可用 1-可用
   */
  public boolean isStatus() {
    return this.status;
  }

  /**
   * 0-不可用 1-可用
   */
  public BankResourceVo setStatus(boolean status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 资源url
   */
  public String getResourceUrl() {
    return this.resourceUrl;
  }

  /**
   * 资源url
   */
  public BankResourceVo setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  public void unsetResourceUrl() {
    this.resourceUrl = null;
  }

  /** Returns true if field resourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceUrl() {
    return this.resourceUrl != null;
  }

  public void setResourceUrlIsSet(boolean value) {
    if (!value) {
      this.resourceUrl = null;
    }
  }

  /**
   * 资源图标
   */
  public String getResourceIcon() {
    return this.resourceIcon;
  }

  /**
   * 资源图标
   */
  public BankResourceVo setResourceIcon(String resourceIcon) {
    this.resourceIcon = resourceIcon;
    return this;
  }

  public void unsetResourceIcon() {
    this.resourceIcon = null;
  }

  /** Returns true if field resourceIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceIcon() {
    return this.resourceIcon != null;
  }

  public void setResourceIconIsSet(boolean value) {
    if (!value) {
      this.resourceIcon = null;
    }
  }

  /**
   * 资源路径(路径连接符为空格)
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 资源路径(路径连接符为空格)
   */
  public BankResourceVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 是否删除 0-未删除 1-删除
   */
  public boolean isIsDelete() {
    return this.isDelete;
  }

  /**
   * 是否删除 0-未删除 1-删除
   */
  public BankResourceVo setIsDelete(boolean isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
  }

  /**
   * 资源接口
   */
  public String getApi() {
    return this.api;
  }

  /**
   * 资源接口
   */
  public BankResourceVo setApi(String api) {
    this.api = api;
    return this;
  }

  public void unsetApi() {
    this.api = null;
  }

  /** Returns true if field api is set (has been assigned a value) and false otherwise */
  public boolean isSetApi() {
    return this.api != null;
  }

  public void setApiIsSet(boolean value) {
    if (!value) {
      this.api = null;
    }
  }

  /**
   * 资源排序
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * 资源排序
   */
  public BankResourceVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((Boolean)value);
      }
      break;

    case PARENT_RESOURCE_ID:
      if (value == null) {
        unsetParentResourceId();
      } else {
        setParentResourceId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Boolean)value);
      }
      break;

    case RESOURCE_URL:
      if (value == null) {
        unsetResourceUrl();
      } else {
        setResourceUrl((String)value);
      }
      break;

    case RESOURCE_ICON:
      if (value == null) {
        unsetResourceIcon();
      } else {
        setResourceIcon((String)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Boolean)value);
      }
      break;

    case API:
      if (value == null) {
        unsetApi();
      } else {
        setApi((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case RESOURCE_NAME:
      return getResourceName();

    case RESOURCE_TYPE:
      return Boolean.valueOf(isResourceType());

    case PARENT_RESOURCE_ID:
      return Long.valueOf(getParentResourceId());

    case STATUS:
      return Boolean.valueOf(isStatus());

    case RESOURCE_URL:
      return getResourceUrl();

    case RESOURCE_ICON:
      return getResourceIcon();

    case TREE_PATH:
      return getTreePath();

    case IS_DELETE:
      return Boolean.valueOf(isIsDelete());

    case API:
      return getApi();

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case RESOURCE_NAME:
      return isSetResourceName();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case PARENT_RESOURCE_ID:
      return isSetParentResourceId();
    case STATUS:
      return isSetStatus();
    case RESOURCE_URL:
      return isSetResourceUrl();
    case RESOURCE_ICON:
      return isSetResourceIcon();
    case TREE_PATH:
      return isSetTreePath();
    case IS_DELETE:
      return isSetIsDelete();
    case API:
      return isSetApi();
    case ORDER_VALUE:
      return isSetOrderValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BankResourceVo)
      return this.equals((BankResourceVo)that);
    return false;
  }

  public boolean equals(BankResourceVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (this.resourceType != that.resourceType)
        return false;
    }

    boolean this_present_parentResourceId = true && this.isSetParentResourceId();
    boolean that_present_parentResourceId = true && that.isSetParentResourceId();
    if (this_present_parentResourceId || that_present_parentResourceId) {
      if (!(this_present_parentResourceId && that_present_parentResourceId))
        return false;
      if (this.parentResourceId != that.parentResourceId)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_resourceUrl = true && this.isSetResourceUrl();
    boolean that_present_resourceUrl = true && that.isSetResourceUrl();
    if (this_present_resourceUrl || that_present_resourceUrl) {
      if (!(this_present_resourceUrl && that_present_resourceUrl))
        return false;
      if (!this.resourceUrl.equals(that.resourceUrl))
        return false;
    }

    boolean this_present_resourceIcon = true && this.isSetResourceIcon();
    boolean that_present_resourceIcon = true && that.isSetResourceIcon();
    if (this_present_resourceIcon || that_present_resourceIcon) {
      if (!(this_present_resourceIcon && that_present_resourceIcon))
        return false;
      if (!this.resourceIcon.equals(that.resourceIcon))
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_isDelete = true && this.isSetIsDelete();
    boolean that_present_isDelete = true && that.isSetIsDelete();
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    boolean this_present_api = true && this.isSetApi();
    boolean that_present_api = true && that.isSetApi();
    if (this_present_api || that_present_api) {
      if (!(this_present_api && that_present_api))
        return false;
      if (!this.api.equals(that.api))
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_resourceName = true && (isSetResourceName());
    list.add(present_resourceName);
    if (present_resourceName)
      list.add(resourceName);

    boolean present_resourceType = true && (isSetResourceType());
    list.add(present_resourceType);
    if (present_resourceType)
      list.add(resourceType);

    boolean present_parentResourceId = true && (isSetParentResourceId());
    list.add(present_parentResourceId);
    if (present_parentResourceId)
      list.add(parentResourceId);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_resourceUrl = true && (isSetResourceUrl());
    list.add(present_resourceUrl);
    if (present_resourceUrl)
      list.add(resourceUrl);

    boolean present_resourceIcon = true && (isSetResourceIcon());
    list.add(present_resourceIcon);
    if (present_resourceIcon)
      list.add(resourceIcon);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_isDelete = true && (isSetIsDelete());
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    boolean present_api = true && (isSetApi());
    list.add(present_api);
    if (present_api)
      list.add(api);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(BankResourceVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentResourceId()).compareTo(other.isSetParentResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentResourceId, other.parentResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceUrl()).compareTo(other.isSetResourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceUrl, other.resourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceIcon()).compareTo(other.isSetResourceIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIcon, other.resourceIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BankResourceVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetResourceName()) {
      if (!first) sb.append(", ");
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      sb.append(this.resourceType);
      first = false;
    }
    if (isSetParentResourceId()) {
      if (!first) sb.append(", ");
      sb.append("parentResourceId:");
      sb.append(this.parentResourceId);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetResourceUrl()) {
      if (!first) sb.append(", ");
      sb.append("resourceUrl:");
      if (this.resourceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceUrl);
      }
      first = false;
    }
    if (isSetResourceIcon()) {
      if (!first) sb.append(", ");
      sb.append("resourceIcon:");
      if (this.resourceIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIcon);
      }
      first = false;
    }
    if (isSetTreePath()) {
      if (!first) sb.append(", ");
      sb.append("treePath:");
      if (this.treePath == null) {
        sb.append("null");
      } else {
        sb.append(this.treePath);
      }
      first = false;
    }
    if (isSetIsDelete()) {
      if (!first) sb.append(", ");
      sb.append("isDelete:");
      sb.append(this.isDelete);
      first = false;
    }
    if (isSetApi()) {
      if (!first) sb.append(", ");
      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BankResourceVoStandardSchemeFactory implements SchemeFactory {
    public BankResourceVoStandardScheme getScheme() {
      return new BankResourceVoStandardScheme();
    }
  }

  private static class BankResourceVoStandardScheme extends StandardScheme<BankResourceVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BankResourceVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resourceType = iprot.readBool();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentResourceId = iprot.readI64();
              struct.setParentResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.status = iprot.readBool();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceUrl = iprot.readString();
              struct.setResourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESOURCE_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceIcon = iprot.readString();
              struct.setResourceIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDelete = iprot.readBool();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // API
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api = iprot.readString();
              struct.setApiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BankResourceVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResourceType()) {
        oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
        oprot.writeBool(struct.resourceType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeFieldBegin(PARENT_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.parentResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeBool(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.resourceUrl != null) {
        if (struct.isSetResourceUrl()) {
          oprot.writeFieldBegin(RESOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.resourceUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceIcon != null) {
        if (struct.isSetResourceIcon()) {
          oprot.writeFieldBegin(RESOURCE_ICON_FIELD_DESC);
          oprot.writeString(struct.resourceIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treePath != null) {
        if (struct.isSetTreePath()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.treePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDelete()) {
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeBool(struct.isDelete);
        oprot.writeFieldEnd();
      }
      if (struct.api != null) {
        if (struct.isSetApi()) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BankResourceVoTupleSchemeFactory implements SchemeFactory {
    public BankResourceVoTupleScheme getScheme() {
      return new BankResourceVoTupleScheme();
    }
  }

  private static class BankResourceVoTupleScheme extends TupleScheme<BankResourceVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BankResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetResourceName()) {
        optionals.set(2);
      }
      if (struct.isSetResourceType()) {
        optionals.set(3);
      }
      if (struct.isSetParentResourceId()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetResourceUrl()) {
        optionals.set(6);
      }
      if (struct.isSetResourceIcon()) {
        optionals.set(7);
      }
      if (struct.isSetTreePath()) {
        optionals.set(8);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(9);
      }
      if (struct.isSetApi()) {
        optionals.set(10);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetResourceType()) {
        oprot.writeBool(struct.resourceType);
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeI64(struct.parentResourceId);
      }
      if (struct.isSetStatus()) {
        oprot.writeBool(struct.status);
      }
      if (struct.isSetResourceUrl()) {
        oprot.writeString(struct.resourceUrl);
      }
      if (struct.isSetResourceIcon()) {
        oprot.writeString(struct.resourceIcon);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeBool(struct.isDelete);
      }
      if (struct.isSetApi()) {
        oprot.writeString(struct.api);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BankResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resourceType = iprot.readBool();
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parentResourceId = iprot.readI64();
        struct.setParentResourceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readBool();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.resourceUrl = iprot.readString();
        struct.setResourceUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resourceIcon = iprot.readString();
        struct.setResourceIconIsSet(true);
      }
      if (incoming.get(8)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isDelete = iprot.readBool();
        struct.setIsDeleteIsSet(true);
      }
      if (incoming.get(10)) {
        struct.api = iprot.readString();
        struct.setApiIsSet(true);
      }
      if (incoming.get(11)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
    }
  }

}

