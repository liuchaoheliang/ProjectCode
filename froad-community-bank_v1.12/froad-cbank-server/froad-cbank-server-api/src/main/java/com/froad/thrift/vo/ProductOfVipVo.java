/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * VIP规则已经或可以绑定的商品列表vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductOfVipVo implements org.apache.thrift.TBase<ProductOfVipVo, ProductOfVipVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductOfVipVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductOfVipVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField RACK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rackTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IS_MARKETABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMarketable", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("vipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VIP_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLimit", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductOfVipVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductOfVipVoTupleSchemeFactory());
  }

  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 商品名
   */
  public String name; // required
  /**
   * 销售价
   */
  public double price; // required
  /**
   * 上架时间 long类型
   */
  public long rackTime; // required
  /**
   * 是否上架
   */
  public String isMarketable; // required
  /**
   * 创建时间 long类型
   */
  public long createTime; // required
  /**
   * VIP1价
   */
  public double vipPrice; // required
  /**
   * VIP1限购
   */
  public int vipLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品id
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 商品名
     */
    NAME((short)2, "name"),
    /**
     * 销售价
     */
    PRICE((short)3, "price"),
    /**
     * 上架时间 long类型
     */
    RACK_TIME((short)4, "rackTime"),
    /**
     * 是否上架
     */
    IS_MARKETABLE((short)5, "isMarketable"),
    /**
     * 创建时间 long类型
     */
    CREATE_TIME((short)6, "createTime"),
    /**
     * VIP1价
     */
    VIP_PRICE((short)7, "vipPrice"),
    /**
     * VIP1限购
     */
    VIP_LIMIT((short)8, "vipLimit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // NAME
          return NAME;
        case 3: // PRICE
          return PRICE;
        case 4: // RACK_TIME
          return RACK_TIME;
        case 5: // IS_MARKETABLE
          return IS_MARKETABLE;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // VIP_PRICE
          return VIP_PRICE;
        case 8: // VIP_LIMIT
          return VIP_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __RACKTIME_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __VIPPRICE_ISSET_ID = 3;
  private static final int __VIPLIMIT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RACK_TIME, new org.apache.thrift.meta_data.FieldMetaData("rackTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_MARKETABLE, new org.apache.thrift.meta_data.FieldMetaData("isMarketable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("vipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("vipLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductOfVipVo.class, metaDataMap);
  }

  public ProductOfVipVo() {
  }

  public ProductOfVipVo(
    String productId,
    String name,
    double price,
    long rackTime,
    String isMarketable,
    long createTime,
    double vipPrice,
    int vipLimit)
  {
    this();
    this.productId = productId;
    this.name = name;
    this.price = price;
    setPriceIsSet(true);
    this.rackTime = rackTime;
    setRackTimeIsSet(true);
    this.isMarketable = isMarketable;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
    this.vipLimit = vipLimit;
    setVipLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductOfVipVo(ProductOfVipVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.price = other.price;
    this.rackTime = other.rackTime;
    if (other.isSetIsMarketable()) {
      this.isMarketable = other.isMarketable;
    }
    this.createTime = other.createTime;
    this.vipPrice = other.vipPrice;
    this.vipLimit = other.vipLimit;
  }

  public ProductOfVipVo deepCopy() {
    return new ProductOfVipVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.name = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setRackTimeIsSet(false);
    this.rackTime = 0;
    this.isMarketable = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setVipPriceIsSet(false);
    this.vipPrice = 0.0;
    setVipLimitIsSet(false);
    this.vipLimit = 0;
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public ProductOfVipVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名
   */
  public String getName() {
    return this.name;
  }

  /**
   * 商品名
   */
  public ProductOfVipVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 销售价
   */
  public double getPrice() {
    return this.price;
  }

  /**
   * 销售价
   */
  public ProductOfVipVo setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 上架时间 long类型
   */
  public long getRackTime() {
    return this.rackTime;
  }

  /**
   * 上架时间 long类型
   */
  public ProductOfVipVo setRackTime(long rackTime) {
    this.rackTime = rackTime;
    setRackTimeIsSet(true);
    return this;
  }

  public void unsetRackTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RACKTIME_ISSET_ID);
  }

  /** Returns true if field rackTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRackTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RACKTIME_ISSET_ID);
  }

  public void setRackTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RACKTIME_ISSET_ID, value);
  }

  /**
   * 是否上架
   */
  public String getIsMarketable() {
    return this.isMarketable;
  }

  /**
   * 是否上架
   */
  public ProductOfVipVo setIsMarketable(String isMarketable) {
    this.isMarketable = isMarketable;
    return this;
  }

  public void unsetIsMarketable() {
    this.isMarketable = null;
  }

  /** Returns true if field isMarketable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMarketable() {
    return this.isMarketable != null;
  }

  public void setIsMarketableIsSet(boolean value) {
    if (!value) {
      this.isMarketable = null;
    }
  }

  /**
   * 创建时间 long类型
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间 long类型
   */
  public ProductOfVipVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * VIP1价
   */
  public double getVipPrice() {
    return this.vipPrice;
  }

  /**
   * VIP1价
   */
  public ProductOfVipVo setVipPrice(double vipPrice) {
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
    return this;
  }

  public void unsetVipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  /** Returns true if field vipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  public void setVipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICE_ISSET_ID, value);
  }

  /**
   * VIP1限购
   */
  public int getVipLimit() {
    return this.vipLimit;
  }

  /**
   * VIP1限购
   */
  public ProductOfVipVo setVipLimit(int vipLimit) {
    this.vipLimit = vipLimit;
    setVipLimitIsSet(true);
    return this;
  }

  public void unsetVipLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLIMIT_ISSET_ID);
  }

  /** Returns true if field vipLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLIMIT_ISSET_ID);
  }

  public void setVipLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case RACK_TIME:
      if (value == null) {
        unsetRackTime();
      } else {
        setRackTime((Long)value);
      }
      break;

    case IS_MARKETABLE:
      if (value == null) {
        unsetIsMarketable();
      } else {
        setIsMarketable((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case VIP_PRICE:
      if (value == null) {
        unsetVipPrice();
      } else {
        setVipPrice((Double)value);
      }
      break;

    case VIP_LIMIT:
      if (value == null) {
        unsetVipLimit();
      } else {
        setVipLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case NAME:
      return getName();

    case PRICE:
      return Double.valueOf(getPrice());

    case RACK_TIME:
      return Long.valueOf(getRackTime());

    case IS_MARKETABLE:
      return getIsMarketable();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case VIP_PRICE:
      return Double.valueOf(getVipPrice());

    case VIP_LIMIT:
      return Integer.valueOf(getVipLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case NAME:
      return isSetName();
    case PRICE:
      return isSetPrice();
    case RACK_TIME:
      return isSetRackTime();
    case IS_MARKETABLE:
      return isSetIsMarketable();
    case CREATE_TIME:
      return isSetCreateTime();
    case VIP_PRICE:
      return isSetVipPrice();
    case VIP_LIMIT:
      return isSetVipLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductOfVipVo)
      return this.equals((ProductOfVipVo)that);
    return false;
  }

  public boolean equals(ProductOfVipVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_rackTime = true;
    boolean that_present_rackTime = true;
    if (this_present_rackTime || that_present_rackTime) {
      if (!(this_present_rackTime && that_present_rackTime))
        return false;
      if (this.rackTime != that.rackTime)
        return false;
    }

    boolean this_present_isMarketable = true && this.isSetIsMarketable();
    boolean that_present_isMarketable = true && that.isSetIsMarketable();
    if (this_present_isMarketable || that_present_isMarketable) {
      if (!(this_present_isMarketable && that_present_isMarketable))
        return false;
      if (!this.isMarketable.equals(that.isMarketable))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_vipPrice = true;
    boolean that_present_vipPrice = true;
    if (this_present_vipPrice || that_present_vipPrice) {
      if (!(this_present_vipPrice && that_present_vipPrice))
        return false;
      if (this.vipPrice != that.vipPrice)
        return false;
    }

    boolean this_present_vipLimit = true;
    boolean that_present_vipLimit = true;
    if (this_present_vipLimit || that_present_vipLimit) {
      if (!(this_present_vipLimit && that_present_vipLimit))
        return false;
      if (this.vipLimit != that.vipLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_price = true;
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_rackTime = true;
    list.add(present_rackTime);
    if (present_rackTime)
      list.add(rackTime);

    boolean present_isMarketable = true && (isSetIsMarketable());
    list.add(present_isMarketable);
    if (present_isMarketable)
      list.add(isMarketable);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_vipPrice = true;
    list.add(present_vipPrice);
    if (present_vipPrice)
      list.add(vipPrice);

    boolean present_vipLimit = true;
    list.add(present_vipLimit);
    if (present_vipLimit)
      list.add(vipLimit);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductOfVipVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRackTime()).compareTo(other.isSetRackTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rackTime, other.rackTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMarketable()).compareTo(other.isSetIsMarketable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMarketable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMarketable, other.isMarketable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPrice()).compareTo(other.isSetVipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPrice, other.vipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLimit()).compareTo(other.isSetVipLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLimit, other.vipLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductOfVipVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rackTime:");
    sb.append(this.rackTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMarketable:");
    if (this.isMarketable == null) {
      sb.append("null");
    } else {
      sb.append(this.isMarketable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipPrice:");
    sb.append(this.vipPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipLimit:");
    sb.append(this.vipLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductOfVipVoStandardSchemeFactory implements SchemeFactory {
    public ProductOfVipVoStandardScheme getScheme() {
      return new ProductOfVipVoStandardScheme();
    }
  }

  private static class ProductOfVipVoStandardScheme extends StandardScheme<ProductOfVipVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductOfVipVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RACK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rackTime = iprot.readI64();
              struct.setRackTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_MARKETABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMarketable = iprot.readString();
              struct.setIsMarketableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipPrice = iprot.readDouble();
              struct.setVipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIP_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipLimit = iprot.readI32();
              struct.setVipLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductOfVipVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RACK_TIME_FIELD_DESC);
      oprot.writeI64(struct.rackTime);
      oprot.writeFieldEnd();
      if (struct.isMarketable != null) {
        oprot.writeFieldBegin(IS_MARKETABLE_FIELD_DESC);
        oprot.writeString(struct.isMarketable);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.vipPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.vipLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductOfVipVoTupleSchemeFactory implements SchemeFactory {
    public ProductOfVipVoTupleScheme getScheme() {
      return new ProductOfVipVoTupleScheme();
    }
  }

  private static class ProductOfVipVoTupleScheme extends TupleScheme<ProductOfVipVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductOfVipVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      if (struct.isSetRackTime()) {
        optionals.set(3);
      }
      if (struct.isSetIsMarketable()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetVipPrice()) {
        optionals.set(6);
      }
      if (struct.isSetVipLimit()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetRackTime()) {
        oprot.writeI64(struct.rackTime);
      }
      if (struct.isSetIsMarketable()) {
        oprot.writeString(struct.isMarketable);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetVipPrice()) {
        oprot.writeDouble(struct.vipPrice);
      }
      if (struct.isSetVipLimit()) {
        oprot.writeI32(struct.vipLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductOfVipVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rackTime = iprot.readI64();
        struct.setRackTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isMarketable = iprot.readString();
        struct.setIsMarketableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vipPrice = iprot.readDouble();
        struct.setVipPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vipLimit = iprot.readI32();
        struct.setVipLimitIsSet(true);
      }
    }
  }

}

