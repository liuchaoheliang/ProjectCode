/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportUserService {

  /**
   * 社区银行用户统计
   */
  public interface Iface {

    /**
     * 用户走势图
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.UserTrendResVo userTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户交易类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo userTradeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户消费类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo userConsumeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户统计详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.UserSummaryResVo userSummaryList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户统计详情列表(分页)
     * 
     * @param pageVo
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.UserSummaryPageVo userSummaryListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户交易支付详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.UserTradeDetailResVo userTradeDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 用户交易信息列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.UserTradeInfoResVo userTradeInfoList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userTradeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userConsumeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userSummaryList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userSummaryListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userTradeDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userTradeInfoList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.report.UserTrendResVo userTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userTrend(commonParamVo);
      return recv_userTrend();
    }

    public void send_userTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userTrend_args args = new userTrend_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userTrend", args);
    }

    public com.froad.thrift.vo.report.UserTrendResVo recv_userTrend() throws org.apache.thrift.TException
    {
      userTrend_result result = new userTrend_result();
      receiveBase(result, "userTrend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userTrend failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo userTradeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userTradeTypePercent(commonParamVo);
      return recv_userTradeTypePercent();
    }

    public void send_userTradeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userTradeTypePercent_args args = new userTradeTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userTradeTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_userTradeTypePercent() throws org.apache.thrift.TException
    {
      userTradeTypePercent_result result = new userTradeTypePercent_result();
      receiveBase(result, "userTradeTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userTradeTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo userConsumeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userConsumeTypePercent(commonParamVo);
      return recv_userConsumeTypePercent();
    }

    public void send_userConsumeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userConsumeTypePercent_args args = new userConsumeTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userConsumeTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_userConsumeTypePercent() throws org.apache.thrift.TException
    {
      userConsumeTypePercent_result result = new userConsumeTypePercent_result();
      receiveBase(result, "userConsumeTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userConsumeTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.UserSummaryResVo userSummaryList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userSummaryList(commonParamVo);
      return recv_userSummaryList();
    }

    public void send_userSummaryList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userSummaryList_args args = new userSummaryList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userSummaryList", args);
    }

    public com.froad.thrift.vo.report.UserSummaryResVo recv_userSummaryList() throws org.apache.thrift.TException
    {
      userSummaryList_result result = new userSummaryList_result();
      receiveBase(result, "userSummaryList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userSummaryList failed: unknown result");
    }

    public com.froad.thrift.vo.report.UserSummaryPageVo userSummaryListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userSummaryListByPage(pageVo, commonParamVo);
      return recv_userSummaryListByPage();
    }

    public void send_userSummaryListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userSummaryListByPage_args args = new userSummaryListByPage_args();
      args.setPageVo(pageVo);
      args.setCommonParamVo(commonParamVo);
      sendBase("userSummaryListByPage", args);
    }

    public com.froad.thrift.vo.report.UserSummaryPageVo recv_userSummaryListByPage() throws org.apache.thrift.TException
    {
      userSummaryListByPage_result result = new userSummaryListByPage_result();
      receiveBase(result, "userSummaryListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userSummaryListByPage failed: unknown result");
    }

    public com.froad.thrift.vo.report.UserTradeDetailResVo userTradeDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userTradeDetailList(commonParamVo);
      return recv_userTradeDetailList();
    }

    public void send_userTradeDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userTradeDetailList_args args = new userTradeDetailList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userTradeDetailList", args);
    }

    public com.froad.thrift.vo.report.UserTradeDetailResVo recv_userTradeDetailList() throws org.apache.thrift.TException
    {
      userTradeDetailList_result result = new userTradeDetailList_result();
      receiveBase(result, "userTradeDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userTradeDetailList failed: unknown result");
    }

    public com.froad.thrift.vo.report.UserTradeInfoResVo userTradeInfoList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_userTradeInfoList(commonParamVo);
      return recv_userTradeInfoList();
    }

    public void send_userTradeInfoList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      userTradeInfoList_args args = new userTradeInfoList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("userTradeInfoList", args);
    }

    public com.froad.thrift.vo.report.UserTradeInfoResVo recv_userTradeInfoList() throws org.apache.thrift.TException
    {
      userTradeInfoList_result result = new userTradeInfoList_result();
      receiveBase(result, "userTradeInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userTradeInfoList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userTrend_call method_call = new userTrend_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userTrend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userTrend_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userTrend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userTrend_args args = new userTrend_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.UserTrendResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userTrend();
      }
    }

    public void userTradeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userTradeTypePercent_call method_call = new userTradeTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userTradeTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userTradeTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userTradeTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userTradeTypePercent_args args = new userTradeTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userTradeTypePercent();
      }
    }

    public void userConsumeTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userConsumeTypePercent_call method_call = new userConsumeTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userConsumeTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userConsumeTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userConsumeTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userConsumeTypePercent_args args = new userConsumeTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userConsumeTypePercent();
      }
    }

    public void userSummaryList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userSummaryList_call method_call = new userSummaryList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userSummaryList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userSummaryList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userSummaryList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userSummaryList_args args = new userSummaryList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.UserSummaryResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userSummaryList();
      }
    }

    public void userSummaryListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userSummaryListByPage_call method_call = new userSummaryListByPage_call(pageVo, commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userSummaryListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userSummaryListByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userSummaryListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userSummaryListByPage_args args = new userSummaryListByPage_args();
        args.setPageVo(pageVo);
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.UserSummaryPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userSummaryListByPage();
      }
    }

    public void userTradeDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userTradeDetailList_call method_call = new userTradeDetailList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userTradeDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userTradeDetailList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userTradeDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userTradeDetailList_args args = new userTradeDetailList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.UserTradeDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userTradeDetailList();
      }
    }

    public void userTradeInfoList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userTradeInfoList_call method_call = new userTradeInfoList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userTradeInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public userTradeInfoList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userTradeInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userTradeInfoList_args args = new userTradeInfoList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.UserTradeInfoResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userTradeInfoList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userTrend", new userTrend());
      processMap.put("userTradeTypePercent", new userTradeTypePercent());
      processMap.put("userConsumeTypePercent", new userConsumeTypePercent());
      processMap.put("userSummaryList", new userSummaryList());
      processMap.put("userSummaryListByPage", new userSummaryListByPage());
      processMap.put("userTradeDetailList", new userTradeDetailList());
      processMap.put("userTradeInfoList", new userTradeInfoList());
      return processMap;
    }

    public static class userTrend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userTrend_args> {
      public userTrend() {
        super("userTrend");
      }

      public userTrend_args getEmptyArgsInstance() {
        return new userTrend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userTrend_result getResult(I iface, userTrend_args args) throws org.apache.thrift.TException {
        userTrend_result result = new userTrend_result();
        result.success = iface.userTrend(args.commonParamVo);
        return result;
      }
    }

    public static class userTradeTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userTradeTypePercent_args> {
      public userTradeTypePercent() {
        super("userTradeTypePercent");
      }

      public userTradeTypePercent_args getEmptyArgsInstance() {
        return new userTradeTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userTradeTypePercent_result getResult(I iface, userTradeTypePercent_args args) throws org.apache.thrift.TException {
        userTradeTypePercent_result result = new userTradeTypePercent_result();
        result.success = iface.userTradeTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class userConsumeTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userConsumeTypePercent_args> {
      public userConsumeTypePercent() {
        super("userConsumeTypePercent");
      }

      public userConsumeTypePercent_args getEmptyArgsInstance() {
        return new userConsumeTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userConsumeTypePercent_result getResult(I iface, userConsumeTypePercent_args args) throws org.apache.thrift.TException {
        userConsumeTypePercent_result result = new userConsumeTypePercent_result();
        result.success = iface.userConsumeTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class userSummaryList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userSummaryList_args> {
      public userSummaryList() {
        super("userSummaryList");
      }

      public userSummaryList_args getEmptyArgsInstance() {
        return new userSummaryList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userSummaryList_result getResult(I iface, userSummaryList_args args) throws org.apache.thrift.TException {
        userSummaryList_result result = new userSummaryList_result();
        result.success = iface.userSummaryList(args.commonParamVo);
        return result;
      }
    }

    public static class userSummaryListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userSummaryListByPage_args> {
      public userSummaryListByPage() {
        super("userSummaryListByPage");
      }

      public userSummaryListByPage_args getEmptyArgsInstance() {
        return new userSummaryListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userSummaryListByPage_result getResult(I iface, userSummaryListByPage_args args) throws org.apache.thrift.TException {
        userSummaryListByPage_result result = new userSummaryListByPage_result();
        result.success = iface.userSummaryListByPage(args.pageVo, args.commonParamVo);
        return result;
      }
    }

    public static class userTradeDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userTradeDetailList_args> {
      public userTradeDetailList() {
        super("userTradeDetailList");
      }

      public userTradeDetailList_args getEmptyArgsInstance() {
        return new userTradeDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userTradeDetailList_result getResult(I iface, userTradeDetailList_args args) throws org.apache.thrift.TException {
        userTradeDetailList_result result = new userTradeDetailList_result();
        result.success = iface.userTradeDetailList(args.commonParamVo);
        return result;
      }
    }

    public static class userTradeInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userTradeInfoList_args> {
      public userTradeInfoList() {
        super("userTradeInfoList");
      }

      public userTradeInfoList_args getEmptyArgsInstance() {
        return new userTradeInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userTradeInfoList_result getResult(I iface, userTradeInfoList_args args) throws org.apache.thrift.TException {
        userTradeInfoList_result result = new userTradeInfoList_result();
        result.success = iface.userTradeInfoList(args.commonParamVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userTrend", new userTrend());
      processMap.put("userTradeTypePercent", new userTradeTypePercent());
      processMap.put("userConsumeTypePercent", new userConsumeTypePercent());
      processMap.put("userSummaryList", new userSummaryList());
      processMap.put("userSummaryListByPage", new userSummaryListByPage());
      processMap.put("userTradeDetailList", new userTradeDetailList());
      processMap.put("userTradeInfoList", new userTradeInfoList());
      return processMap;
    }

    public static class userTrend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userTrend_args, com.froad.thrift.vo.report.UserTrendResVo> {
      public userTrend() {
        super("userTrend");
      }

      public userTrend_args getEmptyArgsInstance() {
        return new userTrend_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.UserTrendResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.UserTrendResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.UserTrendResVo o) {
            userTrend_result result = new userTrend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userTrend_result result = new userTrend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userTrend_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.UserTrendResVo> resultHandler) throws TException {
        iface.userTrend(args.commonParamVo,resultHandler);
      }
    }

    public static class userTradeTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userTradeTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public userTradeTypePercent() {
        super("userTradeTypePercent");
      }

      public userTradeTypePercent_args getEmptyArgsInstance() {
        return new userTradeTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            userTradeTypePercent_result result = new userTradeTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userTradeTypePercent_result result = new userTradeTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userTradeTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.userTradeTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class userConsumeTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userConsumeTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public userConsumeTypePercent() {
        super("userConsumeTypePercent");
      }

      public userConsumeTypePercent_args getEmptyArgsInstance() {
        return new userConsumeTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            userConsumeTypePercent_result result = new userConsumeTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userConsumeTypePercent_result result = new userConsumeTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userConsumeTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.userConsumeTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class userSummaryList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userSummaryList_args, com.froad.thrift.vo.report.UserSummaryResVo> {
      public userSummaryList() {
        super("userSummaryList");
      }

      public userSummaryList_args getEmptyArgsInstance() {
        return new userSummaryList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.UserSummaryResVo o) {
            userSummaryList_result result = new userSummaryList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userSummaryList_result result = new userSummaryList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userSummaryList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryResVo> resultHandler) throws TException {
        iface.userSummaryList(args.commonParamVo,resultHandler);
      }
    }

    public static class userSummaryListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userSummaryListByPage_args, com.froad.thrift.vo.report.UserSummaryPageVo> {
      public userSummaryListByPage() {
        super("userSummaryListByPage");
      }

      public userSummaryListByPage_args getEmptyArgsInstance() {
        return new userSummaryListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryPageVo>() { 
          public void onComplete(com.froad.thrift.vo.report.UserSummaryPageVo o) {
            userSummaryListByPage_result result = new userSummaryListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userSummaryListByPage_result result = new userSummaryListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userSummaryListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.UserSummaryPageVo> resultHandler) throws TException {
        iface.userSummaryListByPage(args.pageVo, args.commonParamVo,resultHandler);
      }
    }

    public static class userTradeDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userTradeDetailList_args, com.froad.thrift.vo.report.UserTradeDetailResVo> {
      public userTradeDetailList() {
        super("userTradeDetailList");
      }

      public userTradeDetailList_args getEmptyArgsInstance() {
        return new userTradeDetailList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.UserTradeDetailResVo o) {
            userTradeDetailList_result result = new userTradeDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userTradeDetailList_result result = new userTradeDetailList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userTradeDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeDetailResVo> resultHandler) throws TException {
        iface.userTradeDetailList(args.commonParamVo,resultHandler);
      }
    }

    public static class userTradeInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userTradeInfoList_args, com.froad.thrift.vo.report.UserTradeInfoResVo> {
      public userTradeInfoList() {
        super("userTradeInfoList");
      }

      public userTradeInfoList_args getEmptyArgsInstance() {
        return new userTradeInfoList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeInfoResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeInfoResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.UserTradeInfoResVo o) {
            userTradeInfoList_result result = new userTradeInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userTradeInfoList_result result = new userTradeInfoList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userTradeInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.UserTradeInfoResVo> resultHandler) throws TException {
        iface.userTradeInfoList(args.commonParamVo,resultHandler);
      }
    }

  }

  public static class userTrend_args implements org.apache.thrift.TBase<userTrend_args, userTrend_args._Fields>, java.io.Serializable, Cloneable, Comparable<userTrend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTrend_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTrend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTrend_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTrend_args.class, metaDataMap);
    }

    public userTrend_args() {
    }

    public userTrend_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTrend_args(userTrend_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userTrend_args deepCopy() {
      return new userTrend_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userTrend_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTrend_args)
        return this.equals((userTrend_args)that);
      return false;
    }

    public boolean equals(userTrend_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTrend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTrend_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTrend_argsStandardSchemeFactory implements SchemeFactory {
      public userTrend_argsStandardScheme getScheme() {
        return new userTrend_argsStandardScheme();
      }
    }

    private static class userTrend_argsStandardScheme extends StandardScheme<userTrend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTrend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTrend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTrend_argsTupleSchemeFactory implements SchemeFactory {
      public userTrend_argsTupleScheme getScheme() {
        return new userTrend_argsTupleScheme();
      }
    }

    private static class userTrend_argsTupleScheme extends TupleScheme<userTrend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userTrend_result implements org.apache.thrift.TBase<userTrend_result, userTrend_result._Fields>, java.io.Serializable, Cloneable, Comparable<userTrend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTrend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTrend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTrend_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.UserTrendResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.UserTrendResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTrend_result.class, metaDataMap);
    }

    public userTrend_result() {
    }

    public userTrend_result(
      com.froad.thrift.vo.report.UserTrendResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTrend_result(userTrend_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.UserTrendResVo(other.success);
      }
    }

    public userTrend_result deepCopy() {
      return new userTrend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.UserTrendResVo getSuccess() {
      return this.success;
    }

    public userTrend_result setSuccess(com.froad.thrift.vo.report.UserTrendResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.UserTrendResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTrend_result)
        return this.equals((userTrend_result)that);
      return false;
    }

    public boolean equals(userTrend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTrend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTrend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTrend_resultStandardSchemeFactory implements SchemeFactory {
      public userTrend_resultStandardScheme getScheme() {
        return new userTrend_resultStandardScheme();
      }
    }

    private static class userTrend_resultStandardScheme extends StandardScheme<userTrend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTrend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.UserTrendResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTrend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTrend_resultTupleSchemeFactory implements SchemeFactory {
      public userTrend_resultTupleScheme getScheme() {
        return new userTrend_resultTupleScheme();
      }
    }

    private static class userTrend_resultTupleScheme extends TupleScheme<userTrend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.UserTrendResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userTradeTypePercent_args implements org.apache.thrift.TBase<userTradeTypePercent_args, userTradeTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeTypePercent_args.class, metaDataMap);
    }

    public userTradeTypePercent_args() {
    }

    public userTradeTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeTypePercent_args(userTradeTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userTradeTypePercent_args deepCopy() {
      return new userTradeTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userTradeTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeTypePercent_args)
        return this.equals((userTradeTypePercent_args)that);
      return false;
    }

    public boolean equals(userTradeTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public userTradeTypePercent_argsStandardScheme getScheme() {
        return new userTradeTypePercent_argsStandardScheme();
      }
    }

    private static class userTradeTypePercent_argsStandardScheme extends StandardScheme<userTradeTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public userTradeTypePercent_argsTupleScheme getScheme() {
        return new userTradeTypePercent_argsTupleScheme();
      }
    }

    private static class userTradeTypePercent_argsTupleScheme extends TupleScheme<userTradeTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userTradeTypePercent_result implements org.apache.thrift.TBase<userTradeTypePercent_result, userTradeTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeTypePercent_result.class, metaDataMap);
    }

    public userTradeTypePercent_result() {
    }

    public userTradeTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeTypePercent_result(userTradeTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public userTradeTypePercent_result deepCopy() {
      return new userTradeTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public userTradeTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeTypePercent_result)
        return this.equals((userTradeTypePercent_result)that);
      return false;
    }

    public boolean equals(userTradeTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public userTradeTypePercent_resultStandardScheme getScheme() {
        return new userTradeTypePercent_resultStandardScheme();
      }
    }

    private static class userTradeTypePercent_resultStandardScheme extends StandardScheme<userTradeTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public userTradeTypePercent_resultTupleScheme getScheme() {
        return new userTradeTypePercent_resultTupleScheme();
      }
    }

    private static class userTradeTypePercent_resultTupleScheme extends TupleScheme<userTradeTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userConsumeTypePercent_args implements org.apache.thrift.TBase<userConsumeTypePercent_args, userConsumeTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<userConsumeTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userConsumeTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userConsumeTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userConsumeTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userConsumeTypePercent_args.class, metaDataMap);
    }

    public userConsumeTypePercent_args() {
    }

    public userConsumeTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userConsumeTypePercent_args(userConsumeTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userConsumeTypePercent_args deepCopy() {
      return new userConsumeTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userConsumeTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userConsumeTypePercent_args)
        return this.equals((userConsumeTypePercent_args)that);
      return false;
    }

    public boolean equals(userConsumeTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userConsumeTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userConsumeTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userConsumeTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public userConsumeTypePercent_argsStandardScheme getScheme() {
        return new userConsumeTypePercent_argsStandardScheme();
      }
    }

    private static class userConsumeTypePercent_argsStandardScheme extends StandardScheme<userConsumeTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userConsumeTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userConsumeTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userConsumeTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public userConsumeTypePercent_argsTupleScheme getScheme() {
        return new userConsumeTypePercent_argsTupleScheme();
      }
    }

    private static class userConsumeTypePercent_argsTupleScheme extends TupleScheme<userConsumeTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userConsumeTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userConsumeTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userConsumeTypePercent_result implements org.apache.thrift.TBase<userConsumeTypePercent_result, userConsumeTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<userConsumeTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userConsumeTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userConsumeTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userConsumeTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userConsumeTypePercent_result.class, metaDataMap);
    }

    public userConsumeTypePercent_result() {
    }

    public userConsumeTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userConsumeTypePercent_result(userConsumeTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public userConsumeTypePercent_result deepCopy() {
      return new userConsumeTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public userConsumeTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userConsumeTypePercent_result)
        return this.equals((userConsumeTypePercent_result)that);
      return false;
    }

    public boolean equals(userConsumeTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userConsumeTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userConsumeTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userConsumeTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public userConsumeTypePercent_resultStandardScheme getScheme() {
        return new userConsumeTypePercent_resultStandardScheme();
      }
    }

    private static class userConsumeTypePercent_resultStandardScheme extends StandardScheme<userConsumeTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userConsumeTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userConsumeTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userConsumeTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public userConsumeTypePercent_resultTupleScheme getScheme() {
        return new userConsumeTypePercent_resultTupleScheme();
      }
    }

    private static class userConsumeTypePercent_resultTupleScheme extends TupleScheme<userConsumeTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userConsumeTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userConsumeTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userSummaryList_args implements org.apache.thrift.TBase<userSummaryList_args, userSummaryList_args._Fields>, java.io.Serializable, Cloneable, Comparable<userSummaryList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userSummaryList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userSummaryList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userSummaryList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userSummaryList_args.class, metaDataMap);
    }

    public userSummaryList_args() {
    }

    public userSummaryList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userSummaryList_args(userSummaryList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userSummaryList_args deepCopy() {
      return new userSummaryList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userSummaryList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userSummaryList_args)
        return this.equals((userSummaryList_args)that);
      return false;
    }

    public boolean equals(userSummaryList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userSummaryList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userSummaryList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userSummaryList_argsStandardSchemeFactory implements SchemeFactory {
      public userSummaryList_argsStandardScheme getScheme() {
        return new userSummaryList_argsStandardScheme();
      }
    }

    private static class userSummaryList_argsStandardScheme extends StandardScheme<userSummaryList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userSummaryList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userSummaryList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userSummaryList_argsTupleSchemeFactory implements SchemeFactory {
      public userSummaryList_argsTupleScheme getScheme() {
        return new userSummaryList_argsTupleScheme();
      }
    }

    private static class userSummaryList_argsTupleScheme extends TupleScheme<userSummaryList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userSummaryList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userSummaryList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userSummaryList_result implements org.apache.thrift.TBase<userSummaryList_result, userSummaryList_result._Fields>, java.io.Serializable, Cloneable, Comparable<userSummaryList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userSummaryList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userSummaryList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userSummaryList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.UserSummaryResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.UserSummaryResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userSummaryList_result.class, metaDataMap);
    }

    public userSummaryList_result() {
    }

    public userSummaryList_result(
      com.froad.thrift.vo.report.UserSummaryResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userSummaryList_result(userSummaryList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.UserSummaryResVo(other.success);
      }
    }

    public userSummaryList_result deepCopy() {
      return new userSummaryList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.UserSummaryResVo getSuccess() {
      return this.success;
    }

    public userSummaryList_result setSuccess(com.froad.thrift.vo.report.UserSummaryResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.UserSummaryResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userSummaryList_result)
        return this.equals((userSummaryList_result)that);
      return false;
    }

    public boolean equals(userSummaryList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userSummaryList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userSummaryList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userSummaryList_resultStandardSchemeFactory implements SchemeFactory {
      public userSummaryList_resultStandardScheme getScheme() {
        return new userSummaryList_resultStandardScheme();
      }
    }

    private static class userSummaryList_resultStandardScheme extends StandardScheme<userSummaryList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userSummaryList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.UserSummaryResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userSummaryList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userSummaryList_resultTupleSchemeFactory implements SchemeFactory {
      public userSummaryList_resultTupleScheme getScheme() {
        return new userSummaryList_resultTupleScheme();
      }
    }

    private static class userSummaryList_resultTupleScheme extends TupleScheme<userSummaryList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userSummaryList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userSummaryList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.UserSummaryResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userSummaryListByPage_args implements org.apache.thrift.TBase<userSummaryListByPage_args, userSummaryListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<userSummaryListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userSummaryListByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userSummaryListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userSummaryListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      COMMON_PARAM_VO((short)2, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userSummaryListByPage_args.class, metaDataMap);
    }

    public userSummaryListByPage_args() {
    }

    public userSummaryListByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.pageVo = pageVo;
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userSummaryListByPage_args(userSummaryListByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userSummaryListByPage_args deepCopy() {
      return new userSummaryListByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public userSummaryListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userSummaryListByPage_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userSummaryListByPage_args)
        return this.equals((userSummaryListByPage_args)that);
      return false;
    }

    public boolean equals(userSummaryListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userSummaryListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userSummaryListByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userSummaryListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public userSummaryListByPage_argsStandardScheme getScheme() {
        return new userSummaryListByPage_argsStandardScheme();
      }
    }

    private static class userSummaryListByPage_argsStandardScheme extends StandardScheme<userSummaryListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userSummaryListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userSummaryListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userSummaryListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public userSummaryListByPage_argsTupleScheme getScheme() {
        return new userSummaryListByPage_argsTupleScheme();
      }
    }

    private static class userSummaryListByPage_argsTupleScheme extends TupleScheme<userSummaryListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userSummaryListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetCommonParamVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userSummaryListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userSummaryListByPage_result implements org.apache.thrift.TBase<userSummaryListByPage_result, userSummaryListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<userSummaryListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userSummaryListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userSummaryListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userSummaryListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.UserSummaryPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.UserSummaryPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userSummaryListByPage_result.class, metaDataMap);
    }

    public userSummaryListByPage_result() {
    }

    public userSummaryListByPage_result(
      com.froad.thrift.vo.report.UserSummaryPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userSummaryListByPage_result(userSummaryListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.UserSummaryPageVo(other.success);
      }
    }

    public userSummaryListByPage_result deepCopy() {
      return new userSummaryListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.UserSummaryPageVo getSuccess() {
      return this.success;
    }

    public userSummaryListByPage_result setSuccess(com.froad.thrift.vo.report.UserSummaryPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.UserSummaryPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userSummaryListByPage_result)
        return this.equals((userSummaryListByPage_result)that);
      return false;
    }

    public boolean equals(userSummaryListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userSummaryListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userSummaryListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userSummaryListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public userSummaryListByPage_resultStandardScheme getScheme() {
        return new userSummaryListByPage_resultStandardScheme();
      }
    }

    private static class userSummaryListByPage_resultStandardScheme extends StandardScheme<userSummaryListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userSummaryListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.UserSummaryPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userSummaryListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userSummaryListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public userSummaryListByPage_resultTupleScheme getScheme() {
        return new userSummaryListByPage_resultTupleScheme();
      }
    }

    private static class userSummaryListByPage_resultTupleScheme extends TupleScheme<userSummaryListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userSummaryListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userSummaryListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.UserSummaryPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userTradeDetailList_args implements org.apache.thrift.TBase<userTradeDetailList_args, userTradeDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeDetailList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeDetailList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeDetailList_args.class, metaDataMap);
    }

    public userTradeDetailList_args() {
    }

    public userTradeDetailList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeDetailList_args(userTradeDetailList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userTradeDetailList_args deepCopy() {
      return new userTradeDetailList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userTradeDetailList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeDetailList_args)
        return this.equals((userTradeDetailList_args)that);
      return false;
    }

    public boolean equals(userTradeDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeDetailList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public userTradeDetailList_argsStandardScheme getScheme() {
        return new userTradeDetailList_argsStandardScheme();
      }
    }

    private static class userTradeDetailList_argsStandardScheme extends StandardScheme<userTradeDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public userTradeDetailList_argsTupleScheme getScheme() {
        return new userTradeDetailList_argsTupleScheme();
      }
    }

    private static class userTradeDetailList_argsTupleScheme extends TupleScheme<userTradeDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userTradeDetailList_result implements org.apache.thrift.TBase<userTradeDetailList_result, userTradeDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeDetailList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.UserTradeDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.UserTradeDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeDetailList_result.class, metaDataMap);
    }

    public userTradeDetailList_result() {
    }

    public userTradeDetailList_result(
      com.froad.thrift.vo.report.UserTradeDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeDetailList_result(userTradeDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.UserTradeDetailResVo(other.success);
      }
    }

    public userTradeDetailList_result deepCopy() {
      return new userTradeDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.UserTradeDetailResVo getSuccess() {
      return this.success;
    }

    public userTradeDetailList_result setSuccess(com.froad.thrift.vo.report.UserTradeDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.UserTradeDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeDetailList_result)
        return this.equals((userTradeDetailList_result)that);
      return false;
    }

    public boolean equals(userTradeDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public userTradeDetailList_resultStandardScheme getScheme() {
        return new userTradeDetailList_resultStandardScheme();
      }
    }

    private static class userTradeDetailList_resultStandardScheme extends StandardScheme<userTradeDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.UserTradeDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public userTradeDetailList_resultTupleScheme getScheme() {
        return new userTradeDetailList_resultTupleScheme();
      }
    }

    private static class userTradeDetailList_resultTupleScheme extends TupleScheme<userTradeDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.UserTradeDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userTradeInfoList_args implements org.apache.thrift.TBase<userTradeInfoList_args, userTradeInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeInfoList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeInfoList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeInfoList_args.class, metaDataMap);
    }

    public userTradeInfoList_args() {
    }

    public userTradeInfoList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeInfoList_args(userTradeInfoList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public userTradeInfoList_args deepCopy() {
      return new userTradeInfoList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public userTradeInfoList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeInfoList_args)
        return this.equals((userTradeInfoList_args)that);
      return false;
    }

    public boolean equals(userTradeInfoList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeInfoList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public userTradeInfoList_argsStandardScheme getScheme() {
        return new userTradeInfoList_argsStandardScheme();
      }
    }

    private static class userTradeInfoList_argsStandardScheme extends StandardScheme<userTradeInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public userTradeInfoList_argsTupleScheme getScheme() {
        return new userTradeInfoList_argsTupleScheme();
      }
    }

    private static class userTradeInfoList_argsTupleScheme extends TupleScheme<userTradeInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class userTradeInfoList_result implements org.apache.thrift.TBase<userTradeInfoList_result, userTradeInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<userTradeInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userTradeInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userTradeInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userTradeInfoList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.UserTradeInfoResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.UserTradeInfoResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userTradeInfoList_result.class, metaDataMap);
    }

    public userTradeInfoList_result() {
    }

    public userTradeInfoList_result(
      com.froad.thrift.vo.report.UserTradeInfoResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userTradeInfoList_result(userTradeInfoList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.UserTradeInfoResVo(other.success);
      }
    }

    public userTradeInfoList_result deepCopy() {
      return new userTradeInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.UserTradeInfoResVo getSuccess() {
      return this.success;
    }

    public userTradeInfoList_result setSuccess(com.froad.thrift.vo.report.UserTradeInfoResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.UserTradeInfoResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userTradeInfoList_result)
        return this.equals((userTradeInfoList_result)that);
      return false;
    }

    public boolean equals(userTradeInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userTradeInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userTradeInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userTradeInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public userTradeInfoList_resultStandardScheme getScheme() {
        return new userTradeInfoList_resultStandardScheme();
      }
    }

    private static class userTradeInfoList_resultStandardScheme extends StandardScheme<userTradeInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userTradeInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.UserTradeInfoResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userTradeInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userTradeInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public userTradeInfoList_resultTupleScheme getScheme() {
        return new userTradeInfoList_resultTupleScheme();
      }
    }

    private static class userTradeInfoList_resultTupleScheme extends TupleScheme<userTradeInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userTradeInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userTradeInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.UserTradeInfoResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
