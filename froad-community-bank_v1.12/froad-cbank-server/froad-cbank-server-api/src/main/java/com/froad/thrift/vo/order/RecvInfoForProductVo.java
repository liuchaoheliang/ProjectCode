/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 查询配送商品所有相关订单的发货人信息-实体
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RecvInfoForProductVo implements org.apache.thrift.TBase<RecvInfoForProductVo, RecvInfoForProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<RecvInfoForProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecvInfoForProductVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField F_ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fOrgName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField S_ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sOrgName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BUY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("buyCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REFUND_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("realCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RECIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("reciver", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecvInfoForProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecvInfoForProductVoTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 子订单ID
   */
  public String subOrderId; // required
  /**
   * 所属一级机构
   */
  public String fOrgName; // required
  /**
   * 所属二级机构
   */
  public String sOrgName; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 下单时间
   */
  public String createTime; // required
  /**
   * 购买数量
   */
  public int buyCount; // required
  /**
   * 退款数量
   */
  public int refundCount; // required
  /**
   * 实际订购数量
   */
  public int realCount; // required
  /**
   * 收货人
   */
  public String reciver; // required
  /**
   * 联系电话
   */
  public String phone; // required
  /**
   * 收货地址
   */
  public String address; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 子订单ID
     */
    SUB_ORDER_ID((short)2, "subOrderId"),
    /**
     * 所属一级机构
     */
    F_ORG_NAME((short)3, "fOrgName"),
    /**
     * 所属二级机构
     */
    S_ORG_NAME((short)4, "sOrgName"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)5, "productName"),
    /**
     * 下单时间
     */
    CREATE_TIME((short)6, "createTime"),
    /**
     * 购买数量
     */
    BUY_COUNT((short)7, "buyCount"),
    /**
     * 退款数量
     */
    REFUND_COUNT((short)8, "refundCount"),
    /**
     * 实际订购数量
     */
    REAL_COUNT((short)9, "realCount"),
    /**
     * 收货人
     */
    RECIVER((short)10, "reciver"),
    /**
     * 联系电话
     */
    PHONE((short)11, "phone"),
    /**
     * 收货地址
     */
    ADDRESS((short)12, "address");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 3: // F_ORG_NAME
          return F_ORG_NAME;
        case 4: // S_ORG_NAME
          return S_ORG_NAME;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // BUY_COUNT
          return BUY_COUNT;
        case 8: // REFUND_COUNT
          return REFUND_COUNT;
        case 9: // REAL_COUNT
          return REAL_COUNT;
        case 10: // RECIVER
          return RECIVER;
        case 11: // PHONE
          return PHONE;
        case 12: // ADDRESS
          return ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUYCOUNT_ISSET_ID = 0;
  private static final int __REFUNDCOUNT_ISSET_ID = 1;
  private static final int __REALCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F_ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("fOrgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S_ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("sOrgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("buyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_COUNT, new org.apache.thrift.meta_data.FieldMetaData("refundCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("realCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECIVER, new org.apache.thrift.meta_data.FieldMetaData("reciver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecvInfoForProductVo.class, metaDataMap);
  }

  public RecvInfoForProductVo() {
  }

  public RecvInfoForProductVo(
    String orderId,
    String subOrderId,
    String fOrgName,
    String sOrgName,
    String productName,
    String createTime,
    int buyCount,
    int refundCount,
    int realCount,
    String reciver,
    String phone,
    String address)
  {
    this();
    this.orderId = orderId;
    this.subOrderId = subOrderId;
    this.fOrgName = fOrgName;
    this.sOrgName = sOrgName;
    this.productName = productName;
    this.createTime = createTime;
    this.buyCount = buyCount;
    setBuyCountIsSet(true);
    this.refundCount = refundCount;
    setRefundCountIsSet(true);
    this.realCount = realCount;
    setRealCountIsSet(true);
    this.reciver = reciver;
    this.phone = phone;
    this.address = address;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecvInfoForProductVo(RecvInfoForProductVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetFOrgName()) {
      this.fOrgName = other.fOrgName;
    }
    if (other.isSetSOrgName()) {
      this.sOrgName = other.sOrgName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.buyCount = other.buyCount;
    this.refundCount = other.refundCount;
    this.realCount = other.realCount;
    if (other.isSetReciver()) {
      this.reciver = other.reciver;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
  }

  public RecvInfoForProductVo deepCopy() {
    return new RecvInfoForProductVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.subOrderId = null;
    this.fOrgName = null;
    this.sOrgName = null;
    this.productName = null;
    this.createTime = null;
    setBuyCountIsSet(false);
    this.buyCount = 0;
    setRefundCountIsSet(false);
    this.refundCount = 0;
    setRealCountIsSet(false);
    this.realCount = 0;
    this.reciver = null;
    this.phone = null;
    this.address = null;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public RecvInfoForProductVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 子订单ID
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单ID
   */
  public RecvInfoForProductVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 所属一级机构
   */
  public String getFOrgName() {
    return this.fOrgName;
  }

  /**
   * 所属一级机构
   */
  public RecvInfoForProductVo setFOrgName(String fOrgName) {
    this.fOrgName = fOrgName;
    return this;
  }

  public void unsetFOrgName() {
    this.fOrgName = null;
  }

  /** Returns true if field fOrgName is set (has been assigned a value) and false otherwise */
  public boolean isSetFOrgName() {
    return this.fOrgName != null;
  }

  public void setFOrgNameIsSet(boolean value) {
    if (!value) {
      this.fOrgName = null;
    }
  }

  /**
   * 所属二级机构
   */
  public String getSOrgName() {
    return this.sOrgName;
  }

  /**
   * 所属二级机构
   */
  public RecvInfoForProductVo setSOrgName(String sOrgName) {
    this.sOrgName = sOrgName;
    return this;
  }

  public void unsetSOrgName() {
    this.sOrgName = null;
  }

  /** Returns true if field sOrgName is set (has been assigned a value) and false otherwise */
  public boolean isSetSOrgName() {
    return this.sOrgName != null;
  }

  public void setSOrgNameIsSet(boolean value) {
    if (!value) {
      this.sOrgName = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public RecvInfoForProductVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 下单时间
   */
  public String getCreateTime() {
    return this.createTime;
  }

  /**
   * 下单时间
   */
  public RecvInfoForProductVo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  /**
   * 购买数量
   */
  public int getBuyCount() {
    return this.buyCount;
  }

  /**
   * 购买数量
   */
  public RecvInfoForProductVo setBuyCount(int buyCount) {
    this.buyCount = buyCount;
    setBuyCountIsSet(true);
    return this;
  }

  public void unsetBuyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  /** Returns true if field buyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  public void setBuyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYCOUNT_ISSET_ID, value);
  }

  /**
   * 退款数量
   */
  public int getRefundCount() {
    return this.refundCount;
  }

  /**
   * 退款数量
   */
  public RecvInfoForProductVo setRefundCount(int refundCount) {
    this.refundCount = refundCount;
    setRefundCountIsSet(true);
    return this;
  }

  public void unsetRefundCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDCOUNT_ISSET_ID);
  }

  /** Returns true if field refundCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDCOUNT_ISSET_ID);
  }

  public void setRefundCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDCOUNT_ISSET_ID, value);
  }

  /**
   * 实际订购数量
   */
  public int getRealCount() {
    return this.realCount;
  }

  /**
   * 实际订购数量
   */
  public RecvInfoForProductVo setRealCount(int realCount) {
    this.realCount = realCount;
    setRealCountIsSet(true);
    return this;
  }

  public void unsetRealCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALCOUNT_ISSET_ID);
  }

  /** Returns true if field realCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRealCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REALCOUNT_ISSET_ID);
  }

  public void setRealCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALCOUNT_ISSET_ID, value);
  }

  /**
   * 收货人
   */
  public String getReciver() {
    return this.reciver;
  }

  /**
   * 收货人
   */
  public RecvInfoForProductVo setReciver(String reciver) {
    this.reciver = reciver;
    return this;
  }

  public void unsetReciver() {
    this.reciver = null;
  }

  /** Returns true if field reciver is set (has been assigned a value) and false otherwise */
  public boolean isSetReciver() {
    return this.reciver != null;
  }

  public void setReciverIsSet(boolean value) {
    if (!value) {
      this.reciver = null;
    }
  }

  /**
   * 联系电话
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 联系电话
   */
  public RecvInfoForProductVo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 收货地址
   */
  public String getAddress() {
    return this.address;
  }

  /**
   * 收货地址
   */
  public RecvInfoForProductVo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case F_ORG_NAME:
      if (value == null) {
        unsetFOrgName();
      } else {
        setFOrgName((String)value);
      }
      break;

    case S_ORG_NAME:
      if (value == null) {
        unsetSOrgName();
      } else {
        setSOrgName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case BUY_COUNT:
      if (value == null) {
        unsetBuyCount();
      } else {
        setBuyCount((Integer)value);
      }
      break;

    case REFUND_COUNT:
      if (value == null) {
        unsetRefundCount();
      } else {
        setRefundCount((Integer)value);
      }
      break;

    case REAL_COUNT:
      if (value == null) {
        unsetRealCount();
      } else {
        setRealCount((Integer)value);
      }
      break;

    case RECIVER:
      if (value == null) {
        unsetReciver();
      } else {
        setReciver((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case F_ORG_NAME:
      return getFOrgName();

    case S_ORG_NAME:
      return getSOrgName();

    case PRODUCT_NAME:
      return getProductName();

    case CREATE_TIME:
      return getCreateTime();

    case BUY_COUNT:
      return Integer.valueOf(getBuyCount());

    case REFUND_COUNT:
      return Integer.valueOf(getRefundCount());

    case REAL_COUNT:
      return Integer.valueOf(getRealCount());

    case RECIVER:
      return getReciver();

    case PHONE:
      return getPhone();

    case ADDRESS:
      return getAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case F_ORG_NAME:
      return isSetFOrgName();
    case S_ORG_NAME:
      return isSetSOrgName();
    case PRODUCT_NAME:
      return isSetProductName();
    case CREATE_TIME:
      return isSetCreateTime();
    case BUY_COUNT:
      return isSetBuyCount();
    case REFUND_COUNT:
      return isSetRefundCount();
    case REAL_COUNT:
      return isSetRealCount();
    case RECIVER:
      return isSetReciver();
    case PHONE:
      return isSetPhone();
    case ADDRESS:
      return isSetAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecvInfoForProductVo)
      return this.equals((RecvInfoForProductVo)that);
    return false;
  }

  public boolean equals(RecvInfoForProductVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_fOrgName = true && this.isSetFOrgName();
    boolean that_present_fOrgName = true && that.isSetFOrgName();
    if (this_present_fOrgName || that_present_fOrgName) {
      if (!(this_present_fOrgName && that_present_fOrgName))
        return false;
      if (!this.fOrgName.equals(that.fOrgName))
        return false;
    }

    boolean this_present_sOrgName = true && this.isSetSOrgName();
    boolean that_present_sOrgName = true && that.isSetSOrgName();
    if (this_present_sOrgName || that_present_sOrgName) {
      if (!(this_present_sOrgName && that_present_sOrgName))
        return false;
      if (!this.sOrgName.equals(that.sOrgName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_buyCount = true;
    boolean that_present_buyCount = true;
    if (this_present_buyCount || that_present_buyCount) {
      if (!(this_present_buyCount && that_present_buyCount))
        return false;
      if (this.buyCount != that.buyCount)
        return false;
    }

    boolean this_present_refundCount = true;
    boolean that_present_refundCount = true;
    if (this_present_refundCount || that_present_refundCount) {
      if (!(this_present_refundCount && that_present_refundCount))
        return false;
      if (this.refundCount != that.refundCount)
        return false;
    }

    boolean this_present_realCount = true;
    boolean that_present_realCount = true;
    if (this_present_realCount || that_present_realCount) {
      if (!(this_present_realCount && that_present_realCount))
        return false;
      if (this.realCount != that.realCount)
        return false;
    }

    boolean this_present_reciver = true && this.isSetReciver();
    boolean that_present_reciver = true && that.isSetReciver();
    if (this_present_reciver || that_present_reciver) {
      if (!(this_present_reciver && that_present_reciver))
        return false;
      if (!this.reciver.equals(that.reciver))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_fOrgName = true && (isSetFOrgName());
    list.add(present_fOrgName);
    if (present_fOrgName)
      list.add(fOrgName);

    boolean present_sOrgName = true && (isSetSOrgName());
    list.add(present_sOrgName);
    if (present_sOrgName)
      list.add(sOrgName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_buyCount = true;
    list.add(present_buyCount);
    if (present_buyCount)
      list.add(buyCount);

    boolean present_refundCount = true;
    list.add(present_refundCount);
    if (present_refundCount)
      list.add(refundCount);

    boolean present_realCount = true;
    list.add(present_realCount);
    if (present_realCount)
      list.add(realCount);

    boolean present_reciver = true && (isSetReciver());
    list.add(present_reciver);
    if (present_reciver)
      list.add(reciver);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecvInfoForProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFOrgName()).compareTo(other.isSetFOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fOrgName, other.fOrgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSOrgName()).compareTo(other.isSetSOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sOrgName, other.sOrgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyCount()).compareTo(other.isSetBuyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyCount, other.buyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundCount()).compareTo(other.isSetRefundCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundCount, other.refundCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealCount()).compareTo(other.isSetRealCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realCount, other.realCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReciver()).compareTo(other.isSetReciver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReciver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reciver, other.reciver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecvInfoForProductVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fOrgName:");
    if (this.fOrgName == null) {
      sb.append("null");
    } else {
      sb.append(this.fOrgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sOrgName:");
    if (this.sOrgName == null) {
      sb.append("null");
    } else {
      sb.append(this.sOrgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyCount:");
    sb.append(this.buyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundCount:");
    sb.append(this.refundCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realCount:");
    sb.append(this.realCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reciver:");
    if (this.reciver == null) {
      sb.append("null");
    } else {
      sb.append(this.reciver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecvInfoForProductVoStandardSchemeFactory implements SchemeFactory {
    public RecvInfoForProductVoStandardScheme getScheme() {
      return new RecvInfoForProductVoStandardScheme();
    }
  }

  private static class RecvInfoForProductVoStandardScheme extends StandardScheme<RecvInfoForProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecvInfoForProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // F_ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fOrgName = iprot.readString();
              struct.setFOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S_ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sOrgName = iprot.readString();
              struct.setSOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyCount = iprot.readI32();
              struct.setBuyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REFUND_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundCount = iprot.readI32();
              struct.setRefundCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.realCount = iprot.readI32();
              struct.setRealCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reciver = iprot.readString();
              struct.setReciverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecvInfoForProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.fOrgName != null) {
        oprot.writeFieldBegin(F_ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.fOrgName);
        oprot.writeFieldEnd();
      }
      if (struct.sOrgName != null) {
        oprot.writeFieldBegin(S_ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.sOrgName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.buyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_COUNT_FIELD_DESC);
      oprot.writeI32(struct.refundCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.realCount);
      oprot.writeFieldEnd();
      if (struct.reciver != null) {
        oprot.writeFieldBegin(RECIVER_FIELD_DESC);
        oprot.writeString(struct.reciver);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecvInfoForProductVoTupleSchemeFactory implements SchemeFactory {
    public RecvInfoForProductVoTupleScheme getScheme() {
      return new RecvInfoForProductVoTupleScheme();
    }
  }

  private static class RecvInfoForProductVoTupleScheme extends TupleScheme<RecvInfoForProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecvInfoForProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetFOrgName()) {
        optionals.set(2);
      }
      if (struct.isSetSOrgName()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetBuyCount()) {
        optionals.set(6);
      }
      if (struct.isSetRefundCount()) {
        optionals.set(7);
      }
      if (struct.isSetRealCount()) {
        optionals.set(8);
      }
      if (struct.isSetReciver()) {
        optionals.set(9);
      }
      if (struct.isSetPhone()) {
        optionals.set(10);
      }
      if (struct.isSetAddress()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetFOrgName()) {
        oprot.writeString(struct.fOrgName);
      }
      if (struct.isSetSOrgName()) {
        oprot.writeString(struct.sOrgName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetBuyCount()) {
        oprot.writeI32(struct.buyCount);
      }
      if (struct.isSetRefundCount()) {
        oprot.writeI32(struct.refundCount);
      }
      if (struct.isSetRealCount()) {
        oprot.writeI32(struct.realCount);
      }
      if (struct.isSetReciver()) {
        oprot.writeString(struct.reciver);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecvInfoForProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fOrgName = iprot.readString();
        struct.setFOrgNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sOrgName = iprot.readString();
        struct.setSOrgNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.buyCount = iprot.readI32();
        struct.setBuyCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refundCount = iprot.readI32();
        struct.setRefundCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.realCount = iprot.readI32();
        struct.setRealCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reciver = iprot.readString();
        struct.setReciverIsSet(true);
      }
      if (incoming.get(10)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
    }
  }

}

