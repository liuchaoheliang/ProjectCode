/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 营销活动订单详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveOrderDetailVo implements org.apache.thrift.TBase<ActiveOrderDetailVo, ActiveOrderDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<ActiveOrderDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveOrderDetailVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_MARKET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMarketType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NORMAL_PRICE_MARKET_FIELD_DESC = new org.apache.thrift.protocol.TField("normalPriceMarket", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField NORMAL_PRICE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("normalPriceCount", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_MARKET_FIELD_DESC = new org.apache.thrift.protocol.TField("vipPriceMarket", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("vipPriceCount", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveOrderDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveOrderDetailVoTupleSchemeFactory());
  }

  /**
   * 主键 *
   */
  public long id; // required
  /**
   * 客户端ID *
   */
  public String clientId; // required
  /**
   * 创建时间*
   */
  public long createTime; // required
  /**
   * 修改时间 *
   */
  public long updateTime; // required
  /**
   * 订单ID*
   */
  public String orderId; // required
  /**
   * 订单优惠类型 0-减 1-送  *
   */
  public String orderMarketType; // required
  /**
   * 活动ID *
   */
  public String activeId; // required
  /**
   * 营销活动类型*
   */
  public String type; // required
  /**
   * 子订单Id*
   */
  public String subOrderId; // required
  /**
   * 商品Id *
   */
  public String productId; // required
  /**
   * 普通价格优惠单价 *
   */
  public short normalPriceMarket; // required
  /**
   * 普通价格优惠数量 *
   */
  public short normalPriceCount; // required
  /**
   * vip价格优惠单价 *
   */
  public short vipPriceMarket; // required
  /**
   * vip价格优惠数量 *
   */
  public short vipPriceCount; // required
  /**
   * 送现金券时对应的券id，其它送优惠(商品,积分)直接根据active_id关联查询  *
   */
  public String ticketId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键 *
     */
    ID((short)1, "id"),
    /**
     * 客户端ID *
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 创建时间*
     */
    CREATE_TIME((short)3, "createTime"),
    /**
     * 修改时间 *
     */
    UPDATE_TIME((short)4, "updateTime"),
    /**
     * 订单ID*
     */
    ORDER_ID((short)5, "orderId"),
    /**
     * 订单优惠类型 0-减 1-送  *
     */
    ORDER_MARKET_TYPE((short)6, "orderMarketType"),
    /**
     * 活动ID *
     */
    ACTIVE_ID((short)7, "activeId"),
    /**
     * 营销活动类型*
     */
    TYPE((short)8, "type"),
    /**
     * 子订单Id*
     */
    SUB_ORDER_ID((short)9, "subOrderId"),
    /**
     * 商品Id *
     */
    PRODUCT_ID((short)10, "productId"),
    /**
     * 普通价格优惠单价 *
     */
    NORMAL_PRICE_MARKET((short)11, "normalPriceMarket"),
    /**
     * 普通价格优惠数量 *
     */
    NORMAL_PRICE_COUNT((short)12, "normalPriceCount"),
    /**
     * vip价格优惠单价 *
     */
    VIP_PRICE_MARKET((short)13, "vipPriceMarket"),
    /**
     * vip价格优惠数量 *
     */
    VIP_PRICE_COUNT((short)14, "vipPriceCount"),
    /**
     * 送现金券时对应的券id，其它送优惠(商品,积分)直接根据active_id关联查询  *
     */
    TICKET_ID((short)15, "ticketId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // UPDATE_TIME
          return UPDATE_TIME;
        case 5: // ORDER_ID
          return ORDER_ID;
        case 6: // ORDER_MARKET_TYPE
          return ORDER_MARKET_TYPE;
        case 7: // ACTIVE_ID
          return ACTIVE_ID;
        case 8: // TYPE
          return TYPE;
        case 9: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 10: // PRODUCT_ID
          return PRODUCT_ID;
        case 11: // NORMAL_PRICE_MARKET
          return NORMAL_PRICE_MARKET;
        case 12: // NORMAL_PRICE_COUNT
          return NORMAL_PRICE_COUNT;
        case 13: // VIP_PRICE_MARKET
          return VIP_PRICE_MARKET;
        case 14: // VIP_PRICE_COUNT
          return VIP_PRICE_COUNT;
        case 15: // TICKET_ID
          return TICKET_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __NORMALPRICEMARKET_ISSET_ID = 3;
  private static final int __NORMALPRICECOUNT_ISSET_ID = 4;
  private static final int __VIPPRICEMARKET_ISSET_ID = 5;
  private static final int __VIPPRICECOUNT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_MARKET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderMarketType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NORMAL_PRICE_MARKET, new org.apache.thrift.meta_data.FieldMetaData("normalPriceMarket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NORMAL_PRICE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("normalPriceCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VIP_PRICE_MARKET, new org.apache.thrift.meta_data.FieldMetaData("vipPriceMarket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VIP_PRICE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("vipPriceCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveOrderDetailVo.class, metaDataMap);
  }

  public ActiveOrderDetailVo() {
  }

  public ActiveOrderDetailVo(
    long id,
    String clientId,
    long createTime,
    long updateTime,
    String orderId,
    String orderMarketType,
    String activeId,
    String type,
    String subOrderId,
    String productId,
    short normalPriceMarket,
    short normalPriceCount,
    short vipPriceMarket,
    short vipPriceCount,
    String ticketId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.orderId = orderId;
    this.orderMarketType = orderMarketType;
    this.activeId = activeId;
    this.type = type;
    this.subOrderId = subOrderId;
    this.productId = productId;
    this.normalPriceMarket = normalPriceMarket;
    setNormalPriceMarketIsSet(true);
    this.normalPriceCount = normalPriceCount;
    setNormalPriceCountIsSet(true);
    this.vipPriceMarket = vipPriceMarket;
    setVipPriceMarketIsSet(true);
    this.vipPriceCount = vipPriceCount;
    setVipPriceCountIsSet(true);
    this.ticketId = ticketId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveOrderDetailVo(ActiveOrderDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetOrderMarketType()) {
      this.orderMarketType = other.orderMarketType;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.normalPriceMarket = other.normalPriceMarket;
    this.normalPriceCount = other.normalPriceCount;
    this.vipPriceMarket = other.vipPriceMarket;
    this.vipPriceCount = other.vipPriceCount;
    if (other.isSetTicketId()) {
      this.ticketId = other.ticketId;
    }
  }

  public ActiveOrderDetailVo deepCopy() {
    return new ActiveOrderDetailVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.orderId = null;
    this.orderMarketType = null;
    this.activeId = null;
    this.type = null;
    this.subOrderId = null;
    this.productId = null;
    setNormalPriceMarketIsSet(false);
    this.normalPriceMarket = 0;
    setNormalPriceCountIsSet(false);
    this.normalPriceCount = 0;
    setVipPriceMarketIsSet(false);
    this.vipPriceMarket = 0;
    setVipPriceCountIsSet(false);
    this.vipPriceCount = 0;
    this.ticketId = null;
  }

  /**
   * 主键 *
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键 *
   */
  public ActiveOrderDetailVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID *
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID *
   */
  public ActiveOrderDetailVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 创建时间*
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间*
   */
  public ActiveOrderDetailVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 修改时间 *
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 修改时间 *
   */
  public ActiveOrderDetailVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 订单ID*
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID*
   */
  public ActiveOrderDetailVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 订单优惠类型 0-减 1-送  *
   */
  public String getOrderMarketType() {
    return this.orderMarketType;
  }

  /**
   * 订单优惠类型 0-减 1-送  *
   */
  public ActiveOrderDetailVo setOrderMarketType(String orderMarketType) {
    this.orderMarketType = orderMarketType;
    return this;
  }

  public void unsetOrderMarketType() {
    this.orderMarketType = null;
  }

  /** Returns true if field orderMarketType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMarketType() {
    return this.orderMarketType != null;
  }

  public void setOrderMarketTypeIsSet(boolean value) {
    if (!value) {
      this.orderMarketType = null;
    }
  }

  /**
   * 活动ID *
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动ID *
   */
  public ActiveOrderDetailVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 营销活动类型*
   */
  public String getType() {
    return this.type;
  }

  /**
   * 营销活动类型*
   */
  public ActiveOrderDetailVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 子订单Id*
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单Id*
   */
  public ActiveOrderDetailVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 商品Id *
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品Id *
   */
  public ActiveOrderDetailVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 普通价格优惠单价 *
   */
  public short getNormalPriceMarket() {
    return this.normalPriceMarket;
  }

  /**
   * 普通价格优惠单价 *
   */
  public ActiveOrderDetailVo setNormalPriceMarket(short normalPriceMarket) {
    this.normalPriceMarket = normalPriceMarket;
    setNormalPriceMarketIsSet(true);
    return this;
  }

  public void unsetNormalPriceMarket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORMALPRICEMARKET_ISSET_ID);
  }

  /** Returns true if field normalPriceMarket is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalPriceMarket() {
    return EncodingUtils.testBit(__isset_bitfield, __NORMALPRICEMARKET_ISSET_ID);
  }

  public void setNormalPriceMarketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORMALPRICEMARKET_ISSET_ID, value);
  }

  /**
   * 普通价格优惠数量 *
   */
  public short getNormalPriceCount() {
    return this.normalPriceCount;
  }

  /**
   * 普通价格优惠数量 *
   */
  public ActiveOrderDetailVo setNormalPriceCount(short normalPriceCount) {
    this.normalPriceCount = normalPriceCount;
    setNormalPriceCountIsSet(true);
    return this;
  }

  public void unsetNormalPriceCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORMALPRICECOUNT_ISSET_ID);
  }

  /** Returns true if field normalPriceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalPriceCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NORMALPRICECOUNT_ISSET_ID);
  }

  public void setNormalPriceCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORMALPRICECOUNT_ISSET_ID, value);
  }

  /**
   * vip价格优惠单价 *
   */
  public short getVipPriceMarket() {
    return this.vipPriceMarket;
  }

  /**
   * vip价格优惠单价 *
   */
  public ActiveOrderDetailVo setVipPriceMarket(short vipPriceMarket) {
    this.vipPriceMarket = vipPriceMarket;
    setVipPriceMarketIsSet(true);
    return this;
  }

  public void unsetVipPriceMarket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICEMARKET_ISSET_ID);
  }

  /** Returns true if field vipPriceMarket is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPriceMarket() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICEMARKET_ISSET_ID);
  }

  public void setVipPriceMarketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICEMARKET_ISSET_ID, value);
  }

  /**
   * vip价格优惠数量 *
   */
  public short getVipPriceCount() {
    return this.vipPriceCount;
  }

  /**
   * vip价格优惠数量 *
   */
  public ActiveOrderDetailVo setVipPriceCount(short vipPriceCount) {
    this.vipPriceCount = vipPriceCount;
    setVipPriceCountIsSet(true);
    return this;
  }

  public void unsetVipPriceCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICECOUNT_ISSET_ID);
  }

  /** Returns true if field vipPriceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPriceCount() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICECOUNT_ISSET_ID);
  }

  public void setVipPriceCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICECOUNT_ISSET_ID, value);
  }

  /**
   * 送现金券时对应的券id，其它送优惠(商品,积分)直接根据active_id关联查询  *
   */
  public String getTicketId() {
    return this.ticketId;
  }

  /**
   * 送现金券时对应的券id，其它送优惠(商品,积分)直接根据active_id关联查询  *
   */
  public ActiveOrderDetailVo setTicketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  public void unsetTicketId() {
    this.ticketId = null;
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return this.ticketId != null;
  }

  public void setTicketIdIsSet(boolean value) {
    if (!value) {
      this.ticketId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case ORDER_MARKET_TYPE:
      if (value == null) {
        unsetOrderMarketType();
      } else {
        setOrderMarketType((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case NORMAL_PRICE_MARKET:
      if (value == null) {
        unsetNormalPriceMarket();
      } else {
        setNormalPriceMarket((Short)value);
      }
      break;

    case NORMAL_PRICE_COUNT:
      if (value == null) {
        unsetNormalPriceCount();
      } else {
        setNormalPriceCount((Short)value);
      }
      break;

    case VIP_PRICE_MARKET:
      if (value == null) {
        unsetVipPriceMarket();
      } else {
        setVipPriceMarket((Short)value);
      }
      break;

    case VIP_PRICE_COUNT:
      if (value == null) {
        unsetVipPriceCount();
      } else {
        setVipPriceCount((Short)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ORDER_ID:
      return getOrderId();

    case ORDER_MARKET_TYPE:
      return getOrderMarketType();

    case ACTIVE_ID:
      return getActiveId();

    case TYPE:
      return getType();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case PRODUCT_ID:
      return getProductId();

    case NORMAL_PRICE_MARKET:
      return Short.valueOf(getNormalPriceMarket());

    case NORMAL_PRICE_COUNT:
      return Short.valueOf(getNormalPriceCount());

    case VIP_PRICE_MARKET:
      return Short.valueOf(getVipPriceMarket());

    case VIP_PRICE_COUNT:
      return Short.valueOf(getVipPriceCount());

    case TICKET_ID:
      return getTicketId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_MARKET_TYPE:
      return isSetOrderMarketType();
    case ACTIVE_ID:
      return isSetActiveId();
    case TYPE:
      return isSetType();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case PRODUCT_ID:
      return isSetProductId();
    case NORMAL_PRICE_MARKET:
      return isSetNormalPriceMarket();
    case NORMAL_PRICE_COUNT:
      return isSetNormalPriceCount();
    case VIP_PRICE_MARKET:
      return isSetVipPriceMarket();
    case VIP_PRICE_COUNT:
      return isSetVipPriceCount();
    case TICKET_ID:
      return isSetTicketId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveOrderDetailVo)
      return this.equals((ActiveOrderDetailVo)that);
    return false;
  }

  public boolean equals(ActiveOrderDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_orderMarketType = true && this.isSetOrderMarketType();
    boolean that_present_orderMarketType = true && that.isSetOrderMarketType();
    if (this_present_orderMarketType || that_present_orderMarketType) {
      if (!(this_present_orderMarketType && that_present_orderMarketType))
        return false;
      if (!this.orderMarketType.equals(that.orderMarketType))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_normalPriceMarket = true;
    boolean that_present_normalPriceMarket = true;
    if (this_present_normalPriceMarket || that_present_normalPriceMarket) {
      if (!(this_present_normalPriceMarket && that_present_normalPriceMarket))
        return false;
      if (this.normalPriceMarket != that.normalPriceMarket)
        return false;
    }

    boolean this_present_normalPriceCount = true;
    boolean that_present_normalPriceCount = true;
    if (this_present_normalPriceCount || that_present_normalPriceCount) {
      if (!(this_present_normalPriceCount && that_present_normalPriceCount))
        return false;
      if (this.normalPriceCount != that.normalPriceCount)
        return false;
    }

    boolean this_present_vipPriceMarket = true;
    boolean that_present_vipPriceMarket = true;
    if (this_present_vipPriceMarket || that_present_vipPriceMarket) {
      if (!(this_present_vipPriceMarket && that_present_vipPriceMarket))
        return false;
      if (this.vipPriceMarket != that.vipPriceMarket)
        return false;
    }

    boolean this_present_vipPriceCount = true;
    boolean that_present_vipPriceCount = true;
    if (this_present_vipPriceCount || that_present_vipPriceCount) {
      if (!(this_present_vipPriceCount && that_present_vipPriceCount))
        return false;
      if (this.vipPriceCount != that.vipPriceCount)
        return false;
    }

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (!this.ticketId.equals(that.ticketId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_orderMarketType = true && (isSetOrderMarketType());
    list.add(present_orderMarketType);
    if (present_orderMarketType)
      list.add(orderMarketType);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_normalPriceMarket = true;
    list.add(present_normalPriceMarket);
    if (present_normalPriceMarket)
      list.add(normalPriceMarket);

    boolean present_normalPriceCount = true;
    list.add(present_normalPriceCount);
    if (present_normalPriceCount)
      list.add(normalPriceCount);

    boolean present_vipPriceMarket = true;
    list.add(present_vipPriceMarket);
    if (present_vipPriceMarket)
      list.add(vipPriceMarket);

    boolean present_vipPriceCount = true;
    list.add(present_vipPriceCount);
    if (present_vipPriceCount)
      list.add(vipPriceCount);

    boolean present_ticketId = true && (isSetTicketId());
    list.add(present_ticketId);
    if (present_ticketId)
      list.add(ticketId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ActiveOrderDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMarketType()).compareTo(other.isSetOrderMarketType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMarketType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMarketType, other.orderMarketType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormalPriceMarket()).compareTo(other.isSetNormalPriceMarket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalPriceMarket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normalPriceMarket, other.normalPriceMarket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormalPriceCount()).compareTo(other.isSetNormalPriceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalPriceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normalPriceCount, other.normalPriceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPriceMarket()).compareTo(other.isSetVipPriceMarket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPriceMarket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPriceMarket, other.vipPriceMarket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPriceCount()).compareTo(other.isSetVipPriceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPriceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPriceCount, other.vipPriceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveOrderDetailVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderMarketType:");
    if (this.orderMarketType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderMarketType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("normalPriceMarket:");
    sb.append(this.normalPriceMarket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("normalPriceCount:");
    sb.append(this.normalPriceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipPriceMarket:");
    sb.append(this.vipPriceMarket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipPriceCount:");
    sb.append(this.vipPriceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketId:");
    if (this.ticketId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveOrderDetailVoStandardSchemeFactory implements SchemeFactory {
    public ActiveOrderDetailVoStandardScheme getScheme() {
      return new ActiveOrderDetailVoStandardScheme();
    }
  }

  private static class ActiveOrderDetailVoStandardScheme extends StandardScheme<ActiveOrderDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveOrderDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_MARKET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderMarketType = iprot.readString();
              struct.setOrderMarketTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NORMAL_PRICE_MARKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.normalPriceMarket = iprot.readI16();
              struct.setNormalPriceMarketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NORMAL_PRICE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.normalPriceCount = iprot.readI16();
              struct.setNormalPriceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIP_PRICE_MARKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.vipPriceMarket = iprot.readI16();
              struct.setVipPriceMarketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VIP_PRICE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.vipPriceCount = iprot.readI16();
              struct.setVipPriceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketId = iprot.readString();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveOrderDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.orderMarketType != null) {
        oprot.writeFieldBegin(ORDER_MARKET_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderMarketType);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NORMAL_PRICE_MARKET_FIELD_DESC);
      oprot.writeI16(struct.normalPriceMarket);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NORMAL_PRICE_COUNT_FIELD_DESC);
      oprot.writeI16(struct.normalPriceCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_PRICE_MARKET_FIELD_DESC);
      oprot.writeI16(struct.vipPriceMarket);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_PRICE_COUNT_FIELD_DESC);
      oprot.writeI16(struct.vipPriceCount);
      oprot.writeFieldEnd();
      if (struct.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(struct.ticketId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveOrderDetailVoTupleSchemeFactory implements SchemeFactory {
    public ActiveOrderDetailVoTupleScheme getScheme() {
      return new ActiveOrderDetailVoTupleScheme();
    }
  }

  private static class ActiveOrderDetailVoTupleScheme extends TupleScheme<ActiveOrderDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(3);
      }
      if (struct.isSetOrderId()) {
        optionals.set(4);
      }
      if (struct.isSetOrderMarketType()) {
        optionals.set(5);
      }
      if (struct.isSetActiveId()) {
        optionals.set(6);
      }
      if (struct.isSetType()) {
        optionals.set(7);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(8);
      }
      if (struct.isSetProductId()) {
        optionals.set(9);
      }
      if (struct.isSetNormalPriceMarket()) {
        optionals.set(10);
      }
      if (struct.isSetNormalPriceCount()) {
        optionals.set(11);
      }
      if (struct.isSetVipPriceMarket()) {
        optionals.set(12);
      }
      if (struct.isSetVipPriceCount()) {
        optionals.set(13);
      }
      if (struct.isSetTicketId()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetOrderMarketType()) {
        oprot.writeString(struct.orderMarketType);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetNormalPriceMarket()) {
        oprot.writeI16(struct.normalPriceMarket);
      }
      if (struct.isSetNormalPriceCount()) {
        oprot.writeI16(struct.normalPriceCount);
      }
      if (struct.isSetVipPriceMarket()) {
        oprot.writeI16(struct.vipPriceMarket);
      }
      if (struct.isSetVipPriceCount()) {
        oprot.writeI16(struct.vipPriceCount);
      }
      if (struct.isSetTicketId()) {
        oprot.writeString(struct.ticketId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderMarketType = iprot.readString();
        struct.setOrderMarketTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.normalPriceMarket = iprot.readI16();
        struct.setNormalPriceMarketIsSet(true);
      }
      if (incoming.get(11)) {
        struct.normalPriceCount = iprot.readI16();
        struct.setNormalPriceCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.vipPriceMarket = iprot.readI16();
        struct.setVipPriceMarketIsSet(true);
      }
      if (incoming.get(13)) {
        struct.vipPriceCount = iprot.readI16();
        struct.setVipPriceCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ticketId = iprot.readString();
        struct.setTicketIdIsSet(true);
      }
    }
  }

}

