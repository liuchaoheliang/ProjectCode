/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BossUserOrgService {

  /**
   * Boss用户机构关联 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 BossUserOrg
     * @param bossUserOrg
     * @return long    主键ID
     * 
     * @param originVo
     * @param bossUserOrgVo
     */
    public com.froad.thrift.vo.AddResultVo addBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException;

    /**
     * 删除 BossUserOrg
     * @param bossUserOrg
     * @return boolean
     * 
     * @param originVo
     * @param bossUserOrgVo
     */
    public com.froad.thrift.vo.ResultVo deleteBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException;

    /**
     * 修改 BossUserOrg
     * @param bossUserOrg
     * @return boolean
     * 
     * @param originVo
     * @param bossUserOrgVo
     */
    public com.froad.thrift.vo.ResultVo updateBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException;

    /**
     * 查询 BossUserOrg
     * @param bossUserOrg
     * @return List<BossUserOrgVo>
     * 
     * @param bossUserOrgVo
     */
    public List<com.froad.thrift.vo.BossUserOrgVo> getBossUserOrg(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BossUserOrg
     * @param bossUserOrg
     * @return BossUserOrgPageVoRes
     * 
     * @param page
     * @param bossUserOrgVo
     */
    public com.froad.thrift.vo.BossUserOrgPageVoRes getBossUserOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossUserOrg(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossUserOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddResultVo addBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      send_addBossUserOrg(originVo, bossUserOrgVo);
      return recv_addBossUserOrg();
    }

    public void send_addBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      addBossUserOrg_args args = new addBossUserOrg_args();
      args.setOriginVo(originVo);
      args.setBossUserOrgVo(bossUserOrgVo);
      sendBase("addBossUserOrg", args);
    }

    public com.froad.thrift.vo.AddResultVo recv_addBossUserOrg() throws org.apache.thrift.TException
    {
      addBossUserOrg_result result = new addBossUserOrg_result();
      receiveBase(result, "addBossUserOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBossUserOrg failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      send_deleteBossUserOrg(originVo, bossUserOrgVo);
      return recv_deleteBossUserOrg();
    }

    public void send_deleteBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      deleteBossUserOrg_args args = new deleteBossUserOrg_args();
      args.setOriginVo(originVo);
      args.setBossUserOrgVo(bossUserOrgVo);
      sendBase("deleteBossUserOrg", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteBossUserOrg() throws org.apache.thrift.TException
    {
      deleteBossUserOrg_result result = new deleteBossUserOrg_result();
      receiveBase(result, "deleteBossUserOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBossUserOrg failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      send_updateBossUserOrg(originVo, bossUserOrgVo);
      return recv_updateBossUserOrg();
    }

    public void send_updateBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      updateBossUserOrg_args args = new updateBossUserOrg_args();
      args.setOriginVo(originVo);
      args.setBossUserOrgVo(bossUserOrgVo);
      sendBase("updateBossUserOrg", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateBossUserOrg() throws org.apache.thrift.TException
    {
      updateBossUserOrg_result result = new updateBossUserOrg_result();
      receiveBase(result, "updateBossUserOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBossUserOrg failed: unknown result");
    }

    public List<com.froad.thrift.vo.BossUserOrgVo> getBossUserOrg(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      send_getBossUserOrg(bossUserOrgVo);
      return recv_getBossUserOrg();
    }

    public void send_getBossUserOrg(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      getBossUserOrg_args args = new getBossUserOrg_args();
      args.setBossUserOrgVo(bossUserOrgVo);
      sendBase("getBossUserOrg", args);
    }

    public List<com.froad.thrift.vo.BossUserOrgVo> recv_getBossUserOrg() throws org.apache.thrift.TException
    {
      getBossUserOrg_result result = new getBossUserOrg_result();
      receiveBase(result, "getBossUserOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossUserOrg failed: unknown result");
    }

    public com.froad.thrift.vo.BossUserOrgPageVoRes getBossUserOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      send_getBossUserOrgByPage(page, bossUserOrgVo);
      return recv_getBossUserOrgByPage();
    }

    public void send_getBossUserOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) throws org.apache.thrift.TException
    {
      getBossUserOrgByPage_args args = new getBossUserOrgByPage_args();
      args.setPage(page);
      args.setBossUserOrgVo(bossUserOrgVo);
      sendBase("getBossUserOrgByPage", args);
    }

    public com.froad.thrift.vo.BossUserOrgPageVoRes recv_getBossUserOrgByPage() throws org.apache.thrift.TException
    {
      getBossUserOrgByPage_result result = new getBossUserOrgByPage_result();
      receiveBase(result, "getBossUserOrgByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossUserOrgByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBossUserOrg_call method_call = new addBossUserOrg_call(originVo, bossUserOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBossUserOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo;
      public addBossUserOrg_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossUserOrgVo = bossUserOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBossUserOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBossUserOrg_args args = new addBossUserOrg_args();
        args.setOriginVo(originVo);
        args.setBossUserOrgVo(bossUserOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBossUserOrg();
      }
    }

    public void deleteBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBossUserOrg_call method_call = new deleteBossUserOrg_call(originVo, bossUserOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBossUserOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo;
      public deleteBossUserOrg_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossUserOrgVo = bossUserOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBossUserOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBossUserOrg_args args = new deleteBossUserOrg_args();
        args.setOriginVo(originVo);
        args.setBossUserOrgVo(bossUserOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBossUserOrg();
      }
    }

    public void updateBossUserOrg(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBossUserOrg_call method_call = new updateBossUserOrg_call(originVo, bossUserOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBossUserOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo;
      public updateBossUserOrg_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossUserOrgVo = bossUserOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBossUserOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBossUserOrg_args args = new updateBossUserOrg_args();
        args.setOriginVo(originVo);
        args.setBossUserOrgVo(bossUserOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBossUserOrg();
      }
    }

    public void getBossUserOrg(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossUserOrg_call method_call = new getBossUserOrg_call(bossUserOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossUserOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo;
      public getBossUserOrg_call(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bossUserOrgVo = bossUserOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossUserOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossUserOrg_args args = new getBossUserOrg_args();
        args.setBossUserOrgVo(bossUserOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BossUserOrgVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossUserOrg();
      }
    }

    public void getBossUserOrgByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossUserOrgByPage_call method_call = new getBossUserOrgByPage_call(page, bossUserOrgVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossUserOrgByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo;
      public getBossUserOrgByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.bossUserOrgVo = bossUserOrgVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossUserOrgByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossUserOrgByPage_args args = new getBossUserOrgByPage_args();
        args.setPage(page);
        args.setBossUserOrgVo(bossUserOrgVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BossUserOrgPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossUserOrgByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBossUserOrg", new addBossUserOrg());
      processMap.put("deleteBossUserOrg", new deleteBossUserOrg());
      processMap.put("updateBossUserOrg", new updateBossUserOrg());
      processMap.put("getBossUserOrg", new getBossUserOrg());
      processMap.put("getBossUserOrgByPage", new getBossUserOrgByPage());
      return processMap;
    }

    public static class addBossUserOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBossUserOrg_args> {
      public addBossUserOrg() {
        super("addBossUserOrg");
      }

      public addBossUserOrg_args getEmptyArgsInstance() {
        return new addBossUserOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBossUserOrg_result getResult(I iface, addBossUserOrg_args args) throws org.apache.thrift.TException {
        addBossUserOrg_result result = new addBossUserOrg_result();
        result.success = iface.addBossUserOrg(args.originVo, args.bossUserOrgVo);
        return result;
      }
    }

    public static class deleteBossUserOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBossUserOrg_args> {
      public deleteBossUserOrg() {
        super("deleteBossUserOrg");
      }

      public deleteBossUserOrg_args getEmptyArgsInstance() {
        return new deleteBossUserOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBossUserOrg_result getResult(I iface, deleteBossUserOrg_args args) throws org.apache.thrift.TException {
        deleteBossUserOrg_result result = new deleteBossUserOrg_result();
        result.success = iface.deleteBossUserOrg(args.originVo, args.bossUserOrgVo);
        return result;
      }
    }

    public static class updateBossUserOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBossUserOrg_args> {
      public updateBossUserOrg() {
        super("updateBossUserOrg");
      }

      public updateBossUserOrg_args getEmptyArgsInstance() {
        return new updateBossUserOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBossUserOrg_result getResult(I iface, updateBossUserOrg_args args) throws org.apache.thrift.TException {
        updateBossUserOrg_result result = new updateBossUserOrg_result();
        result.success = iface.updateBossUserOrg(args.originVo, args.bossUserOrgVo);
        return result;
      }
    }

    public static class getBossUserOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossUserOrg_args> {
      public getBossUserOrg() {
        super("getBossUserOrg");
      }

      public getBossUserOrg_args getEmptyArgsInstance() {
        return new getBossUserOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossUserOrg_result getResult(I iface, getBossUserOrg_args args) throws org.apache.thrift.TException {
        getBossUserOrg_result result = new getBossUserOrg_result();
        result.success = iface.getBossUserOrg(args.bossUserOrgVo);
        return result;
      }
    }

    public static class getBossUserOrgByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossUserOrgByPage_args> {
      public getBossUserOrgByPage() {
        super("getBossUserOrgByPage");
      }

      public getBossUserOrgByPage_args getEmptyArgsInstance() {
        return new getBossUserOrgByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossUserOrgByPage_result getResult(I iface, getBossUserOrgByPage_args args) throws org.apache.thrift.TException {
        getBossUserOrgByPage_result result = new getBossUserOrgByPage_result();
        result.success = iface.getBossUserOrgByPage(args.page, args.bossUserOrgVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBossUserOrg", new addBossUserOrg());
      processMap.put("deleteBossUserOrg", new deleteBossUserOrg());
      processMap.put("updateBossUserOrg", new updateBossUserOrg());
      processMap.put("getBossUserOrg", new getBossUserOrg());
      processMap.put("getBossUserOrgByPage", new getBossUserOrgByPage());
      return processMap;
    }

    public static class addBossUserOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBossUserOrg_args, com.froad.thrift.vo.AddResultVo> {
      public addBossUserOrg() {
        super("addBossUserOrg");
      }

      public addBossUserOrg_args getEmptyArgsInstance() {
        return new addBossUserOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.AddResultVo o) {
            addBossUserOrg_result result = new addBossUserOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBossUserOrg_result result = new addBossUserOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBossUserOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> resultHandler) throws TException {
        iface.addBossUserOrg(args.originVo, args.bossUserOrgVo,resultHandler);
      }
    }

    public static class deleteBossUserOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBossUserOrg_args, com.froad.thrift.vo.ResultVo> {
      public deleteBossUserOrg() {
        super("deleteBossUserOrg");
      }

      public deleteBossUserOrg_args getEmptyArgsInstance() {
        return new deleteBossUserOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteBossUserOrg_result result = new deleteBossUserOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBossUserOrg_result result = new deleteBossUserOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBossUserOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteBossUserOrg(args.originVo, args.bossUserOrgVo,resultHandler);
      }
    }

    public static class updateBossUserOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBossUserOrg_args, com.froad.thrift.vo.ResultVo> {
      public updateBossUserOrg() {
        super("updateBossUserOrg");
      }

      public updateBossUserOrg_args getEmptyArgsInstance() {
        return new updateBossUserOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateBossUserOrg_result result = new updateBossUserOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBossUserOrg_result result = new updateBossUserOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBossUserOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateBossUserOrg(args.originVo, args.bossUserOrgVo,resultHandler);
      }
    }

    public static class getBossUserOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossUserOrg_args, List<com.froad.thrift.vo.BossUserOrgVo>> {
      public getBossUserOrg() {
        super("getBossUserOrg");
      }

      public getBossUserOrg_args getEmptyArgsInstance() {
        return new getBossUserOrg_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BossUserOrgVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BossUserOrgVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BossUserOrgVo> o) {
            getBossUserOrg_result result = new getBossUserOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossUserOrg_result result = new getBossUserOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossUserOrg_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BossUserOrgVo>> resultHandler) throws TException {
        iface.getBossUserOrg(args.bossUserOrgVo,resultHandler);
      }
    }

    public static class getBossUserOrgByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossUserOrgByPage_args, com.froad.thrift.vo.BossUserOrgPageVoRes> {
      public getBossUserOrgByPage() {
        super("getBossUserOrgByPage");
      }

      public getBossUserOrgByPage_args getEmptyArgsInstance() {
        return new getBossUserOrgByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BossUserOrgPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BossUserOrgPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BossUserOrgPageVoRes o) {
            getBossUserOrgByPage_result result = new getBossUserOrgByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossUserOrgByPage_result result = new getBossUserOrgByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossUserOrgByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BossUserOrgPageVoRes> resultHandler) throws TException {
        iface.getBossUserOrgByPage(args.page, args.bossUserOrgVo,resultHandler);
      }
    }

  }

  public static class addBossUserOrg_args implements org.apache.thrift.TBase<addBossUserOrg_args, addBossUserOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBossUserOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossUserOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_USER_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossUserOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossUserOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossUserOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_USER_ORG_VO((short)2, "bossUserOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_USER_ORG_VO
            return BOSS_USER_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_USER_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("bossUserOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossUserOrg_args.class, metaDataMap);
    }

    public addBossUserOrg_args() {
    }

    public addBossUserOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo)
    {
      this();
      this.originVo = originVo;
      this.bossUserOrgVo = bossUserOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossUserOrg_args(addBossUserOrg_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossUserOrgVo()) {
        this.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo(other.bossUserOrgVo);
      }
    }

    public addBossUserOrg_args deepCopy() {
      return new addBossUserOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossUserOrgVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBossUserOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossUserOrgVo getBossUserOrgVo() {
      return this.bossUserOrgVo;
    }

    public addBossUserOrg_args setBossUserOrgVo(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) {
      this.bossUserOrgVo = bossUserOrgVo;
      return this;
    }

    public void unsetBossUserOrgVo() {
      this.bossUserOrgVo = null;
    }

    /** Returns true if field bossUserOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossUserOrgVo() {
      return this.bossUserOrgVo != null;
    }

    public void setBossUserOrgVoIsSet(boolean value) {
      if (!value) {
        this.bossUserOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_USER_ORG_VO:
        if (value == null) {
          unsetBossUserOrgVo();
        } else {
          setBossUserOrgVo((com.froad.thrift.vo.BossUserOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_USER_ORG_VO:
        return getBossUserOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_USER_ORG_VO:
        return isSetBossUserOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossUserOrg_args)
        return this.equals((addBossUserOrg_args)that);
      return false;
    }

    public boolean equals(addBossUserOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossUserOrgVo = true && this.isSetBossUserOrgVo();
      boolean that_present_bossUserOrgVo = true && that.isSetBossUserOrgVo();
      if (this_present_bossUserOrgVo || that_present_bossUserOrgVo) {
        if (!(this_present_bossUserOrgVo && that_present_bossUserOrgVo))
          return false;
        if (!this.bossUserOrgVo.equals(that.bossUserOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossUserOrgVo = true && (isSetBossUserOrgVo());
      list.add(present_bossUserOrgVo);
      if (present_bossUserOrgVo)
        list.add(bossUserOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossUserOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossUserOrgVo()).compareTo(other.isSetBossUserOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossUserOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossUserOrgVo, other.bossUserOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossUserOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossUserOrgVo:");
      if (this.bossUserOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossUserOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossUserOrgVo != null) {
        bossUserOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossUserOrg_argsStandardSchemeFactory implements SchemeFactory {
      public addBossUserOrg_argsStandardScheme getScheme() {
        return new addBossUserOrg_argsStandardScheme();
      }
    }

    private static class addBossUserOrg_argsStandardScheme extends StandardScheme<addBossUserOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossUserOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_USER_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
                struct.bossUserOrgVo.read(iprot);
                struct.setBossUserOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossUserOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossUserOrgVo != null) {
          oprot.writeFieldBegin(BOSS_USER_ORG_VO_FIELD_DESC);
          struct.bossUserOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossUserOrg_argsTupleSchemeFactory implements SchemeFactory {
      public addBossUserOrg_argsTupleScheme getScheme() {
        return new addBossUserOrg_argsTupleScheme();
      }
    }

    private static class addBossUserOrg_argsTupleScheme extends TupleScheme<addBossUserOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossUserOrgVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossUserOrgVo()) {
          struct.bossUserOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
          struct.bossUserOrgVo.read(iprot);
          struct.setBossUserOrgVoIsSet(true);
        }
      }
    }

  }

  public static class addBossUserOrg_result implements org.apache.thrift.TBase<addBossUserOrg_result, addBossUserOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBossUserOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossUserOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossUserOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossUserOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossUserOrg_result.class, metaDataMap);
    }

    public addBossUserOrg_result() {
    }

    public addBossUserOrg_result(
      com.froad.thrift.vo.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossUserOrg_result(addBossUserOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddResultVo(other.success);
      }
    }

    public addBossUserOrg_result deepCopy() {
      return new addBossUserOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddResultVo getSuccess() {
      return this.success;
    }

    public addBossUserOrg_result setSuccess(com.froad.thrift.vo.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossUserOrg_result)
        return this.equals((addBossUserOrg_result)that);
      return false;
    }

    public boolean equals(addBossUserOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossUserOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossUserOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossUserOrg_resultStandardSchemeFactory implements SchemeFactory {
      public addBossUserOrg_resultStandardScheme getScheme() {
        return new addBossUserOrg_resultStandardScheme();
      }
    }

    private static class addBossUserOrg_resultStandardScheme extends StandardScheme<addBossUserOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossUserOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossUserOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossUserOrg_resultTupleSchemeFactory implements SchemeFactory {
      public addBossUserOrg_resultTupleScheme getScheme() {
        return new addBossUserOrg_resultTupleScheme();
      }
    }

    private static class addBossUserOrg_resultTupleScheme extends TupleScheme<addBossUserOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBossUserOrg_args implements org.apache.thrift.TBase<deleteBossUserOrg_args, deleteBossUserOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBossUserOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBossUserOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_USER_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossUserOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBossUserOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBossUserOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_USER_ORG_VO((short)2, "bossUserOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_USER_ORG_VO
            return BOSS_USER_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_USER_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("bossUserOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBossUserOrg_args.class, metaDataMap);
    }

    public deleteBossUserOrg_args() {
    }

    public deleteBossUserOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo)
    {
      this();
      this.originVo = originVo;
      this.bossUserOrgVo = bossUserOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBossUserOrg_args(deleteBossUserOrg_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossUserOrgVo()) {
        this.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo(other.bossUserOrgVo);
      }
    }

    public deleteBossUserOrg_args deepCopy() {
      return new deleteBossUserOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossUserOrgVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBossUserOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossUserOrgVo getBossUserOrgVo() {
      return this.bossUserOrgVo;
    }

    public deleteBossUserOrg_args setBossUserOrgVo(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) {
      this.bossUserOrgVo = bossUserOrgVo;
      return this;
    }

    public void unsetBossUserOrgVo() {
      this.bossUserOrgVo = null;
    }

    /** Returns true if field bossUserOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossUserOrgVo() {
      return this.bossUserOrgVo != null;
    }

    public void setBossUserOrgVoIsSet(boolean value) {
      if (!value) {
        this.bossUserOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_USER_ORG_VO:
        if (value == null) {
          unsetBossUserOrgVo();
        } else {
          setBossUserOrgVo((com.froad.thrift.vo.BossUserOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_USER_ORG_VO:
        return getBossUserOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_USER_ORG_VO:
        return isSetBossUserOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBossUserOrg_args)
        return this.equals((deleteBossUserOrg_args)that);
      return false;
    }

    public boolean equals(deleteBossUserOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossUserOrgVo = true && this.isSetBossUserOrgVo();
      boolean that_present_bossUserOrgVo = true && that.isSetBossUserOrgVo();
      if (this_present_bossUserOrgVo || that_present_bossUserOrgVo) {
        if (!(this_present_bossUserOrgVo && that_present_bossUserOrgVo))
          return false;
        if (!this.bossUserOrgVo.equals(that.bossUserOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossUserOrgVo = true && (isSetBossUserOrgVo());
      list.add(present_bossUserOrgVo);
      if (present_bossUserOrgVo)
        list.add(bossUserOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBossUserOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossUserOrgVo()).compareTo(other.isSetBossUserOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossUserOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossUserOrgVo, other.bossUserOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBossUserOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossUserOrgVo:");
      if (this.bossUserOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossUserOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossUserOrgVo != null) {
        bossUserOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBossUserOrg_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBossUserOrg_argsStandardScheme getScheme() {
        return new deleteBossUserOrg_argsStandardScheme();
      }
    }

    private static class deleteBossUserOrg_argsStandardScheme extends StandardScheme<deleteBossUserOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBossUserOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_USER_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
                struct.bossUserOrgVo.read(iprot);
                struct.setBossUserOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBossUserOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossUserOrgVo != null) {
          oprot.writeFieldBegin(BOSS_USER_ORG_VO_FIELD_DESC);
          struct.bossUserOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBossUserOrg_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBossUserOrg_argsTupleScheme getScheme() {
        return new deleteBossUserOrg_argsTupleScheme();
      }
    }

    private static class deleteBossUserOrg_argsTupleScheme extends TupleScheme<deleteBossUserOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossUserOrgVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossUserOrgVo()) {
          struct.bossUserOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
          struct.bossUserOrgVo.read(iprot);
          struct.setBossUserOrgVoIsSet(true);
        }
      }
    }

  }

  public static class deleteBossUserOrg_result implements org.apache.thrift.TBase<deleteBossUserOrg_result, deleteBossUserOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBossUserOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBossUserOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBossUserOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBossUserOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBossUserOrg_result.class, metaDataMap);
    }

    public deleteBossUserOrg_result() {
    }

    public deleteBossUserOrg_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBossUserOrg_result(deleteBossUserOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteBossUserOrg_result deepCopy() {
      return new deleteBossUserOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteBossUserOrg_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBossUserOrg_result)
        return this.equals((deleteBossUserOrg_result)that);
      return false;
    }

    public boolean equals(deleteBossUserOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBossUserOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBossUserOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBossUserOrg_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBossUserOrg_resultStandardScheme getScheme() {
        return new deleteBossUserOrg_resultStandardScheme();
      }
    }

    private static class deleteBossUserOrg_resultStandardScheme extends StandardScheme<deleteBossUserOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBossUserOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBossUserOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBossUserOrg_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBossUserOrg_resultTupleScheme getScheme() {
        return new deleteBossUserOrg_resultTupleScheme();
      }
    }

    private static class deleteBossUserOrg_resultTupleScheme extends TupleScheme<deleteBossUserOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBossUserOrg_args implements org.apache.thrift.TBase<updateBossUserOrg_args, updateBossUserOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossUserOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossUserOrg_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_USER_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossUserOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossUserOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossUserOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_USER_ORG_VO((short)2, "bossUserOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_USER_ORG_VO
            return BOSS_USER_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_USER_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("bossUserOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossUserOrg_args.class, metaDataMap);
    }

    public updateBossUserOrg_args() {
    }

    public updateBossUserOrg_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo)
    {
      this();
      this.originVo = originVo;
      this.bossUserOrgVo = bossUserOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossUserOrg_args(updateBossUserOrg_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossUserOrgVo()) {
        this.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo(other.bossUserOrgVo);
      }
    }

    public updateBossUserOrg_args deepCopy() {
      return new updateBossUserOrg_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossUserOrgVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBossUserOrg_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossUserOrgVo getBossUserOrgVo() {
      return this.bossUserOrgVo;
    }

    public updateBossUserOrg_args setBossUserOrgVo(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) {
      this.bossUserOrgVo = bossUserOrgVo;
      return this;
    }

    public void unsetBossUserOrgVo() {
      this.bossUserOrgVo = null;
    }

    /** Returns true if field bossUserOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossUserOrgVo() {
      return this.bossUserOrgVo != null;
    }

    public void setBossUserOrgVoIsSet(boolean value) {
      if (!value) {
        this.bossUserOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_USER_ORG_VO:
        if (value == null) {
          unsetBossUserOrgVo();
        } else {
          setBossUserOrgVo((com.froad.thrift.vo.BossUserOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_USER_ORG_VO:
        return getBossUserOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_USER_ORG_VO:
        return isSetBossUserOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossUserOrg_args)
        return this.equals((updateBossUserOrg_args)that);
      return false;
    }

    public boolean equals(updateBossUserOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossUserOrgVo = true && this.isSetBossUserOrgVo();
      boolean that_present_bossUserOrgVo = true && that.isSetBossUserOrgVo();
      if (this_present_bossUserOrgVo || that_present_bossUserOrgVo) {
        if (!(this_present_bossUserOrgVo && that_present_bossUserOrgVo))
          return false;
        if (!this.bossUserOrgVo.equals(that.bossUserOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossUserOrgVo = true && (isSetBossUserOrgVo());
      list.add(present_bossUserOrgVo);
      if (present_bossUserOrgVo)
        list.add(bossUserOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossUserOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossUserOrgVo()).compareTo(other.isSetBossUserOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossUserOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossUserOrgVo, other.bossUserOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossUserOrg_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossUserOrgVo:");
      if (this.bossUserOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossUserOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossUserOrgVo != null) {
        bossUserOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossUserOrg_argsStandardSchemeFactory implements SchemeFactory {
      public updateBossUserOrg_argsStandardScheme getScheme() {
        return new updateBossUserOrg_argsStandardScheme();
      }
    }

    private static class updateBossUserOrg_argsStandardScheme extends StandardScheme<updateBossUserOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossUserOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_USER_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
                struct.bossUserOrgVo.read(iprot);
                struct.setBossUserOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossUserOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossUserOrgVo != null) {
          oprot.writeFieldBegin(BOSS_USER_ORG_VO_FIELD_DESC);
          struct.bossUserOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossUserOrg_argsTupleSchemeFactory implements SchemeFactory {
      public updateBossUserOrg_argsTupleScheme getScheme() {
        return new updateBossUserOrg_argsTupleScheme();
      }
    }

    private static class updateBossUserOrg_argsTupleScheme extends TupleScheme<updateBossUserOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossUserOrgVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossUserOrgVo()) {
          struct.bossUserOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
          struct.bossUserOrgVo.read(iprot);
          struct.setBossUserOrgVoIsSet(true);
        }
      }
    }

  }

  public static class updateBossUserOrg_result implements org.apache.thrift.TBase<updateBossUserOrg_result, updateBossUserOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossUserOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossUserOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossUserOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossUserOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossUserOrg_result.class, metaDataMap);
    }

    public updateBossUserOrg_result() {
    }

    public updateBossUserOrg_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossUserOrg_result(updateBossUserOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateBossUserOrg_result deepCopy() {
      return new updateBossUserOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateBossUserOrg_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossUserOrg_result)
        return this.equals((updateBossUserOrg_result)that);
      return false;
    }

    public boolean equals(updateBossUserOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossUserOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossUserOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossUserOrg_resultStandardSchemeFactory implements SchemeFactory {
      public updateBossUserOrg_resultStandardScheme getScheme() {
        return new updateBossUserOrg_resultStandardScheme();
      }
    }

    private static class updateBossUserOrg_resultStandardScheme extends StandardScheme<updateBossUserOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossUserOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossUserOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossUserOrg_resultTupleSchemeFactory implements SchemeFactory {
      public updateBossUserOrg_resultTupleScheme getScheme() {
        return new updateBossUserOrg_resultTupleScheme();
      }
    }

    private static class updateBossUserOrg_resultTupleScheme extends TupleScheme<updateBossUserOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossUserOrg_args implements org.apache.thrift.TBase<getBossUserOrg_args, getBossUserOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossUserOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossUserOrg_args");

    private static final org.apache.thrift.protocol.TField BOSS_USER_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossUserOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossUserOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossUserOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOSS_USER_ORG_VO((short)1, "bossUserOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOSS_USER_ORG_VO
            return BOSS_USER_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOSS_USER_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("bossUserOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossUserOrg_args.class, metaDataMap);
    }

    public getBossUserOrg_args() {
    }

    public getBossUserOrg_args(
      com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo)
    {
      this();
      this.bossUserOrgVo = bossUserOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossUserOrg_args(getBossUserOrg_args other) {
      if (other.isSetBossUserOrgVo()) {
        this.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo(other.bossUserOrgVo);
      }
    }

    public getBossUserOrg_args deepCopy() {
      return new getBossUserOrg_args(this);
    }

    @Override
    public void clear() {
      this.bossUserOrgVo = null;
    }

    public com.froad.thrift.vo.BossUserOrgVo getBossUserOrgVo() {
      return this.bossUserOrgVo;
    }

    public getBossUserOrg_args setBossUserOrgVo(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) {
      this.bossUserOrgVo = bossUserOrgVo;
      return this;
    }

    public void unsetBossUserOrgVo() {
      this.bossUserOrgVo = null;
    }

    /** Returns true if field bossUserOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossUserOrgVo() {
      return this.bossUserOrgVo != null;
    }

    public void setBossUserOrgVoIsSet(boolean value) {
      if (!value) {
        this.bossUserOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOSS_USER_ORG_VO:
        if (value == null) {
          unsetBossUserOrgVo();
        } else {
          setBossUserOrgVo((com.froad.thrift.vo.BossUserOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOSS_USER_ORG_VO:
        return getBossUserOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOSS_USER_ORG_VO:
        return isSetBossUserOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossUserOrg_args)
        return this.equals((getBossUserOrg_args)that);
      return false;
    }

    public boolean equals(getBossUserOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_bossUserOrgVo = true && this.isSetBossUserOrgVo();
      boolean that_present_bossUserOrgVo = true && that.isSetBossUserOrgVo();
      if (this_present_bossUserOrgVo || that_present_bossUserOrgVo) {
        if (!(this_present_bossUserOrgVo && that_present_bossUserOrgVo))
          return false;
        if (!this.bossUserOrgVo.equals(that.bossUserOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bossUserOrgVo = true && (isSetBossUserOrgVo());
      list.add(present_bossUserOrgVo);
      if (present_bossUserOrgVo)
        list.add(bossUserOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossUserOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBossUserOrgVo()).compareTo(other.isSetBossUserOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossUserOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossUserOrgVo, other.bossUserOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossUserOrg_args(");
      boolean first = true;

      sb.append("bossUserOrgVo:");
      if (this.bossUserOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossUserOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bossUserOrgVo != null) {
        bossUserOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossUserOrg_argsStandardSchemeFactory implements SchemeFactory {
      public getBossUserOrg_argsStandardScheme getScheme() {
        return new getBossUserOrg_argsStandardScheme();
      }
    }

    private static class getBossUserOrg_argsStandardScheme extends StandardScheme<getBossUserOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossUserOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOSS_USER_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
                struct.bossUserOrgVo.read(iprot);
                struct.setBossUserOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossUserOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bossUserOrgVo != null) {
          oprot.writeFieldBegin(BOSS_USER_ORG_VO_FIELD_DESC);
          struct.bossUserOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossUserOrg_argsTupleSchemeFactory implements SchemeFactory {
      public getBossUserOrg_argsTupleScheme getScheme() {
        return new getBossUserOrg_argsTupleScheme();
      }
    }

    private static class getBossUserOrg_argsTupleScheme extends TupleScheme<getBossUserOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBossUserOrgVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBossUserOrgVo()) {
          struct.bossUserOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossUserOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
          struct.bossUserOrgVo.read(iprot);
          struct.setBossUserOrgVoIsSet(true);
        }
      }
    }

  }

  public static class getBossUserOrg_result implements org.apache.thrift.TBase<getBossUserOrg_result, getBossUserOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossUserOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossUserOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossUserOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossUserOrg_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BossUserOrgVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossUserOrg_result.class, metaDataMap);
    }

    public getBossUserOrg_result() {
    }

    public getBossUserOrg_result(
      List<com.froad.thrift.vo.BossUserOrgVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossUserOrg_result(getBossUserOrg_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BossUserOrgVo> __this__success = new ArrayList<com.froad.thrift.vo.BossUserOrgVo>(other.success.size());
        for (com.froad.thrift.vo.BossUserOrgVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BossUserOrgVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBossUserOrg_result deepCopy() {
      return new getBossUserOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BossUserOrgVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BossUserOrgVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BossUserOrgVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BossUserOrgVo> getSuccess() {
      return this.success;
    }

    public getBossUserOrg_result setSuccess(List<com.froad.thrift.vo.BossUserOrgVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BossUserOrgVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossUserOrg_result)
        return this.equals((getBossUserOrg_result)that);
      return false;
    }

    public boolean equals(getBossUserOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossUserOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossUserOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossUserOrg_resultStandardSchemeFactory implements SchemeFactory {
      public getBossUserOrg_resultStandardScheme getScheme() {
        return new getBossUserOrg_resultStandardScheme();
      }
    }

    private static class getBossUserOrg_resultStandardScheme extends StandardScheme<getBossUserOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossUserOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BossUserOrgVo>(_list146.size);
                  com.froad.thrift.vo.BossUserOrgVo _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = new com.froad.thrift.vo.BossUserOrgVo();
                    _elem147.read(iprot);
                    struct.success.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossUserOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BossUserOrgVo _iter149 : struct.success)
            {
              _iter149.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossUserOrg_resultTupleSchemeFactory implements SchemeFactory {
      public getBossUserOrg_resultTupleScheme getScheme() {
        return new getBossUserOrg_resultTupleScheme();
      }
    }

    private static class getBossUserOrg_resultTupleScheme extends TupleScheme<getBossUserOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BossUserOrgVo _iter150 : struct.success)
            {
              _iter150.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossUserOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BossUserOrgVo>(_list151.size);
            com.froad.thrift.vo.BossUserOrgVo _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = new com.froad.thrift.vo.BossUserOrgVo();
              _elem152.read(iprot);
              struct.success.add(_elem152);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossUserOrgByPage_args implements org.apache.thrift.TBase<getBossUserOrgByPage_args, getBossUserOrgByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossUserOrgByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossUserOrgByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_USER_ORG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossUserOrgVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossUserOrgByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossUserOrgByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      BOSS_USER_ORG_VO((short)2, "bossUserOrgVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // BOSS_USER_ORG_VO
            return BOSS_USER_ORG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BOSS_USER_ORG_VO, new org.apache.thrift.meta_data.FieldMetaData("bossUserOrgVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossUserOrgByPage_args.class, metaDataMap);
    }

    public getBossUserOrgByPage_args() {
    }

    public getBossUserOrgByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo)
    {
      this();
      this.page = page;
      this.bossUserOrgVo = bossUserOrgVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossUserOrgByPage_args(getBossUserOrgByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetBossUserOrgVo()) {
        this.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo(other.bossUserOrgVo);
      }
    }

    public getBossUserOrgByPage_args deepCopy() {
      return new getBossUserOrgByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.bossUserOrgVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getBossUserOrgByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.BossUserOrgVo getBossUserOrgVo() {
      return this.bossUserOrgVo;
    }

    public getBossUserOrgByPage_args setBossUserOrgVo(com.froad.thrift.vo.BossUserOrgVo bossUserOrgVo) {
      this.bossUserOrgVo = bossUserOrgVo;
      return this;
    }

    public void unsetBossUserOrgVo() {
      this.bossUserOrgVo = null;
    }

    /** Returns true if field bossUserOrgVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossUserOrgVo() {
      return this.bossUserOrgVo != null;
    }

    public void setBossUserOrgVoIsSet(boolean value) {
      if (!value) {
        this.bossUserOrgVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BOSS_USER_ORG_VO:
        if (value == null) {
          unsetBossUserOrgVo();
        } else {
          setBossUserOrgVo((com.froad.thrift.vo.BossUserOrgVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case BOSS_USER_ORG_VO:
        return getBossUserOrgVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case BOSS_USER_ORG_VO:
        return isSetBossUserOrgVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossUserOrgByPage_args)
        return this.equals((getBossUserOrgByPage_args)that);
      return false;
    }

    public boolean equals(getBossUserOrgByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_bossUserOrgVo = true && this.isSetBossUserOrgVo();
      boolean that_present_bossUserOrgVo = true && that.isSetBossUserOrgVo();
      if (this_present_bossUserOrgVo || that_present_bossUserOrgVo) {
        if (!(this_present_bossUserOrgVo && that_present_bossUserOrgVo))
          return false;
        if (!this.bossUserOrgVo.equals(that.bossUserOrgVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_bossUserOrgVo = true && (isSetBossUserOrgVo());
      list.add(present_bossUserOrgVo);
      if (present_bossUserOrgVo)
        list.add(bossUserOrgVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossUserOrgByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossUserOrgVo()).compareTo(other.isSetBossUserOrgVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossUserOrgVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossUserOrgVo, other.bossUserOrgVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossUserOrgByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossUserOrgVo:");
      if (this.bossUserOrgVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossUserOrgVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (bossUserOrgVo != null) {
        bossUserOrgVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossUserOrgByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getBossUserOrgByPage_argsStandardScheme getScheme() {
        return new getBossUserOrgByPage_argsStandardScheme();
      }
    }

    private static class getBossUserOrgByPage_argsStandardScheme extends StandardScheme<getBossUserOrgByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossUserOrgByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_USER_ORG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
                struct.bossUserOrgVo.read(iprot);
                struct.setBossUserOrgVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossUserOrgByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossUserOrgVo != null) {
          oprot.writeFieldBegin(BOSS_USER_ORG_VO_FIELD_DESC);
          struct.bossUserOrgVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossUserOrgByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getBossUserOrgByPage_argsTupleScheme getScheme() {
        return new getBossUserOrgByPage_argsTupleScheme();
      }
    }

    private static class getBossUserOrgByPage_argsTupleScheme extends TupleScheme<getBossUserOrgByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossUserOrgByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetBossUserOrgVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetBossUserOrgVo()) {
          struct.bossUserOrgVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossUserOrgByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossUserOrgVo = new com.froad.thrift.vo.BossUserOrgVo();
          struct.bossUserOrgVo.read(iprot);
          struct.setBossUserOrgVoIsSet(true);
        }
      }
    }

  }

  public static class getBossUserOrgByPage_result implements org.apache.thrift.TBase<getBossUserOrgByPage_result, getBossUserOrgByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossUserOrgByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossUserOrgByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossUserOrgByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossUserOrgByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BossUserOrgPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossUserOrgPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossUserOrgByPage_result.class, metaDataMap);
    }

    public getBossUserOrgByPage_result() {
    }

    public getBossUserOrgByPage_result(
      com.froad.thrift.vo.BossUserOrgPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossUserOrgByPage_result(getBossUserOrgByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BossUserOrgPageVoRes(other.success);
      }
    }

    public getBossUserOrgByPage_result deepCopy() {
      return new getBossUserOrgByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BossUserOrgPageVoRes getSuccess() {
      return this.success;
    }

    public getBossUserOrgByPage_result setSuccess(com.froad.thrift.vo.BossUserOrgPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BossUserOrgPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossUserOrgByPage_result)
        return this.equals((getBossUserOrgByPage_result)that);
      return false;
    }

    public boolean equals(getBossUserOrgByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossUserOrgByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossUserOrgByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossUserOrgByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getBossUserOrgByPage_resultStandardScheme getScheme() {
        return new getBossUserOrgByPage_resultStandardScheme();
      }
    }

    private static class getBossUserOrgByPage_resultStandardScheme extends StandardScheme<getBossUserOrgByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossUserOrgByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BossUserOrgPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossUserOrgByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossUserOrgByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getBossUserOrgByPage_resultTupleScheme getScheme() {
        return new getBossUserOrgByPage_resultTupleScheme();
      }
    }

    private static class getBossUserOrgByPage_resultTupleScheme extends TupleScheme<getBossUserOrgByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossUserOrgByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossUserOrgByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BossUserOrgPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
