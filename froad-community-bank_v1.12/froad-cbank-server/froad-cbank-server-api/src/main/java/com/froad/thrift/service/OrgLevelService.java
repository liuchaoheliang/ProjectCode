/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OrgLevelService {

  /**
   * 银行联合登录-机构级别角色关系服务接口
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 OrgLevel
     * @param orgLevel
     * @return long    主键ID(异常及错误返回-1)
     * 
     * @param originVo
     * @param orgLevelVo
     */
    public com.froad.thrift.vo.CommonAddVoRes addOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException;

    /**
     * 删除 OrgLevel
     * @param orgLevel
     * @return boolean
     * 
     * @param originVo
     * @param orgLevelVo
     */
    public com.froad.thrift.vo.ResultVo deleteOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException;

    /**
     * 修改 OrgLevel
     * @param orgLevel
     * @return boolean
     * 
     * @param originVo
     * @param orgLevelVo
     */
    public com.froad.thrift.vo.ResultVo updateOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException;

    /**
     * 查询 OrgLevel
     * @param orgLevel
     * @return List<OrgLevelVo>
     * 
     * @param orgLevelVo
     */
    public List<com.froad.thrift.vo.OrgLevelVo> getOrgLevel(com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 OrgLevel
     * @param orgLevel
     * @return OrgLevelPageVoRes
     * 
     * @param page
     * @param orgLevelVo
     */
    public com.froad.thrift.vo.OrgLevelPageVoRes getOrgLevelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgLevel(com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgLevelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      send_addOrgLevel(originVo, orgLevelVo);
      return recv_addOrgLevel();
    }

    public void send_addOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      addOrgLevel_args args = new addOrgLevel_args();
      args.setOriginVo(originVo);
      args.setOrgLevelVo(orgLevelVo);
      sendBase("addOrgLevel", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addOrgLevel() throws org.apache.thrift.TException
    {
      addOrgLevel_result result = new addOrgLevel_result();
      receiveBase(result, "addOrgLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrgLevel failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      send_deleteOrgLevel(originVo, orgLevelVo);
      return recv_deleteOrgLevel();
    }

    public void send_deleteOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      deleteOrgLevel_args args = new deleteOrgLevel_args();
      args.setOriginVo(originVo);
      args.setOrgLevelVo(orgLevelVo);
      sendBase("deleteOrgLevel", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteOrgLevel() throws org.apache.thrift.TException
    {
      deleteOrgLevel_result result = new deleteOrgLevel_result();
      receiveBase(result, "deleteOrgLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOrgLevel failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      send_updateOrgLevel(originVo, orgLevelVo);
      return recv_updateOrgLevel();
    }

    public void send_updateOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      updateOrgLevel_args args = new updateOrgLevel_args();
      args.setOriginVo(originVo);
      args.setOrgLevelVo(orgLevelVo);
      sendBase("updateOrgLevel", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateOrgLevel() throws org.apache.thrift.TException
    {
      updateOrgLevel_result result = new updateOrgLevel_result();
      receiveBase(result, "updateOrgLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOrgLevel failed: unknown result");
    }

    public List<com.froad.thrift.vo.OrgLevelVo> getOrgLevel(com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      send_getOrgLevel(orgLevelVo);
      return recv_getOrgLevel();
    }

    public void send_getOrgLevel(com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      getOrgLevel_args args = new getOrgLevel_args();
      args.setOrgLevelVo(orgLevelVo);
      sendBase("getOrgLevel", args);
    }

    public List<com.froad.thrift.vo.OrgLevelVo> recv_getOrgLevel() throws org.apache.thrift.TException
    {
      getOrgLevel_result result = new getOrgLevel_result();
      receiveBase(result, "getOrgLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgLevel failed: unknown result");
    }

    public com.froad.thrift.vo.OrgLevelPageVoRes getOrgLevelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      send_getOrgLevelByPage(page, orgLevelVo);
      return recv_getOrgLevelByPage();
    }

    public void send_getOrgLevelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo) throws org.apache.thrift.TException
    {
      getOrgLevelByPage_args args = new getOrgLevelByPage_args();
      args.setPage(page);
      args.setOrgLevelVo(orgLevelVo);
      sendBase("getOrgLevelByPage", args);
    }

    public com.froad.thrift.vo.OrgLevelPageVoRes recv_getOrgLevelByPage() throws org.apache.thrift.TException
    {
      getOrgLevelByPage_result result = new getOrgLevelByPage_result();
      receiveBase(result, "getOrgLevelByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgLevelByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrgLevel_call method_call = new addOrgLevel_call(originVo, orgLevelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrgLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OrgLevelVo orgLevelVo;
      public addOrgLevel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.orgLevelVo = orgLevelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrgLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrgLevel_args args = new addOrgLevel_args();
        args.setOriginVo(originVo);
        args.setOrgLevelVo(orgLevelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrgLevel();
      }
    }

    public void deleteOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOrgLevel_call method_call = new deleteOrgLevel_call(originVo, orgLevelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOrgLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OrgLevelVo orgLevelVo;
      public deleteOrgLevel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.orgLevelVo = orgLevelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOrgLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOrgLevel_args args = new deleteOrgLevel_args();
        args.setOriginVo(originVo);
        args.setOrgLevelVo(orgLevelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOrgLevel();
      }
    }

    public void updateOrgLevel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrgLevel_call method_call = new updateOrgLevel_call(originVo, orgLevelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrgLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OrgLevelVo orgLevelVo;
      public updateOrgLevel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.orgLevelVo = orgLevelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrgLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrgLevel_args args = new updateOrgLevel_args();
        args.setOriginVo(originVo);
        args.setOrgLevelVo(orgLevelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOrgLevel();
      }
    }

    public void getOrgLevel(com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgLevel_call method_call = new getOrgLevel_call(orgLevelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OrgLevelVo orgLevelVo;
      public getOrgLevel_call(com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgLevelVo = orgLevelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgLevel_args args = new getOrgLevel_args();
        args.setOrgLevelVo(orgLevelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OrgLevelVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgLevel();
      }
    }

    public void getOrgLevelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgLevelByPage_call method_call = new getOrgLevelByPage_call(page, orgLevelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgLevelByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OrgLevelVo orgLevelVo;
      public getOrgLevelByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OrgLevelVo orgLevelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.orgLevelVo = orgLevelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgLevelByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgLevelByPage_args args = new getOrgLevelByPage_args();
        args.setPage(page);
        args.setOrgLevelVo(orgLevelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OrgLevelPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgLevelByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOrgLevel", new addOrgLevel());
      processMap.put("deleteOrgLevel", new deleteOrgLevel());
      processMap.put("updateOrgLevel", new updateOrgLevel());
      processMap.put("getOrgLevel", new getOrgLevel());
      processMap.put("getOrgLevelByPage", new getOrgLevelByPage());
      return processMap;
    }

    public static class addOrgLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrgLevel_args> {
      public addOrgLevel() {
        super("addOrgLevel");
      }

      public addOrgLevel_args getEmptyArgsInstance() {
        return new addOrgLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrgLevel_result getResult(I iface, addOrgLevel_args args) throws org.apache.thrift.TException {
        addOrgLevel_result result = new addOrgLevel_result();
        result.success = iface.addOrgLevel(args.originVo, args.orgLevelVo);
        return result;
      }
    }

    public static class deleteOrgLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOrgLevel_args> {
      public deleteOrgLevel() {
        super("deleteOrgLevel");
      }

      public deleteOrgLevel_args getEmptyArgsInstance() {
        return new deleteOrgLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOrgLevel_result getResult(I iface, deleteOrgLevel_args args) throws org.apache.thrift.TException {
        deleteOrgLevel_result result = new deleteOrgLevel_result();
        result.success = iface.deleteOrgLevel(args.originVo, args.orgLevelVo);
        return result;
      }
    }

    public static class updateOrgLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrgLevel_args> {
      public updateOrgLevel() {
        super("updateOrgLevel");
      }

      public updateOrgLevel_args getEmptyArgsInstance() {
        return new updateOrgLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrgLevel_result getResult(I iface, updateOrgLevel_args args) throws org.apache.thrift.TException {
        updateOrgLevel_result result = new updateOrgLevel_result();
        result.success = iface.updateOrgLevel(args.originVo, args.orgLevelVo);
        return result;
      }
    }

    public static class getOrgLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgLevel_args> {
      public getOrgLevel() {
        super("getOrgLevel");
      }

      public getOrgLevel_args getEmptyArgsInstance() {
        return new getOrgLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgLevel_result getResult(I iface, getOrgLevel_args args) throws org.apache.thrift.TException {
        getOrgLevel_result result = new getOrgLevel_result();
        result.success = iface.getOrgLevel(args.orgLevelVo);
        return result;
      }
    }

    public static class getOrgLevelByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgLevelByPage_args> {
      public getOrgLevelByPage() {
        super("getOrgLevelByPage");
      }

      public getOrgLevelByPage_args getEmptyArgsInstance() {
        return new getOrgLevelByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgLevelByPage_result getResult(I iface, getOrgLevelByPage_args args) throws org.apache.thrift.TException {
        getOrgLevelByPage_result result = new getOrgLevelByPage_result();
        result.success = iface.getOrgLevelByPage(args.page, args.orgLevelVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOrgLevel", new addOrgLevel());
      processMap.put("deleteOrgLevel", new deleteOrgLevel());
      processMap.put("updateOrgLevel", new updateOrgLevel());
      processMap.put("getOrgLevel", new getOrgLevel());
      processMap.put("getOrgLevelByPage", new getOrgLevelByPage());
      return processMap;
    }

    public static class addOrgLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrgLevel_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addOrgLevel() {
        super("addOrgLevel");
      }

      public addOrgLevel_args getEmptyArgsInstance() {
        return new addOrgLevel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addOrgLevel_result result = new addOrgLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrgLevel_result result = new addOrgLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrgLevel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addOrgLevel(args.originVo, args.orgLevelVo,resultHandler);
      }
    }

    public static class deleteOrgLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOrgLevel_args, com.froad.thrift.vo.ResultVo> {
      public deleteOrgLevel() {
        super("deleteOrgLevel");
      }

      public deleteOrgLevel_args getEmptyArgsInstance() {
        return new deleteOrgLevel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteOrgLevel_result result = new deleteOrgLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOrgLevel_result result = new deleteOrgLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOrgLevel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteOrgLevel(args.originVo, args.orgLevelVo,resultHandler);
      }
    }

    public static class updateOrgLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOrgLevel_args, com.froad.thrift.vo.ResultVo> {
      public updateOrgLevel() {
        super("updateOrgLevel");
      }

      public updateOrgLevel_args getEmptyArgsInstance() {
        return new updateOrgLevel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateOrgLevel_result result = new updateOrgLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOrgLevel_result result = new updateOrgLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOrgLevel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateOrgLevel(args.originVo, args.orgLevelVo,resultHandler);
      }
    }

    public static class getOrgLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgLevel_args, List<com.froad.thrift.vo.OrgLevelVo>> {
      public getOrgLevel() {
        super("getOrgLevel");
      }

      public getOrgLevel_args getEmptyArgsInstance() {
        return new getOrgLevel_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OrgLevelVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OrgLevelVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OrgLevelVo> o) {
            getOrgLevel_result result = new getOrgLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgLevel_result result = new getOrgLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgLevel_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OrgLevelVo>> resultHandler) throws TException {
        iface.getOrgLevel(args.orgLevelVo,resultHandler);
      }
    }

    public static class getOrgLevelByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgLevelByPage_args, com.froad.thrift.vo.OrgLevelPageVoRes> {
      public getOrgLevelByPage() {
        super("getOrgLevelByPage");
      }

      public getOrgLevelByPage_args getEmptyArgsInstance() {
        return new getOrgLevelByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OrgLevelPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OrgLevelPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OrgLevelPageVoRes o) {
            getOrgLevelByPage_result result = new getOrgLevelByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgLevelByPage_result result = new getOrgLevelByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgLevelByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OrgLevelPageVoRes> resultHandler) throws TException {
        iface.getOrgLevelByPage(args.page, args.orgLevelVo,resultHandler);
      }
    }

  }

  public static class addOrgLevel_args implements org.apache.thrift.TBase<addOrgLevel_args, addOrgLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrgLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrgLevel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_LEVEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrgLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrgLevel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OrgLevelVo orgLevelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ORG_LEVEL_VO((short)2, "orgLevelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ORG_LEVEL_VO
            return ORG_LEVEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ORG_LEVEL_VO, new org.apache.thrift.meta_data.FieldMetaData("orgLevelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrgLevel_args.class, metaDataMap);
    }

    public addOrgLevel_args() {
    }

    public addOrgLevel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OrgLevelVo orgLevelVo)
    {
      this();
      this.originVo = originVo;
      this.orgLevelVo = orgLevelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrgLevel_args(addOrgLevel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOrgLevelVo()) {
        this.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo(other.orgLevelVo);
      }
    }

    public addOrgLevel_args deepCopy() {
      return new addOrgLevel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.orgLevelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOrgLevel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OrgLevelVo getOrgLevelVo() {
      return this.orgLevelVo;
    }

    public addOrgLevel_args setOrgLevelVo(com.froad.thrift.vo.OrgLevelVo orgLevelVo) {
      this.orgLevelVo = orgLevelVo;
      return this;
    }

    public void unsetOrgLevelVo() {
      this.orgLevelVo = null;
    }

    /** Returns true if field orgLevelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgLevelVo() {
      return this.orgLevelVo != null;
    }

    public void setOrgLevelVoIsSet(boolean value) {
      if (!value) {
        this.orgLevelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ORG_LEVEL_VO:
        if (value == null) {
          unsetOrgLevelVo();
        } else {
          setOrgLevelVo((com.froad.thrift.vo.OrgLevelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ORG_LEVEL_VO:
        return getOrgLevelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ORG_LEVEL_VO:
        return isSetOrgLevelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrgLevel_args)
        return this.equals((addOrgLevel_args)that);
      return false;
    }

    public boolean equals(addOrgLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_orgLevelVo = true && this.isSetOrgLevelVo();
      boolean that_present_orgLevelVo = true && that.isSetOrgLevelVo();
      if (this_present_orgLevelVo || that_present_orgLevelVo) {
        if (!(this_present_orgLevelVo && that_present_orgLevelVo))
          return false;
        if (!this.orgLevelVo.equals(that.orgLevelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_orgLevelVo = true && (isSetOrgLevelVo());
      list.add(present_orgLevelVo);
      if (present_orgLevelVo)
        list.add(orgLevelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrgLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgLevelVo()).compareTo(other.isSetOrgLevelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgLevelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevelVo, other.orgLevelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrgLevel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgLevelVo:");
      if (this.orgLevelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (orgLevelVo != null) {
        orgLevelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrgLevel_argsStandardSchemeFactory implements SchemeFactory {
      public addOrgLevel_argsStandardScheme getScheme() {
        return new addOrgLevel_argsStandardScheme();
      }
    }

    private static class addOrgLevel_argsStandardScheme extends StandardScheme<addOrgLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrgLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_LEVEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
                struct.orgLevelVo.read(iprot);
                struct.setOrgLevelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrgLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orgLevelVo != null) {
          oprot.writeFieldBegin(ORG_LEVEL_VO_FIELD_DESC);
          struct.orgLevelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrgLevel_argsTupleSchemeFactory implements SchemeFactory {
      public addOrgLevel_argsTupleScheme getScheme() {
        return new addOrgLevel_argsTupleScheme();
      }
    }

    private static class addOrgLevel_argsTupleScheme extends TupleScheme<addOrgLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOrgLevelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOrgLevelVo()) {
          struct.orgLevelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
          struct.orgLevelVo.read(iprot);
          struct.setOrgLevelVoIsSet(true);
        }
      }
    }

  }

  public static class addOrgLevel_result implements org.apache.thrift.TBase<addOrgLevel_result, addOrgLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrgLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrgLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrgLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrgLevel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrgLevel_result.class, metaDataMap);
    }

    public addOrgLevel_result() {
    }

    public addOrgLevel_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrgLevel_result(addOrgLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addOrgLevel_result deepCopy() {
      return new addOrgLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addOrgLevel_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrgLevel_result)
        return this.equals((addOrgLevel_result)that);
      return false;
    }

    public boolean equals(addOrgLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrgLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrgLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrgLevel_resultStandardSchemeFactory implements SchemeFactory {
      public addOrgLevel_resultStandardScheme getScheme() {
        return new addOrgLevel_resultStandardScheme();
      }
    }

    private static class addOrgLevel_resultStandardScheme extends StandardScheme<addOrgLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrgLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrgLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrgLevel_resultTupleSchemeFactory implements SchemeFactory {
      public addOrgLevel_resultTupleScheme getScheme() {
        return new addOrgLevel_resultTupleScheme();
      }
    }

    private static class addOrgLevel_resultTupleScheme extends TupleScheme<addOrgLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOrgLevel_args implements org.apache.thrift.TBase<deleteOrgLevel_args, deleteOrgLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrgLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrgLevel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_LEVEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrgLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrgLevel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OrgLevelVo orgLevelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ORG_LEVEL_VO((short)2, "orgLevelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ORG_LEVEL_VO
            return ORG_LEVEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ORG_LEVEL_VO, new org.apache.thrift.meta_data.FieldMetaData("orgLevelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrgLevel_args.class, metaDataMap);
    }

    public deleteOrgLevel_args() {
    }

    public deleteOrgLevel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OrgLevelVo orgLevelVo)
    {
      this();
      this.originVo = originVo;
      this.orgLevelVo = orgLevelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrgLevel_args(deleteOrgLevel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOrgLevelVo()) {
        this.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo(other.orgLevelVo);
      }
    }

    public deleteOrgLevel_args deepCopy() {
      return new deleteOrgLevel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.orgLevelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteOrgLevel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OrgLevelVo getOrgLevelVo() {
      return this.orgLevelVo;
    }

    public deleteOrgLevel_args setOrgLevelVo(com.froad.thrift.vo.OrgLevelVo orgLevelVo) {
      this.orgLevelVo = orgLevelVo;
      return this;
    }

    public void unsetOrgLevelVo() {
      this.orgLevelVo = null;
    }

    /** Returns true if field orgLevelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgLevelVo() {
      return this.orgLevelVo != null;
    }

    public void setOrgLevelVoIsSet(boolean value) {
      if (!value) {
        this.orgLevelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ORG_LEVEL_VO:
        if (value == null) {
          unsetOrgLevelVo();
        } else {
          setOrgLevelVo((com.froad.thrift.vo.OrgLevelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ORG_LEVEL_VO:
        return getOrgLevelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ORG_LEVEL_VO:
        return isSetOrgLevelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrgLevel_args)
        return this.equals((deleteOrgLevel_args)that);
      return false;
    }

    public boolean equals(deleteOrgLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_orgLevelVo = true && this.isSetOrgLevelVo();
      boolean that_present_orgLevelVo = true && that.isSetOrgLevelVo();
      if (this_present_orgLevelVo || that_present_orgLevelVo) {
        if (!(this_present_orgLevelVo && that_present_orgLevelVo))
          return false;
        if (!this.orgLevelVo.equals(that.orgLevelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_orgLevelVo = true && (isSetOrgLevelVo());
      list.add(present_orgLevelVo);
      if (present_orgLevelVo)
        list.add(orgLevelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrgLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgLevelVo()).compareTo(other.isSetOrgLevelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgLevelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevelVo, other.orgLevelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrgLevel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgLevelVo:");
      if (this.orgLevelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (orgLevelVo != null) {
        orgLevelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrgLevel_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOrgLevel_argsStandardScheme getScheme() {
        return new deleteOrgLevel_argsStandardScheme();
      }
    }

    private static class deleteOrgLevel_argsStandardScheme extends StandardScheme<deleteOrgLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrgLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_LEVEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
                struct.orgLevelVo.read(iprot);
                struct.setOrgLevelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrgLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orgLevelVo != null) {
          oprot.writeFieldBegin(ORG_LEVEL_VO_FIELD_DESC);
          struct.orgLevelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrgLevel_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOrgLevel_argsTupleScheme getScheme() {
        return new deleteOrgLevel_argsTupleScheme();
      }
    }

    private static class deleteOrgLevel_argsTupleScheme extends TupleScheme<deleteOrgLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOrgLevelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOrgLevelVo()) {
          struct.orgLevelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
          struct.orgLevelVo.read(iprot);
          struct.setOrgLevelVoIsSet(true);
        }
      }
    }

  }

  public static class deleteOrgLevel_result implements org.apache.thrift.TBase<deleteOrgLevel_result, deleteOrgLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrgLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrgLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrgLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrgLevel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrgLevel_result.class, metaDataMap);
    }

    public deleteOrgLevel_result() {
    }

    public deleteOrgLevel_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrgLevel_result(deleteOrgLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteOrgLevel_result deepCopy() {
      return new deleteOrgLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteOrgLevel_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrgLevel_result)
        return this.equals((deleteOrgLevel_result)that);
      return false;
    }

    public boolean equals(deleteOrgLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrgLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrgLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrgLevel_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOrgLevel_resultStandardScheme getScheme() {
        return new deleteOrgLevel_resultStandardScheme();
      }
    }

    private static class deleteOrgLevel_resultStandardScheme extends StandardScheme<deleteOrgLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrgLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrgLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrgLevel_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOrgLevel_resultTupleScheme getScheme() {
        return new deleteOrgLevel_resultTupleScheme();
      }
    }

    private static class deleteOrgLevel_resultTupleScheme extends TupleScheme<deleteOrgLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOrgLevel_args implements org.apache.thrift.TBase<updateOrgLevel_args, updateOrgLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrgLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrgLevel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_LEVEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrgLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrgLevel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OrgLevelVo orgLevelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ORG_LEVEL_VO((short)2, "orgLevelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ORG_LEVEL_VO
            return ORG_LEVEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ORG_LEVEL_VO, new org.apache.thrift.meta_data.FieldMetaData("orgLevelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrgLevel_args.class, metaDataMap);
    }

    public updateOrgLevel_args() {
    }

    public updateOrgLevel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OrgLevelVo orgLevelVo)
    {
      this();
      this.originVo = originVo;
      this.orgLevelVo = orgLevelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrgLevel_args(updateOrgLevel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOrgLevelVo()) {
        this.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo(other.orgLevelVo);
      }
    }

    public updateOrgLevel_args deepCopy() {
      return new updateOrgLevel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.orgLevelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateOrgLevel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OrgLevelVo getOrgLevelVo() {
      return this.orgLevelVo;
    }

    public updateOrgLevel_args setOrgLevelVo(com.froad.thrift.vo.OrgLevelVo orgLevelVo) {
      this.orgLevelVo = orgLevelVo;
      return this;
    }

    public void unsetOrgLevelVo() {
      this.orgLevelVo = null;
    }

    /** Returns true if field orgLevelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgLevelVo() {
      return this.orgLevelVo != null;
    }

    public void setOrgLevelVoIsSet(boolean value) {
      if (!value) {
        this.orgLevelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ORG_LEVEL_VO:
        if (value == null) {
          unsetOrgLevelVo();
        } else {
          setOrgLevelVo((com.froad.thrift.vo.OrgLevelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ORG_LEVEL_VO:
        return getOrgLevelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ORG_LEVEL_VO:
        return isSetOrgLevelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrgLevel_args)
        return this.equals((updateOrgLevel_args)that);
      return false;
    }

    public boolean equals(updateOrgLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_orgLevelVo = true && this.isSetOrgLevelVo();
      boolean that_present_orgLevelVo = true && that.isSetOrgLevelVo();
      if (this_present_orgLevelVo || that_present_orgLevelVo) {
        if (!(this_present_orgLevelVo && that_present_orgLevelVo))
          return false;
        if (!this.orgLevelVo.equals(that.orgLevelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_orgLevelVo = true && (isSetOrgLevelVo());
      list.add(present_orgLevelVo);
      if (present_orgLevelVo)
        list.add(orgLevelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrgLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgLevelVo()).compareTo(other.isSetOrgLevelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgLevelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevelVo, other.orgLevelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrgLevel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgLevelVo:");
      if (this.orgLevelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (orgLevelVo != null) {
        orgLevelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrgLevel_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrgLevel_argsStandardScheme getScheme() {
        return new updateOrgLevel_argsStandardScheme();
      }
    }

    private static class updateOrgLevel_argsStandardScheme extends StandardScheme<updateOrgLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrgLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_LEVEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
                struct.orgLevelVo.read(iprot);
                struct.setOrgLevelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrgLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orgLevelVo != null) {
          oprot.writeFieldBegin(ORG_LEVEL_VO_FIELD_DESC);
          struct.orgLevelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrgLevel_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrgLevel_argsTupleScheme getScheme() {
        return new updateOrgLevel_argsTupleScheme();
      }
    }

    private static class updateOrgLevel_argsTupleScheme extends TupleScheme<updateOrgLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOrgLevelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOrgLevelVo()) {
          struct.orgLevelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
          struct.orgLevelVo.read(iprot);
          struct.setOrgLevelVoIsSet(true);
        }
      }
    }

  }

  public static class updateOrgLevel_result implements org.apache.thrift.TBase<updateOrgLevel_result, updateOrgLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrgLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrgLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrgLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrgLevel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrgLevel_result.class, metaDataMap);
    }

    public updateOrgLevel_result() {
    }

    public updateOrgLevel_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrgLevel_result(updateOrgLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateOrgLevel_result deepCopy() {
      return new updateOrgLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateOrgLevel_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrgLevel_result)
        return this.equals((updateOrgLevel_result)that);
      return false;
    }

    public boolean equals(updateOrgLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrgLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrgLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrgLevel_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrgLevel_resultStandardScheme getScheme() {
        return new updateOrgLevel_resultStandardScheme();
      }
    }

    private static class updateOrgLevel_resultStandardScheme extends StandardScheme<updateOrgLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrgLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrgLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrgLevel_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrgLevel_resultTupleScheme getScheme() {
        return new updateOrgLevel_resultTupleScheme();
      }
    }

    private static class updateOrgLevel_resultTupleScheme extends TupleScheme<updateOrgLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgLevel_args implements org.apache.thrift.TBase<getOrgLevel_args, getOrgLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLevel_args");

    private static final org.apache.thrift.protocol.TField ORG_LEVEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevelVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLevel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OrgLevelVo orgLevelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_LEVEL_VO((short)1, "orgLevelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_LEVEL_VO
            return ORG_LEVEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_LEVEL_VO, new org.apache.thrift.meta_data.FieldMetaData("orgLevelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLevel_args.class, metaDataMap);
    }

    public getOrgLevel_args() {
    }

    public getOrgLevel_args(
      com.froad.thrift.vo.OrgLevelVo orgLevelVo)
    {
      this();
      this.orgLevelVo = orgLevelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLevel_args(getOrgLevel_args other) {
      if (other.isSetOrgLevelVo()) {
        this.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo(other.orgLevelVo);
      }
    }

    public getOrgLevel_args deepCopy() {
      return new getOrgLevel_args(this);
    }

    @Override
    public void clear() {
      this.orgLevelVo = null;
    }

    public com.froad.thrift.vo.OrgLevelVo getOrgLevelVo() {
      return this.orgLevelVo;
    }

    public getOrgLevel_args setOrgLevelVo(com.froad.thrift.vo.OrgLevelVo orgLevelVo) {
      this.orgLevelVo = orgLevelVo;
      return this;
    }

    public void unsetOrgLevelVo() {
      this.orgLevelVo = null;
    }

    /** Returns true if field orgLevelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgLevelVo() {
      return this.orgLevelVo != null;
    }

    public void setOrgLevelVoIsSet(boolean value) {
      if (!value) {
        this.orgLevelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_LEVEL_VO:
        if (value == null) {
          unsetOrgLevelVo();
        } else {
          setOrgLevelVo((com.froad.thrift.vo.OrgLevelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_LEVEL_VO:
        return getOrgLevelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_LEVEL_VO:
        return isSetOrgLevelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLevel_args)
        return this.equals((getOrgLevel_args)that);
      return false;
    }

    public boolean equals(getOrgLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_orgLevelVo = true && this.isSetOrgLevelVo();
      boolean that_present_orgLevelVo = true && that.isSetOrgLevelVo();
      if (this_present_orgLevelVo || that_present_orgLevelVo) {
        if (!(this_present_orgLevelVo && that_present_orgLevelVo))
          return false;
        if (!this.orgLevelVo.equals(that.orgLevelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgLevelVo = true && (isSetOrgLevelVo());
      list.add(present_orgLevelVo);
      if (present_orgLevelVo)
        list.add(orgLevelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgLevelVo()).compareTo(other.isSetOrgLevelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgLevelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevelVo, other.orgLevelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLevel_args(");
      boolean first = true;

      sb.append("orgLevelVo:");
      if (this.orgLevelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (orgLevelVo != null) {
        orgLevelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLevel_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgLevel_argsStandardScheme getScheme() {
        return new getOrgLevel_argsStandardScheme();
      }
    }

    private static class getOrgLevel_argsStandardScheme extends StandardScheme<getOrgLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_LEVEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
                struct.orgLevelVo.read(iprot);
                struct.setOrgLevelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgLevelVo != null) {
          oprot.writeFieldBegin(ORG_LEVEL_VO_FIELD_DESC);
          struct.orgLevelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLevel_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgLevel_argsTupleScheme getScheme() {
        return new getOrgLevel_argsTupleScheme();
      }
    }

    private static class getOrgLevel_argsTupleScheme extends TupleScheme<getOrgLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgLevelVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgLevelVo()) {
          struct.orgLevelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
          struct.orgLevelVo.read(iprot);
          struct.setOrgLevelVoIsSet(true);
        }
      }
    }

  }

  public static class getOrgLevel_result implements org.apache.thrift.TBase<getOrgLevel_result, getOrgLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLevel_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OrgLevelVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLevel_result.class, metaDataMap);
    }

    public getOrgLevel_result() {
    }

    public getOrgLevel_result(
      List<com.froad.thrift.vo.OrgLevelVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLevel_result(getOrgLevel_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OrgLevelVo> __this__success = new ArrayList<com.froad.thrift.vo.OrgLevelVo>(other.success.size());
        for (com.froad.thrift.vo.OrgLevelVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OrgLevelVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOrgLevel_result deepCopy() {
      return new getOrgLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OrgLevelVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OrgLevelVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OrgLevelVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OrgLevelVo> getSuccess() {
      return this.success;
    }

    public getOrgLevel_result setSuccess(List<com.froad.thrift.vo.OrgLevelVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OrgLevelVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLevel_result)
        return this.equals((getOrgLevel_result)that);
      return false;
    }

    public boolean equals(getOrgLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLevel_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgLevel_resultStandardScheme getScheme() {
        return new getOrgLevel_resultStandardScheme();
      }
    }

    private static class getOrgLevel_resultStandardScheme extends StandardScheme<getOrgLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OrgLevelVo>(_list248.size);
                  com.froad.thrift.vo.OrgLevelVo _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new com.froad.thrift.vo.OrgLevelVo();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OrgLevelVo _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLevel_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgLevel_resultTupleScheme getScheme() {
        return new getOrgLevel_resultTupleScheme();
      }
    }

    private static class getOrgLevel_resultTupleScheme extends TupleScheme<getOrgLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OrgLevelVo _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OrgLevelVo>(_list253.size);
            com.froad.thrift.vo.OrgLevelVo _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new com.froad.thrift.vo.OrgLevelVo();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgLevelByPage_args implements org.apache.thrift.TBase<getOrgLevelByPage_args, getOrgLevelByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLevelByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLevelByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_LEVEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLevelByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLevelByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OrgLevelVo orgLevelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      ORG_LEVEL_VO((short)2, "orgLevelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // ORG_LEVEL_VO
            return ORG_LEVEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.ORG_LEVEL_VO, new org.apache.thrift.meta_data.FieldMetaData("orgLevelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLevelByPage_args.class, metaDataMap);
    }

    public getOrgLevelByPage_args() {
    }

    public getOrgLevelByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OrgLevelVo orgLevelVo)
    {
      this();
      this.page = page;
      this.orgLevelVo = orgLevelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLevelByPage_args(getOrgLevelByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOrgLevelVo()) {
        this.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo(other.orgLevelVo);
      }
    }

    public getOrgLevelByPage_args deepCopy() {
      return new getOrgLevelByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.orgLevelVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOrgLevelByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OrgLevelVo getOrgLevelVo() {
      return this.orgLevelVo;
    }

    public getOrgLevelByPage_args setOrgLevelVo(com.froad.thrift.vo.OrgLevelVo orgLevelVo) {
      this.orgLevelVo = orgLevelVo;
      return this;
    }

    public void unsetOrgLevelVo() {
      this.orgLevelVo = null;
    }

    /** Returns true if field orgLevelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgLevelVo() {
      return this.orgLevelVo != null;
    }

    public void setOrgLevelVoIsSet(boolean value) {
      if (!value) {
        this.orgLevelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case ORG_LEVEL_VO:
        if (value == null) {
          unsetOrgLevelVo();
        } else {
          setOrgLevelVo((com.froad.thrift.vo.OrgLevelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case ORG_LEVEL_VO:
        return getOrgLevelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case ORG_LEVEL_VO:
        return isSetOrgLevelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLevelByPage_args)
        return this.equals((getOrgLevelByPage_args)that);
      return false;
    }

    public boolean equals(getOrgLevelByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_orgLevelVo = true && this.isSetOrgLevelVo();
      boolean that_present_orgLevelVo = true && that.isSetOrgLevelVo();
      if (this_present_orgLevelVo || that_present_orgLevelVo) {
        if (!(this_present_orgLevelVo && that_present_orgLevelVo))
          return false;
        if (!this.orgLevelVo.equals(that.orgLevelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_orgLevelVo = true && (isSetOrgLevelVo());
      list.add(present_orgLevelVo);
      if (present_orgLevelVo)
        list.add(orgLevelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLevelByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgLevelVo()).compareTo(other.isSetOrgLevelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgLevelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevelVo, other.orgLevelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLevelByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgLevelVo:");
      if (this.orgLevelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (orgLevelVo != null) {
        orgLevelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLevelByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgLevelByPage_argsStandardScheme getScheme() {
        return new getOrgLevelByPage_argsStandardScheme();
      }
    }

    private static class getOrgLevelByPage_argsStandardScheme extends StandardScheme<getOrgLevelByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLevelByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_LEVEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
                struct.orgLevelVo.read(iprot);
                struct.setOrgLevelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLevelByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orgLevelVo != null) {
          oprot.writeFieldBegin(ORG_LEVEL_VO_FIELD_DESC);
          struct.orgLevelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLevelByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgLevelByPage_argsTupleScheme getScheme() {
        return new getOrgLevelByPage_argsTupleScheme();
      }
    }

    private static class getOrgLevelByPage_argsTupleScheme extends TupleScheme<getOrgLevelByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLevelByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOrgLevelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOrgLevelVo()) {
          struct.orgLevelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLevelByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgLevelVo = new com.froad.thrift.vo.OrgLevelVo();
          struct.orgLevelVo.read(iprot);
          struct.setOrgLevelVoIsSet(true);
        }
      }
    }

  }

  public static class getOrgLevelByPage_result implements org.apache.thrift.TBase<getOrgLevelByPage_result, getOrgLevelByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgLevelByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgLevelByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgLevelByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgLevelByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OrgLevelPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgLevelPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgLevelByPage_result.class, metaDataMap);
    }

    public getOrgLevelByPage_result() {
    }

    public getOrgLevelByPage_result(
      com.froad.thrift.vo.OrgLevelPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgLevelByPage_result(getOrgLevelByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OrgLevelPageVoRes(other.success);
      }
    }

    public getOrgLevelByPage_result deepCopy() {
      return new getOrgLevelByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OrgLevelPageVoRes getSuccess() {
      return this.success;
    }

    public getOrgLevelByPage_result setSuccess(com.froad.thrift.vo.OrgLevelPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OrgLevelPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgLevelByPage_result)
        return this.equals((getOrgLevelByPage_result)that);
      return false;
    }

    public boolean equals(getOrgLevelByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgLevelByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgLevelByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgLevelByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgLevelByPage_resultStandardScheme getScheme() {
        return new getOrgLevelByPage_resultStandardScheme();
      }
    }

    private static class getOrgLevelByPage_resultStandardScheme extends StandardScheme<getOrgLevelByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgLevelByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OrgLevelPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgLevelByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgLevelByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgLevelByPage_resultTupleScheme getScheme() {
        return new getOrgLevelByPage_resultTupleScheme();
      }
    }

    private static class getOrgLevelByPage_resultTupleScheme extends TupleScheme<getOrgLevelByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgLevelByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgLevelByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OrgLevelPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
