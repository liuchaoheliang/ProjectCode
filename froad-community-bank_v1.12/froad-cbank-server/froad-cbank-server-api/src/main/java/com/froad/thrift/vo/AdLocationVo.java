/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 广告位详情
 * AdLocationVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AdLocationVo implements org.apache.thrift.TBase<AdLocationVo, AdLocationVo._Fields>, java.io.Serializable, Cloneable, Comparable<AdLocationVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdLocationVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TERMINAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("terminalType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POSITION_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionPage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIZE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeLimit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARAM_ONE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paramOneType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PARAM_TWO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paramTwoType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARAM_THREE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paramThreeType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ENABLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("enableStatus", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdLocationVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdLocationVoTupleSchemeFactory());
  }

  /**
   * 主键ID 广告位ID
   */
  public long id; // optional
  /**
   * 名称
   */
  public String name; // optional
  /**
   * 终端类型
   */
  public String terminalType; // optional
  /**
   * 页面标识
   */
  public String positionPage; // optional
  /**
   * 大小限制-单位为K
   */
  public int sizeLimit; // optional
  /**
   * 宽度
   */
  public int width; // optional
  /**
   * 高度
   */
  public int height; // optional
  /**
   * 第一附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String paramOneType; // optional
  /**
   * 第二附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String paramTwoType; // optional
  /**
   * 第三附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String paramThreeType; // optional
  /**
   * 描述
   */
  public String description; // optional
  /**
   * 启用状态 0-启用 1-禁用 2-新增审核中 3-编辑审核中 4-禁用审核中
   */
  public String enableStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID 广告位ID
     */
    ID((short)1, "id"),
    /**
     * 名称
     */
    NAME((short)2, "name"),
    /**
     * 终端类型
     */
    TERMINAL_TYPE((short)3, "terminalType"),
    /**
     * 页面标识
     */
    POSITION_PAGE((short)4, "positionPage"),
    /**
     * 大小限制-单位为K
     */
    SIZE_LIMIT((short)5, "sizeLimit"),
    /**
     * 宽度
     */
    WIDTH((short)6, "width"),
    /**
     * 高度
     */
    HEIGHT((short)7, "height"),
    /**
     * 第一附加参数类型 1-地区 2-商户类型 3-商品类型
     */
    PARAM_ONE_TYPE((short)8, "paramOneType"),
    /**
     * 第二附加参数类型 1-地区 2-商户类型 3-商品类型
     */
    PARAM_TWO_TYPE((short)9, "paramTwoType"),
    /**
     * 第三附加参数类型 1-地区 2-商户类型 3-商品类型
     */
    PARAM_THREE_TYPE((short)10, "paramThreeType"),
    /**
     * 描述
     */
    DESCRIPTION((short)11, "description"),
    /**
     * 启用状态 0-启用 1-禁用 2-新增审核中 3-编辑审核中 4-禁用审核中
     */
    ENABLE_STATUS((short)12, "enableStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TERMINAL_TYPE
          return TERMINAL_TYPE;
        case 4: // POSITION_PAGE
          return POSITION_PAGE;
        case 5: // SIZE_LIMIT
          return SIZE_LIMIT;
        case 6: // WIDTH
          return WIDTH;
        case 7: // HEIGHT
          return HEIGHT;
        case 8: // PARAM_ONE_TYPE
          return PARAM_ONE_TYPE;
        case 9: // PARAM_TWO_TYPE
          return PARAM_TWO_TYPE;
        case 10: // PARAM_THREE_TYPE
          return PARAM_THREE_TYPE;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        case 12: // ENABLE_STATUS
          return ENABLE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SIZELIMIT_ISSET_ID = 1;
  private static final int __WIDTH_ISSET_ID = 2;
  private static final int __HEIGHT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.TERMINAL_TYPE,_Fields.POSITION_PAGE,_Fields.SIZE_LIMIT,_Fields.WIDTH,_Fields.HEIGHT,_Fields.PARAM_ONE_TYPE,_Fields.PARAM_TWO_TYPE,_Fields.PARAM_THREE_TYPE,_Fields.DESCRIPTION,_Fields.ENABLE_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TERMINAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("terminalType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_PAGE, new org.apache.thrift.meta_data.FieldMetaData("positionPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("sizeLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM_ONE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paramOneType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM_TWO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paramTwoType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM_THREE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paramThreeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("enableStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdLocationVo.class, metaDataMap);
  }

  public AdLocationVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdLocationVo(AdLocationVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTerminalType()) {
      this.terminalType = other.terminalType;
    }
    if (other.isSetPositionPage()) {
      this.positionPage = other.positionPage;
    }
    this.sizeLimit = other.sizeLimit;
    this.width = other.width;
    this.height = other.height;
    if (other.isSetParamOneType()) {
      this.paramOneType = other.paramOneType;
    }
    if (other.isSetParamTwoType()) {
      this.paramTwoType = other.paramTwoType;
    }
    if (other.isSetParamThreeType()) {
      this.paramThreeType = other.paramThreeType;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetEnableStatus()) {
      this.enableStatus = other.enableStatus;
    }
  }

  public AdLocationVo deepCopy() {
    return new AdLocationVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.terminalType = null;
    this.positionPage = null;
    setSizeLimitIsSet(false);
    this.sizeLimit = 0;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.paramOneType = null;
    this.paramTwoType = null;
    this.paramThreeType = null;
    this.description = null;
    this.enableStatus = null;
  }

  /**
   * 主键ID 广告位ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID 广告位ID
   */
  public AdLocationVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 名称
   */
  public AdLocationVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 终端类型
   */
  public String getTerminalType() {
    return this.terminalType;
  }

  /**
   * 终端类型
   */
  public AdLocationVo setTerminalType(String terminalType) {
    this.terminalType = terminalType;
    return this;
  }

  public void unsetTerminalType() {
    this.terminalType = null;
  }

  /** Returns true if field terminalType is set (has been assigned a value) and false otherwise */
  public boolean isSetTerminalType() {
    return this.terminalType != null;
  }

  public void setTerminalTypeIsSet(boolean value) {
    if (!value) {
      this.terminalType = null;
    }
  }

  /**
   * 页面标识
   */
  public String getPositionPage() {
    return this.positionPage;
  }

  /**
   * 页面标识
   */
  public AdLocationVo setPositionPage(String positionPage) {
    this.positionPage = positionPage;
    return this;
  }

  public void unsetPositionPage() {
    this.positionPage = null;
  }

  /** Returns true if field positionPage is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionPage() {
    return this.positionPage != null;
  }

  public void setPositionPageIsSet(boolean value) {
    if (!value) {
      this.positionPage = null;
    }
  }

  /**
   * 大小限制-单位为K
   */
  public int getSizeLimit() {
    return this.sizeLimit;
  }

  /**
   * 大小限制-单位为K
   */
  public AdLocationVo setSizeLimit(int sizeLimit) {
    this.sizeLimit = sizeLimit;
    setSizeLimitIsSet(true);
    return this;
  }

  public void unsetSizeLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZELIMIT_ISSET_ID);
  }

  /** Returns true if field sizeLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZELIMIT_ISSET_ID);
  }

  public void setSizeLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZELIMIT_ISSET_ID, value);
  }

  /**
   * 宽度
   */
  public int getWidth() {
    return this.width;
  }

  /**
   * 宽度
   */
  public AdLocationVo setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  /**
   * 高度
   */
  public int getHeight() {
    return this.height;
  }

  /**
   * 高度
   */
  public AdLocationVo setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  /**
   * 第一附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String getParamOneType() {
    return this.paramOneType;
  }

  /**
   * 第一附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public AdLocationVo setParamOneType(String paramOneType) {
    this.paramOneType = paramOneType;
    return this;
  }

  public void unsetParamOneType() {
    this.paramOneType = null;
  }

  /** Returns true if field paramOneType is set (has been assigned a value) and false otherwise */
  public boolean isSetParamOneType() {
    return this.paramOneType != null;
  }

  public void setParamOneTypeIsSet(boolean value) {
    if (!value) {
      this.paramOneType = null;
    }
  }

  /**
   * 第二附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String getParamTwoType() {
    return this.paramTwoType;
  }

  /**
   * 第二附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public AdLocationVo setParamTwoType(String paramTwoType) {
    this.paramTwoType = paramTwoType;
    return this;
  }

  public void unsetParamTwoType() {
    this.paramTwoType = null;
  }

  /** Returns true if field paramTwoType is set (has been assigned a value) and false otherwise */
  public boolean isSetParamTwoType() {
    return this.paramTwoType != null;
  }

  public void setParamTwoTypeIsSet(boolean value) {
    if (!value) {
      this.paramTwoType = null;
    }
  }

  /**
   * 第三附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public String getParamThreeType() {
    return this.paramThreeType;
  }

  /**
   * 第三附加参数类型 1-地区 2-商户类型 3-商品类型
   */
  public AdLocationVo setParamThreeType(String paramThreeType) {
    this.paramThreeType = paramThreeType;
    return this;
  }

  public void unsetParamThreeType() {
    this.paramThreeType = null;
  }

  /** Returns true if field paramThreeType is set (has been assigned a value) and false otherwise */
  public boolean isSetParamThreeType() {
    return this.paramThreeType != null;
  }

  public void setParamThreeTypeIsSet(boolean value) {
    if (!value) {
      this.paramThreeType = null;
    }
  }

  /**
   * 描述
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 描述
   */
  public AdLocationVo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 启用状态 0-启用 1-禁用 2-新增审核中 3-编辑审核中 4-禁用审核中
   */
  public String getEnableStatus() {
    return this.enableStatus;
  }

  /**
   * 启用状态 0-启用 1-禁用 2-新增审核中 3-编辑审核中 4-禁用审核中
   */
  public AdLocationVo setEnableStatus(String enableStatus) {
    this.enableStatus = enableStatus;
    return this;
  }

  public void unsetEnableStatus() {
    this.enableStatus = null;
  }

  /** Returns true if field enableStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableStatus() {
    return this.enableStatus != null;
  }

  public void setEnableStatusIsSet(boolean value) {
    if (!value) {
      this.enableStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TERMINAL_TYPE:
      if (value == null) {
        unsetTerminalType();
      } else {
        setTerminalType((String)value);
      }
      break;

    case POSITION_PAGE:
      if (value == null) {
        unsetPositionPage();
      } else {
        setPositionPage((String)value);
      }
      break;

    case SIZE_LIMIT:
      if (value == null) {
        unsetSizeLimit();
      } else {
        setSizeLimit((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case PARAM_ONE_TYPE:
      if (value == null) {
        unsetParamOneType();
      } else {
        setParamOneType((String)value);
      }
      break;

    case PARAM_TWO_TYPE:
      if (value == null) {
        unsetParamTwoType();
      } else {
        setParamTwoType((String)value);
      }
      break;

    case PARAM_THREE_TYPE:
      if (value == null) {
        unsetParamThreeType();
      } else {
        setParamThreeType((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ENABLE_STATUS:
      if (value == null) {
        unsetEnableStatus();
      } else {
        setEnableStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case TERMINAL_TYPE:
      return getTerminalType();

    case POSITION_PAGE:
      return getPositionPage();

    case SIZE_LIMIT:
      return Integer.valueOf(getSizeLimit());

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case PARAM_ONE_TYPE:
      return getParamOneType();

    case PARAM_TWO_TYPE:
      return getParamTwoType();

    case PARAM_THREE_TYPE:
      return getParamThreeType();

    case DESCRIPTION:
      return getDescription();

    case ENABLE_STATUS:
      return getEnableStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TERMINAL_TYPE:
      return isSetTerminalType();
    case POSITION_PAGE:
      return isSetPositionPage();
    case SIZE_LIMIT:
      return isSetSizeLimit();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case PARAM_ONE_TYPE:
      return isSetParamOneType();
    case PARAM_TWO_TYPE:
      return isSetParamTwoType();
    case PARAM_THREE_TYPE:
      return isSetParamThreeType();
    case DESCRIPTION:
      return isSetDescription();
    case ENABLE_STATUS:
      return isSetEnableStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdLocationVo)
      return this.equals((AdLocationVo)that);
    return false;
  }

  public boolean equals(AdLocationVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_terminalType = true && this.isSetTerminalType();
    boolean that_present_terminalType = true && that.isSetTerminalType();
    if (this_present_terminalType || that_present_terminalType) {
      if (!(this_present_terminalType && that_present_terminalType))
        return false;
      if (!this.terminalType.equals(that.terminalType))
        return false;
    }

    boolean this_present_positionPage = true && this.isSetPositionPage();
    boolean that_present_positionPage = true && that.isSetPositionPage();
    if (this_present_positionPage || that_present_positionPage) {
      if (!(this_present_positionPage && that_present_positionPage))
        return false;
      if (!this.positionPage.equals(that.positionPage))
        return false;
    }

    boolean this_present_sizeLimit = true && this.isSetSizeLimit();
    boolean that_present_sizeLimit = true && that.isSetSizeLimit();
    if (this_present_sizeLimit || that_present_sizeLimit) {
      if (!(this_present_sizeLimit && that_present_sizeLimit))
        return false;
      if (this.sizeLimit != that.sizeLimit)
        return false;
    }

    boolean this_present_width = true && this.isSetWidth();
    boolean that_present_width = true && that.isSetWidth();
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_paramOneType = true && this.isSetParamOneType();
    boolean that_present_paramOneType = true && that.isSetParamOneType();
    if (this_present_paramOneType || that_present_paramOneType) {
      if (!(this_present_paramOneType && that_present_paramOneType))
        return false;
      if (!this.paramOneType.equals(that.paramOneType))
        return false;
    }

    boolean this_present_paramTwoType = true && this.isSetParamTwoType();
    boolean that_present_paramTwoType = true && that.isSetParamTwoType();
    if (this_present_paramTwoType || that_present_paramTwoType) {
      if (!(this_present_paramTwoType && that_present_paramTwoType))
        return false;
      if (!this.paramTwoType.equals(that.paramTwoType))
        return false;
    }

    boolean this_present_paramThreeType = true && this.isSetParamThreeType();
    boolean that_present_paramThreeType = true && that.isSetParamThreeType();
    if (this_present_paramThreeType || that_present_paramThreeType) {
      if (!(this_present_paramThreeType && that_present_paramThreeType))
        return false;
      if (!this.paramThreeType.equals(that.paramThreeType))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_enableStatus = true && this.isSetEnableStatus();
    boolean that_present_enableStatus = true && that.isSetEnableStatus();
    if (this_present_enableStatus || that_present_enableStatus) {
      if (!(this_present_enableStatus && that_present_enableStatus))
        return false;
      if (!this.enableStatus.equals(that.enableStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_terminalType = true && (isSetTerminalType());
    list.add(present_terminalType);
    if (present_terminalType)
      list.add(terminalType);

    boolean present_positionPage = true && (isSetPositionPage());
    list.add(present_positionPage);
    if (present_positionPage)
      list.add(positionPage);

    boolean present_sizeLimit = true && (isSetSizeLimit());
    list.add(present_sizeLimit);
    if (present_sizeLimit)
      list.add(sizeLimit);

    boolean present_width = true && (isSetWidth());
    list.add(present_width);
    if (present_width)
      list.add(width);

    boolean present_height = true && (isSetHeight());
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_paramOneType = true && (isSetParamOneType());
    list.add(present_paramOneType);
    if (present_paramOneType)
      list.add(paramOneType);

    boolean present_paramTwoType = true && (isSetParamTwoType());
    list.add(present_paramTwoType);
    if (present_paramTwoType)
      list.add(paramTwoType);

    boolean present_paramThreeType = true && (isSetParamThreeType());
    list.add(present_paramThreeType);
    if (present_paramThreeType)
      list.add(paramThreeType);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_enableStatus = true && (isSetEnableStatus());
    list.add(present_enableStatus);
    if (present_enableStatus)
      list.add(enableStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdLocationVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerminalType()).compareTo(other.isSetTerminalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerminalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminalType, other.terminalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionPage()).compareTo(other.isSetPositionPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionPage, other.positionPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeLimit()).compareTo(other.isSetSizeLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeLimit, other.sizeLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamOneType()).compareTo(other.isSetParamOneType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamOneType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramOneType, other.paramOneType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamTwoType()).compareTo(other.isSetParamTwoType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamTwoType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramTwoType, other.paramTwoType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamThreeType()).compareTo(other.isSetParamThreeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamThreeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramThreeType, other.paramThreeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableStatus()).compareTo(other.isSetEnableStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableStatus, other.enableStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdLocationVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetTerminalType()) {
      if (!first) sb.append(", ");
      sb.append("terminalType:");
      if (this.terminalType == null) {
        sb.append("null");
      } else {
        sb.append(this.terminalType);
      }
      first = false;
    }
    if (isSetPositionPage()) {
      if (!first) sb.append(", ");
      sb.append("positionPage:");
      if (this.positionPage == null) {
        sb.append("null");
      } else {
        sb.append(this.positionPage);
      }
      first = false;
    }
    if (isSetSizeLimit()) {
      if (!first) sb.append(", ");
      sb.append("sizeLimit:");
      sb.append(this.sizeLimit);
      first = false;
    }
    if (isSetWidth()) {
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetParamOneType()) {
      if (!first) sb.append(", ");
      sb.append("paramOneType:");
      if (this.paramOneType == null) {
        sb.append("null");
      } else {
        sb.append(this.paramOneType);
      }
      first = false;
    }
    if (isSetParamTwoType()) {
      if (!first) sb.append(", ");
      sb.append("paramTwoType:");
      if (this.paramTwoType == null) {
        sb.append("null");
      } else {
        sb.append(this.paramTwoType);
      }
      first = false;
    }
    if (isSetParamThreeType()) {
      if (!first) sb.append(", ");
      sb.append("paramThreeType:");
      if (this.paramThreeType == null) {
        sb.append("null");
      } else {
        sb.append(this.paramThreeType);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetEnableStatus()) {
      if (!first) sb.append(", ");
      sb.append("enableStatus:");
      if (this.enableStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.enableStatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdLocationVoStandardSchemeFactory implements SchemeFactory {
    public AdLocationVoStandardScheme getScheme() {
      return new AdLocationVoStandardScheme();
    }
  }

  private static class AdLocationVoStandardScheme extends StandardScheme<AdLocationVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdLocationVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TERMINAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.terminalType = iprot.readString();
              struct.setTerminalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITION_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionPage = iprot.readString();
              struct.setPositionPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIZE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sizeLimit = iprot.readI32();
              struct.setSizeLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARAM_ONE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paramOneType = iprot.readString();
              struct.setParamOneTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARAM_TWO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paramTwoType = iprot.readString();
              struct.setParamTwoTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARAM_THREE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paramThreeType = iprot.readString();
              struct.setParamThreeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENABLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enableStatus = iprot.readString();
              struct.setEnableStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdLocationVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.terminalType != null) {
        if (struct.isSetTerminalType()) {
          oprot.writeFieldBegin(TERMINAL_TYPE_FIELD_DESC);
          oprot.writeString(struct.terminalType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionPage != null) {
        if (struct.isSetPositionPage()) {
          oprot.writeFieldBegin(POSITION_PAGE_FIELD_DESC);
          oprot.writeString(struct.positionPage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSizeLimit()) {
        oprot.writeFieldBegin(SIZE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.sizeLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWidth()) {
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.paramOneType != null) {
        if (struct.isSetParamOneType()) {
          oprot.writeFieldBegin(PARAM_ONE_TYPE_FIELD_DESC);
          oprot.writeString(struct.paramOneType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paramTwoType != null) {
        if (struct.isSetParamTwoType()) {
          oprot.writeFieldBegin(PARAM_TWO_TYPE_FIELD_DESC);
          oprot.writeString(struct.paramTwoType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paramThreeType != null) {
        if (struct.isSetParamThreeType()) {
          oprot.writeFieldBegin(PARAM_THREE_TYPE_FIELD_DESC);
          oprot.writeString(struct.paramThreeType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.enableStatus != null) {
        if (struct.isSetEnableStatus()) {
          oprot.writeFieldBegin(ENABLE_STATUS_FIELD_DESC);
          oprot.writeString(struct.enableStatus);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdLocationVoTupleSchemeFactory implements SchemeFactory {
    public AdLocationVoTupleScheme getScheme() {
      return new AdLocationVoTupleScheme();
    }
  }

  private static class AdLocationVoTupleScheme extends TupleScheme<AdLocationVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdLocationVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTerminalType()) {
        optionals.set(2);
      }
      if (struct.isSetPositionPage()) {
        optionals.set(3);
      }
      if (struct.isSetSizeLimit()) {
        optionals.set(4);
      }
      if (struct.isSetWidth()) {
        optionals.set(5);
      }
      if (struct.isSetHeight()) {
        optionals.set(6);
      }
      if (struct.isSetParamOneType()) {
        optionals.set(7);
      }
      if (struct.isSetParamTwoType()) {
        optionals.set(8);
      }
      if (struct.isSetParamThreeType()) {
        optionals.set(9);
      }
      if (struct.isSetDescription()) {
        optionals.set(10);
      }
      if (struct.isSetEnableStatus()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTerminalType()) {
        oprot.writeString(struct.terminalType);
      }
      if (struct.isSetPositionPage()) {
        oprot.writeString(struct.positionPage);
      }
      if (struct.isSetSizeLimit()) {
        oprot.writeI32(struct.sizeLimit);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetParamOneType()) {
        oprot.writeString(struct.paramOneType);
      }
      if (struct.isSetParamTwoType()) {
        oprot.writeString(struct.paramTwoType);
      }
      if (struct.isSetParamThreeType()) {
        oprot.writeString(struct.paramThreeType);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetEnableStatus()) {
        oprot.writeString(struct.enableStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdLocationVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.terminalType = iprot.readString();
        struct.setTerminalTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positionPage = iprot.readString();
        struct.setPositionPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sizeLimit = iprot.readI32();
        struct.setSizeLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(7)) {
        struct.paramOneType = iprot.readString();
        struct.setParamOneTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.paramTwoType = iprot.readString();
        struct.setParamTwoTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paramThreeType = iprot.readString();
        struct.setParamThreeTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.enableStatus = iprot.readString();
        struct.setEnableStatusIsSet(true);
      }
    }
  }

}

