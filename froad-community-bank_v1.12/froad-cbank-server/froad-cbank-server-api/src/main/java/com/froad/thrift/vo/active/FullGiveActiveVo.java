/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 满赠活动响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FullGiveActiveVo implements org.apache.thrift.TBase<FullGiveActiveVo, FullGiveActiveVo._Fields>, java.io.Serializable, Cloneable, Comparable<FullGiveActiveVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FullGiveActiveVo");

  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONRY_FIELD_DESC = new org.apache.thrift.protocol.TField("monry", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FullGiveActiveVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FullGiveActiveVoTupleSchemeFactory());
  }

  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 活动类型 2红包 4联盟积分
   */
  public String activeType; // required
  /**
   * 金额值
   */
  public double monry; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动id
     */
    ACTIVE_ID((short)1, "activeId"),
    /**
     * 活动类型 2红包 4联盟积分
     */
    ACTIVE_TYPE((short)2, "activeType"),
    /**
     * 金额值
     */
    MONRY((short)3, "monry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVE_ID
          return ACTIVE_ID;
        case 2: // ACTIVE_TYPE
          return ACTIVE_TYPE;
        case 3: // MONRY
          return MONRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONRY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("activeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONRY, new org.apache.thrift.meta_data.FieldMetaData("monry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FullGiveActiveVo.class, metaDataMap);
  }

  public FullGiveActiveVo() {
  }

  public FullGiveActiveVo(
    String activeId,
    String activeType,
    double monry)
  {
    this();
    this.activeId = activeId;
    this.activeType = activeType;
    this.monry = monry;
    setMonryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FullGiveActiveVo(FullGiveActiveVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetActiveType()) {
      this.activeType = other.activeType;
    }
    this.monry = other.monry;
  }

  public FullGiveActiveVo deepCopy() {
    return new FullGiveActiveVo(this);
  }

  @Override
  public void clear() {
    this.activeId = null;
    this.activeType = null;
    setMonryIsSet(false);
    this.monry = 0.0;
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public FullGiveActiveVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 活动类型 2红包 4联盟积分
   */
  public String getActiveType() {
    return this.activeType;
  }

  /**
   * 活动类型 2红包 4联盟积分
   */
  public FullGiveActiveVo setActiveType(String activeType) {
    this.activeType = activeType;
    return this;
  }

  public void unsetActiveType() {
    this.activeType = null;
  }

  /** Returns true if field activeType is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveType() {
    return this.activeType != null;
  }

  public void setActiveTypeIsSet(boolean value) {
    if (!value) {
      this.activeType = null;
    }
  }

  /**
   * 金额值
   */
  public double getMonry() {
    return this.monry;
  }

  /**
   * 金额值
   */
  public FullGiveActiveVo setMonry(double monry) {
    this.monry = monry;
    setMonryIsSet(true);
    return this;
  }

  public void unsetMonry() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONRY_ISSET_ID);
  }

  /** Returns true if field monry is set (has been assigned a value) and false otherwise */
  public boolean isSetMonry() {
    return EncodingUtils.testBit(__isset_bitfield, __MONRY_ISSET_ID);
  }

  public void setMonryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONRY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case ACTIVE_TYPE:
      if (value == null) {
        unsetActiveType();
      } else {
        setActiveType((String)value);
      }
      break;

    case MONRY:
      if (value == null) {
        unsetMonry();
      } else {
        setMonry((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVE_ID:
      return getActiveId();

    case ACTIVE_TYPE:
      return getActiveType();

    case MONRY:
      return Double.valueOf(getMonry());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVE_ID:
      return isSetActiveId();
    case ACTIVE_TYPE:
      return isSetActiveType();
    case MONRY:
      return isSetMonry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FullGiveActiveVo)
      return this.equals((FullGiveActiveVo)that);
    return false;
  }

  public boolean equals(FullGiveActiveVo that) {
    if (that == null)
      return false;

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_activeType = true && this.isSetActiveType();
    boolean that_present_activeType = true && that.isSetActiveType();
    if (this_present_activeType || that_present_activeType) {
      if (!(this_present_activeType && that_present_activeType))
        return false;
      if (!this.activeType.equals(that.activeType))
        return false;
    }

    boolean this_present_monry = true;
    boolean that_present_monry = true;
    if (this_present_monry || that_present_monry) {
      if (!(this_present_monry && that_present_monry))
        return false;
      if (this.monry != that.monry)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_activeType = true && (isSetActiveType());
    list.add(present_activeType);
    if (present_activeType)
      list.add(activeType);

    boolean present_monry = true;
    list.add(present_monry);
    if (present_monry)
      list.add(monry);

    return list.hashCode();
  }

  @Override
  public int compareTo(FullGiveActiveVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveType()).compareTo(other.isSetActiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeType, other.activeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonry()).compareTo(other.isSetMonry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monry, other.monry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FullGiveActiveVo(");
    boolean first = true;

    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeType:");
    if (this.activeType == null) {
      sb.append("null");
    } else {
      sb.append(this.activeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monry:");
    sb.append(this.monry);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FullGiveActiveVoStandardSchemeFactory implements SchemeFactory {
    public FullGiveActiveVoStandardScheme getScheme() {
      return new FullGiveActiveVoStandardScheme();
    }
  }

  private static class FullGiveActiveVoStandardScheme extends StandardScheme<FullGiveActiveVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FullGiveActiveVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeType = iprot.readString();
              struct.setActiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONRY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monry = iprot.readDouble();
              struct.setMonryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FullGiveActiveVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.activeType != null) {
        oprot.writeFieldBegin(ACTIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.activeType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONRY_FIELD_DESC);
      oprot.writeDouble(struct.monry);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FullGiveActiveVoTupleSchemeFactory implements SchemeFactory {
    public FullGiveActiveVoTupleScheme getScheme() {
      return new FullGiveActiveVoTupleScheme();
    }
  }

  private static class FullGiveActiveVoTupleScheme extends TupleScheme<FullGiveActiveVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FullGiveActiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActiveId()) {
        optionals.set(0);
      }
      if (struct.isSetActiveType()) {
        optionals.set(1);
      }
      if (struct.isSetMonry()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetActiveType()) {
        oprot.writeString(struct.activeType);
      }
      if (struct.isSetMonry()) {
        oprot.writeDouble(struct.monry);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FullGiveActiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activeType = iprot.readString();
        struct.setActiveTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.monry = iprot.readDouble();
        struct.setMonryIsSet(true);
      }
    }
  }

}

