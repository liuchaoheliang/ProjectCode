/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 校验代金券 请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class CheckVouchersReqVo implements org.apache.thrift.TBase<CheckVouchersReqVo, CheckVouchersReqVo._Fields>, java.io.Serializable, Cloneable, Comparable<CheckVouchersReqVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckVouchersReqVo");

  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VOUCHERS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SUSTAIN_ACTIVE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sustainActiveIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_OF_FIND_USE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productOfFindUseList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField IS_FTO_F_FIELD_DESC = new org.apache.thrift.protocol.TField("isFtoF", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CheckVouchersReqVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CheckVouchersReqVoTupleSchemeFactory());
  }

  /**
   * 请求id
   */
  public String reqId; // required
  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 用户编号
   */
  public long memberCode; // required
  /**
   * 代金券id
   */
  public String vouchersId; // required
  /**
   * 订单金额
   */
  public double orderMoney; // required
  /**
   * 订单中参与的别的营销活动id列表
   */
  public List<String> sustainActiveIds; // required
  /**
   * 商品列表 - 查询校验使用
   */
  public List<ProductOfFindUseVo> productOfFindUseList; // required
  /**
   * 是否支持面对面
   */
  public boolean isFtoF; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 请求id
     */
    REQ_ID((short)1, "reqId"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 用户编号
     */
    MEMBER_CODE((short)3, "memberCode"),
    /**
     * 代金券id
     */
    VOUCHERS_ID((short)4, "vouchersId"),
    /**
     * 订单金额
     */
    ORDER_MONEY((short)5, "orderMoney"),
    /**
     * 订单中参与的别的营销活动id列表
     */
    SUSTAIN_ACTIVE_IDS((short)6, "sustainActiveIds"),
    /**
     * 商品列表 - 查询校验使用
     */
    PRODUCT_OF_FIND_USE_LIST((short)7, "productOfFindUseList"),
    /**
     * 是否支持面对面
     */
    IS_FTO_F((short)8, "isFtoF");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQ_ID
          return REQ_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // MEMBER_CODE
          return MEMBER_CODE;
        case 4: // VOUCHERS_ID
          return VOUCHERS_ID;
        case 5: // ORDER_MONEY
          return ORDER_MONEY;
        case 6: // SUSTAIN_ACTIVE_IDS
          return SUSTAIN_ACTIVE_IDS;
        case 7: // PRODUCT_OF_FIND_USE_LIST
          return PRODUCT_OF_FIND_USE_LIST;
        case 8: // IS_FTO_F
          return IS_FTO_F;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __ORDERMONEY_ISSET_ID = 1;
  private static final int __ISFTOF_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOUCHERS_ID, new org.apache.thrift.meta_data.FieldMetaData("vouchersId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("orderMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUSTAIN_ACTIVE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sustainActiveIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRODUCT_OF_FIND_USE_LIST, new org.apache.thrift.meta_data.FieldMetaData("productOfFindUseList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductOfFindUseVo.class))));
    tmpMap.put(_Fields.IS_FTO_F, new org.apache.thrift.meta_data.FieldMetaData("isFtoF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckVouchersReqVo.class, metaDataMap);
  }

  public CheckVouchersReqVo() {
  }

  public CheckVouchersReqVo(
    String reqId,
    String clientId,
    long memberCode,
    String vouchersId,
    double orderMoney,
    List<String> sustainActiveIds,
    List<ProductOfFindUseVo> productOfFindUseList,
    boolean isFtoF)
  {
    this();
    this.reqId = reqId;
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.vouchersId = vouchersId;
    this.orderMoney = orderMoney;
    setOrderMoneyIsSet(true);
    this.sustainActiveIds = sustainActiveIds;
    this.productOfFindUseList = productOfFindUseList;
    this.isFtoF = isFtoF;
    setIsFtoFIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckVouchersReqVo(CheckVouchersReqVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReqId()) {
      this.reqId = other.reqId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetVouchersId()) {
      this.vouchersId = other.vouchersId;
    }
    this.orderMoney = other.orderMoney;
    if (other.isSetSustainActiveIds()) {
      List<String> __this__sustainActiveIds = new ArrayList<String>(other.sustainActiveIds);
      this.sustainActiveIds = __this__sustainActiveIds;
    }
    if (other.isSetProductOfFindUseList()) {
      List<ProductOfFindUseVo> __this__productOfFindUseList = new ArrayList<ProductOfFindUseVo>(other.productOfFindUseList.size());
      for (ProductOfFindUseVo other_element : other.productOfFindUseList) {
        __this__productOfFindUseList.add(new ProductOfFindUseVo(other_element));
      }
      this.productOfFindUseList = __this__productOfFindUseList;
    }
    this.isFtoF = other.isFtoF;
  }

  public CheckVouchersReqVo deepCopy() {
    return new CheckVouchersReqVo(this);
  }

  @Override
  public void clear() {
    this.reqId = null;
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.vouchersId = null;
    setOrderMoneyIsSet(false);
    this.orderMoney = 0.0;
    this.sustainActiveIds = null;
    this.productOfFindUseList = null;
    setIsFtoFIsSet(false);
    this.isFtoF = false;
  }

  /**
   * 请求id
   */
  public String getReqId() {
    return this.reqId;
  }

  /**
   * 请求id
   */
  public CheckVouchersReqVo setReqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

  public void unsetReqId() {
    this.reqId = null;
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return this.reqId != null;
  }

  public void setReqIdIsSet(boolean value) {
    if (!value) {
      this.reqId = null;
    }
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public CheckVouchersReqVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 用户编号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 用户编号
   */
  public CheckVouchersReqVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 代金券id
   */
  public String getVouchersId() {
    return this.vouchersId;
  }

  /**
   * 代金券id
   */
  public CheckVouchersReqVo setVouchersId(String vouchersId) {
    this.vouchersId = vouchersId;
    return this;
  }

  public void unsetVouchersId() {
    this.vouchersId = null;
  }

  /** Returns true if field vouchersId is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersId() {
    return this.vouchersId != null;
  }

  public void setVouchersIdIsSet(boolean value) {
    if (!value) {
      this.vouchersId = null;
    }
  }

  /**
   * 订单金额
   */
  public double getOrderMoney() {
    return this.orderMoney;
  }

  /**
   * 订单金额
   */
  public CheckVouchersReqVo setOrderMoney(double orderMoney) {
    this.orderMoney = orderMoney;
    setOrderMoneyIsSet(true);
    return this;
  }

  public void unsetOrderMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERMONEY_ISSET_ID);
  }

  /** Returns true if field orderMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERMONEY_ISSET_ID);
  }

  public void setOrderMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERMONEY_ISSET_ID, value);
  }

  public int getSustainActiveIdsSize() {
    return (this.sustainActiveIds == null) ? 0 : this.sustainActiveIds.size();
  }

  public java.util.Iterator<String> getSustainActiveIdsIterator() {
    return (this.sustainActiveIds == null) ? null : this.sustainActiveIds.iterator();
  }

  public void addToSustainActiveIds(String elem) {
    if (this.sustainActiveIds == null) {
      this.sustainActiveIds = new ArrayList<String>();
    }
    this.sustainActiveIds.add(elem);
  }

  /**
   * 订单中参与的别的营销活动id列表
   */
  public List<String> getSustainActiveIds() {
    return this.sustainActiveIds;
  }

  /**
   * 订单中参与的别的营销活动id列表
   */
  public CheckVouchersReqVo setSustainActiveIds(List<String> sustainActiveIds) {
    this.sustainActiveIds = sustainActiveIds;
    return this;
  }

  public void unsetSustainActiveIds() {
    this.sustainActiveIds = null;
  }

  /** Returns true if field sustainActiveIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSustainActiveIds() {
    return this.sustainActiveIds != null;
  }

  public void setSustainActiveIdsIsSet(boolean value) {
    if (!value) {
      this.sustainActiveIds = null;
    }
  }

  public int getProductOfFindUseListSize() {
    return (this.productOfFindUseList == null) ? 0 : this.productOfFindUseList.size();
  }

  public java.util.Iterator<ProductOfFindUseVo> getProductOfFindUseListIterator() {
    return (this.productOfFindUseList == null) ? null : this.productOfFindUseList.iterator();
  }

  public void addToProductOfFindUseList(ProductOfFindUseVo elem) {
    if (this.productOfFindUseList == null) {
      this.productOfFindUseList = new ArrayList<ProductOfFindUseVo>();
    }
    this.productOfFindUseList.add(elem);
  }

  /**
   * 商品列表 - 查询校验使用
   */
  public List<ProductOfFindUseVo> getProductOfFindUseList() {
    return this.productOfFindUseList;
  }

  /**
   * 商品列表 - 查询校验使用
   */
  public CheckVouchersReqVo setProductOfFindUseList(List<ProductOfFindUseVo> productOfFindUseList) {
    this.productOfFindUseList = productOfFindUseList;
    return this;
  }

  public void unsetProductOfFindUseList() {
    this.productOfFindUseList = null;
  }

  /** Returns true if field productOfFindUseList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductOfFindUseList() {
    return this.productOfFindUseList != null;
  }

  public void setProductOfFindUseListIsSet(boolean value) {
    if (!value) {
      this.productOfFindUseList = null;
    }
  }

  /**
   * 是否支持面对面
   */
  public boolean isIsFtoF() {
    return this.isFtoF;
  }

  /**
   * 是否支持面对面
   */
  public CheckVouchersReqVo setIsFtoF(boolean isFtoF) {
    this.isFtoF = isFtoF;
    setIsFtoFIsSet(true);
    return this;
  }

  public void unsetIsFtoF() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFTOF_ISSET_ID);
  }

  /** Returns true if field isFtoF is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFtoF() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFTOF_ISSET_ID);
  }

  public void setIsFtoFIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFTOF_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case VOUCHERS_ID:
      if (value == null) {
        unsetVouchersId();
      } else {
        setVouchersId((String)value);
      }
      break;

    case ORDER_MONEY:
      if (value == null) {
        unsetOrderMoney();
      } else {
        setOrderMoney((Double)value);
      }
      break;

    case SUSTAIN_ACTIVE_IDS:
      if (value == null) {
        unsetSustainActiveIds();
      } else {
        setSustainActiveIds((List<String>)value);
      }
      break;

    case PRODUCT_OF_FIND_USE_LIST:
      if (value == null) {
        unsetProductOfFindUseList();
      } else {
        setProductOfFindUseList((List<ProductOfFindUseVo>)value);
      }
      break;

    case IS_FTO_F:
      if (value == null) {
        unsetIsFtoF();
      } else {
        setIsFtoF((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQ_ID:
      return getReqId();

    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case VOUCHERS_ID:
      return getVouchersId();

    case ORDER_MONEY:
      return Double.valueOf(getOrderMoney());

    case SUSTAIN_ACTIVE_IDS:
      return getSustainActiveIds();

    case PRODUCT_OF_FIND_USE_LIST:
      return getProductOfFindUseList();

    case IS_FTO_F:
      return Boolean.valueOf(isIsFtoF());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQ_ID:
      return isSetReqId();
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case VOUCHERS_ID:
      return isSetVouchersId();
    case ORDER_MONEY:
      return isSetOrderMoney();
    case SUSTAIN_ACTIVE_IDS:
      return isSetSustainActiveIds();
    case PRODUCT_OF_FIND_USE_LIST:
      return isSetProductOfFindUseList();
    case IS_FTO_F:
      return isSetIsFtoF();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckVouchersReqVo)
      return this.equals((CheckVouchersReqVo)that);
    return false;
  }

  public boolean equals(CheckVouchersReqVo that) {
    if (that == null)
      return false;

    boolean this_present_reqId = true && this.isSetReqId();
    boolean that_present_reqId = true && that.isSetReqId();
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (!this.reqId.equals(that.reqId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_vouchersId = true && this.isSetVouchersId();
    boolean that_present_vouchersId = true && that.isSetVouchersId();
    if (this_present_vouchersId || that_present_vouchersId) {
      if (!(this_present_vouchersId && that_present_vouchersId))
        return false;
      if (!this.vouchersId.equals(that.vouchersId))
        return false;
    }

    boolean this_present_orderMoney = true;
    boolean that_present_orderMoney = true;
    if (this_present_orderMoney || that_present_orderMoney) {
      if (!(this_present_orderMoney && that_present_orderMoney))
        return false;
      if (this.orderMoney != that.orderMoney)
        return false;
    }

    boolean this_present_sustainActiveIds = true && this.isSetSustainActiveIds();
    boolean that_present_sustainActiveIds = true && that.isSetSustainActiveIds();
    if (this_present_sustainActiveIds || that_present_sustainActiveIds) {
      if (!(this_present_sustainActiveIds && that_present_sustainActiveIds))
        return false;
      if (!this.sustainActiveIds.equals(that.sustainActiveIds))
        return false;
    }

    boolean this_present_productOfFindUseList = true && this.isSetProductOfFindUseList();
    boolean that_present_productOfFindUseList = true && that.isSetProductOfFindUseList();
    if (this_present_productOfFindUseList || that_present_productOfFindUseList) {
      if (!(this_present_productOfFindUseList && that_present_productOfFindUseList))
        return false;
      if (!this.productOfFindUseList.equals(that.productOfFindUseList))
        return false;
    }

    boolean this_present_isFtoF = true;
    boolean that_present_isFtoF = true;
    if (this_present_isFtoF || that_present_isFtoF) {
      if (!(this_present_isFtoF && that_present_isFtoF))
        return false;
      if (this.isFtoF != that.isFtoF)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reqId = true && (isSetReqId());
    list.add(present_reqId);
    if (present_reqId)
      list.add(reqId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_vouchersId = true && (isSetVouchersId());
    list.add(present_vouchersId);
    if (present_vouchersId)
      list.add(vouchersId);

    boolean present_orderMoney = true;
    list.add(present_orderMoney);
    if (present_orderMoney)
      list.add(orderMoney);

    boolean present_sustainActiveIds = true && (isSetSustainActiveIds());
    list.add(present_sustainActiveIds);
    if (present_sustainActiveIds)
      list.add(sustainActiveIds);

    boolean present_productOfFindUseList = true && (isSetProductOfFindUseList());
    list.add(present_productOfFindUseList);
    if (present_productOfFindUseList)
      list.add(productOfFindUseList);

    boolean present_isFtoF = true;
    list.add(present_isFtoF);
    if (present_isFtoF)
      list.add(isFtoF);

    return list.hashCode();
  }

  @Override
  public int compareTo(CheckVouchersReqVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersId()).compareTo(other.isSetVouchersId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersId, other.vouchersId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMoney()).compareTo(other.isSetOrderMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMoney, other.orderMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSustainActiveIds()).compareTo(other.isSetSustainActiveIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSustainActiveIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sustainActiveIds, other.sustainActiveIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductOfFindUseList()).compareTo(other.isSetProductOfFindUseList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductOfFindUseList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productOfFindUseList, other.productOfFindUseList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFtoF()).compareTo(other.isSetIsFtoF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFtoF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFtoF, other.isFtoF);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckVouchersReqVo(");
    boolean first = true;

    sb.append("reqId:");
    if (this.reqId == null) {
      sb.append("null");
    } else {
      sb.append(this.reqId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersId:");
    if (this.vouchersId == null) {
      sb.append("null");
    } else {
      sb.append(this.vouchersId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderMoney:");
    sb.append(this.orderMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sustainActiveIds:");
    if (this.sustainActiveIds == null) {
      sb.append("null");
    } else {
      sb.append(this.sustainActiveIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productOfFindUseList:");
    if (this.productOfFindUseList == null) {
      sb.append("null");
    } else {
      sb.append(this.productOfFindUseList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFtoF:");
    sb.append(this.isFtoF);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CheckVouchersReqVoStandardSchemeFactory implements SchemeFactory {
    public CheckVouchersReqVoStandardScheme getScheme() {
      return new CheckVouchersReqVoStandardScheme();
    }
  }

  private static class CheckVouchersReqVoStandardScheme extends StandardScheme<CheckVouchersReqVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CheckVouchersReqVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqId = iprot.readString();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VOUCHERS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vouchersId = iprot.readString();
              struct.setVouchersIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderMoney = iprot.readDouble();
              struct.setOrderMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUSTAIN_ACTIVE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list336 = iprot.readListBegin();
                struct.sustainActiveIds = new ArrayList<String>(_list336.size);
                String _elem337;
                for (int _i338 = 0; _i338 < _list336.size; ++_i338)
                {
                  _elem337 = iprot.readString();
                  struct.sustainActiveIds.add(_elem337);
                }
                iprot.readListEnd();
              }
              struct.setSustainActiveIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_OF_FIND_USE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list339 = iprot.readListBegin();
                struct.productOfFindUseList = new ArrayList<ProductOfFindUseVo>(_list339.size);
                ProductOfFindUseVo _elem340;
                for (int _i341 = 0; _i341 < _list339.size; ++_i341)
                {
                  _elem340 = new ProductOfFindUseVo();
                  _elem340.read(iprot);
                  struct.productOfFindUseList.add(_elem340);
                }
                iprot.readListEnd();
              }
              struct.setProductOfFindUseListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_FTO_F
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFtoF = iprot.readBool();
              struct.setIsFtoFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CheckVouchersReqVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reqId != null) {
        oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
        oprot.writeString(struct.reqId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.vouchersId != null) {
        oprot.writeFieldBegin(VOUCHERS_ID_FIELD_DESC);
        oprot.writeString(struct.vouchersId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.orderMoney);
      oprot.writeFieldEnd();
      if (struct.sustainActiveIds != null) {
        oprot.writeFieldBegin(SUSTAIN_ACTIVE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sustainActiveIds.size()));
          for (String _iter342 : struct.sustainActiveIds)
          {
            oprot.writeString(_iter342);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.productOfFindUseList != null) {
        oprot.writeFieldBegin(PRODUCT_OF_FIND_USE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productOfFindUseList.size()));
          for (ProductOfFindUseVo _iter343 : struct.productOfFindUseList)
          {
            _iter343.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_FTO_F_FIELD_DESC);
      oprot.writeBool(struct.isFtoF);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CheckVouchersReqVoTupleSchemeFactory implements SchemeFactory {
    public CheckVouchersReqVoTupleScheme getScheme() {
      return new CheckVouchersReqVoTupleScheme();
    }
  }

  private static class CheckVouchersReqVoTupleScheme extends TupleScheme<CheckVouchersReqVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CheckVouchersReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReqId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(2);
      }
      if (struct.isSetVouchersId()) {
        optionals.set(3);
      }
      if (struct.isSetOrderMoney()) {
        optionals.set(4);
      }
      if (struct.isSetSustainActiveIds()) {
        optionals.set(5);
      }
      if (struct.isSetProductOfFindUseList()) {
        optionals.set(6);
      }
      if (struct.isSetIsFtoF()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetReqId()) {
        oprot.writeString(struct.reqId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetVouchersId()) {
        oprot.writeString(struct.vouchersId);
      }
      if (struct.isSetOrderMoney()) {
        oprot.writeDouble(struct.orderMoney);
      }
      if (struct.isSetSustainActiveIds()) {
        {
          oprot.writeI32(struct.sustainActiveIds.size());
          for (String _iter344 : struct.sustainActiveIds)
          {
            oprot.writeString(_iter344);
          }
        }
      }
      if (struct.isSetProductOfFindUseList()) {
        {
          oprot.writeI32(struct.productOfFindUseList.size());
          for (ProductOfFindUseVo _iter345 : struct.productOfFindUseList)
          {
            _iter345.write(oprot);
          }
        }
      }
      if (struct.isSetIsFtoF()) {
        oprot.writeBool(struct.isFtoF);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CheckVouchersReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.reqId = iprot.readString();
        struct.setReqIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vouchersId = iprot.readString();
        struct.setVouchersIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderMoney = iprot.readDouble();
        struct.setOrderMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list346 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sustainActiveIds = new ArrayList<String>(_list346.size);
          String _elem347;
          for (int _i348 = 0; _i348 < _list346.size; ++_i348)
          {
            _elem347 = iprot.readString();
            struct.sustainActiveIds.add(_elem347);
          }
        }
        struct.setSustainActiveIdsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list349 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productOfFindUseList = new ArrayList<ProductOfFindUseVo>(_list349.size);
          ProductOfFindUseVo _elem350;
          for (int _i351 = 0; _i351 < _list349.size; ++_i351)
          {
            _elem350 = new ProductOfFindUseVo();
            _elem350.read(iprot);
            struct.productOfFindUseList.add(_elem350);
          }
        }
        struct.setProductOfFindUseListIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isFtoF = iprot.readBool();
        struct.setIsFtoFIsSet(true);
      }
    }
  }

}

