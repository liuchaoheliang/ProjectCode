/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Boss商品管理平台查询商品列表(精品商城商品)过滤条件请求参数
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductFilterVo implements org.apache.thrift.TBase<ProductFilterVo, ProductFilterVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductFilterVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductFilterVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEO_KEY_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seoKeyWords", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeckill", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MARKETABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMarketable", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductFilterVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductFilterVoTupleSchemeFactory());
  }

  /**
   * 商品编号
   */
  public String productId; // required
  /**
   * 商品全称
   */
  public String productName; // required
  /**
   * 搜索关键词
   */
  public String seoKeyWords; // required
  /**
   * 商品分类id
   */
  public long categoryId; // required
  /**
   * 客户端id即所属行id
   */
  public String clientId; // required
  /**
   * 商品类型 "-1":全部, "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;可以逗号相隔同时查询多种类型比如"1,2,3,6"
   */
  public String type; // required
  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String isSeckill; // required
  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public String isMarketable; // required
  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String auditState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品编号
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 商品全称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 搜索关键词
     */
    SEO_KEY_WORDS((short)3, "seoKeyWords"),
    /**
     * 商品分类id
     */
    CATEGORY_ID((short)4, "categoryId"),
    /**
     * 客户端id即所属行id
     */
    CLIENT_ID((short)5, "clientId"),
    /**
     * 商品类型 "-1":全部, "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;可以逗号相隔同时查询多种类型比如"1,2,3,6"
     */
    TYPE((short)6, "type"),
    /**
     * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
     */
    IS_SECKILL((short)7, "isSeckill"),
    /**
     * 上架状态: 0未上架,1已上架,2已下架
     */
    IS_MARKETABLE((short)8, "isMarketable"),
    /**
     * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
     */
    AUDIT_STATE((short)9, "auditState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // SEO_KEY_WORDS
          return SEO_KEY_WORDS;
        case 4: // CATEGORY_ID
          return CATEGORY_ID;
        case 5: // CLIENT_ID
          return CLIENT_ID;
        case 6: // TYPE
          return TYPE;
        case 7: // IS_SECKILL
          return IS_SECKILL;
        case 8: // IS_MARKETABLE
          return IS_MARKETABLE;
        case 9: // AUDIT_STATE
          return AUDIT_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEO_KEY_WORDS, new org.apache.thrift.meta_data.FieldMetaData("seoKeyWords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("isSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MARKETABLE, new org.apache.thrift.meta_data.FieldMetaData("isMarketable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductFilterVo.class, metaDataMap);
  }

  public ProductFilterVo() {
  }

  public ProductFilterVo(
    String productId,
    String productName,
    String seoKeyWords,
    long categoryId,
    String clientId,
    String type,
    String isSeckill,
    String isMarketable,
    String auditState)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.seoKeyWords = seoKeyWords;
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.clientId = clientId;
    this.type = type;
    this.isSeckill = isSeckill;
    this.isMarketable = isMarketable;
    this.auditState = auditState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductFilterVo(ProductFilterVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetSeoKeyWords()) {
      this.seoKeyWords = other.seoKeyWords;
    }
    this.categoryId = other.categoryId;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetIsSeckill()) {
      this.isSeckill = other.isSeckill;
    }
    if (other.isSetIsMarketable()) {
      this.isMarketable = other.isMarketable;
    }
    if (other.isSetAuditState()) {
      this.auditState = other.auditState;
    }
  }

  public ProductFilterVo deepCopy() {
    return new ProductFilterVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    this.seoKeyWords = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.clientId = null;
    this.type = null;
    this.isSeckill = null;
    this.isMarketable = null;
    this.auditState = null;
  }

  /**
   * 商品编号
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品编号
   */
  public ProductFilterVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品全称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品全称
   */
  public ProductFilterVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 搜索关键词
   */
  public String getSeoKeyWords() {
    return this.seoKeyWords;
  }

  /**
   * 搜索关键词
   */
  public ProductFilterVo setSeoKeyWords(String seoKeyWords) {
    this.seoKeyWords = seoKeyWords;
    return this;
  }

  public void unsetSeoKeyWords() {
    this.seoKeyWords = null;
  }

  /** Returns true if field seoKeyWords is set (has been assigned a value) and false otherwise */
  public boolean isSetSeoKeyWords() {
    return this.seoKeyWords != null;
  }

  public void setSeoKeyWordsIsSet(boolean value) {
    if (!value) {
      this.seoKeyWords = null;
    }
  }

  /**
   * 商品分类id
   */
  public long getCategoryId() {
    return this.categoryId;
  }

  /**
   * 商品分类id
   */
  public ProductFilterVo setCategoryId(long categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  /**
   * 客户端id即所属行id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id即所属行id
   */
  public ProductFilterVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商品类型 "-1":全部, "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;可以逗号相隔同时查询多种类型比如"1,2,3,6"
   */
  public String getType() {
    return this.type;
  }

  /**
   * 商品类型 "-1":全部, "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;可以逗号相隔同时查询多种类型比如"1,2,3,6"
   */
  public ProductFilterVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String getIsSeckill() {
    return this.isSeckill;
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public ProductFilterVo setIsSeckill(String isSeckill) {
    this.isSeckill = isSeckill;
    return this;
  }

  public void unsetIsSeckill() {
    this.isSeckill = null;
  }

  /** Returns true if field isSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeckill() {
    return this.isSeckill != null;
  }

  public void setIsSeckillIsSet(boolean value) {
    if (!value) {
      this.isSeckill = null;
    }
  }

  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public String getIsMarketable() {
    return this.isMarketable;
  }

  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public ProductFilterVo setIsMarketable(String isMarketable) {
    this.isMarketable = isMarketable;
    return this;
  }

  public void unsetIsMarketable() {
    this.isMarketable = null;
  }

  /** Returns true if field isMarketable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMarketable() {
    return this.isMarketable != null;
  }

  public void setIsMarketableIsSet(boolean value) {
    if (!value) {
      this.isMarketable = null;
    }
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String getAuditState() {
    return this.auditState;
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public ProductFilterVo setAuditState(String auditState) {
    this.auditState = auditState;
    return this;
  }

  public void unsetAuditState() {
    this.auditState = null;
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return this.auditState != null;
  }

  public void setAuditStateIsSet(boolean value) {
    if (!value) {
      this.auditState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case SEO_KEY_WORDS:
      if (value == null) {
        unsetSeoKeyWords();
      } else {
        setSeoKeyWords((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case IS_SECKILL:
      if (value == null) {
        unsetIsSeckill();
      } else {
        setIsSeckill((String)value);
      }
      break;

    case IS_MARKETABLE:
      if (value == null) {
        unsetIsMarketable();
      } else {
        setIsMarketable((String)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case SEO_KEY_WORDS:
      return getSeoKeyWords();

    case CATEGORY_ID:
      return Long.valueOf(getCategoryId());

    case CLIENT_ID:
      return getClientId();

    case TYPE:
      return getType();

    case IS_SECKILL:
      return getIsSeckill();

    case IS_MARKETABLE:
      return getIsMarketable();

    case AUDIT_STATE:
      return getAuditState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case SEO_KEY_WORDS:
      return isSetSeoKeyWords();
    case CATEGORY_ID:
      return isSetCategoryId();
    case CLIENT_ID:
      return isSetClientId();
    case TYPE:
      return isSetType();
    case IS_SECKILL:
      return isSetIsSeckill();
    case IS_MARKETABLE:
      return isSetIsMarketable();
    case AUDIT_STATE:
      return isSetAuditState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductFilterVo)
      return this.equals((ProductFilterVo)that);
    return false;
  }

  public boolean equals(ProductFilterVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_seoKeyWords = true && this.isSetSeoKeyWords();
    boolean that_present_seoKeyWords = true && that.isSetSeoKeyWords();
    if (this_present_seoKeyWords || that_present_seoKeyWords) {
      if (!(this_present_seoKeyWords && that_present_seoKeyWords))
        return false;
      if (!this.seoKeyWords.equals(that.seoKeyWords))
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_isSeckill = true && this.isSetIsSeckill();
    boolean that_present_isSeckill = true && that.isSetIsSeckill();
    if (this_present_isSeckill || that_present_isSeckill) {
      if (!(this_present_isSeckill && that_present_isSeckill))
        return false;
      if (!this.isSeckill.equals(that.isSeckill))
        return false;
    }

    boolean this_present_isMarketable = true && this.isSetIsMarketable();
    boolean that_present_isMarketable = true && that.isSetIsMarketable();
    if (this_present_isMarketable || that_present_isMarketable) {
      if (!(this_present_isMarketable && that_present_isMarketable))
        return false;
      if (!this.isMarketable.equals(that.isMarketable))
        return false;
    }

    boolean this_present_auditState = true && this.isSetAuditState();
    boolean that_present_auditState = true && that.isSetAuditState();
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (!this.auditState.equals(that.auditState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_seoKeyWords = true && (isSetSeoKeyWords());
    list.add(present_seoKeyWords);
    if (present_seoKeyWords)
      list.add(seoKeyWords);

    boolean present_categoryId = true;
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_isSeckill = true && (isSetIsSeckill());
    list.add(present_isSeckill);
    if (present_isSeckill)
      list.add(isSeckill);

    boolean present_isMarketable = true && (isSetIsMarketable());
    list.add(present_isMarketable);
    if (present_isMarketable)
      list.add(isMarketable);

    boolean present_auditState = true && (isSetAuditState());
    list.add(present_auditState);
    if (present_auditState)
      list.add(auditState);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductFilterVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeoKeyWords()).compareTo(other.isSetSeoKeyWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeoKeyWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seoKeyWords, other.seoKeyWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeckill()).compareTo(other.isSetIsSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeckill, other.isSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMarketable()).compareTo(other.isSetIsMarketable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMarketable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMarketable, other.isMarketable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductFilterVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seoKeyWords:");
    if (this.seoKeyWords == null) {
      sb.append("null");
    } else {
      sb.append(this.seoKeyWords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeckill:");
    if (this.isSeckill == null) {
      sb.append("null");
    } else {
      sb.append(this.isSeckill);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMarketable:");
    if (this.isMarketable == null) {
      sb.append("null");
    } else {
      sb.append(this.isMarketable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditState:");
    if (this.auditState == null) {
      sb.append("null");
    } else {
      sb.append(this.auditState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductFilterVoStandardSchemeFactory implements SchemeFactory {
    public ProductFilterVoStandardScheme getScheme() {
      return new ProductFilterVoStandardScheme();
    }
  }

  private static class ProductFilterVoStandardScheme extends StandardScheme<ProductFilterVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductFilterVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEO_KEY_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seoKeyWords = iprot.readString();
              struct.setSeoKeyWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.categoryId = iprot.readI64();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isSeckill = iprot.readString();
              struct.setIsSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MARKETABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMarketable = iprot.readString();
              struct.setIsMarketableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditState = iprot.readString();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductFilterVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.seoKeyWords != null) {
        oprot.writeFieldBegin(SEO_KEY_WORDS_FIELD_DESC);
        oprot.writeString(struct.seoKeyWords);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSeckill != null) {
        oprot.writeFieldBegin(IS_SECKILL_FIELD_DESC);
        oprot.writeString(struct.isSeckill);
        oprot.writeFieldEnd();
      }
      if (struct.isMarketable != null) {
        oprot.writeFieldBegin(IS_MARKETABLE_FIELD_DESC);
        oprot.writeString(struct.isMarketable);
        oprot.writeFieldEnd();
      }
      if (struct.auditState != null) {
        oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
        oprot.writeString(struct.auditState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductFilterVoTupleSchemeFactory implements SchemeFactory {
    public ProductFilterVoTupleScheme getScheme() {
      return new ProductFilterVoTupleScheme();
    }
  }

  private static class ProductFilterVoTupleScheme extends TupleScheme<ProductFilterVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetSeoKeyWords()) {
        optionals.set(2);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(3);
      }
      if (struct.isSetClientId()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetIsSeckill()) {
        optionals.set(6);
      }
      if (struct.isSetIsMarketable()) {
        optionals.set(7);
      }
      if (struct.isSetAuditState()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetSeoKeyWords()) {
        oprot.writeString(struct.seoKeyWords);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI64(struct.categoryId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetIsSeckill()) {
        oprot.writeString(struct.isSeckill);
      }
      if (struct.isSetIsMarketable()) {
        oprot.writeString(struct.isMarketable);
      }
      if (struct.isSetAuditState()) {
        oprot.writeString(struct.auditState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seoKeyWords = iprot.readString();
        struct.setSeoKeyWordsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.categoryId = iprot.readI64();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isSeckill = iprot.readString();
        struct.setIsSeckillIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMarketable = iprot.readString();
        struct.setIsMarketableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.auditState = iprot.readString();
        struct.setAuditStateIsSet(true);
      }
    }
  }

}

