/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 精品商品查询过滤条件
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QueryBoutiqueGoodsFilterVo implements org.apache.thrift.TBase<QueryBoutiqueGoodsFilterVo, QueryBoutiqueGoodsFilterVo._Fields>, java.io.Serializable, Cloneable, Comparable<QueryBoutiqueGoodsFilterVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryBoutiqueGoodsFilterVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GOOD_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("goodFlag", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryBoutiqueGoodsFilterVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryBoutiqueGoodsFilterVoTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 商品名
   */
  public String productName; // required
  /**
   * 商品分类ID
   */
  public long productCategoryId; // required
  /**
   * '1'推荐;'2'热销;'3'新品;'4'秒杀
   */
  public String goodFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商品名
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 商品分类ID
     */
    PRODUCT_CATEGORY_ID((short)3, "productCategoryId"),
    /**
     * '1'推荐;'2'热销;'3'新品;'4'秒杀
     */
    GOOD_FLAG((short)4, "goodFlag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // PRODUCT_CATEGORY_ID
          return PRODUCT_CATEGORY_ID;
        case 4: // GOOD_FLAG
          return GOOD_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTCATEGORYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("productCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GOOD_FLAG, new org.apache.thrift.meta_data.FieldMetaData("goodFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryBoutiqueGoodsFilterVo.class, metaDataMap);
  }

  public QueryBoutiqueGoodsFilterVo() {
  }

  public QueryBoutiqueGoodsFilterVo(
    String clientId,
    String productName,
    long productCategoryId,
    String goodFlag)
  {
    this();
    this.clientId = clientId;
    this.productName = productName;
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    this.goodFlag = goodFlag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryBoutiqueGoodsFilterVo(QueryBoutiqueGoodsFilterVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.productCategoryId = other.productCategoryId;
    if (other.isSetGoodFlag()) {
      this.goodFlag = other.goodFlag;
    }
  }

  public QueryBoutiqueGoodsFilterVo deepCopy() {
    return new QueryBoutiqueGoodsFilterVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.productName = null;
    setProductCategoryIdIsSet(false);
    this.productCategoryId = 0;
    this.goodFlag = null;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public QueryBoutiqueGoodsFilterVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商品名
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名
   */
  public QueryBoutiqueGoodsFilterVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品分类ID
   */
  public long getProductCategoryId() {
    return this.productCategoryId;
  }

  /**
   * 商品分类ID
   */
  public QueryBoutiqueGoodsFilterVo setProductCategoryId(long productCategoryId) {
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    return this;
  }

  public void unsetProductCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field productCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  public void setProductCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID, value);
  }

  /**
   * '1'推荐;'2'热销;'3'新品;'4'秒杀
   */
  public String getGoodFlag() {
    return this.goodFlag;
  }

  /**
   * '1'推荐;'2'热销;'3'新品;'4'秒杀
   */
  public QueryBoutiqueGoodsFilterVo setGoodFlag(String goodFlag) {
    this.goodFlag = goodFlag;
    return this;
  }

  public void unsetGoodFlag() {
    this.goodFlag = null;
  }

  /** Returns true if field goodFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodFlag() {
    return this.goodFlag != null;
  }

  public void setGoodFlagIsSet(boolean value) {
    if (!value) {
      this.goodFlag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_CATEGORY_ID:
      if (value == null) {
        unsetProductCategoryId();
      } else {
        setProductCategoryId((Long)value);
      }
      break;

    case GOOD_FLAG:
      if (value == null) {
        unsetGoodFlag();
      } else {
        setGoodFlag((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_CATEGORY_ID:
      return Long.valueOf(getProductCategoryId());

    case GOOD_FLAG:
      return getGoodFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_CATEGORY_ID:
      return isSetProductCategoryId();
    case GOOD_FLAG:
      return isSetGoodFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryBoutiqueGoodsFilterVo)
      return this.equals((QueryBoutiqueGoodsFilterVo)that);
    return false;
  }

  public boolean equals(QueryBoutiqueGoodsFilterVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productCategoryId = true;
    boolean that_present_productCategoryId = true;
    if (this_present_productCategoryId || that_present_productCategoryId) {
      if (!(this_present_productCategoryId && that_present_productCategoryId))
        return false;
      if (this.productCategoryId != that.productCategoryId)
        return false;
    }

    boolean this_present_goodFlag = true && this.isSetGoodFlag();
    boolean that_present_goodFlag = true && that.isSetGoodFlag();
    if (this_present_goodFlag || that_present_goodFlag) {
      if (!(this_present_goodFlag && that_present_goodFlag))
        return false;
      if (!this.goodFlag.equals(that.goodFlag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productCategoryId = true;
    list.add(present_productCategoryId);
    if (present_productCategoryId)
      list.add(productCategoryId);

    boolean present_goodFlag = true && (isSetGoodFlag());
    list.add(present_goodFlag);
    if (present_goodFlag)
      list.add(goodFlag);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryBoutiqueGoodsFilterVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategoryId()).compareTo(other.isSetProductCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryId, other.productCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodFlag()).compareTo(other.isSetGoodFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodFlag, other.goodFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryBoutiqueGoodsFilterVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategoryId:");
    sb.append(this.productCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodFlag:");
    if (this.goodFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.goodFlag);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryBoutiqueGoodsFilterVoStandardSchemeFactory implements SchemeFactory {
    public QueryBoutiqueGoodsFilterVoStandardScheme getScheme() {
      return new QueryBoutiqueGoodsFilterVoStandardScheme();
    }
  }

  private static class QueryBoutiqueGoodsFilterVoStandardScheme extends StandardScheme<QueryBoutiqueGoodsFilterVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryBoutiqueGoodsFilterVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.productCategoryId = iprot.readI64();
              struct.setProductCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOOD_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodFlag = iprot.readString();
              struct.setGoodFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryBoutiqueGoodsFilterVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.productCategoryId);
      oprot.writeFieldEnd();
      if (struct.goodFlag != null) {
        oprot.writeFieldBegin(GOOD_FLAG_FIELD_DESC);
        oprot.writeString(struct.goodFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryBoutiqueGoodsFilterVoTupleSchemeFactory implements SchemeFactory {
    public QueryBoutiqueGoodsFilterVoTupleScheme getScheme() {
      return new QueryBoutiqueGoodsFilterVoTupleScheme();
    }
  }

  private static class QueryBoutiqueGoodsFilterVoTupleScheme extends TupleScheme<QueryBoutiqueGoodsFilterVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryBoutiqueGoodsFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetProductCategoryId()) {
        optionals.set(2);
      }
      if (struct.isSetGoodFlag()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductCategoryId()) {
        oprot.writeI64(struct.productCategoryId);
      }
      if (struct.isSetGoodFlag()) {
        oprot.writeString(struct.goodFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryBoutiqueGoodsFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productCategoryId = iprot.readI64();
        struct.setProductCategoryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.goodFlag = iprot.readString();
        struct.setGoodFlagIsSet(true);
      }
    }
  }

}

