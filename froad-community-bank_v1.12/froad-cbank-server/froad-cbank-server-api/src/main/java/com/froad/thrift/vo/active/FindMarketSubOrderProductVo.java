/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 查询营销活动子订单商品
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FindMarketSubOrderProductVo implements org.apache.thrift.TBase<FindMarketSubOrderProductVo, FindMarketSubOrderProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<FindMarketSubOrderProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindMarketSubOrderProductVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VIP_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField VIP_VOU_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipVouMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField VOU_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vouMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FindMarketSubOrderProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FindMarketSubOrderProductVoTupleSchemeFactory());
  }

  /**
   * 商品id
   */
  public String productId; // required
  /**
   * vip满减金额
   */
  public double vipCutMoney; // required
  /**
   * 满减金额
   */
  public double cutMoney; // required
  /**
   * vip代金券/红包金额
   */
  public double vipVouMoney; // required
  /**
   * 代金券/红包金额
   */
  public double vouMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品id
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * vip满减金额
     */
    VIP_CUT_MONEY((short)2, "vipCutMoney"),
    /**
     * 满减金额
     */
    CUT_MONEY((short)3, "cutMoney"),
    /**
     * vip代金券/红包金额
     */
    VIP_VOU_MONEY((short)4, "vipVouMoney"),
    /**
     * 代金券/红包金额
     */
    VOU_MONEY((short)5, "vouMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // VIP_CUT_MONEY
          return VIP_CUT_MONEY;
        case 3: // CUT_MONEY
          return CUT_MONEY;
        case 4: // VIP_VOU_MONEY
          return VIP_VOU_MONEY;
        case 5: // VOU_MONEY
          return VOU_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIPCUTMONEY_ISSET_ID = 0;
  private static final int __CUTMONEY_ISSET_ID = 1;
  private static final int __VIPVOUMONEY_ISSET_ID = 2;
  private static final int __VOUMONEY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIP_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_VOU_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipVouMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOU_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vouMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindMarketSubOrderProductVo.class, metaDataMap);
  }

  public FindMarketSubOrderProductVo() {
  }

  public FindMarketSubOrderProductVo(
    String productId,
    double vipCutMoney,
    double cutMoney,
    double vipVouMoney,
    double vouMoney)
  {
    this();
    this.productId = productId;
    this.vipCutMoney = vipCutMoney;
    setVipCutMoneyIsSet(true);
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    this.vipVouMoney = vipVouMoney;
    setVipVouMoneyIsSet(true);
    this.vouMoney = vouMoney;
    setVouMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindMarketSubOrderProductVo(FindMarketSubOrderProductVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.vipCutMoney = other.vipCutMoney;
    this.cutMoney = other.cutMoney;
    this.vipVouMoney = other.vipVouMoney;
    this.vouMoney = other.vouMoney;
  }

  public FindMarketSubOrderProductVo deepCopy() {
    return new FindMarketSubOrderProductVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    setVipCutMoneyIsSet(false);
    this.vipCutMoney = 0.0;
    setCutMoneyIsSet(false);
    this.cutMoney = 0.0;
    setVipVouMoneyIsSet(false);
    this.vipVouMoney = 0.0;
    setVouMoneyIsSet(false);
    this.vouMoney = 0.0;
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public FindMarketSubOrderProductVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * vip满减金额
   */
  public double getVipCutMoney() {
    return this.vipCutMoney;
  }

  /**
   * vip满减金额
   */
  public FindMarketSubOrderProductVo setVipCutMoney(double vipCutMoney) {
    this.vipCutMoney = vipCutMoney;
    setVipCutMoneyIsSet(true);
    return this;
  }

  public void unsetVipCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPCUTMONEY_ISSET_ID);
  }

  /** Returns true if field vipCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPCUTMONEY_ISSET_ID);
  }

  public void setVipCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPCUTMONEY_ISSET_ID, value);
  }

  /**
   * 满减金额
   */
  public double getCutMoney() {
    return this.cutMoney;
  }

  /**
   * 满减金额
   */
  public FindMarketSubOrderProductVo setCutMoney(double cutMoney) {
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    return this;
  }

  public void unsetCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  /** Returns true if field cutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  public void setCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTMONEY_ISSET_ID, value);
  }

  /**
   * vip代金券/红包金额
   */
  public double getVipVouMoney() {
    return this.vipVouMoney;
  }

  /**
   * vip代金券/红包金额
   */
  public FindMarketSubOrderProductVo setVipVouMoney(double vipVouMoney) {
    this.vipVouMoney = vipVouMoney;
    setVipVouMoneyIsSet(true);
    return this;
  }

  public void unsetVipVouMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPVOUMONEY_ISSET_ID);
  }

  /** Returns true if field vipVouMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipVouMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPVOUMONEY_ISSET_ID);
  }

  public void setVipVouMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPVOUMONEY_ISSET_ID, value);
  }

  /**
   * 代金券/红包金额
   */
  public double getVouMoney() {
    return this.vouMoney;
  }

  /**
   * 代金券/红包金额
   */
  public FindMarketSubOrderProductVo setVouMoney(double vouMoney) {
    this.vouMoney = vouMoney;
    setVouMoneyIsSet(true);
    return this;
  }

  public void unsetVouMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUMONEY_ISSET_ID);
  }

  /** Returns true if field vouMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVouMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUMONEY_ISSET_ID);
  }

  public void setVouMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case VIP_CUT_MONEY:
      if (value == null) {
        unsetVipCutMoney();
      } else {
        setVipCutMoney((Double)value);
      }
      break;

    case CUT_MONEY:
      if (value == null) {
        unsetCutMoney();
      } else {
        setCutMoney((Double)value);
      }
      break;

    case VIP_VOU_MONEY:
      if (value == null) {
        unsetVipVouMoney();
      } else {
        setVipVouMoney((Double)value);
      }
      break;

    case VOU_MONEY:
      if (value == null) {
        unsetVouMoney();
      } else {
        setVouMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case VIP_CUT_MONEY:
      return Double.valueOf(getVipCutMoney());

    case CUT_MONEY:
      return Double.valueOf(getCutMoney());

    case VIP_VOU_MONEY:
      return Double.valueOf(getVipVouMoney());

    case VOU_MONEY:
      return Double.valueOf(getVouMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case VIP_CUT_MONEY:
      return isSetVipCutMoney();
    case CUT_MONEY:
      return isSetCutMoney();
    case VIP_VOU_MONEY:
      return isSetVipVouMoney();
    case VOU_MONEY:
      return isSetVouMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindMarketSubOrderProductVo)
      return this.equals((FindMarketSubOrderProductVo)that);
    return false;
  }

  public boolean equals(FindMarketSubOrderProductVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_vipCutMoney = true;
    boolean that_present_vipCutMoney = true;
    if (this_present_vipCutMoney || that_present_vipCutMoney) {
      if (!(this_present_vipCutMoney && that_present_vipCutMoney))
        return false;
      if (this.vipCutMoney != that.vipCutMoney)
        return false;
    }

    boolean this_present_cutMoney = true;
    boolean that_present_cutMoney = true;
    if (this_present_cutMoney || that_present_cutMoney) {
      if (!(this_present_cutMoney && that_present_cutMoney))
        return false;
      if (this.cutMoney != that.cutMoney)
        return false;
    }

    boolean this_present_vipVouMoney = true;
    boolean that_present_vipVouMoney = true;
    if (this_present_vipVouMoney || that_present_vipVouMoney) {
      if (!(this_present_vipVouMoney && that_present_vipVouMoney))
        return false;
      if (this.vipVouMoney != that.vipVouMoney)
        return false;
    }

    boolean this_present_vouMoney = true;
    boolean that_present_vouMoney = true;
    if (this_present_vouMoney || that_present_vouMoney) {
      if (!(this_present_vouMoney && that_present_vouMoney))
        return false;
      if (this.vouMoney != that.vouMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_vipCutMoney = true;
    list.add(present_vipCutMoney);
    if (present_vipCutMoney)
      list.add(vipCutMoney);

    boolean present_cutMoney = true;
    list.add(present_cutMoney);
    if (present_cutMoney)
      list.add(cutMoney);

    boolean present_vipVouMoney = true;
    list.add(present_vipVouMoney);
    if (present_vipVouMoney)
      list.add(vipVouMoney);

    boolean present_vouMoney = true;
    list.add(present_vouMoney);
    if (present_vouMoney)
      list.add(vouMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(FindMarketSubOrderProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipCutMoney()).compareTo(other.isSetVipCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipCutMoney, other.vipCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutMoney()).compareTo(other.isSetCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutMoney, other.cutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipVouMoney()).compareTo(other.isSetVipVouMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipVouMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipVouMoney, other.vipVouMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouMoney()).compareTo(other.isSetVouMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouMoney, other.vouMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FindMarketSubOrderProductVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipCutMoney:");
    sb.append(this.vipCutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutMoney:");
    sb.append(this.cutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipVouMoney:");
    sb.append(this.vipVouMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouMoney:");
    sb.append(this.vouMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FindMarketSubOrderProductVoStandardSchemeFactory implements SchemeFactory {
    public FindMarketSubOrderProductVoStandardScheme getScheme() {
      return new FindMarketSubOrderProductVoStandardScheme();
    }
  }

  private static class FindMarketSubOrderProductVoStandardScheme extends StandardScheme<FindMarketSubOrderProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FindMarketSubOrderProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIP_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipCutMoney = iprot.readDouble();
              struct.setVipCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cutMoney = iprot.readDouble();
              struct.setCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIP_VOU_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipVouMoney = iprot.readDouble();
              struct.setVipVouMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VOU_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vouMoney = iprot.readDouble();
              struct.setVouMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FindMarketSubOrderProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.cutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_VOU_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipVouMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOU_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vouMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FindMarketSubOrderProductVoTupleSchemeFactory implements SchemeFactory {
    public FindMarketSubOrderProductVoTupleScheme getScheme() {
      return new FindMarketSubOrderProductVoTupleScheme();
    }
  }

  private static class FindMarketSubOrderProductVoTupleScheme extends TupleScheme<FindMarketSubOrderProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FindMarketSubOrderProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetVipCutMoney()) {
        optionals.set(1);
      }
      if (struct.isSetCutMoney()) {
        optionals.set(2);
      }
      if (struct.isSetVipVouMoney()) {
        optionals.set(3);
      }
      if (struct.isSetVouMoney()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetVipCutMoney()) {
        oprot.writeDouble(struct.vipCutMoney);
      }
      if (struct.isSetCutMoney()) {
        oprot.writeDouble(struct.cutMoney);
      }
      if (struct.isSetVipVouMoney()) {
        oprot.writeDouble(struct.vipVouMoney);
      }
      if (struct.isSetVouMoney()) {
        oprot.writeDouble(struct.vouMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FindMarketSubOrderProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vipCutMoney = iprot.readDouble();
        struct.setVipCutMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cutMoney = iprot.readDouble();
        struct.setCutMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vipVouMoney = iprot.readDouble();
        struct.setVipVouMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vouMoney = iprot.readDouble();
        struct.setVouMoneyIsSet(true);
      }
    }
  }

}

