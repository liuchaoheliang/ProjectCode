/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 管理平台商品管理查询商品列表查询过滤条件(商户管理平台和银行管理平台)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductFilterReqVo implements org.apache.thrift.TBase<ProductFilterReqVo, ProductFilterReqVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductFilterReqVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductFilterReqVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MARKETABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMarketable", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILTER_STATUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("filterStatuts", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILTER_AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("filterAuditState", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeckill", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField START_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeStart", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField START_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeEnd", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField END_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimeStart", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField END_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimeEnd", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField AUDIT_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTimeStart", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField AUDIT_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTimeEnd", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField PRICE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("priceStart", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField PRICE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("priceEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductFilterReqVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductFilterReqVoTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商品类型 ('1,2'可以逗号分隔查询多个商品类型)"1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public String type; // required
  /**
   * 商品名模糊查询 简称和全称模糊查询
   */
  public String productName; // required
  /**
   * 商品分类ID
   */
  public long productCategoryId; // required
  /**
   * 机构号查询 '340000,340101'可以逗号分隔查询多个机构下的商品
   */
  public String orgCode; // required
  /**
   * 商户名模糊查询
   */
  public String merchantName; // required
  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public String isMarketable; // required
  /**
   * 需要过滤掉不返回的上架状态
   */
  public String filterStatuts; // required
  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String auditState; // required
  /**
   * 需要过滤掉不返回的审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String filterAuditState; // required
  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String isSeckill; // required
  /**
   * 销售开始时间 开始范围
   */
  public long startTimeStart; // required
  /**
   * 销售开始时间 结束范围
   */
  public long startTimeEnd; // required
  /**
   * 销售结束时间 开始范围
   */
  public long endTimeStart; // required
  /**
   * 销售结束时间 结束范围
   */
  public long endTimeEnd; // required
  /**
   * 审核时间开始范围
   */
  public long auditTimeStart; // required
  /**
   * 审核时间结束范围
   */
  public long auditTimeEnd; // required
  /**
   * 销售价 开始范围
   */
  public double priceStart; // required
  /**
   * 销售价结束范围
   */
  public double priceEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)2, "merchantId"),
    /**
     * 商品类型 ('1,2'可以逗号分隔查询多个商品类型)"1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
     */
    TYPE((short)3, "type"),
    /**
     * 商品名模糊查询 简称和全称模糊查询
     */
    PRODUCT_NAME((short)4, "productName"),
    /**
     * 商品分类ID
     */
    PRODUCT_CATEGORY_ID((short)5, "productCategoryId"),
    /**
     * 机构号查询 '340000,340101'可以逗号分隔查询多个机构下的商品
     */
    ORG_CODE((short)6, "orgCode"),
    /**
     * 商户名模糊查询
     */
    MERCHANT_NAME((short)7, "merchantName"),
    /**
     * 上架状态: 0未上架,1已上架,2已下架
     */
    IS_MARKETABLE((short)8, "isMarketable"),
    /**
     * 需要过滤掉不返回的上架状态
     */
    FILTER_STATUTS((short)9, "filterStatuts"),
    /**
     * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
     */
    AUDIT_STATE((short)10, "auditState"),
    /**
     * 需要过滤掉不返回的审核状态("0待审核",1审核通过,2审核不通过,3未提交)
     */
    FILTER_AUDIT_STATE((short)11, "filterAuditState"),
    /**
     * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
     */
    IS_SECKILL((short)12, "isSeckill"),
    /**
     * 销售开始时间 开始范围
     */
    START_TIME_START((short)13, "startTimeStart"),
    /**
     * 销售开始时间 结束范围
     */
    START_TIME_END((short)14, "startTimeEnd"),
    /**
     * 销售结束时间 开始范围
     */
    END_TIME_START((short)15, "endTimeStart"),
    /**
     * 销售结束时间 结束范围
     */
    END_TIME_END((short)16, "endTimeEnd"),
    /**
     * 审核时间开始范围
     */
    AUDIT_TIME_START((short)17, "auditTimeStart"),
    /**
     * 审核时间结束范围
     */
    AUDIT_TIME_END((short)18, "auditTimeEnd"),
    /**
     * 销售价 开始范围
     */
    PRICE_START((short)19, "priceStart"),
    /**
     * 销售价结束范围
     */
    PRICE_END((short)20, "priceEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 5: // PRODUCT_CATEGORY_ID
          return PRODUCT_CATEGORY_ID;
        case 6: // ORG_CODE
          return ORG_CODE;
        case 7: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 8: // IS_MARKETABLE
          return IS_MARKETABLE;
        case 9: // FILTER_STATUTS
          return FILTER_STATUTS;
        case 10: // AUDIT_STATE
          return AUDIT_STATE;
        case 11: // FILTER_AUDIT_STATE
          return FILTER_AUDIT_STATE;
        case 12: // IS_SECKILL
          return IS_SECKILL;
        case 13: // START_TIME_START
          return START_TIME_START;
        case 14: // START_TIME_END
          return START_TIME_END;
        case 15: // END_TIME_START
          return END_TIME_START;
        case 16: // END_TIME_END
          return END_TIME_END;
        case 17: // AUDIT_TIME_START
          return AUDIT_TIME_START;
        case 18: // AUDIT_TIME_END
          return AUDIT_TIME_END;
        case 19: // PRICE_START
          return PRICE_START;
        case 20: // PRICE_END
          return PRICE_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTCATEGORYID_ISSET_ID = 0;
  private static final int __STARTTIMESTART_ISSET_ID = 1;
  private static final int __STARTTIMEEND_ISSET_ID = 2;
  private static final int __ENDTIMESTART_ISSET_ID = 3;
  private static final int __ENDTIMEEND_ISSET_ID = 4;
  private static final int __AUDITTIMESTART_ISSET_ID = 5;
  private static final int __AUDITTIMEEND_ISSET_ID = 6;
  private static final int __PRICESTART_ISSET_ID = 7;
  private static final int __PRICEEND_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("productCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MARKETABLE, new org.apache.thrift.meta_data.FieldMetaData("isMarketable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER_STATUTS, new org.apache.thrift.meta_data.FieldMetaData("filterStatuts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER_AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("filterAuditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("isSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("startTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("startTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("endTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("endTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("auditTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("auditTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE_START, new org.apache.thrift.meta_data.FieldMetaData("priceStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_END, new org.apache.thrift.meta_data.FieldMetaData("priceEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductFilterReqVo.class, metaDataMap);
  }

  public ProductFilterReqVo() {
  }

  public ProductFilterReqVo(
    String clientId,
    String merchantId,
    String type,
    String productName,
    long productCategoryId,
    String orgCode,
    String merchantName,
    String isMarketable,
    String filterStatuts,
    String auditState,
    String filterAuditState,
    String isSeckill,
    long startTimeStart,
    long startTimeEnd,
    long endTimeStart,
    long endTimeEnd,
    long auditTimeStart,
    long auditTimeEnd,
    double priceStart,
    double priceEnd)
  {
    this();
    this.clientId = clientId;
    this.merchantId = merchantId;
    this.type = type;
    this.productName = productName;
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    this.orgCode = orgCode;
    this.merchantName = merchantName;
    this.isMarketable = isMarketable;
    this.filterStatuts = filterStatuts;
    this.auditState = auditState;
    this.filterAuditState = filterAuditState;
    this.isSeckill = isSeckill;
    this.startTimeStart = startTimeStart;
    setStartTimeStartIsSet(true);
    this.startTimeEnd = startTimeEnd;
    setStartTimeEndIsSet(true);
    this.endTimeStart = endTimeStart;
    setEndTimeStartIsSet(true);
    this.endTimeEnd = endTimeEnd;
    setEndTimeEndIsSet(true);
    this.auditTimeStart = auditTimeStart;
    setAuditTimeStartIsSet(true);
    this.auditTimeEnd = auditTimeEnd;
    setAuditTimeEndIsSet(true);
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductFilterReqVo(ProductFilterReqVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.productCategoryId = other.productCategoryId;
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetIsMarketable()) {
      this.isMarketable = other.isMarketable;
    }
    if (other.isSetFilterStatuts()) {
      this.filterStatuts = other.filterStatuts;
    }
    if (other.isSetAuditState()) {
      this.auditState = other.auditState;
    }
    if (other.isSetFilterAuditState()) {
      this.filterAuditState = other.filterAuditState;
    }
    if (other.isSetIsSeckill()) {
      this.isSeckill = other.isSeckill;
    }
    this.startTimeStart = other.startTimeStart;
    this.startTimeEnd = other.startTimeEnd;
    this.endTimeStart = other.endTimeStart;
    this.endTimeEnd = other.endTimeEnd;
    this.auditTimeStart = other.auditTimeStart;
    this.auditTimeEnd = other.auditTimeEnd;
    this.priceStart = other.priceStart;
    this.priceEnd = other.priceEnd;
  }

  public ProductFilterReqVo deepCopy() {
    return new ProductFilterReqVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.merchantId = null;
    this.type = null;
    this.productName = null;
    setProductCategoryIdIsSet(false);
    this.productCategoryId = 0;
    this.orgCode = null;
    this.merchantName = null;
    this.isMarketable = null;
    this.filterStatuts = null;
    this.auditState = null;
    this.filterAuditState = null;
    this.isSeckill = null;
    setStartTimeStartIsSet(false);
    this.startTimeStart = 0;
    setStartTimeEndIsSet(false);
    this.startTimeEnd = 0;
    setEndTimeStartIsSet(false);
    this.endTimeStart = 0;
    setEndTimeEndIsSet(false);
    this.endTimeEnd = 0;
    setAuditTimeStartIsSet(false);
    this.auditTimeStart = 0;
    setAuditTimeEndIsSet(false);
    this.auditTimeEnd = 0;
    setPriceStartIsSet(false);
    this.priceStart = 0.0;
    setPriceEndIsSet(false);
    this.priceEnd = 0.0;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public ProductFilterReqVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public ProductFilterReqVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商品类型 ('1,2'可以逗号分隔查询多个商品类型)"1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public String getType() {
    return this.type;
  }

  /**
   * 商品类型 ('1,2'可以逗号分隔查询多个商品类型)"1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public ProductFilterReqVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 商品名模糊查询 简称和全称模糊查询
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名模糊查询 简称和全称模糊查询
   */
  public ProductFilterReqVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品分类ID
   */
  public long getProductCategoryId() {
    return this.productCategoryId;
  }

  /**
   * 商品分类ID
   */
  public ProductFilterReqVo setProductCategoryId(long productCategoryId) {
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    return this;
  }

  public void unsetProductCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field productCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  public void setProductCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID, value);
  }

  /**
   * 机构号查询 '340000,340101'可以逗号分隔查询多个机构下的商品
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号查询 '340000,340101'可以逗号分隔查询多个机构下的商品
   */
  public ProductFilterReqVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 商户名模糊查询
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名模糊查询
   */
  public ProductFilterReqVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public String getIsMarketable() {
    return this.isMarketable;
  }

  /**
   * 上架状态: 0未上架,1已上架,2已下架
   */
  public ProductFilterReqVo setIsMarketable(String isMarketable) {
    this.isMarketable = isMarketable;
    return this;
  }

  public void unsetIsMarketable() {
    this.isMarketable = null;
  }

  /** Returns true if field isMarketable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMarketable() {
    return this.isMarketable != null;
  }

  public void setIsMarketableIsSet(boolean value) {
    if (!value) {
      this.isMarketable = null;
    }
  }

  /**
   * 需要过滤掉不返回的上架状态
   */
  public String getFilterStatuts() {
    return this.filterStatuts;
  }

  /**
   * 需要过滤掉不返回的上架状态
   */
  public ProductFilterReqVo setFilterStatuts(String filterStatuts) {
    this.filterStatuts = filterStatuts;
    return this;
  }

  public void unsetFilterStatuts() {
    this.filterStatuts = null;
  }

  /** Returns true if field filterStatuts is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterStatuts() {
    return this.filterStatuts != null;
  }

  public void setFilterStatutsIsSet(boolean value) {
    if (!value) {
      this.filterStatuts = null;
    }
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String getAuditState() {
    return this.auditState;
  }

  /**
   * 审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public ProductFilterReqVo setAuditState(String auditState) {
    this.auditState = auditState;
    return this;
  }

  public void unsetAuditState() {
    this.auditState = null;
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return this.auditState != null;
  }

  public void setAuditStateIsSet(boolean value) {
    if (!value) {
      this.auditState = null;
    }
  }

  /**
   * 需要过滤掉不返回的审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String getFilterAuditState() {
    return this.filterAuditState;
  }

  /**
   * 需要过滤掉不返回的审核状态("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public ProductFilterReqVo setFilterAuditState(String filterAuditState) {
    this.filterAuditState = filterAuditState;
    return this;
  }

  public void unsetFilterAuditState() {
    this.filterAuditState = null;
  }

  /** Returns true if field filterAuditState is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterAuditState() {
    return this.filterAuditState != null;
  }

  public void setFilterAuditStateIsSet(boolean value) {
    if (!value) {
      this.filterAuditState = null;
    }
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String getIsSeckill() {
    return this.isSeckill;
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public ProductFilterReqVo setIsSeckill(String isSeckill) {
    this.isSeckill = isSeckill;
    return this;
  }

  public void unsetIsSeckill() {
    this.isSeckill = null;
  }

  /** Returns true if field isSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeckill() {
    return this.isSeckill != null;
  }

  public void setIsSeckillIsSet(boolean value) {
    if (!value) {
      this.isSeckill = null;
    }
  }

  /**
   * 销售开始时间 开始范围
   */
  public long getStartTimeStart() {
    return this.startTimeStart;
  }

  /**
   * 销售开始时间 开始范围
   */
  public ProductFilterReqVo setStartTimeStart(long startTimeStart) {
    this.startTimeStart = startTimeStart;
    setStartTimeStartIsSet(true);
    return this;
  }

  public void unsetStartTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTART_ISSET_ID);
  }

  /** Returns true if field startTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTART_ISSET_ID);
  }

  public void setStartTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTART_ISSET_ID, value);
  }

  /**
   * 销售开始时间 结束范围
   */
  public long getStartTimeEnd() {
    return this.startTimeEnd;
  }

  /**
   * 销售开始时间 结束范围
   */
  public ProductFilterReqVo setStartTimeEnd(long startTimeEnd) {
    this.startTimeEnd = startTimeEnd;
    setStartTimeEndIsSet(true);
    return this;
  }

  public void unsetStartTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMEEND_ISSET_ID);
  }

  /** Returns true if field startTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMEEND_ISSET_ID);
  }

  public void setStartTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMEEND_ISSET_ID, value);
  }

  /**
   * 销售结束时间 开始范围
   */
  public long getEndTimeStart() {
    return this.endTimeStart;
  }

  /**
   * 销售结束时间 开始范围
   */
  public ProductFilterReqVo setEndTimeStart(long endTimeStart) {
    this.endTimeStart = endTimeStart;
    setEndTimeStartIsSet(true);
    return this;
  }

  public void unsetEndTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMESTART_ISSET_ID);
  }

  /** Returns true if field endTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMESTART_ISSET_ID);
  }

  public void setEndTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMESTART_ISSET_ID, value);
  }

  /**
   * 销售结束时间 结束范围
   */
  public long getEndTimeEnd() {
    return this.endTimeEnd;
  }

  /**
   * 销售结束时间 结束范围
   */
  public ProductFilterReqVo setEndTimeEnd(long endTimeEnd) {
    this.endTimeEnd = endTimeEnd;
    setEndTimeEndIsSet(true);
    return this;
  }

  public void unsetEndTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMEEND_ISSET_ID);
  }

  /** Returns true if field endTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMEEND_ISSET_ID);
  }

  public void setEndTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMEEND_ISSET_ID, value);
  }

  /**
   * 审核时间开始范围
   */
  public long getAuditTimeStart() {
    return this.auditTimeStart;
  }

  /**
   * 审核时间开始范围
   */
  public ProductFilterReqVo setAuditTimeStart(long auditTimeStart) {
    this.auditTimeStart = auditTimeStart;
    setAuditTimeStartIsSet(true);
    return this;
  }

  public void unsetAuditTimeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITTIMESTART_ISSET_ID);
  }

  /** Returns true if field auditTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTimeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITTIMESTART_ISSET_ID);
  }

  public void setAuditTimeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITTIMESTART_ISSET_ID, value);
  }

  /**
   * 审核时间结束范围
   */
  public long getAuditTimeEnd() {
    return this.auditTimeEnd;
  }

  /**
   * 审核时间结束范围
   */
  public ProductFilterReqVo setAuditTimeEnd(long auditTimeEnd) {
    this.auditTimeEnd = auditTimeEnd;
    setAuditTimeEndIsSet(true);
    return this;
  }

  public void unsetAuditTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITTIMEEND_ISSET_ID);
  }

  /** Returns true if field auditTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITTIMEEND_ISSET_ID);
  }

  public void setAuditTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITTIMEEND_ISSET_ID, value);
  }

  /**
   * 销售价 开始范围
   */
  public double getPriceStart() {
    return this.priceStart;
  }

  /**
   * 销售价 开始范围
   */
  public ProductFilterReqVo setPriceStart(double priceStart) {
    this.priceStart = priceStart;
    setPriceStartIsSet(true);
    return this;
  }

  public void unsetPriceStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICESTART_ISSET_ID);
  }

  /** Returns true if field priceStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceStart() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICESTART_ISSET_ID);
  }

  public void setPriceStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICESTART_ISSET_ID, value);
  }

  /**
   * 销售价结束范围
   */
  public double getPriceEnd() {
    return this.priceEnd;
  }

  /**
   * 销售价结束范围
   */
  public ProductFilterReqVo setPriceEnd(double priceEnd) {
    this.priceEnd = priceEnd;
    setPriceEndIsSet(true);
    return this;
  }

  public void unsetPriceEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICEEND_ISSET_ID);
  }

  /** Returns true if field priceEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICEEND_ISSET_ID);
  }

  public void setPriceEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICEEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_CATEGORY_ID:
      if (value == null) {
        unsetProductCategoryId();
      } else {
        setProductCategoryId((Long)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case IS_MARKETABLE:
      if (value == null) {
        unsetIsMarketable();
      } else {
        setIsMarketable((String)value);
      }
      break;

    case FILTER_STATUTS:
      if (value == null) {
        unsetFilterStatuts();
      } else {
        setFilterStatuts((String)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((String)value);
      }
      break;

    case FILTER_AUDIT_STATE:
      if (value == null) {
        unsetFilterAuditState();
      } else {
        setFilterAuditState((String)value);
      }
      break;

    case IS_SECKILL:
      if (value == null) {
        unsetIsSeckill();
      } else {
        setIsSeckill((String)value);
      }
      break;

    case START_TIME_START:
      if (value == null) {
        unsetStartTimeStart();
      } else {
        setStartTimeStart((Long)value);
      }
      break;

    case START_TIME_END:
      if (value == null) {
        unsetStartTimeEnd();
      } else {
        setStartTimeEnd((Long)value);
      }
      break;

    case END_TIME_START:
      if (value == null) {
        unsetEndTimeStart();
      } else {
        setEndTimeStart((Long)value);
      }
      break;

    case END_TIME_END:
      if (value == null) {
        unsetEndTimeEnd();
      } else {
        setEndTimeEnd((Long)value);
      }
      break;

    case AUDIT_TIME_START:
      if (value == null) {
        unsetAuditTimeStart();
      } else {
        setAuditTimeStart((Long)value);
      }
      break;

    case AUDIT_TIME_END:
      if (value == null) {
        unsetAuditTimeEnd();
      } else {
        setAuditTimeEnd((Long)value);
      }
      break;

    case PRICE_START:
      if (value == null) {
        unsetPriceStart();
      } else {
        setPriceStart((Double)value);
      }
      break;

    case PRICE_END:
      if (value == null) {
        unsetPriceEnd();
      } else {
        setPriceEnd((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MERCHANT_ID:
      return getMerchantId();

    case TYPE:
      return getType();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_CATEGORY_ID:
      return Long.valueOf(getProductCategoryId());

    case ORG_CODE:
      return getOrgCode();

    case MERCHANT_NAME:
      return getMerchantName();

    case IS_MARKETABLE:
      return getIsMarketable();

    case FILTER_STATUTS:
      return getFilterStatuts();

    case AUDIT_STATE:
      return getAuditState();

    case FILTER_AUDIT_STATE:
      return getFilterAuditState();

    case IS_SECKILL:
      return getIsSeckill();

    case START_TIME_START:
      return Long.valueOf(getStartTimeStart());

    case START_TIME_END:
      return Long.valueOf(getStartTimeEnd());

    case END_TIME_START:
      return Long.valueOf(getEndTimeStart());

    case END_TIME_END:
      return Long.valueOf(getEndTimeEnd());

    case AUDIT_TIME_START:
      return Long.valueOf(getAuditTimeStart());

    case AUDIT_TIME_END:
      return Long.valueOf(getAuditTimeEnd());

    case PRICE_START:
      return Double.valueOf(getPriceStart());

    case PRICE_END:
      return Double.valueOf(getPriceEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case TYPE:
      return isSetType();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_CATEGORY_ID:
      return isSetProductCategoryId();
    case ORG_CODE:
      return isSetOrgCode();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case IS_MARKETABLE:
      return isSetIsMarketable();
    case FILTER_STATUTS:
      return isSetFilterStatuts();
    case AUDIT_STATE:
      return isSetAuditState();
    case FILTER_AUDIT_STATE:
      return isSetFilterAuditState();
    case IS_SECKILL:
      return isSetIsSeckill();
    case START_TIME_START:
      return isSetStartTimeStart();
    case START_TIME_END:
      return isSetStartTimeEnd();
    case END_TIME_START:
      return isSetEndTimeStart();
    case END_TIME_END:
      return isSetEndTimeEnd();
    case AUDIT_TIME_START:
      return isSetAuditTimeStart();
    case AUDIT_TIME_END:
      return isSetAuditTimeEnd();
    case PRICE_START:
      return isSetPriceStart();
    case PRICE_END:
      return isSetPriceEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductFilterReqVo)
      return this.equals((ProductFilterReqVo)that);
    return false;
  }

  public boolean equals(ProductFilterReqVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productCategoryId = true;
    boolean that_present_productCategoryId = true;
    if (this_present_productCategoryId || that_present_productCategoryId) {
      if (!(this_present_productCategoryId && that_present_productCategoryId))
        return false;
      if (this.productCategoryId != that.productCategoryId)
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_isMarketable = true && this.isSetIsMarketable();
    boolean that_present_isMarketable = true && that.isSetIsMarketable();
    if (this_present_isMarketable || that_present_isMarketable) {
      if (!(this_present_isMarketable && that_present_isMarketable))
        return false;
      if (!this.isMarketable.equals(that.isMarketable))
        return false;
    }

    boolean this_present_filterStatuts = true && this.isSetFilterStatuts();
    boolean that_present_filterStatuts = true && that.isSetFilterStatuts();
    if (this_present_filterStatuts || that_present_filterStatuts) {
      if (!(this_present_filterStatuts && that_present_filterStatuts))
        return false;
      if (!this.filterStatuts.equals(that.filterStatuts))
        return false;
    }

    boolean this_present_auditState = true && this.isSetAuditState();
    boolean that_present_auditState = true && that.isSetAuditState();
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (!this.auditState.equals(that.auditState))
        return false;
    }

    boolean this_present_filterAuditState = true && this.isSetFilterAuditState();
    boolean that_present_filterAuditState = true && that.isSetFilterAuditState();
    if (this_present_filterAuditState || that_present_filterAuditState) {
      if (!(this_present_filterAuditState && that_present_filterAuditState))
        return false;
      if (!this.filterAuditState.equals(that.filterAuditState))
        return false;
    }

    boolean this_present_isSeckill = true && this.isSetIsSeckill();
    boolean that_present_isSeckill = true && that.isSetIsSeckill();
    if (this_present_isSeckill || that_present_isSeckill) {
      if (!(this_present_isSeckill && that_present_isSeckill))
        return false;
      if (!this.isSeckill.equals(that.isSeckill))
        return false;
    }

    boolean this_present_startTimeStart = true;
    boolean that_present_startTimeStart = true;
    if (this_present_startTimeStart || that_present_startTimeStart) {
      if (!(this_present_startTimeStart && that_present_startTimeStart))
        return false;
      if (this.startTimeStart != that.startTimeStart)
        return false;
    }

    boolean this_present_startTimeEnd = true;
    boolean that_present_startTimeEnd = true;
    if (this_present_startTimeEnd || that_present_startTimeEnd) {
      if (!(this_present_startTimeEnd && that_present_startTimeEnd))
        return false;
      if (this.startTimeEnd != that.startTimeEnd)
        return false;
    }

    boolean this_present_endTimeStart = true;
    boolean that_present_endTimeStart = true;
    if (this_present_endTimeStart || that_present_endTimeStart) {
      if (!(this_present_endTimeStart && that_present_endTimeStart))
        return false;
      if (this.endTimeStart != that.endTimeStart)
        return false;
    }

    boolean this_present_endTimeEnd = true;
    boolean that_present_endTimeEnd = true;
    if (this_present_endTimeEnd || that_present_endTimeEnd) {
      if (!(this_present_endTimeEnd && that_present_endTimeEnd))
        return false;
      if (this.endTimeEnd != that.endTimeEnd)
        return false;
    }

    boolean this_present_auditTimeStart = true;
    boolean that_present_auditTimeStart = true;
    if (this_present_auditTimeStart || that_present_auditTimeStart) {
      if (!(this_present_auditTimeStart && that_present_auditTimeStart))
        return false;
      if (this.auditTimeStart != that.auditTimeStart)
        return false;
    }

    boolean this_present_auditTimeEnd = true;
    boolean that_present_auditTimeEnd = true;
    if (this_present_auditTimeEnd || that_present_auditTimeEnd) {
      if (!(this_present_auditTimeEnd && that_present_auditTimeEnd))
        return false;
      if (this.auditTimeEnd != that.auditTimeEnd)
        return false;
    }

    boolean this_present_priceStart = true;
    boolean that_present_priceStart = true;
    if (this_present_priceStart || that_present_priceStart) {
      if (!(this_present_priceStart && that_present_priceStart))
        return false;
      if (this.priceStart != that.priceStart)
        return false;
    }

    boolean this_present_priceEnd = true;
    boolean that_present_priceEnd = true;
    if (this_present_priceEnd || that_present_priceEnd) {
      if (!(this_present_priceEnd && that_present_priceEnd))
        return false;
      if (this.priceEnd != that.priceEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productCategoryId = true;
    list.add(present_productCategoryId);
    if (present_productCategoryId)
      list.add(productCategoryId);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_isMarketable = true && (isSetIsMarketable());
    list.add(present_isMarketable);
    if (present_isMarketable)
      list.add(isMarketable);

    boolean present_filterStatuts = true && (isSetFilterStatuts());
    list.add(present_filterStatuts);
    if (present_filterStatuts)
      list.add(filterStatuts);

    boolean present_auditState = true && (isSetAuditState());
    list.add(present_auditState);
    if (present_auditState)
      list.add(auditState);

    boolean present_filterAuditState = true && (isSetFilterAuditState());
    list.add(present_filterAuditState);
    if (present_filterAuditState)
      list.add(filterAuditState);

    boolean present_isSeckill = true && (isSetIsSeckill());
    list.add(present_isSeckill);
    if (present_isSeckill)
      list.add(isSeckill);

    boolean present_startTimeStart = true;
    list.add(present_startTimeStart);
    if (present_startTimeStart)
      list.add(startTimeStart);

    boolean present_startTimeEnd = true;
    list.add(present_startTimeEnd);
    if (present_startTimeEnd)
      list.add(startTimeEnd);

    boolean present_endTimeStart = true;
    list.add(present_endTimeStart);
    if (present_endTimeStart)
      list.add(endTimeStart);

    boolean present_endTimeEnd = true;
    list.add(present_endTimeEnd);
    if (present_endTimeEnd)
      list.add(endTimeEnd);

    boolean present_auditTimeStart = true;
    list.add(present_auditTimeStart);
    if (present_auditTimeStart)
      list.add(auditTimeStart);

    boolean present_auditTimeEnd = true;
    list.add(present_auditTimeEnd);
    if (present_auditTimeEnd)
      list.add(auditTimeEnd);

    boolean present_priceStart = true;
    list.add(present_priceStart);
    if (present_priceStart)
      list.add(priceStart);

    boolean present_priceEnd = true;
    list.add(present_priceEnd);
    if (present_priceEnd)
      list.add(priceEnd);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductFilterReqVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategoryId()).compareTo(other.isSetProductCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryId, other.productCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMarketable()).compareTo(other.isSetIsMarketable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMarketable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMarketable, other.isMarketable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterStatuts()).compareTo(other.isSetFilterStatuts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterStatuts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterStatuts, other.filterStatuts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterAuditState()).compareTo(other.isSetFilterAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterAuditState, other.filterAuditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeckill()).compareTo(other.isSetIsSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeckill, other.isSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeStart()).compareTo(other.isSetStartTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeStart, other.startTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeEnd()).compareTo(other.isSetStartTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeEnd, other.startTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimeStart()).compareTo(other.isSetEndTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimeStart, other.endTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimeEnd()).compareTo(other.isSetEndTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimeEnd, other.endTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditTimeStart()).compareTo(other.isSetAuditTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTimeStart, other.auditTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditTimeEnd()).compareTo(other.isSetAuditTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTimeEnd, other.auditTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceStart()).compareTo(other.isSetPriceStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceStart, other.priceStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceEnd()).compareTo(other.isSetPriceEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceEnd, other.priceEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductFilterReqVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategoryId:");
    sb.append(this.productCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMarketable:");
    if (this.isMarketable == null) {
      sb.append("null");
    } else {
      sb.append(this.isMarketable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filterStatuts:");
    if (this.filterStatuts == null) {
      sb.append("null");
    } else {
      sb.append(this.filterStatuts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditState:");
    if (this.auditState == null) {
      sb.append("null");
    } else {
      sb.append(this.auditState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filterAuditState:");
    if (this.filterAuditState == null) {
      sb.append("null");
    } else {
      sb.append(this.filterAuditState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeckill:");
    if (this.isSeckill == null) {
      sb.append("null");
    } else {
      sb.append(this.isSeckill);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeStart:");
    sb.append(this.startTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeEnd:");
    sb.append(this.startTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimeStart:");
    sb.append(this.endTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimeEnd:");
    sb.append(this.endTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditTimeStart:");
    sb.append(this.auditTimeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditTimeEnd:");
    sb.append(this.auditTimeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceStart:");
    sb.append(this.priceStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceEnd:");
    sb.append(this.priceEnd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductFilterReqVoStandardSchemeFactory implements SchemeFactory {
    public ProductFilterReqVoStandardScheme getScheme() {
      return new ProductFilterReqVoStandardScheme();
    }
  }

  private static class ProductFilterReqVoStandardScheme extends StandardScheme<ProductFilterReqVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductFilterReqVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.productCategoryId = iprot.readI64();
              struct.setProductCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MARKETABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMarketable = iprot.readString();
              struct.setIsMarketableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILTER_STATUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filterStatuts = iprot.readString();
              struct.setFilterStatutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditState = iprot.readString();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILTER_AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filterAuditState = iprot.readString();
              struct.setFilterAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isSeckill = iprot.readString();
              struct.setIsSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimeStart = iprot.readI64();
              struct.setStartTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // START_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimeEnd = iprot.readI64();
              struct.setStartTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // END_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimeStart = iprot.readI64();
              struct.setEndTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // END_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimeEnd = iprot.readI64();
              struct.setEndTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // AUDIT_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditTimeStart = iprot.readI64();
              struct.setAuditTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AUDIT_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditTimeEnd = iprot.readI64();
              struct.setAuditTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRICE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceStart = iprot.readDouble();
              struct.setPriceStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRICE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceEnd = iprot.readDouble();
              struct.setPriceEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductFilterReqVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.productCategoryId);
      oprot.writeFieldEnd();
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.isMarketable != null) {
        oprot.writeFieldBegin(IS_MARKETABLE_FIELD_DESC);
        oprot.writeString(struct.isMarketable);
        oprot.writeFieldEnd();
      }
      if (struct.filterStatuts != null) {
        oprot.writeFieldBegin(FILTER_STATUTS_FIELD_DESC);
        oprot.writeString(struct.filterStatuts);
        oprot.writeFieldEnd();
      }
      if (struct.auditState != null) {
        oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
        oprot.writeString(struct.auditState);
        oprot.writeFieldEnd();
      }
      if (struct.filterAuditState != null) {
        oprot.writeFieldBegin(FILTER_AUDIT_STATE_FIELD_DESC);
        oprot.writeString(struct.filterAuditState);
        oprot.writeFieldEnd();
      }
      if (struct.isSeckill != null) {
        oprot.writeFieldBegin(IS_SECKILL_FIELD_DESC);
        oprot.writeString(struct.isSeckill);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.startTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.startTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.endTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.endTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_TIME_START_FIELD_DESC);
      oprot.writeI64(struct.auditTimeStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_TIME_END_FIELD_DESC);
      oprot.writeI64(struct.auditTimeEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_START_FIELD_DESC);
      oprot.writeDouble(struct.priceStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_END_FIELD_DESC);
      oprot.writeDouble(struct.priceEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductFilterReqVoTupleSchemeFactory implements SchemeFactory {
    public ProductFilterReqVoTupleScheme getScheme() {
      return new ProductFilterReqVoTupleScheme();
    }
  }

  private static class ProductFilterReqVoTupleScheme extends TupleScheme<ProductFilterReqVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductFilterReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetProductName()) {
        optionals.set(3);
      }
      if (struct.isSetProductCategoryId()) {
        optionals.set(4);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(5);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(6);
      }
      if (struct.isSetIsMarketable()) {
        optionals.set(7);
      }
      if (struct.isSetFilterStatuts()) {
        optionals.set(8);
      }
      if (struct.isSetAuditState()) {
        optionals.set(9);
      }
      if (struct.isSetFilterAuditState()) {
        optionals.set(10);
      }
      if (struct.isSetIsSeckill()) {
        optionals.set(11);
      }
      if (struct.isSetStartTimeStart()) {
        optionals.set(12);
      }
      if (struct.isSetStartTimeEnd()) {
        optionals.set(13);
      }
      if (struct.isSetEndTimeStart()) {
        optionals.set(14);
      }
      if (struct.isSetEndTimeEnd()) {
        optionals.set(15);
      }
      if (struct.isSetAuditTimeStart()) {
        optionals.set(16);
      }
      if (struct.isSetAuditTimeEnd()) {
        optionals.set(17);
      }
      if (struct.isSetPriceStart()) {
        optionals.set(18);
      }
      if (struct.isSetPriceEnd()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductCategoryId()) {
        oprot.writeI64(struct.productCategoryId);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetIsMarketable()) {
        oprot.writeString(struct.isMarketable);
      }
      if (struct.isSetFilterStatuts()) {
        oprot.writeString(struct.filterStatuts);
      }
      if (struct.isSetAuditState()) {
        oprot.writeString(struct.auditState);
      }
      if (struct.isSetFilterAuditState()) {
        oprot.writeString(struct.filterAuditState);
      }
      if (struct.isSetIsSeckill()) {
        oprot.writeString(struct.isSeckill);
      }
      if (struct.isSetStartTimeStart()) {
        oprot.writeI64(struct.startTimeStart);
      }
      if (struct.isSetStartTimeEnd()) {
        oprot.writeI64(struct.startTimeEnd);
      }
      if (struct.isSetEndTimeStart()) {
        oprot.writeI64(struct.endTimeStart);
      }
      if (struct.isSetEndTimeEnd()) {
        oprot.writeI64(struct.endTimeEnd);
      }
      if (struct.isSetAuditTimeStart()) {
        oprot.writeI64(struct.auditTimeStart);
      }
      if (struct.isSetAuditTimeEnd()) {
        oprot.writeI64(struct.auditTimeEnd);
      }
      if (struct.isSetPriceStart()) {
        oprot.writeDouble(struct.priceStart);
      }
      if (struct.isSetPriceEnd()) {
        oprot.writeDouble(struct.priceEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductFilterReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productCategoryId = iprot.readI64();
        struct.setProductCategoryIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMarketable = iprot.readString();
        struct.setIsMarketableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.filterStatuts = iprot.readString();
        struct.setFilterStatutsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.auditState = iprot.readString();
        struct.setAuditStateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.filterAuditState = iprot.readString();
        struct.setFilterAuditStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isSeckill = iprot.readString();
        struct.setIsSeckillIsSet(true);
      }
      if (incoming.get(12)) {
        struct.startTimeStart = iprot.readI64();
        struct.setStartTimeStartIsSet(true);
      }
      if (incoming.get(13)) {
        struct.startTimeEnd = iprot.readI64();
        struct.setStartTimeEndIsSet(true);
      }
      if (incoming.get(14)) {
        struct.endTimeStart = iprot.readI64();
        struct.setEndTimeStartIsSet(true);
      }
      if (incoming.get(15)) {
        struct.endTimeEnd = iprot.readI64();
        struct.setEndTimeEndIsSet(true);
      }
      if (incoming.get(16)) {
        struct.auditTimeStart = iprot.readI64();
        struct.setAuditTimeStartIsSet(true);
      }
      if (incoming.get(17)) {
        struct.auditTimeEnd = iprot.readI64();
        struct.setAuditTimeEndIsSet(true);
      }
      if (incoming.get(18)) {
        struct.priceStart = iprot.readDouble();
        struct.setPriceStartIsSet(true);
      }
      if (incoming.get(19)) {
        struct.priceEnd = iprot.readDouble();
        struct.setPriceEndIsSet(true);
      }
    }
  }

}

