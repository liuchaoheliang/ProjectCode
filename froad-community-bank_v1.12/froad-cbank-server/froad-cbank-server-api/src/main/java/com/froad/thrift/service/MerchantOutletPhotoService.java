/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantOutletPhotoService {

  /**
   * MerchantOutletPhotoService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 MerchantOutletPhoto
     * @return MerchantOutletPhotoAddVoRes
     * 
     * @param originVo
     * @param merchantOutletPhotoVo
     */
    public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes addMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException;

    /**
     * 批量增加 MerchantOutletPhoto
     * @param list<merchantOutletPhoto>
     * @return list<Common.ResultVo>    结果集
     * 
     * @param originVo
     * @param merchantOutletPhotoVoList
     */
    public List<com.froad.thrift.vo.ResultVo> addMerchantOutletPhotoByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException;

    /**
     * 保存 MerchantOutletPhoto,以上送的集合为准
     * @param list<merchantOutletPhoto>
     * @return Common.ResultVo    结果集
     * 
     * @param originVo
     * @param merchantOutletPhotoVoList
     */
    public com.froad.thrift.vo.ResultVo saveMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException;

    /**
     * 删除 MerchantOutletPhoto
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantOutletPhotoVo
     */
    public com.froad.thrift.vo.ResultVo deleteMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException;

    /**
     * 修改 MerchantOutletPhoto
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantOutletPhotoVo
     */
    public com.froad.thrift.vo.ResultVo updateMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantOutletPhoto
     * @param merchantOutletPhoto
     * @return List<MerchantOutletPhotoVo>
     * 
     * @param merchantOutletPhotoVo
     */
    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhoto(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 MerchantOutletPhoto
     * @param merchantOutletPhoto
     * @return List<MerchantOutletPhotoVo>
     * 
     * @param page
     * @param merchantOutletPhotoVo
     */
    public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes getMerchantOutletPhotoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMerchantOutletPhotoByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantOutletPhoto(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantOutletPhotoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes addMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      send_addMerchantOutletPhoto(originVo, merchantOutletPhotoVo);
      return recv_addMerchantOutletPhoto();
    }

    public void send_addMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      addMerchantOutletPhoto_args args = new addMerchantOutletPhoto_args();
      args.setOriginVo(originVo);
      args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
      sendBase("addMerchantOutletPhoto", args);
    }

    public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes recv_addMerchantOutletPhoto() throws org.apache.thrift.TException
    {
      addMerchantOutletPhoto_result result = new addMerchantOutletPhoto_result();
      receiveBase(result, "addMerchantOutletPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantOutletPhoto failed: unknown result");
    }

    public List<com.froad.thrift.vo.ResultVo> addMerchantOutletPhotoByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException
    {
      send_addMerchantOutletPhotoByBatch(originVo, merchantOutletPhotoVoList);
      return recv_addMerchantOutletPhotoByBatch();
    }

    public void send_addMerchantOutletPhotoByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException
    {
      addMerchantOutletPhotoByBatch_args args = new addMerchantOutletPhotoByBatch_args();
      args.setOriginVo(originVo);
      args.setMerchantOutletPhotoVoList(merchantOutletPhotoVoList);
      sendBase("addMerchantOutletPhotoByBatch", args);
    }

    public List<com.froad.thrift.vo.ResultVo> recv_addMerchantOutletPhotoByBatch() throws org.apache.thrift.TException
    {
      addMerchantOutletPhotoByBatch_result result = new addMerchantOutletPhotoByBatch_result();
      receiveBase(result, "addMerchantOutletPhotoByBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantOutletPhotoByBatch failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo saveMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException
    {
      send_saveMerchantOutletPhoto(originVo, merchantOutletPhotoVoList);
      return recv_saveMerchantOutletPhoto();
    }

    public void send_saveMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) throws org.apache.thrift.TException
    {
      saveMerchantOutletPhoto_args args = new saveMerchantOutletPhoto_args();
      args.setOriginVo(originVo);
      args.setMerchantOutletPhotoVoList(merchantOutletPhotoVoList);
      sendBase("saveMerchantOutletPhoto", args);
    }

    public com.froad.thrift.vo.ResultVo recv_saveMerchantOutletPhoto() throws org.apache.thrift.TException
    {
      saveMerchantOutletPhoto_result result = new saveMerchantOutletPhoto_result();
      receiveBase(result, "saveMerchantOutletPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMerchantOutletPhoto failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      send_deleteMerchantOutletPhoto(originVo, merchantOutletPhotoVo);
      return recv_deleteMerchantOutletPhoto();
    }

    public void send_deleteMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      deleteMerchantOutletPhoto_args args = new deleteMerchantOutletPhoto_args();
      args.setOriginVo(originVo);
      args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
      sendBase("deleteMerchantOutletPhoto", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteMerchantOutletPhoto() throws org.apache.thrift.TException
    {
      deleteMerchantOutletPhoto_result result = new deleteMerchantOutletPhoto_result();
      receiveBase(result, "deleteMerchantOutletPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMerchantOutletPhoto failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      send_updateMerchantOutletPhoto(originVo, merchantOutletPhotoVo);
      return recv_updateMerchantOutletPhoto();
    }

    public void send_updateMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      updateMerchantOutletPhoto_args args = new updateMerchantOutletPhoto_args();
      args.setOriginVo(originVo);
      args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
      sendBase("updateMerchantOutletPhoto", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantOutletPhoto() throws org.apache.thrift.TException
    {
      updateMerchantOutletPhoto_result result = new updateMerchantOutletPhoto_result();
      receiveBase(result, "updateMerchantOutletPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantOutletPhoto failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhoto(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      send_getMerchantOutletPhoto(merchantOutletPhotoVo);
      return recv_getMerchantOutletPhoto();
    }

    public void send_getMerchantOutletPhoto(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      getMerchantOutletPhoto_args args = new getMerchantOutletPhoto_args();
      args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
      sendBase("getMerchantOutletPhoto", args);
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> recv_getMerchantOutletPhoto() throws org.apache.thrift.TException
    {
      getMerchantOutletPhoto_result result = new getMerchantOutletPhoto_result();
      receiveBase(result, "getMerchantOutletPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantOutletPhoto failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes getMerchantOutletPhotoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      send_getMerchantOutletPhotoByPage(page, merchantOutletPhotoVo);
      return recv_getMerchantOutletPhotoByPage();
    }

    public void send_getMerchantOutletPhotoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) throws org.apache.thrift.TException
    {
      getMerchantOutletPhotoByPage_args args = new getMerchantOutletPhotoByPage_args();
      args.setPage(page);
      args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
      sendBase("getMerchantOutletPhotoByPage", args);
    }

    public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes recv_getMerchantOutletPhotoByPage() throws org.apache.thrift.TException
    {
      getMerchantOutletPhotoByPage_result result = new getMerchantOutletPhotoByPage_result();
      receiveBase(result, "getMerchantOutletPhotoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantOutletPhotoByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantOutletPhoto_call method_call = new addMerchantOutletPhoto_call(originVo, merchantOutletPhotoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantOutletPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo;
      public addMerchantOutletPhoto_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantOutletPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantOutletPhoto_args args = new addMerchantOutletPhoto_args();
        args.setOriginVo(originVo);
        args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantOutletPhoto();
      }
    }

    public void addMerchantOutletPhotoByBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantOutletPhotoByBatch_call method_call = new addMerchantOutletPhotoByBatch_call(originVo, merchantOutletPhotoVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantOutletPhotoByBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList;
      public addMerchantOutletPhotoByBatch_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantOutletPhotoByBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantOutletPhotoByBatch_args args = new addMerchantOutletPhotoByBatch_args();
        args.setOriginVo(originVo);
        args.setMerchantOutletPhotoVoList(merchantOutletPhotoVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ResultVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantOutletPhotoByBatch();
      }
    }

    public void saveMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMerchantOutletPhoto_call method_call = new saveMerchantOutletPhoto_call(originVo, merchantOutletPhotoVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMerchantOutletPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList;
      public saveMerchantOutletPhoto_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMerchantOutletPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMerchantOutletPhoto_args args = new saveMerchantOutletPhoto_args();
        args.setOriginVo(originVo);
        args.setMerchantOutletPhotoVoList(merchantOutletPhotoVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMerchantOutletPhoto();
      }
    }

    public void deleteMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMerchantOutletPhoto_call method_call = new deleteMerchantOutletPhoto_call(originVo, merchantOutletPhotoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMerchantOutletPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo;
      public deleteMerchantOutletPhoto_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMerchantOutletPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMerchantOutletPhoto_args args = new deleteMerchantOutletPhoto_args();
        args.setOriginVo(originVo);
        args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMerchantOutletPhoto();
      }
    }

    public void updateMerchantOutletPhoto(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantOutletPhoto_call method_call = new updateMerchantOutletPhoto_call(originVo, merchantOutletPhotoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantOutletPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo;
      public updateMerchantOutletPhoto_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantOutletPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantOutletPhoto_args args = new updateMerchantOutletPhoto_args();
        args.setOriginVo(originVo);
        args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantOutletPhoto();
      }
    }

    public void getMerchantOutletPhoto(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantOutletPhoto_call method_call = new getMerchantOutletPhoto_call(merchantOutletPhotoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantOutletPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo;
      public getMerchantOutletPhoto_call(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantOutletPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantOutletPhoto_args args = new getMerchantOutletPhoto_args();
        args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantOutletPhoto();
      }
    }

    public void getMerchantOutletPhotoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantOutletPhotoByPage_call method_call = new getMerchantOutletPhotoByPage_call(page, merchantOutletPhotoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantOutletPhotoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo;
      public getMerchantOutletPhotoByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantOutletPhotoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantOutletPhotoByPage_args args = new getMerchantOutletPhotoByPage_args();
        args.setPage(page);
        args.setMerchantOutletPhotoVo(merchantOutletPhotoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantOutletPhotoByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantOutletPhoto", new addMerchantOutletPhoto());
      processMap.put("addMerchantOutletPhotoByBatch", new addMerchantOutletPhotoByBatch());
      processMap.put("saveMerchantOutletPhoto", new saveMerchantOutletPhoto());
      processMap.put("deleteMerchantOutletPhoto", new deleteMerchantOutletPhoto());
      processMap.put("updateMerchantOutletPhoto", new updateMerchantOutletPhoto());
      processMap.put("getMerchantOutletPhoto", new getMerchantOutletPhoto());
      processMap.put("getMerchantOutletPhotoByPage", new getMerchantOutletPhotoByPage());
      return processMap;
    }

    public static class addMerchantOutletPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantOutletPhoto_args> {
      public addMerchantOutletPhoto() {
        super("addMerchantOutletPhoto");
      }

      public addMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new addMerchantOutletPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantOutletPhoto_result getResult(I iface, addMerchantOutletPhoto_args args) throws org.apache.thrift.TException {
        addMerchantOutletPhoto_result result = new addMerchantOutletPhoto_result();
        result.success = iface.addMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo);
        return result;
      }
    }

    public static class addMerchantOutletPhotoByBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantOutletPhotoByBatch_args> {
      public addMerchantOutletPhotoByBatch() {
        super("addMerchantOutletPhotoByBatch");
      }

      public addMerchantOutletPhotoByBatch_args getEmptyArgsInstance() {
        return new addMerchantOutletPhotoByBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantOutletPhotoByBatch_result getResult(I iface, addMerchantOutletPhotoByBatch_args args) throws org.apache.thrift.TException {
        addMerchantOutletPhotoByBatch_result result = new addMerchantOutletPhotoByBatch_result();
        result.success = iface.addMerchantOutletPhotoByBatch(args.originVo, args.merchantOutletPhotoVoList);
        return result;
      }
    }

    public static class saveMerchantOutletPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMerchantOutletPhoto_args> {
      public saveMerchantOutletPhoto() {
        super("saveMerchantOutletPhoto");
      }

      public saveMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new saveMerchantOutletPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMerchantOutletPhoto_result getResult(I iface, saveMerchantOutletPhoto_args args) throws org.apache.thrift.TException {
        saveMerchantOutletPhoto_result result = new saveMerchantOutletPhoto_result();
        result.success = iface.saveMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVoList);
        return result;
      }
    }

    public static class deleteMerchantOutletPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMerchantOutletPhoto_args> {
      public deleteMerchantOutletPhoto() {
        super("deleteMerchantOutletPhoto");
      }

      public deleteMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new deleteMerchantOutletPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMerchantOutletPhoto_result getResult(I iface, deleteMerchantOutletPhoto_args args) throws org.apache.thrift.TException {
        deleteMerchantOutletPhoto_result result = new deleteMerchantOutletPhoto_result();
        result.success = iface.deleteMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo);
        return result;
      }
    }

    public static class updateMerchantOutletPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantOutletPhoto_args> {
      public updateMerchantOutletPhoto() {
        super("updateMerchantOutletPhoto");
      }

      public updateMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new updateMerchantOutletPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantOutletPhoto_result getResult(I iface, updateMerchantOutletPhoto_args args) throws org.apache.thrift.TException {
        updateMerchantOutletPhoto_result result = new updateMerchantOutletPhoto_result();
        result.success = iface.updateMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo);
        return result;
      }
    }

    public static class getMerchantOutletPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantOutletPhoto_args> {
      public getMerchantOutletPhoto() {
        super("getMerchantOutletPhoto");
      }

      public getMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new getMerchantOutletPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantOutletPhoto_result getResult(I iface, getMerchantOutletPhoto_args args) throws org.apache.thrift.TException {
        getMerchantOutletPhoto_result result = new getMerchantOutletPhoto_result();
        result.success = iface.getMerchantOutletPhoto(args.merchantOutletPhotoVo);
        return result;
      }
    }

    public static class getMerchantOutletPhotoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantOutletPhotoByPage_args> {
      public getMerchantOutletPhotoByPage() {
        super("getMerchantOutletPhotoByPage");
      }

      public getMerchantOutletPhotoByPage_args getEmptyArgsInstance() {
        return new getMerchantOutletPhotoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantOutletPhotoByPage_result getResult(I iface, getMerchantOutletPhotoByPage_args args) throws org.apache.thrift.TException {
        getMerchantOutletPhotoByPage_result result = new getMerchantOutletPhotoByPage_result();
        result.success = iface.getMerchantOutletPhotoByPage(args.page, args.merchantOutletPhotoVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantOutletPhoto", new addMerchantOutletPhoto());
      processMap.put("addMerchantOutletPhotoByBatch", new addMerchantOutletPhotoByBatch());
      processMap.put("saveMerchantOutletPhoto", new saveMerchantOutletPhoto());
      processMap.put("deleteMerchantOutletPhoto", new deleteMerchantOutletPhoto());
      processMap.put("updateMerchantOutletPhoto", new updateMerchantOutletPhoto());
      processMap.put("getMerchantOutletPhoto", new getMerchantOutletPhoto());
      processMap.put("getMerchantOutletPhotoByPage", new getMerchantOutletPhotoByPage());
      return processMap;
    }

    public static class addMerchantOutletPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantOutletPhoto_args, com.froad.thrift.vo.MerchantOutletPhotoAddVoRes> {
      public addMerchantOutletPhoto() {
        super("addMerchantOutletPhoto");
      }

      public addMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new addMerchantOutletPhoto_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantOutletPhotoAddVoRes o) {
            addMerchantOutletPhoto_result result = new addMerchantOutletPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantOutletPhoto_result result = new addMerchantOutletPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantOutletPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoAddVoRes> resultHandler) throws TException {
        iface.addMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo,resultHandler);
      }
    }

    public static class addMerchantOutletPhotoByBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantOutletPhotoByBatch_args, List<com.froad.thrift.vo.ResultVo>> {
      public addMerchantOutletPhotoByBatch() {
        super("addMerchantOutletPhotoByBatch");
      }

      public addMerchantOutletPhotoByBatch_args getEmptyArgsInstance() {
        return new addMerchantOutletPhotoByBatch_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ResultVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ResultVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ResultVo> o) {
            addMerchantOutletPhotoByBatch_result result = new addMerchantOutletPhotoByBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantOutletPhotoByBatch_result result = new addMerchantOutletPhotoByBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantOutletPhotoByBatch_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ResultVo>> resultHandler) throws TException {
        iface.addMerchantOutletPhotoByBatch(args.originVo, args.merchantOutletPhotoVoList,resultHandler);
      }
    }

    public static class saveMerchantOutletPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMerchantOutletPhoto_args, com.froad.thrift.vo.ResultVo> {
      public saveMerchantOutletPhoto() {
        super("saveMerchantOutletPhoto");
      }

      public saveMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new saveMerchantOutletPhoto_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            saveMerchantOutletPhoto_result result = new saveMerchantOutletPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveMerchantOutletPhoto_result result = new saveMerchantOutletPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMerchantOutletPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.saveMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVoList,resultHandler);
      }
    }

    public static class deleteMerchantOutletPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMerchantOutletPhoto_args, com.froad.thrift.vo.ResultVo> {
      public deleteMerchantOutletPhoto() {
        super("deleteMerchantOutletPhoto");
      }

      public deleteMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new deleteMerchantOutletPhoto_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteMerchantOutletPhoto_result result = new deleteMerchantOutletPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMerchantOutletPhoto_result result = new deleteMerchantOutletPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMerchantOutletPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo,resultHandler);
      }
    }

    public static class updateMerchantOutletPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantOutletPhoto_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantOutletPhoto() {
        super("updateMerchantOutletPhoto");
      }

      public updateMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new updateMerchantOutletPhoto_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantOutletPhoto_result result = new updateMerchantOutletPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantOutletPhoto_result result = new updateMerchantOutletPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantOutletPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantOutletPhoto(args.originVo, args.merchantOutletPhotoVo,resultHandler);
      }
    }

    public static class getMerchantOutletPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantOutletPhoto_args, List<com.froad.thrift.vo.MerchantOutletPhotoVo>> {
      public getMerchantOutletPhoto() {
        super("getMerchantOutletPhoto");
      }

      public getMerchantOutletPhoto_args getEmptyArgsInstance() {
        return new getMerchantOutletPhoto_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantOutletPhotoVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantOutletPhotoVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantOutletPhotoVo> o) {
            getMerchantOutletPhoto_result result = new getMerchantOutletPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantOutletPhoto_result result = new getMerchantOutletPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantOutletPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantOutletPhotoVo>> resultHandler) throws TException {
        iface.getMerchantOutletPhoto(args.merchantOutletPhotoVo,resultHandler);
      }
    }

    public static class getMerchantOutletPhotoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantOutletPhotoByPage_args, com.froad.thrift.vo.MerchantOutletPhotoPageVoRes> {
      public getMerchantOutletPhotoByPage() {
        super("getMerchantOutletPhotoByPage");
      }

      public getMerchantOutletPhotoByPage_args getEmptyArgsInstance() {
        return new getMerchantOutletPhotoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantOutletPhotoPageVoRes o) {
            getMerchantOutletPhotoByPage_result result = new getMerchantOutletPhotoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantOutletPhotoByPage_result result = new getMerchantOutletPhotoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantOutletPhotoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantOutletPhotoPageVoRes> resultHandler) throws TException {
        iface.getMerchantOutletPhotoByPage(args.page, args.merchantOutletPhotoVo,resultHandler);
      }
    }

  }

  public static class addMerchantOutletPhoto_args implements org.apache.thrift.TBase<addMerchantOutletPhoto_args, addMerchantOutletPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOutletPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOutletPhoto_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOutletPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOutletPhoto_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_OUTLET_PHOTO_VO((short)2, "merchantOutletPhotoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_OUTLET_PHOTO_VO
            return MERCHANT_OUTLET_PHOTO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOutletPhoto_args.class, metaDataMap);
    }

    public addMerchantOutletPhoto_args() {
    }

    public addMerchantOutletPhoto_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo)
    {
      this();
      this.originVo = originVo;
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOutletPhoto_args(addMerchantOutletPhoto_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantOutletPhotoVo()) {
        this.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo(other.merchantOutletPhotoVo);
      }
    }

    public addMerchantOutletPhoto_args deepCopy() {
      return new addMerchantOutletPhoto_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantOutletPhotoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantOutletPhoto_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo getMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo;
    }

    public addMerchantOutletPhoto_args setMerchantOutletPhotoVo(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) {
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      return this;
    }

    public void unsetMerchantOutletPhotoVo() {
      this.merchantOutletPhotoVo = null;
    }

    /** Returns true if field merchantOutletPhotoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo != null;
    }

    public void setMerchantOutletPhotoVoIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO:
        if (value == null) {
          unsetMerchantOutletPhotoVo();
        } else {
          setMerchantOutletPhotoVo((com.froad.thrift.vo.MerchantOutletPhotoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_OUTLET_PHOTO_VO:
        return getMerchantOutletPhotoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_OUTLET_PHOTO_VO:
        return isSetMerchantOutletPhotoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOutletPhoto_args)
        return this.equals((addMerchantOutletPhoto_args)that);
      return false;
    }

    public boolean equals(addMerchantOutletPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantOutletPhotoVo = true && this.isSetMerchantOutletPhotoVo();
      boolean that_present_merchantOutletPhotoVo = true && that.isSetMerchantOutletPhotoVo();
      if (this_present_merchantOutletPhotoVo || that_present_merchantOutletPhotoVo) {
        if (!(this_present_merchantOutletPhotoVo && that_present_merchantOutletPhotoVo))
          return false;
        if (!this.merchantOutletPhotoVo.equals(that.merchantOutletPhotoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantOutletPhotoVo = true && (isSetMerchantOutletPhotoVo());
      list.add(present_merchantOutletPhotoVo);
      if (present_merchantOutletPhotoVo)
        list.add(merchantOutletPhotoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOutletPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVo()).compareTo(other.isSetMerchantOutletPhotoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVo, other.merchantOutletPhotoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOutletPhoto_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVo:");
      if (this.merchantOutletPhotoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantOutletPhotoVo != null) {
        merchantOutletPhotoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOutletPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhoto_argsStandardScheme getScheme() {
        return new addMerchantOutletPhoto_argsStandardScheme();
      }
    }

    private static class addMerchantOutletPhoto_argsStandardScheme extends StandardScheme<addMerchantOutletPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                struct.merchantOutletPhotoVo.read(iprot);
                struct.setMerchantOutletPhotoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVo != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC);
          struct.merchantOutletPhotoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOutletPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhoto_argsTupleScheme getScheme() {
        return new addMerchantOutletPhoto_argsTupleScheme();
      }
    }

    private static class addMerchantOutletPhoto_argsTupleScheme extends TupleScheme<addMerchantOutletPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          struct.merchantOutletPhotoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
          struct.merchantOutletPhotoVo.read(iprot);
          struct.setMerchantOutletPhotoVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantOutletPhoto_result implements org.apache.thrift.TBase<addMerchantOutletPhoto_result, addMerchantOutletPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOutletPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOutletPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOutletPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOutletPhoto_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOutletPhoto_result.class, metaDataMap);
    }

    public addMerchantOutletPhoto_result() {
    }

    public addMerchantOutletPhoto_result(
      com.froad.thrift.vo.MerchantOutletPhotoAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOutletPhoto_result(addMerchantOutletPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantOutletPhotoAddVoRes(other.success);
      }
    }

    public addMerchantOutletPhoto_result deepCopy() {
      return new addMerchantOutletPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantOutletPhotoAddVoRes getSuccess() {
      return this.success;
    }

    public addMerchantOutletPhoto_result setSuccess(com.froad.thrift.vo.MerchantOutletPhotoAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantOutletPhotoAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOutletPhoto_result)
        return this.equals((addMerchantOutletPhoto_result)that);
      return false;
    }

    public boolean equals(addMerchantOutletPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOutletPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOutletPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOutletPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhoto_resultStandardScheme getScheme() {
        return new addMerchantOutletPhoto_resultStandardScheme();
      }
    }

    private static class addMerchantOutletPhoto_resultStandardScheme extends StandardScheme<addMerchantOutletPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantOutletPhotoAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOutletPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhoto_resultTupleScheme getScheme() {
        return new addMerchantOutletPhoto_resultTupleScheme();
      }
    }

    private static class addMerchantOutletPhoto_resultTupleScheme extends TupleScheme<addMerchantOutletPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantOutletPhotoAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMerchantOutletPhotoByBatch_args implements org.apache.thrift.TBase<addMerchantOutletPhotoByBatch_args, addMerchantOutletPhotoByBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOutletPhotoByBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOutletPhotoByBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOutletPhotoByBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOutletPhotoByBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_OUTLET_PHOTO_VO_LIST((short)2, "merchantOutletPhotoVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_OUTLET_PHOTO_VO_LIST
            return MERCHANT_OUTLET_PHOTO_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOutletPhotoByBatch_args.class, metaDataMap);
    }

    public addMerchantOutletPhotoByBatch_args() {
    }

    public addMerchantOutletPhotoByBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList)
    {
      this();
      this.originVo = originVo;
      this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOutletPhotoByBatch_args(addMerchantOutletPhotoByBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantOutletPhotoVoList()) {
        List<com.froad.thrift.vo.MerchantOutletPhotoVo> __this__merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(other.merchantOutletPhotoVoList.size());
        for (com.froad.thrift.vo.MerchantOutletPhotoVo other_element : other.merchantOutletPhotoVoList) {
          __this__merchantOutletPhotoVoList.add(new com.froad.thrift.vo.MerchantOutletPhotoVo(other_element));
        }
        this.merchantOutletPhotoVoList = __this__merchantOutletPhotoVoList;
      }
    }

    public addMerchantOutletPhotoByBatch_args deepCopy() {
      return new addMerchantOutletPhotoByBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantOutletPhotoVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantOutletPhotoByBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getMerchantOutletPhotoVoListSize() {
      return (this.merchantOutletPhotoVoList == null) ? 0 : this.merchantOutletPhotoVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhotoVoListIterator() {
      return (this.merchantOutletPhotoVoList == null) ? null : this.merchantOutletPhotoVoList.iterator();
    }

    public void addToMerchantOutletPhotoVoList(com.froad.thrift.vo.MerchantOutletPhotoVo elem) {
      if (this.merchantOutletPhotoVoList == null) {
        this.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>();
      }
      this.merchantOutletPhotoVoList.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhotoVoList() {
      return this.merchantOutletPhotoVoList;
    }

    public addMerchantOutletPhotoByBatch_args setMerchantOutletPhotoVoList(List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) {
      this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
      return this;
    }

    public void unsetMerchantOutletPhotoVoList() {
      this.merchantOutletPhotoVoList = null;
    }

    /** Returns true if field merchantOutletPhotoVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVoList() {
      return this.merchantOutletPhotoVoList != null;
    }

    public void setMerchantOutletPhotoVoListIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        if (value == null) {
          unsetMerchantOutletPhotoVoList();
        } else {
          setMerchantOutletPhotoVoList((List<com.froad.thrift.vo.MerchantOutletPhotoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        return getMerchantOutletPhotoVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        return isSetMerchantOutletPhotoVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOutletPhotoByBatch_args)
        return this.equals((addMerchantOutletPhotoByBatch_args)that);
      return false;
    }

    public boolean equals(addMerchantOutletPhotoByBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantOutletPhotoVoList = true && this.isSetMerchantOutletPhotoVoList();
      boolean that_present_merchantOutletPhotoVoList = true && that.isSetMerchantOutletPhotoVoList();
      if (this_present_merchantOutletPhotoVoList || that_present_merchantOutletPhotoVoList) {
        if (!(this_present_merchantOutletPhotoVoList && that_present_merchantOutletPhotoVoList))
          return false;
        if (!this.merchantOutletPhotoVoList.equals(that.merchantOutletPhotoVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantOutletPhotoVoList = true && (isSetMerchantOutletPhotoVoList());
      list.add(present_merchantOutletPhotoVoList);
      if (present_merchantOutletPhotoVoList)
        list.add(merchantOutletPhotoVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOutletPhotoByBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVoList()).compareTo(other.isSetMerchantOutletPhotoVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVoList, other.merchantOutletPhotoVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOutletPhotoByBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVoList:");
      if (this.merchantOutletPhotoVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOutletPhotoByBatch_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhotoByBatch_argsStandardScheme getScheme() {
        return new addMerchantOutletPhotoByBatch_argsStandardScheme();
      }
    }

    private static class addMerchantOutletPhotoByBatch_argsStandardScheme extends StandardScheme<addMerchantOutletPhotoByBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOutletPhotoByBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list0.size);
                  com.froad.thrift.vo.MerchantOutletPhotoVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                    _elem1.read(iprot);
                    struct.merchantOutletPhotoVoList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setMerchantOutletPhotoVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOutletPhotoByBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVoList != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.merchantOutletPhotoVoList.size()));
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter3 : struct.merchantOutletPhotoVoList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOutletPhotoByBatch_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhotoByBatch_argsTupleScheme getScheme() {
        return new addMerchantOutletPhotoByBatch_argsTupleScheme();
      }
    }

    private static class addMerchantOutletPhotoByBatch_argsTupleScheme extends TupleScheme<addMerchantOutletPhotoByBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhotoByBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVoList()) {
          {
            oprot.writeI32(struct.merchantOutletPhotoVoList.size());
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter4 : struct.merchantOutletPhotoVoList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhotoByBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list5.size);
            com.froad.thrift.vo.MerchantOutletPhotoVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
              _elem6.read(iprot);
              struct.merchantOutletPhotoVoList.add(_elem6);
            }
          }
          struct.setMerchantOutletPhotoVoListIsSet(true);
        }
      }
    }

  }

  public static class addMerchantOutletPhotoByBatch_result implements org.apache.thrift.TBase<addMerchantOutletPhotoByBatch_result, addMerchantOutletPhotoByBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOutletPhotoByBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOutletPhotoByBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOutletPhotoByBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOutletPhotoByBatch_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ResultVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOutletPhotoByBatch_result.class, metaDataMap);
    }

    public addMerchantOutletPhotoByBatch_result() {
    }

    public addMerchantOutletPhotoByBatch_result(
      List<com.froad.thrift.vo.ResultVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOutletPhotoByBatch_result(addMerchantOutletPhotoByBatch_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ResultVo> __this__success = new ArrayList<com.froad.thrift.vo.ResultVo>(other.success.size());
        for (com.froad.thrift.vo.ResultVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ResultVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public addMerchantOutletPhotoByBatch_result deepCopy() {
      return new addMerchantOutletPhotoByBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ResultVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ResultVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ResultVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ResultVo> getSuccess() {
      return this.success;
    }

    public addMerchantOutletPhotoByBatch_result setSuccess(List<com.froad.thrift.vo.ResultVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ResultVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOutletPhotoByBatch_result)
        return this.equals((addMerchantOutletPhotoByBatch_result)that);
      return false;
    }

    public boolean equals(addMerchantOutletPhotoByBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOutletPhotoByBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOutletPhotoByBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOutletPhotoByBatch_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhotoByBatch_resultStandardScheme getScheme() {
        return new addMerchantOutletPhotoByBatch_resultStandardScheme();
      }
    }

    private static class addMerchantOutletPhotoByBatch_resultStandardScheme extends StandardScheme<addMerchantOutletPhotoByBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOutletPhotoByBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ResultVo>(_list8.size);
                  com.froad.thrift.vo.ResultVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.ResultVo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOutletPhotoByBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ResultVo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOutletPhotoByBatch_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantOutletPhotoByBatch_resultTupleScheme getScheme() {
        return new addMerchantOutletPhotoByBatch_resultTupleScheme();
      }
    }

    private static class addMerchantOutletPhotoByBatch_resultTupleScheme extends TupleScheme<addMerchantOutletPhotoByBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhotoByBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ResultVo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOutletPhotoByBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ResultVo>(_list13.size);
            com.froad.thrift.vo.ResultVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.ResultVo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantOutletPhoto_args implements org.apache.thrift.TBase<saveMerchantOutletPhoto_args, saveMerchantOutletPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantOutletPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantOutletPhoto_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantOutletPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantOutletPhoto_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_OUTLET_PHOTO_VO_LIST((short)2, "merchantOutletPhotoVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_OUTLET_PHOTO_VO_LIST
            return MERCHANT_OUTLET_PHOTO_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantOutletPhoto_args.class, metaDataMap);
    }

    public saveMerchantOutletPhoto_args() {
    }

    public saveMerchantOutletPhoto_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList)
    {
      this();
      this.originVo = originVo;
      this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantOutletPhoto_args(saveMerchantOutletPhoto_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantOutletPhotoVoList()) {
        List<com.froad.thrift.vo.MerchantOutletPhotoVo> __this__merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(other.merchantOutletPhotoVoList.size());
        for (com.froad.thrift.vo.MerchantOutletPhotoVo other_element : other.merchantOutletPhotoVoList) {
          __this__merchantOutletPhotoVoList.add(new com.froad.thrift.vo.MerchantOutletPhotoVo(other_element));
        }
        this.merchantOutletPhotoVoList = __this__merchantOutletPhotoVoList;
      }
    }

    public saveMerchantOutletPhoto_args deepCopy() {
      return new saveMerchantOutletPhoto_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantOutletPhotoVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public saveMerchantOutletPhoto_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getMerchantOutletPhotoVoListSize() {
      return (this.merchantOutletPhotoVoList == null) ? 0 : this.merchantOutletPhotoVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhotoVoListIterator() {
      return (this.merchantOutletPhotoVoList == null) ? null : this.merchantOutletPhotoVoList.iterator();
    }

    public void addToMerchantOutletPhotoVoList(com.froad.thrift.vo.MerchantOutletPhotoVo elem) {
      if (this.merchantOutletPhotoVoList == null) {
        this.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>();
      }
      this.merchantOutletPhotoVoList.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getMerchantOutletPhotoVoList() {
      return this.merchantOutletPhotoVoList;
    }

    public saveMerchantOutletPhoto_args setMerchantOutletPhotoVoList(List<com.froad.thrift.vo.MerchantOutletPhotoVo> merchantOutletPhotoVoList) {
      this.merchantOutletPhotoVoList = merchantOutletPhotoVoList;
      return this;
    }

    public void unsetMerchantOutletPhotoVoList() {
      this.merchantOutletPhotoVoList = null;
    }

    /** Returns true if field merchantOutletPhotoVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVoList() {
      return this.merchantOutletPhotoVoList != null;
    }

    public void setMerchantOutletPhotoVoListIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        if (value == null) {
          unsetMerchantOutletPhotoVoList();
        } else {
          setMerchantOutletPhotoVoList((List<com.froad.thrift.vo.MerchantOutletPhotoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        return getMerchantOutletPhotoVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_OUTLET_PHOTO_VO_LIST:
        return isSetMerchantOutletPhotoVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantOutletPhoto_args)
        return this.equals((saveMerchantOutletPhoto_args)that);
      return false;
    }

    public boolean equals(saveMerchantOutletPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantOutletPhotoVoList = true && this.isSetMerchantOutletPhotoVoList();
      boolean that_present_merchantOutletPhotoVoList = true && that.isSetMerchantOutletPhotoVoList();
      if (this_present_merchantOutletPhotoVoList || that_present_merchantOutletPhotoVoList) {
        if (!(this_present_merchantOutletPhotoVoList && that_present_merchantOutletPhotoVoList))
          return false;
        if (!this.merchantOutletPhotoVoList.equals(that.merchantOutletPhotoVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantOutletPhotoVoList = true && (isSetMerchantOutletPhotoVoList());
      list.add(present_merchantOutletPhotoVoList);
      if (present_merchantOutletPhotoVoList)
        list.add(merchantOutletPhotoVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantOutletPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVoList()).compareTo(other.isSetMerchantOutletPhotoVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVoList, other.merchantOutletPhotoVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantOutletPhoto_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVoList:");
      if (this.merchantOutletPhotoVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantOutletPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public saveMerchantOutletPhoto_argsStandardScheme getScheme() {
        return new saveMerchantOutletPhoto_argsStandardScheme();
      }
    }

    private static class saveMerchantOutletPhoto_argsStandardScheme extends StandardScheme<saveMerchantOutletPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list16.size);
                  com.froad.thrift.vo.MerchantOutletPhotoVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                    _elem17.read(iprot);
                    struct.merchantOutletPhotoVoList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setMerchantOutletPhotoVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVoList != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.merchantOutletPhotoVoList.size()));
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter19 : struct.merchantOutletPhotoVoList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantOutletPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public saveMerchantOutletPhoto_argsTupleScheme getScheme() {
        return new saveMerchantOutletPhoto_argsTupleScheme();
      }
    }

    private static class saveMerchantOutletPhoto_argsTupleScheme extends TupleScheme<saveMerchantOutletPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVoList()) {
          {
            oprot.writeI32(struct.merchantOutletPhotoVoList.size());
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter20 : struct.merchantOutletPhotoVoList)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.merchantOutletPhotoVoList = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list21.size);
            com.froad.thrift.vo.MerchantOutletPhotoVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
              _elem22.read(iprot);
              struct.merchantOutletPhotoVoList.add(_elem22);
            }
          }
          struct.setMerchantOutletPhotoVoListIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantOutletPhoto_result implements org.apache.thrift.TBase<saveMerchantOutletPhoto_result, saveMerchantOutletPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantOutletPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantOutletPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantOutletPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantOutletPhoto_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantOutletPhoto_result.class, metaDataMap);
    }

    public saveMerchantOutletPhoto_result() {
    }

    public saveMerchantOutletPhoto_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantOutletPhoto_result(saveMerchantOutletPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public saveMerchantOutletPhoto_result deepCopy() {
      return new saveMerchantOutletPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public saveMerchantOutletPhoto_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantOutletPhoto_result)
        return this.equals((saveMerchantOutletPhoto_result)that);
      return false;
    }

    public boolean equals(saveMerchantOutletPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantOutletPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantOutletPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantOutletPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public saveMerchantOutletPhoto_resultStandardScheme getScheme() {
        return new saveMerchantOutletPhoto_resultStandardScheme();
      }
    }

    private static class saveMerchantOutletPhoto_resultStandardScheme extends StandardScheme<saveMerchantOutletPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantOutletPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public saveMerchantOutletPhoto_resultTupleScheme getScheme() {
        return new saveMerchantOutletPhoto_resultTupleScheme();
      }
    }

    private static class saveMerchantOutletPhoto_resultTupleScheme extends TupleScheme<saveMerchantOutletPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantOutletPhoto_args implements org.apache.thrift.TBase<deleteMerchantOutletPhoto_args, deleteMerchantOutletPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantOutletPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantOutletPhoto_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantOutletPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantOutletPhoto_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_OUTLET_PHOTO_VO((short)2, "merchantOutletPhotoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_OUTLET_PHOTO_VO
            return MERCHANT_OUTLET_PHOTO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantOutletPhoto_args.class, metaDataMap);
    }

    public deleteMerchantOutletPhoto_args() {
    }

    public deleteMerchantOutletPhoto_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo)
    {
      this();
      this.originVo = originVo;
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantOutletPhoto_args(deleteMerchantOutletPhoto_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantOutletPhotoVo()) {
        this.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo(other.merchantOutletPhotoVo);
      }
    }

    public deleteMerchantOutletPhoto_args deepCopy() {
      return new deleteMerchantOutletPhoto_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantOutletPhotoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteMerchantOutletPhoto_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo getMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo;
    }

    public deleteMerchantOutletPhoto_args setMerchantOutletPhotoVo(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) {
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      return this;
    }

    public void unsetMerchantOutletPhotoVo() {
      this.merchantOutletPhotoVo = null;
    }

    /** Returns true if field merchantOutletPhotoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo != null;
    }

    public void setMerchantOutletPhotoVoIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO:
        if (value == null) {
          unsetMerchantOutletPhotoVo();
        } else {
          setMerchantOutletPhotoVo((com.froad.thrift.vo.MerchantOutletPhotoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_OUTLET_PHOTO_VO:
        return getMerchantOutletPhotoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_OUTLET_PHOTO_VO:
        return isSetMerchantOutletPhotoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantOutletPhoto_args)
        return this.equals((deleteMerchantOutletPhoto_args)that);
      return false;
    }

    public boolean equals(deleteMerchantOutletPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantOutletPhotoVo = true && this.isSetMerchantOutletPhotoVo();
      boolean that_present_merchantOutletPhotoVo = true && that.isSetMerchantOutletPhotoVo();
      if (this_present_merchantOutletPhotoVo || that_present_merchantOutletPhotoVo) {
        if (!(this_present_merchantOutletPhotoVo && that_present_merchantOutletPhotoVo))
          return false;
        if (!this.merchantOutletPhotoVo.equals(that.merchantOutletPhotoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantOutletPhotoVo = true && (isSetMerchantOutletPhotoVo());
      list.add(present_merchantOutletPhotoVo);
      if (present_merchantOutletPhotoVo)
        list.add(merchantOutletPhotoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantOutletPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVo()).compareTo(other.isSetMerchantOutletPhotoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVo, other.merchantOutletPhotoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantOutletPhoto_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVo:");
      if (this.merchantOutletPhotoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantOutletPhotoVo != null) {
        merchantOutletPhotoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantOutletPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantOutletPhoto_argsStandardScheme getScheme() {
        return new deleteMerchantOutletPhoto_argsStandardScheme();
      }
    }

    private static class deleteMerchantOutletPhoto_argsStandardScheme extends StandardScheme<deleteMerchantOutletPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                struct.merchantOutletPhotoVo.read(iprot);
                struct.setMerchantOutletPhotoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVo != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC);
          struct.merchantOutletPhotoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantOutletPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantOutletPhoto_argsTupleScheme getScheme() {
        return new deleteMerchantOutletPhoto_argsTupleScheme();
      }
    }

    private static class deleteMerchantOutletPhoto_argsTupleScheme extends TupleScheme<deleteMerchantOutletPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          struct.merchantOutletPhotoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
          struct.merchantOutletPhotoVo.read(iprot);
          struct.setMerchantOutletPhotoVoIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantOutletPhoto_result implements org.apache.thrift.TBase<deleteMerchantOutletPhoto_result, deleteMerchantOutletPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantOutletPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantOutletPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantOutletPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantOutletPhoto_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantOutletPhoto_result.class, metaDataMap);
    }

    public deleteMerchantOutletPhoto_result() {
    }

    public deleteMerchantOutletPhoto_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantOutletPhoto_result(deleteMerchantOutletPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteMerchantOutletPhoto_result deepCopy() {
      return new deleteMerchantOutletPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteMerchantOutletPhoto_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantOutletPhoto_result)
        return this.equals((deleteMerchantOutletPhoto_result)that);
      return false;
    }

    public boolean equals(deleteMerchantOutletPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantOutletPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantOutletPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantOutletPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantOutletPhoto_resultStandardScheme getScheme() {
        return new deleteMerchantOutletPhoto_resultStandardScheme();
      }
    }

    private static class deleteMerchantOutletPhoto_resultStandardScheme extends StandardScheme<deleteMerchantOutletPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantOutletPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantOutletPhoto_resultTupleScheme getScheme() {
        return new deleteMerchantOutletPhoto_resultTupleScheme();
      }
    }

    private static class deleteMerchantOutletPhoto_resultTupleScheme extends TupleScheme<deleteMerchantOutletPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantOutletPhoto_args implements org.apache.thrift.TBase<updateMerchantOutletPhoto_args, updateMerchantOutletPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantOutletPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantOutletPhoto_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantOutletPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantOutletPhoto_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_OUTLET_PHOTO_VO((short)2, "merchantOutletPhotoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_OUTLET_PHOTO_VO
            return MERCHANT_OUTLET_PHOTO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantOutletPhoto_args.class, metaDataMap);
    }

    public updateMerchantOutletPhoto_args() {
    }

    public updateMerchantOutletPhoto_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo)
    {
      this();
      this.originVo = originVo;
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantOutletPhoto_args(updateMerchantOutletPhoto_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantOutletPhotoVo()) {
        this.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo(other.merchantOutletPhotoVo);
      }
    }

    public updateMerchantOutletPhoto_args deepCopy() {
      return new updateMerchantOutletPhoto_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantOutletPhotoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateMerchantOutletPhoto_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo getMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo;
    }

    public updateMerchantOutletPhoto_args setMerchantOutletPhotoVo(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) {
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      return this;
    }

    public void unsetMerchantOutletPhotoVo() {
      this.merchantOutletPhotoVo = null;
    }

    /** Returns true if field merchantOutletPhotoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo != null;
    }

    public void setMerchantOutletPhotoVoIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO:
        if (value == null) {
          unsetMerchantOutletPhotoVo();
        } else {
          setMerchantOutletPhotoVo((com.froad.thrift.vo.MerchantOutletPhotoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_OUTLET_PHOTO_VO:
        return getMerchantOutletPhotoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_OUTLET_PHOTO_VO:
        return isSetMerchantOutletPhotoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantOutletPhoto_args)
        return this.equals((updateMerchantOutletPhoto_args)that);
      return false;
    }

    public boolean equals(updateMerchantOutletPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantOutletPhotoVo = true && this.isSetMerchantOutletPhotoVo();
      boolean that_present_merchantOutletPhotoVo = true && that.isSetMerchantOutletPhotoVo();
      if (this_present_merchantOutletPhotoVo || that_present_merchantOutletPhotoVo) {
        if (!(this_present_merchantOutletPhotoVo && that_present_merchantOutletPhotoVo))
          return false;
        if (!this.merchantOutletPhotoVo.equals(that.merchantOutletPhotoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantOutletPhotoVo = true && (isSetMerchantOutletPhotoVo());
      list.add(present_merchantOutletPhotoVo);
      if (present_merchantOutletPhotoVo)
        list.add(merchantOutletPhotoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantOutletPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVo()).compareTo(other.isSetMerchantOutletPhotoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVo, other.merchantOutletPhotoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantOutletPhoto_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVo:");
      if (this.merchantOutletPhotoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantOutletPhotoVo != null) {
        merchantOutletPhotoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantOutletPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantOutletPhoto_argsStandardScheme getScheme() {
        return new updateMerchantOutletPhoto_argsStandardScheme();
      }
    }

    private static class updateMerchantOutletPhoto_argsStandardScheme extends StandardScheme<updateMerchantOutletPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                struct.merchantOutletPhotoVo.read(iprot);
                struct.setMerchantOutletPhotoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVo != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC);
          struct.merchantOutletPhotoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantOutletPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantOutletPhoto_argsTupleScheme getScheme() {
        return new updateMerchantOutletPhoto_argsTupleScheme();
      }
    }

    private static class updateMerchantOutletPhoto_argsTupleScheme extends TupleScheme<updateMerchantOutletPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          struct.merchantOutletPhotoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
          struct.merchantOutletPhotoVo.read(iprot);
          struct.setMerchantOutletPhotoVoIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantOutletPhoto_result implements org.apache.thrift.TBase<updateMerchantOutletPhoto_result, updateMerchantOutletPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantOutletPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantOutletPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantOutletPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantOutletPhoto_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantOutletPhoto_result.class, metaDataMap);
    }

    public updateMerchantOutletPhoto_result() {
    }

    public updateMerchantOutletPhoto_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantOutletPhoto_result(updateMerchantOutletPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantOutletPhoto_result deepCopy() {
      return new updateMerchantOutletPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantOutletPhoto_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantOutletPhoto_result)
        return this.equals((updateMerchantOutletPhoto_result)that);
      return false;
    }

    public boolean equals(updateMerchantOutletPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantOutletPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantOutletPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantOutletPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantOutletPhoto_resultStandardScheme getScheme() {
        return new updateMerchantOutletPhoto_resultStandardScheme();
      }
    }

    private static class updateMerchantOutletPhoto_resultStandardScheme extends StandardScheme<updateMerchantOutletPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantOutletPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantOutletPhoto_resultTupleScheme getScheme() {
        return new updateMerchantOutletPhoto_resultTupleScheme();
      }
    }

    private static class updateMerchantOutletPhoto_resultTupleScheme extends TupleScheme<updateMerchantOutletPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletPhoto_args implements org.apache.thrift.TBase<getMerchantOutletPhoto_args, getMerchantOutletPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletPhoto_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletPhoto_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_OUTLET_PHOTO_VO((short)1, "merchantOutletPhotoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_OUTLET_PHOTO_VO
            return MERCHANT_OUTLET_PHOTO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletPhoto_args.class, metaDataMap);
    }

    public getMerchantOutletPhoto_args() {
    }

    public getMerchantOutletPhoto_args(
      com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo)
    {
      this();
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletPhoto_args(getMerchantOutletPhoto_args other) {
      if (other.isSetMerchantOutletPhotoVo()) {
        this.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo(other.merchantOutletPhotoVo);
      }
    }

    public getMerchantOutletPhoto_args deepCopy() {
      return new getMerchantOutletPhoto_args(this);
    }

    @Override
    public void clear() {
      this.merchantOutletPhotoVo = null;
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo getMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo;
    }

    public getMerchantOutletPhoto_args setMerchantOutletPhotoVo(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) {
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      return this;
    }

    public void unsetMerchantOutletPhotoVo() {
      this.merchantOutletPhotoVo = null;
    }

    /** Returns true if field merchantOutletPhotoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo != null;
    }

    public void setMerchantOutletPhotoVoIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_OUTLET_PHOTO_VO:
        if (value == null) {
          unsetMerchantOutletPhotoVo();
        } else {
          setMerchantOutletPhotoVo((com.froad.thrift.vo.MerchantOutletPhotoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_OUTLET_PHOTO_VO:
        return getMerchantOutletPhotoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_OUTLET_PHOTO_VO:
        return isSetMerchantOutletPhotoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletPhoto_args)
        return this.equals((getMerchantOutletPhoto_args)that);
      return false;
    }

    public boolean equals(getMerchantOutletPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantOutletPhotoVo = true && this.isSetMerchantOutletPhotoVo();
      boolean that_present_merchantOutletPhotoVo = true && that.isSetMerchantOutletPhotoVo();
      if (this_present_merchantOutletPhotoVo || that_present_merchantOutletPhotoVo) {
        if (!(this_present_merchantOutletPhotoVo && that_present_merchantOutletPhotoVo))
          return false;
        if (!this.merchantOutletPhotoVo.equals(that.merchantOutletPhotoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantOutletPhotoVo = true && (isSetMerchantOutletPhotoVo());
      list.add(present_merchantOutletPhotoVo);
      if (present_merchantOutletPhotoVo)
        list.add(merchantOutletPhotoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVo()).compareTo(other.isSetMerchantOutletPhotoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVo, other.merchantOutletPhotoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletPhoto_args(");
      boolean first = true;

      sb.append("merchantOutletPhotoVo:");
      if (this.merchantOutletPhotoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantOutletPhotoVo != null) {
        merchantOutletPhotoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhoto_argsStandardScheme getScheme() {
        return new getMerchantOutletPhoto_argsStandardScheme();
      }
    }

    private static class getMerchantOutletPhoto_argsStandardScheme extends StandardScheme<getMerchantOutletPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_OUTLET_PHOTO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                struct.merchantOutletPhotoVo.read(iprot);
                struct.setMerchantOutletPhotoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantOutletPhotoVo != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC);
          struct.merchantOutletPhotoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhoto_argsTupleScheme getScheme() {
        return new getMerchantOutletPhoto_argsTupleScheme();
      }
    }

    private static class getMerchantOutletPhoto_argsTupleScheme extends TupleScheme<getMerchantOutletPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantOutletPhotoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantOutletPhotoVo()) {
          struct.merchantOutletPhotoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
          struct.merchantOutletPhotoVo.read(iprot);
          struct.setMerchantOutletPhotoVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletPhoto_result implements org.apache.thrift.TBase<getMerchantOutletPhoto_result, getMerchantOutletPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletPhoto_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletPhoto_result.class, metaDataMap);
    }

    public getMerchantOutletPhoto_result() {
    }

    public getMerchantOutletPhoto_result(
      List<com.froad.thrift.vo.MerchantOutletPhotoVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletPhoto_result(getMerchantOutletPhoto_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantOutletPhotoVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantOutletPhotoVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantOutletPhotoVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantOutletPhoto_result deepCopy() {
      return new getMerchantOutletPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantOutletPhotoVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantOutletPhotoVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantOutletPhotoVo> getSuccess() {
      return this.success;
    }

    public getMerchantOutletPhoto_result setSuccess(List<com.froad.thrift.vo.MerchantOutletPhotoVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantOutletPhotoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletPhoto_result)
        return this.equals((getMerchantOutletPhoto_result)that);
      return false;
    }

    public boolean equals(getMerchantOutletPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhoto_resultStandardScheme getScheme() {
        return new getMerchantOutletPhoto_resultStandardScheme();
      }
    }

    private static class getMerchantOutletPhoto_resultStandardScheme extends StandardScheme<getMerchantOutletPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list24.size);
                  com.froad.thrift.vo.MerchantOutletPhotoVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhoto_resultTupleScheme getScheme() {
        return new getMerchantOutletPhoto_resultTupleScheme();
      }
    }

    private static class getMerchantOutletPhoto_resultTupleScheme extends TupleScheme<getMerchantOutletPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantOutletPhotoVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantOutletPhotoVo>(_list29.size);
            com.froad.thrift.vo.MerchantOutletPhotoVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.MerchantOutletPhotoVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletPhotoByPage_args implements org.apache.thrift.TBase<getMerchantOutletPhotoByPage_args, getMerchantOutletPhotoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletPhotoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletPhotoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOutletPhotoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletPhotoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletPhotoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_OUTLET_PHOTO_VO((short)2, "merchantOutletPhotoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_OUTLET_PHOTO_VO
            return MERCHANT_OUTLET_PHOTO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_OUTLET_PHOTO_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantOutletPhotoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletPhotoByPage_args.class, metaDataMap);
    }

    public getMerchantOutletPhotoByPage_args() {
    }

    public getMerchantOutletPhotoByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo)
    {
      this();
      this.page = page;
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletPhotoByPage_args(getMerchantOutletPhotoByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantOutletPhotoVo()) {
        this.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo(other.merchantOutletPhotoVo);
      }
    }

    public getMerchantOutletPhotoByPage_args deepCopy() {
      return new getMerchantOutletPhotoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.merchantOutletPhotoVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantOutletPhotoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantOutletPhotoVo getMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo;
    }

    public getMerchantOutletPhotoByPage_args setMerchantOutletPhotoVo(com.froad.thrift.vo.MerchantOutletPhotoVo merchantOutletPhotoVo) {
      this.merchantOutletPhotoVo = merchantOutletPhotoVo;
      return this;
    }

    public void unsetMerchantOutletPhotoVo() {
      this.merchantOutletPhotoVo = null;
    }

    /** Returns true if field merchantOutletPhotoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOutletPhotoVo() {
      return this.merchantOutletPhotoVo != null;
    }

    public void setMerchantOutletPhotoVoIsSet(boolean value) {
      if (!value) {
        this.merchantOutletPhotoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_OUTLET_PHOTO_VO:
        if (value == null) {
          unsetMerchantOutletPhotoVo();
        } else {
          setMerchantOutletPhotoVo((com.froad.thrift.vo.MerchantOutletPhotoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_OUTLET_PHOTO_VO:
        return getMerchantOutletPhotoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_OUTLET_PHOTO_VO:
        return isSetMerchantOutletPhotoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletPhotoByPage_args)
        return this.equals((getMerchantOutletPhotoByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantOutletPhotoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_merchantOutletPhotoVo = true && this.isSetMerchantOutletPhotoVo();
      boolean that_present_merchantOutletPhotoVo = true && that.isSetMerchantOutletPhotoVo();
      if (this_present_merchantOutletPhotoVo || that_present_merchantOutletPhotoVo) {
        if (!(this_present_merchantOutletPhotoVo && that_present_merchantOutletPhotoVo))
          return false;
        if (!this.merchantOutletPhotoVo.equals(that.merchantOutletPhotoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_merchantOutletPhotoVo = true && (isSetMerchantOutletPhotoVo());
      list.add(present_merchantOutletPhotoVo);
      if (present_merchantOutletPhotoVo)
        list.add(merchantOutletPhotoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletPhotoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOutletPhotoVo()).compareTo(other.isSetMerchantOutletPhotoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOutletPhotoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOutletPhotoVo, other.merchantOutletPhotoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletPhotoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantOutletPhotoVo:");
      if (this.merchantOutletPhotoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantOutletPhotoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (merchantOutletPhotoVo != null) {
        merchantOutletPhotoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletPhotoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhotoByPage_argsStandardScheme getScheme() {
        return new getMerchantOutletPhotoByPage_argsStandardScheme();
      }
    }

    private static class getMerchantOutletPhotoByPage_argsStandardScheme extends StandardScheme<getMerchantOutletPhotoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletPhotoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OUTLET_PHOTO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
                struct.merchantOutletPhotoVo.read(iprot);
                struct.setMerchantOutletPhotoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletPhotoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantOutletPhotoVo != null) {
          oprot.writeFieldBegin(MERCHANT_OUTLET_PHOTO_VO_FIELD_DESC);
          struct.merchantOutletPhotoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletPhotoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhotoByPage_argsTupleScheme getScheme() {
        return new getMerchantOutletPhotoByPage_argsTupleScheme();
      }
    }

    private static class getMerchantOutletPhotoByPage_argsTupleScheme extends TupleScheme<getMerchantOutletPhotoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhotoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantOutletPhotoVo()) {
          struct.merchantOutletPhotoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhotoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantOutletPhotoVo = new com.froad.thrift.vo.MerchantOutletPhotoVo();
          struct.merchantOutletPhotoVo.read(iprot);
          struct.setMerchantOutletPhotoVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOutletPhotoByPage_result implements org.apache.thrift.TBase<getMerchantOutletPhotoByPage_result, getMerchantOutletPhotoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOutletPhotoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOutletPhotoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOutletPhotoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOutletPhotoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOutletPhotoPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOutletPhotoByPage_result.class, metaDataMap);
    }

    public getMerchantOutletPhotoByPage_result() {
    }

    public getMerchantOutletPhotoByPage_result(
      com.froad.thrift.vo.MerchantOutletPhotoPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOutletPhotoByPage_result(getMerchantOutletPhotoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantOutletPhotoPageVoRes(other.success);
      }
    }

    public getMerchantOutletPhotoByPage_result deepCopy() {
      return new getMerchantOutletPhotoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantOutletPhotoPageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantOutletPhotoByPage_result setSuccess(com.froad.thrift.vo.MerchantOutletPhotoPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantOutletPhotoPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOutletPhotoByPage_result)
        return this.equals((getMerchantOutletPhotoByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantOutletPhotoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOutletPhotoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOutletPhotoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOutletPhotoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhotoByPage_resultStandardScheme getScheme() {
        return new getMerchantOutletPhotoByPage_resultStandardScheme();
      }
    }

    private static class getMerchantOutletPhotoByPage_resultStandardScheme extends StandardScheme<getMerchantOutletPhotoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOutletPhotoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantOutletPhotoPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOutletPhotoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOutletPhotoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantOutletPhotoByPage_resultTupleScheme getScheme() {
        return new getMerchantOutletPhotoByPage_resultTupleScheme();
      }
    }

    private static class getMerchantOutletPhotoByPage_resultTupleScheme extends TupleScheme<getMerchantOutletPhotoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhotoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOutletPhotoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantOutletPhotoPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
