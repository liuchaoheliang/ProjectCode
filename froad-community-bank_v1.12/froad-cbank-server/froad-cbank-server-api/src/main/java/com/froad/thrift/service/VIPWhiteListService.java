/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VIPWhiteListService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * checkVIPExistWhiteList 检查VIP是否存在白名单中
     * @param reqVo
     * @return CheckVIPExistWhiteListRespVo
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo checkVIPExistWhiteList(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * addVIPWhiteList 添加VIP白名单
     * @param reqVo
     * @return ResultVo
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo addVIPWhiteList(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * removeVIPWhiteList 移除VIP白名单
     * @param reqVo
     * @return ResultVo
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo removeVIPWhiteList(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void checkVIPExistWhiteList(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addVIPWhiteList(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeVIPWhiteList(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo checkVIPExistWhiteList(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      send_checkVIPExistWhiteList(reqVo);
      return recv_checkVIPExistWhiteList();
    }

    public void send_checkVIPExistWhiteList(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      checkVIPExistWhiteList_args args = new checkVIPExistWhiteList_args();
      args.setReqVo(reqVo);
      sendBase("checkVIPExistWhiteList", args);
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo recv_checkVIPExistWhiteList() throws org.apache.thrift.TException
    {
      checkVIPExistWhiteList_result result = new checkVIPExistWhiteList_result();
      receiveBase(result, "checkVIPExistWhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkVIPExistWhiteList failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addVIPWhiteList(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      send_addVIPWhiteList(reqVo);
      return recv_addVIPWhiteList();
    }

    public void send_addVIPWhiteList(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      addVIPWhiteList_args args = new addVIPWhiteList_args();
      args.setReqVo(reqVo);
      sendBase("addVIPWhiteList", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addVIPWhiteList() throws org.apache.thrift.TException
    {
      addVIPWhiteList_result result = new addVIPWhiteList_result();
      receiveBase(result, "addVIPWhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVIPWhiteList failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo removeVIPWhiteList(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      send_removeVIPWhiteList(reqVo);
      return recv_removeVIPWhiteList();
    }

    public void send_removeVIPWhiteList(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo) throws org.apache.thrift.TException
    {
      removeVIPWhiteList_args args = new removeVIPWhiteList_args();
      args.setReqVo(reqVo);
      sendBase("removeVIPWhiteList", args);
    }

    public com.froad.thrift.vo.ResultVo recv_removeVIPWhiteList() throws org.apache.thrift.TException
    {
      removeVIPWhiteList_result result = new removeVIPWhiteList_result();
      receiveBase(result, "removeVIPWhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeVIPWhiteList failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkVIPExistWhiteList(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkVIPExistWhiteList_call method_call = new checkVIPExistWhiteList_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkVIPExistWhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo;
      public checkVIPExistWhiteList_call(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkVIPExistWhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkVIPExistWhiteList_args args = new checkVIPExistWhiteList_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkVIPExistWhiteList();
      }
    }

    public void addVIPWhiteList(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVIPWhiteList_call method_call = new addVIPWhiteList_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVIPWhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo;
      public addVIPWhiteList_call(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVIPWhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVIPWhiteList_args args = new addVIPWhiteList_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVIPWhiteList();
      }
    }

    public void removeVIPWhiteList(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeVIPWhiteList_call method_call = new removeVIPWhiteList_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeVIPWhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo;
      public removeVIPWhiteList_call(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeVIPWhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeVIPWhiteList_args args = new removeVIPWhiteList_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeVIPWhiteList();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkVIPExistWhiteList", new checkVIPExistWhiteList());
      processMap.put("addVIPWhiteList", new addVIPWhiteList());
      processMap.put("removeVIPWhiteList", new removeVIPWhiteList());
      return processMap;
    }

    public static class checkVIPExistWhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkVIPExistWhiteList_args> {
      public checkVIPExistWhiteList() {
        super("checkVIPExistWhiteList");
      }

      public checkVIPExistWhiteList_args getEmptyArgsInstance() {
        return new checkVIPExistWhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkVIPExistWhiteList_result getResult(I iface, checkVIPExistWhiteList_args args) throws org.apache.thrift.TException {
        checkVIPExistWhiteList_result result = new checkVIPExistWhiteList_result();
        result.success = iface.checkVIPExistWhiteList(args.reqVo);
        return result;
      }
    }

    public static class addVIPWhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVIPWhiteList_args> {
      public addVIPWhiteList() {
        super("addVIPWhiteList");
      }

      public addVIPWhiteList_args getEmptyArgsInstance() {
        return new addVIPWhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVIPWhiteList_result getResult(I iface, addVIPWhiteList_args args) throws org.apache.thrift.TException {
        addVIPWhiteList_result result = new addVIPWhiteList_result();
        result.success = iface.addVIPWhiteList(args.reqVo);
        return result;
      }
    }

    public static class removeVIPWhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeVIPWhiteList_args> {
      public removeVIPWhiteList() {
        super("removeVIPWhiteList");
      }

      public removeVIPWhiteList_args getEmptyArgsInstance() {
        return new removeVIPWhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeVIPWhiteList_result getResult(I iface, removeVIPWhiteList_args args) throws org.apache.thrift.TException {
        removeVIPWhiteList_result result = new removeVIPWhiteList_result();
        result.success = iface.removeVIPWhiteList(args.reqVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkVIPExistWhiteList", new checkVIPExistWhiteList());
      processMap.put("addVIPWhiteList", new addVIPWhiteList());
      processMap.put("removeVIPWhiteList", new removeVIPWhiteList());
      return processMap;
    }

    public static class checkVIPExistWhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkVIPExistWhiteList_args, com.froad.thrift.vo.CheckVIPExistWhiteListRespVo> {
      public checkVIPExistWhiteList() {
        super("checkVIPExistWhiteList");
      }

      public checkVIPExistWhiteList_args getEmptyArgsInstance() {
        return new checkVIPExistWhiteList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CheckVIPExistWhiteListRespVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CheckVIPExistWhiteListRespVo>() { 
          public void onComplete(com.froad.thrift.vo.CheckVIPExistWhiteListRespVo o) {
            checkVIPExistWhiteList_result result = new checkVIPExistWhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkVIPExistWhiteList_result result = new checkVIPExistWhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkVIPExistWhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CheckVIPExistWhiteListRespVo> resultHandler) throws TException {
        iface.checkVIPExistWhiteList(args.reqVo,resultHandler);
      }
    }

    public static class addVIPWhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVIPWhiteList_args, com.froad.thrift.vo.ResultVo> {
      public addVIPWhiteList() {
        super("addVIPWhiteList");
      }

      public addVIPWhiteList_args getEmptyArgsInstance() {
        return new addVIPWhiteList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addVIPWhiteList_result result = new addVIPWhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVIPWhiteList_result result = new addVIPWhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVIPWhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addVIPWhiteList(args.reqVo,resultHandler);
      }
    }

    public static class removeVIPWhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeVIPWhiteList_args, com.froad.thrift.vo.ResultVo> {
      public removeVIPWhiteList() {
        super("removeVIPWhiteList");
      }

      public removeVIPWhiteList_args getEmptyArgsInstance() {
        return new removeVIPWhiteList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            removeVIPWhiteList_result result = new removeVIPWhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeVIPWhiteList_result result = new removeVIPWhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeVIPWhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.removeVIPWhiteList(args.reqVo,resultHandler);
      }
    }

  }

  public static class checkVIPExistWhiteList_args implements org.apache.thrift.TBase<checkVIPExistWhiteList_args, checkVIPExistWhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkVIPExistWhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVIPExistWhiteList_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVIPExistWhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVIPExistWhiteList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CheckVIPExistWhiteListReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVIPExistWhiteList_args.class, metaDataMap);
    }

    public checkVIPExistWhiteList_args() {
    }

    public checkVIPExistWhiteList_args(
      com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVIPExistWhiteList_args(checkVIPExistWhiteList_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.CheckVIPExistWhiteListReqVo(other.reqVo);
      }
    }

    public checkVIPExistWhiteList_args deepCopy() {
      return new checkVIPExistWhiteList_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListReqVo getReqVo() {
      return this.reqVo;
    }

    public checkVIPExistWhiteList_args setReqVo(com.froad.thrift.vo.CheckVIPExistWhiteListReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.CheckVIPExistWhiteListReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVIPExistWhiteList_args)
        return this.equals((checkVIPExistWhiteList_args)that);
      return false;
    }

    public boolean equals(checkVIPExistWhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkVIPExistWhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVIPExistWhiteList_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVIPExistWhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public checkVIPExistWhiteList_argsStandardScheme getScheme() {
        return new checkVIPExistWhiteList_argsStandardScheme();
      }
    }

    private static class checkVIPExistWhiteList_argsStandardScheme extends StandardScheme<checkVIPExistWhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVIPExistWhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.CheckVIPExistWhiteListReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVIPExistWhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVIPExistWhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public checkVIPExistWhiteList_argsTupleScheme getScheme() {
        return new checkVIPExistWhiteList_argsTupleScheme();
      }
    }

    private static class checkVIPExistWhiteList_argsTupleScheme extends TupleScheme<checkVIPExistWhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVIPExistWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVIPExistWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.CheckVIPExistWhiteListReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class checkVIPExistWhiteList_result implements org.apache.thrift.TBase<checkVIPExistWhiteList_result, checkVIPExistWhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkVIPExistWhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVIPExistWhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVIPExistWhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVIPExistWhiteList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CheckVIPExistWhiteListRespVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVIPExistWhiteList_result.class, metaDataMap);
    }

    public checkVIPExistWhiteList_result() {
    }

    public checkVIPExistWhiteList_result(
      com.froad.thrift.vo.CheckVIPExistWhiteListRespVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVIPExistWhiteList_result(checkVIPExistWhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CheckVIPExistWhiteListRespVo(other.success);
      }
    }

    public checkVIPExistWhiteList_result deepCopy() {
      return new checkVIPExistWhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CheckVIPExistWhiteListRespVo getSuccess() {
      return this.success;
    }

    public checkVIPExistWhiteList_result setSuccess(com.froad.thrift.vo.CheckVIPExistWhiteListRespVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CheckVIPExistWhiteListRespVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVIPExistWhiteList_result)
        return this.equals((checkVIPExistWhiteList_result)that);
      return false;
    }

    public boolean equals(checkVIPExistWhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkVIPExistWhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVIPExistWhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVIPExistWhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public checkVIPExistWhiteList_resultStandardScheme getScheme() {
        return new checkVIPExistWhiteList_resultStandardScheme();
      }
    }

    private static class checkVIPExistWhiteList_resultStandardScheme extends StandardScheme<checkVIPExistWhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVIPExistWhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CheckVIPExistWhiteListRespVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVIPExistWhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVIPExistWhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public checkVIPExistWhiteList_resultTupleScheme getScheme() {
        return new checkVIPExistWhiteList_resultTupleScheme();
      }
    }

    private static class checkVIPExistWhiteList_resultTupleScheme extends TupleScheme<checkVIPExistWhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVIPExistWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVIPExistWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CheckVIPExistWhiteListRespVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addVIPWhiteList_args implements org.apache.thrift.TBase<addVIPWhiteList_args, addVIPWhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVIPWhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVIPWhiteList_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVIPWhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVIPWhiteList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddVIPWhiteListReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVIPWhiteList_args.class, metaDataMap);
    }

    public addVIPWhiteList_args() {
    }

    public addVIPWhiteList_args(
      com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVIPWhiteList_args(addVIPWhiteList_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.AddVIPWhiteListReqVo(other.reqVo);
      }
    }

    public addVIPWhiteList_args deepCopy() {
      return new addVIPWhiteList_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.AddVIPWhiteListReqVo getReqVo() {
      return this.reqVo;
    }

    public addVIPWhiteList_args setReqVo(com.froad.thrift.vo.AddVIPWhiteListReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.AddVIPWhiteListReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVIPWhiteList_args)
        return this.equals((addVIPWhiteList_args)that);
      return false;
    }

    public boolean equals(addVIPWhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVIPWhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVIPWhiteList_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVIPWhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public addVIPWhiteList_argsStandardScheme getScheme() {
        return new addVIPWhiteList_argsStandardScheme();
      }
    }

    private static class addVIPWhiteList_argsStandardScheme extends StandardScheme<addVIPWhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVIPWhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.AddVIPWhiteListReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVIPWhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVIPWhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public addVIPWhiteList_argsTupleScheme getScheme() {
        return new addVIPWhiteList_argsTupleScheme();
      }
    }

    private static class addVIPWhiteList_argsTupleScheme extends TupleScheme<addVIPWhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVIPWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVIPWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.AddVIPWhiteListReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class addVIPWhiteList_result implements org.apache.thrift.TBase<addVIPWhiteList_result, addVIPWhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVIPWhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVIPWhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVIPWhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVIPWhiteList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVIPWhiteList_result.class, metaDataMap);
    }

    public addVIPWhiteList_result() {
    }

    public addVIPWhiteList_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVIPWhiteList_result(addVIPWhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addVIPWhiteList_result deepCopy() {
      return new addVIPWhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addVIPWhiteList_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVIPWhiteList_result)
        return this.equals((addVIPWhiteList_result)that);
      return false;
    }

    public boolean equals(addVIPWhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVIPWhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVIPWhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVIPWhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public addVIPWhiteList_resultStandardScheme getScheme() {
        return new addVIPWhiteList_resultStandardScheme();
      }
    }

    private static class addVIPWhiteList_resultStandardScheme extends StandardScheme<addVIPWhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVIPWhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVIPWhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVIPWhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public addVIPWhiteList_resultTupleScheme getScheme() {
        return new addVIPWhiteList_resultTupleScheme();
      }
    }

    private static class addVIPWhiteList_resultTupleScheme extends TupleScheme<addVIPWhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVIPWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVIPWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeVIPWhiteList_args implements org.apache.thrift.TBase<removeVIPWhiteList_args, removeVIPWhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeVIPWhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVIPWhiteList_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVIPWhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVIPWhiteList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.RemoveVIPWhiteListReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVIPWhiteList_args.class, metaDataMap);
    }

    public removeVIPWhiteList_args() {
    }

    public removeVIPWhiteList_args(
      com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVIPWhiteList_args(removeVIPWhiteList_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.RemoveVIPWhiteListReqVo(other.reqVo);
      }
    }

    public removeVIPWhiteList_args deepCopy() {
      return new removeVIPWhiteList_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.RemoveVIPWhiteListReqVo getReqVo() {
      return this.reqVo;
    }

    public removeVIPWhiteList_args setReqVo(com.froad.thrift.vo.RemoveVIPWhiteListReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.RemoveVIPWhiteListReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVIPWhiteList_args)
        return this.equals((removeVIPWhiteList_args)that);
      return false;
    }

    public boolean equals(removeVIPWhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeVIPWhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVIPWhiteList_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVIPWhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public removeVIPWhiteList_argsStandardScheme getScheme() {
        return new removeVIPWhiteList_argsStandardScheme();
      }
    }

    private static class removeVIPWhiteList_argsStandardScheme extends StandardScheme<removeVIPWhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVIPWhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.RemoveVIPWhiteListReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVIPWhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVIPWhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public removeVIPWhiteList_argsTupleScheme getScheme() {
        return new removeVIPWhiteList_argsTupleScheme();
      }
    }

    private static class removeVIPWhiteList_argsTupleScheme extends TupleScheme<removeVIPWhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVIPWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVIPWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.RemoveVIPWhiteListReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class removeVIPWhiteList_result implements org.apache.thrift.TBase<removeVIPWhiteList_result, removeVIPWhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeVIPWhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVIPWhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVIPWhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVIPWhiteList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVIPWhiteList_result.class, metaDataMap);
    }

    public removeVIPWhiteList_result() {
    }

    public removeVIPWhiteList_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVIPWhiteList_result(removeVIPWhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public removeVIPWhiteList_result deepCopy() {
      return new removeVIPWhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public removeVIPWhiteList_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVIPWhiteList_result)
        return this.equals((removeVIPWhiteList_result)that);
      return false;
    }

    public boolean equals(removeVIPWhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeVIPWhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVIPWhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVIPWhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public removeVIPWhiteList_resultStandardScheme getScheme() {
        return new removeVIPWhiteList_resultStandardScheme();
      }
    }

    private static class removeVIPWhiteList_resultStandardScheme extends StandardScheme<removeVIPWhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVIPWhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVIPWhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVIPWhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public removeVIPWhiteList_resultTupleScheme getScheme() {
        return new removeVIPWhiteList_resultTupleScheme();
      }
    }

    private static class removeVIPWhiteList_resultTupleScheme extends TupleScheme<removeVIPWhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVIPWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVIPWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
