/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 购物车满赠
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShoppingCartFullGiveVo implements org.apache.thrift.TBase<ShoppingCartFullGiveVo, ShoppingCartFullGiveVo._Fields>, java.io.Serializable, Cloneable, Comparable<ShoppingCartFullGiveVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShoppingCartFullGiveVo");

  private static final org.apache.thrift.protocol.TField FULL_GIVE_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGiveActiveId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FULL_GIVE_ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGiveActiveName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("giveType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GIVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("giveMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShoppingCartFullGiveVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShoppingCartFullGiveVoTupleSchemeFactory());
  }

  /**
   * 满赠活动id
   */
  public String fullGiveActiveId; // required
  /**
   * 满赠活动名称
   */
  public String fullGiveActiveName; // required
  /**
   * 赠送类型
   */
  public String giveType; // required
  /**
   * 赠送金额
   */
  public double giveMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 满赠活动id
     */
    FULL_GIVE_ACTIVE_ID((short)1, "fullGiveActiveId"),
    /**
     * 满赠活动名称
     */
    FULL_GIVE_ACTIVE_NAME((short)2, "fullGiveActiveName"),
    /**
     * 赠送类型
     */
    GIVE_TYPE((short)3, "giveType"),
    /**
     * 赠送金额
     */
    GIVE_MONEY((short)4, "giveMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_GIVE_ACTIVE_ID
          return FULL_GIVE_ACTIVE_ID;
        case 2: // FULL_GIVE_ACTIVE_NAME
          return FULL_GIVE_ACTIVE_NAME;
        case 3: // GIVE_TYPE
          return GIVE_TYPE;
        case 4: // GIVE_MONEY
          return GIVE_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GIVEMONEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_GIVE_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("fullGiveActiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_GIVE_ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullGiveActiveName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("giveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("giveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShoppingCartFullGiveVo.class, metaDataMap);
  }

  public ShoppingCartFullGiveVo() {
  }

  public ShoppingCartFullGiveVo(
    String fullGiveActiveId,
    String fullGiveActiveName,
    String giveType,
    double giveMoney)
  {
    this();
    this.fullGiveActiveId = fullGiveActiveId;
    this.fullGiveActiveName = fullGiveActiveName;
    this.giveType = giveType;
    this.giveMoney = giveMoney;
    setGiveMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShoppingCartFullGiveVo(ShoppingCartFullGiveVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFullGiveActiveId()) {
      this.fullGiveActiveId = other.fullGiveActiveId;
    }
    if (other.isSetFullGiveActiveName()) {
      this.fullGiveActiveName = other.fullGiveActiveName;
    }
    if (other.isSetGiveType()) {
      this.giveType = other.giveType;
    }
    this.giveMoney = other.giveMoney;
  }

  public ShoppingCartFullGiveVo deepCopy() {
    return new ShoppingCartFullGiveVo(this);
  }

  @Override
  public void clear() {
    this.fullGiveActiveId = null;
    this.fullGiveActiveName = null;
    this.giveType = null;
    setGiveMoneyIsSet(false);
    this.giveMoney = 0.0;
  }

  /**
   * 满赠活动id
   */
  public String getFullGiveActiveId() {
    return this.fullGiveActiveId;
  }

  /**
   * 满赠活动id
   */
  public ShoppingCartFullGiveVo setFullGiveActiveId(String fullGiveActiveId) {
    this.fullGiveActiveId = fullGiveActiveId;
    return this;
  }

  public void unsetFullGiveActiveId() {
    this.fullGiveActiveId = null;
  }

  /** Returns true if field fullGiveActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetFullGiveActiveId() {
    return this.fullGiveActiveId != null;
  }

  public void setFullGiveActiveIdIsSet(boolean value) {
    if (!value) {
      this.fullGiveActiveId = null;
    }
  }

  /**
   * 满赠活动名称
   */
  public String getFullGiveActiveName() {
    return this.fullGiveActiveName;
  }

  /**
   * 满赠活动名称
   */
  public ShoppingCartFullGiveVo setFullGiveActiveName(String fullGiveActiveName) {
    this.fullGiveActiveName = fullGiveActiveName;
    return this;
  }

  public void unsetFullGiveActiveName() {
    this.fullGiveActiveName = null;
  }

  /** Returns true if field fullGiveActiveName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullGiveActiveName() {
    return this.fullGiveActiveName != null;
  }

  public void setFullGiveActiveNameIsSet(boolean value) {
    if (!value) {
      this.fullGiveActiveName = null;
    }
  }

  /**
   * 赠送类型
   */
  public String getGiveType() {
    return this.giveType;
  }

  /**
   * 赠送类型
   */
  public ShoppingCartFullGiveVo setGiveType(String giveType) {
    this.giveType = giveType;
    return this;
  }

  public void unsetGiveType() {
    this.giveType = null;
  }

  /** Returns true if field giveType is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveType() {
    return this.giveType != null;
  }

  public void setGiveTypeIsSet(boolean value) {
    if (!value) {
      this.giveType = null;
    }
  }

  /**
   * 赠送金额
   */
  public double getGiveMoney() {
    return this.giveMoney;
  }

  /**
   * 赠送金额
   */
  public ShoppingCartFullGiveVo setGiveMoney(double giveMoney) {
    this.giveMoney = giveMoney;
    setGiveMoneyIsSet(true);
    return this;
  }

  public void unsetGiveMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEMONEY_ISSET_ID);
  }

  /** Returns true if field giveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEMONEY_ISSET_ID);
  }

  public void setGiveMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FULL_GIVE_ACTIVE_ID:
      if (value == null) {
        unsetFullGiveActiveId();
      } else {
        setFullGiveActiveId((String)value);
      }
      break;

    case FULL_GIVE_ACTIVE_NAME:
      if (value == null) {
        unsetFullGiveActiveName();
      } else {
        setFullGiveActiveName((String)value);
      }
      break;

    case GIVE_TYPE:
      if (value == null) {
        unsetGiveType();
      } else {
        setGiveType((String)value);
      }
      break;

    case GIVE_MONEY:
      if (value == null) {
        unsetGiveMoney();
      } else {
        setGiveMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_GIVE_ACTIVE_ID:
      return getFullGiveActiveId();

    case FULL_GIVE_ACTIVE_NAME:
      return getFullGiveActiveName();

    case GIVE_TYPE:
      return getGiveType();

    case GIVE_MONEY:
      return Double.valueOf(getGiveMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULL_GIVE_ACTIVE_ID:
      return isSetFullGiveActiveId();
    case FULL_GIVE_ACTIVE_NAME:
      return isSetFullGiveActiveName();
    case GIVE_TYPE:
      return isSetGiveType();
    case GIVE_MONEY:
      return isSetGiveMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShoppingCartFullGiveVo)
      return this.equals((ShoppingCartFullGiveVo)that);
    return false;
  }

  public boolean equals(ShoppingCartFullGiveVo that) {
    if (that == null)
      return false;

    boolean this_present_fullGiveActiveId = true && this.isSetFullGiveActiveId();
    boolean that_present_fullGiveActiveId = true && that.isSetFullGiveActiveId();
    if (this_present_fullGiveActiveId || that_present_fullGiveActiveId) {
      if (!(this_present_fullGiveActiveId && that_present_fullGiveActiveId))
        return false;
      if (!this.fullGiveActiveId.equals(that.fullGiveActiveId))
        return false;
    }

    boolean this_present_fullGiveActiveName = true && this.isSetFullGiveActiveName();
    boolean that_present_fullGiveActiveName = true && that.isSetFullGiveActiveName();
    if (this_present_fullGiveActiveName || that_present_fullGiveActiveName) {
      if (!(this_present_fullGiveActiveName && that_present_fullGiveActiveName))
        return false;
      if (!this.fullGiveActiveName.equals(that.fullGiveActiveName))
        return false;
    }

    boolean this_present_giveType = true && this.isSetGiveType();
    boolean that_present_giveType = true && that.isSetGiveType();
    if (this_present_giveType || that_present_giveType) {
      if (!(this_present_giveType && that_present_giveType))
        return false;
      if (!this.giveType.equals(that.giveType))
        return false;
    }

    boolean this_present_giveMoney = true;
    boolean that_present_giveMoney = true;
    if (this_present_giveMoney || that_present_giveMoney) {
      if (!(this_present_giveMoney && that_present_giveMoney))
        return false;
      if (this.giveMoney != that.giveMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fullGiveActiveId = true && (isSetFullGiveActiveId());
    list.add(present_fullGiveActiveId);
    if (present_fullGiveActiveId)
      list.add(fullGiveActiveId);

    boolean present_fullGiveActiveName = true && (isSetFullGiveActiveName());
    list.add(present_fullGiveActiveName);
    if (present_fullGiveActiveName)
      list.add(fullGiveActiveName);

    boolean present_giveType = true && (isSetGiveType());
    list.add(present_giveType);
    if (present_giveType)
      list.add(giveType);

    boolean present_giveMoney = true;
    list.add(present_giveMoney);
    if (present_giveMoney)
      list.add(giveMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShoppingCartFullGiveVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFullGiveActiveId()).compareTo(other.isSetFullGiveActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullGiveActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGiveActiveId, other.fullGiveActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullGiveActiveName()).compareTo(other.isSetFullGiveActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullGiveActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGiveActiveName, other.fullGiveActiveName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveType()).compareTo(other.isSetGiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveType, other.giveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveMoney()).compareTo(other.isSetGiveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveMoney, other.giveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShoppingCartFullGiveVo(");
    boolean first = true;

    sb.append("fullGiveActiveId:");
    if (this.fullGiveActiveId == null) {
      sb.append("null");
    } else {
      sb.append(this.fullGiveActiveId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullGiveActiveName:");
    if (this.fullGiveActiveName == null) {
      sb.append("null");
    } else {
      sb.append(this.fullGiveActiveName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveType:");
    if (this.giveType == null) {
      sb.append("null");
    } else {
      sb.append(this.giveType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveMoney:");
    sb.append(this.giveMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShoppingCartFullGiveVoStandardSchemeFactory implements SchemeFactory {
    public ShoppingCartFullGiveVoStandardScheme getScheme() {
      return new ShoppingCartFullGiveVoStandardScheme();
    }
  }

  private static class ShoppingCartFullGiveVoStandardScheme extends StandardScheme<ShoppingCartFullGiveVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShoppingCartFullGiveVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_GIVE_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullGiveActiveId = iprot.readString();
              struct.setFullGiveActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FULL_GIVE_ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullGiveActiveName = iprot.readString();
              struct.setFullGiveActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveType = iprot.readString();
              struct.setGiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GIVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.giveMoney = iprot.readDouble();
              struct.setGiveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShoppingCartFullGiveVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fullGiveActiveId != null) {
        oprot.writeFieldBegin(FULL_GIVE_ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.fullGiveActiveId);
        oprot.writeFieldEnd();
      }
      if (struct.fullGiveActiveName != null) {
        oprot.writeFieldBegin(FULL_GIVE_ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.fullGiveActiveName);
        oprot.writeFieldEnd();
      }
      if (struct.giveType != null) {
        oprot.writeFieldBegin(GIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.giveType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.giveMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShoppingCartFullGiveVoTupleSchemeFactory implements SchemeFactory {
    public ShoppingCartFullGiveVoTupleScheme getScheme() {
      return new ShoppingCartFullGiveVoTupleScheme();
    }
  }

  private static class ShoppingCartFullGiveVoTupleScheme extends TupleScheme<ShoppingCartFullGiveVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShoppingCartFullGiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFullGiveActiveId()) {
        optionals.set(0);
      }
      if (struct.isSetFullGiveActiveName()) {
        optionals.set(1);
      }
      if (struct.isSetGiveType()) {
        optionals.set(2);
      }
      if (struct.isSetGiveMoney()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFullGiveActiveId()) {
        oprot.writeString(struct.fullGiveActiveId);
      }
      if (struct.isSetFullGiveActiveName()) {
        oprot.writeString(struct.fullGiveActiveName);
      }
      if (struct.isSetGiveType()) {
        oprot.writeString(struct.giveType);
      }
      if (struct.isSetGiveMoney()) {
        oprot.writeDouble(struct.giveMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShoppingCartFullGiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fullGiveActiveId = iprot.readString();
        struct.setFullGiveActiveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fullGiveActiveName = iprot.readString();
        struct.setFullGiveActiveNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.giveType = iprot.readString();
        struct.setGiveTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.giveMoney = iprot.readDouble();
        struct.setGiveMoneyIsSet(true);
      }
    }
  }

}

