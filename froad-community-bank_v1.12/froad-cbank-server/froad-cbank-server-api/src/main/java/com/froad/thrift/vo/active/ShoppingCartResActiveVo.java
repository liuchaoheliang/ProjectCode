/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 购物车响应活动
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShoppingCartResActiveVo implements org.apache.thrift.TBase<ShoppingCartResActiveVo, ShoppingCartResActiveVo._Fields>, java.io.Serializable, Cloneable, Comparable<ShoppingCartResActiveVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShoppingCartResActiveVo");

  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_MINATO_FIELD_DESC = new org.apache.thrift.protocol.TField("isMinato", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_LOWEST_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isLowestDelete", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField GIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("giveType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField GIVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("giveMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShoppingCartResActiveVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShoppingCartResActiveVoTupleSchemeFactory());
  }

  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 活动名称
   */
  public String activeName; // required
  /**
   * 活动类型
   */
  public String activeType; // required
  /**
   * 满减金额
   */
  public double cutMoney; // required
  /**
   * 活动状态
   */
  public String activeStatus; // required
  /**
   * 状态描述
   */
  public String statusMsg; // required
  /**
   * 是否凑单
   */
  public boolean isMinato; // required
  /**
   * 是否最低删除
   */
  public boolean isLowestDelete; // required
  /**
   * 赠送类型
   */
  public String giveType; // required
  /**
   * 赠送金额
   */
  public double giveMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动id
     */
    ACTIVE_ID((short)1, "activeId"),
    /**
     * 活动名称
     */
    ACTIVE_NAME((short)2, "activeName"),
    /**
     * 活动类型
     */
    ACTIVE_TYPE((short)3, "activeType"),
    /**
     * 满减金额
     */
    CUT_MONEY((short)4, "cutMoney"),
    /**
     * 活动状态
     */
    ACTIVE_STATUS((short)5, "activeStatus"),
    /**
     * 状态描述
     */
    STATUS_MSG((short)6, "statusMsg"),
    /**
     * 是否凑单
     */
    IS_MINATO((short)7, "isMinato"),
    /**
     * 是否最低删除
     */
    IS_LOWEST_DELETE((short)8, "isLowestDelete"),
    /**
     * 赠送类型
     */
    GIVE_TYPE((short)9, "giveType"),
    /**
     * 赠送金额
     */
    GIVE_MONEY((short)10, "giveMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVE_ID
          return ACTIVE_ID;
        case 2: // ACTIVE_NAME
          return ACTIVE_NAME;
        case 3: // ACTIVE_TYPE
          return ACTIVE_TYPE;
        case 4: // CUT_MONEY
          return CUT_MONEY;
        case 5: // ACTIVE_STATUS
          return ACTIVE_STATUS;
        case 6: // STATUS_MSG
          return STATUS_MSG;
        case 7: // IS_MINATO
          return IS_MINATO;
        case 8: // IS_LOWEST_DELETE
          return IS_LOWEST_DELETE;
        case 9: // GIVE_TYPE
          return GIVE_TYPE;
        case 10: // GIVE_MONEY
          return GIVE_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUTMONEY_ISSET_ID = 0;
  private static final int __ISMINATO_ISSET_ID = 1;
  private static final int __ISLOWESTDELETE_ISSET_ID = 2;
  private static final int __GIVEMONEY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("activeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("activeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("activeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MINATO, new org.apache.thrift.meta_data.FieldMetaData("isMinato", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LOWEST_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isLowestDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("giveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("giveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShoppingCartResActiveVo.class, metaDataMap);
  }

  public ShoppingCartResActiveVo() {
  }

  public ShoppingCartResActiveVo(
    String activeId,
    String activeName,
    String activeType,
    double cutMoney,
    String activeStatus,
    String statusMsg,
    boolean isMinato,
    boolean isLowestDelete,
    String giveType,
    double giveMoney)
  {
    this();
    this.activeId = activeId;
    this.activeName = activeName;
    this.activeType = activeType;
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    this.activeStatus = activeStatus;
    this.statusMsg = statusMsg;
    this.isMinato = isMinato;
    setIsMinatoIsSet(true);
    this.isLowestDelete = isLowestDelete;
    setIsLowestDeleteIsSet(true);
    this.giveType = giveType;
    this.giveMoney = giveMoney;
    setGiveMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShoppingCartResActiveVo(ShoppingCartResActiveVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetActiveName()) {
      this.activeName = other.activeName;
    }
    if (other.isSetActiveType()) {
      this.activeType = other.activeType;
    }
    this.cutMoney = other.cutMoney;
    if (other.isSetActiveStatus()) {
      this.activeStatus = other.activeStatus;
    }
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
    this.isMinato = other.isMinato;
    this.isLowestDelete = other.isLowestDelete;
    if (other.isSetGiveType()) {
      this.giveType = other.giveType;
    }
    this.giveMoney = other.giveMoney;
  }

  public ShoppingCartResActiveVo deepCopy() {
    return new ShoppingCartResActiveVo(this);
  }

  @Override
  public void clear() {
    this.activeId = null;
    this.activeName = null;
    this.activeType = null;
    setCutMoneyIsSet(false);
    this.cutMoney = 0.0;
    this.activeStatus = null;
    this.statusMsg = null;
    setIsMinatoIsSet(false);
    this.isMinato = false;
    setIsLowestDeleteIsSet(false);
    this.isLowestDelete = false;
    this.giveType = null;
    setGiveMoneyIsSet(false);
    this.giveMoney = 0.0;
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public ShoppingCartResActiveVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 活动名称
   */
  public String getActiveName() {
    return this.activeName;
  }

  /**
   * 活动名称
   */
  public ShoppingCartResActiveVo setActiveName(String activeName) {
    this.activeName = activeName;
    return this;
  }

  public void unsetActiveName() {
    this.activeName = null;
  }

  /** Returns true if field activeName is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveName() {
    return this.activeName != null;
  }

  public void setActiveNameIsSet(boolean value) {
    if (!value) {
      this.activeName = null;
    }
  }

  /**
   * 活动类型
   */
  public String getActiveType() {
    return this.activeType;
  }

  /**
   * 活动类型
   */
  public ShoppingCartResActiveVo setActiveType(String activeType) {
    this.activeType = activeType;
    return this;
  }

  public void unsetActiveType() {
    this.activeType = null;
  }

  /** Returns true if field activeType is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveType() {
    return this.activeType != null;
  }

  public void setActiveTypeIsSet(boolean value) {
    if (!value) {
      this.activeType = null;
    }
  }

  /**
   * 满减金额
   */
  public double getCutMoney() {
    return this.cutMoney;
  }

  /**
   * 满减金额
   */
  public ShoppingCartResActiveVo setCutMoney(double cutMoney) {
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    return this;
  }

  public void unsetCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  /** Returns true if field cutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  public void setCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTMONEY_ISSET_ID, value);
  }

  /**
   * 活动状态
   */
  public String getActiveStatus() {
    return this.activeStatus;
  }

  /**
   * 活动状态
   */
  public ShoppingCartResActiveVo setActiveStatus(String activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  public void unsetActiveStatus() {
    this.activeStatus = null;
  }

  /** Returns true if field activeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStatus() {
    return this.activeStatus != null;
  }

  public void setActiveStatusIsSet(boolean value) {
    if (!value) {
      this.activeStatus = null;
    }
  }

  /**
   * 状态描述
   */
  public String getStatusMsg() {
    return this.statusMsg;
  }

  /**
   * 状态描述
   */
  public ShoppingCartResActiveVo setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  /**
   * 是否凑单
   */
  public boolean isIsMinato() {
    return this.isMinato;
  }

  /**
   * 是否凑单
   */
  public ShoppingCartResActiveVo setIsMinato(boolean isMinato) {
    this.isMinato = isMinato;
    setIsMinatoIsSet(true);
    return this;
  }

  public void unsetIsMinato() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMINATO_ISSET_ID);
  }

  /** Returns true if field isMinato is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMinato() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMINATO_ISSET_ID);
  }

  public void setIsMinatoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMINATO_ISSET_ID, value);
  }

  /**
   * 是否最低删除
   */
  public boolean isIsLowestDelete() {
    return this.isLowestDelete;
  }

  /**
   * 是否最低删除
   */
  public ShoppingCartResActiveVo setIsLowestDelete(boolean isLowestDelete) {
    this.isLowestDelete = isLowestDelete;
    setIsLowestDeleteIsSet(true);
    return this;
  }

  public void unsetIsLowestDelete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOWESTDELETE_ISSET_ID);
  }

  /** Returns true if field isLowestDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLowestDelete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLOWESTDELETE_ISSET_ID);
  }

  public void setIsLowestDeleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOWESTDELETE_ISSET_ID, value);
  }

  /**
   * 赠送类型
   */
  public String getGiveType() {
    return this.giveType;
  }

  /**
   * 赠送类型
   */
  public ShoppingCartResActiveVo setGiveType(String giveType) {
    this.giveType = giveType;
    return this;
  }

  public void unsetGiveType() {
    this.giveType = null;
  }

  /** Returns true if field giveType is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveType() {
    return this.giveType != null;
  }

  public void setGiveTypeIsSet(boolean value) {
    if (!value) {
      this.giveType = null;
    }
  }

  /**
   * 赠送金额
   */
  public double getGiveMoney() {
    return this.giveMoney;
  }

  /**
   * 赠送金额
   */
  public ShoppingCartResActiveVo setGiveMoney(double giveMoney) {
    this.giveMoney = giveMoney;
    setGiveMoneyIsSet(true);
    return this;
  }

  public void unsetGiveMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEMONEY_ISSET_ID);
  }

  /** Returns true if field giveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEMONEY_ISSET_ID);
  }

  public void setGiveMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case ACTIVE_NAME:
      if (value == null) {
        unsetActiveName();
      } else {
        setActiveName((String)value);
      }
      break;

    case ACTIVE_TYPE:
      if (value == null) {
        unsetActiveType();
      } else {
        setActiveType((String)value);
      }
      break;

    case CUT_MONEY:
      if (value == null) {
        unsetCutMoney();
      } else {
        setCutMoney((Double)value);
      }
      break;

    case ACTIVE_STATUS:
      if (value == null) {
        unsetActiveStatus();
      } else {
        setActiveStatus((String)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    case IS_MINATO:
      if (value == null) {
        unsetIsMinato();
      } else {
        setIsMinato((Boolean)value);
      }
      break;

    case IS_LOWEST_DELETE:
      if (value == null) {
        unsetIsLowestDelete();
      } else {
        setIsLowestDelete((Boolean)value);
      }
      break;

    case GIVE_TYPE:
      if (value == null) {
        unsetGiveType();
      } else {
        setGiveType((String)value);
      }
      break;

    case GIVE_MONEY:
      if (value == null) {
        unsetGiveMoney();
      } else {
        setGiveMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVE_ID:
      return getActiveId();

    case ACTIVE_NAME:
      return getActiveName();

    case ACTIVE_TYPE:
      return getActiveType();

    case CUT_MONEY:
      return Double.valueOf(getCutMoney());

    case ACTIVE_STATUS:
      return getActiveStatus();

    case STATUS_MSG:
      return getStatusMsg();

    case IS_MINATO:
      return Boolean.valueOf(isIsMinato());

    case IS_LOWEST_DELETE:
      return Boolean.valueOf(isIsLowestDelete());

    case GIVE_TYPE:
      return getGiveType();

    case GIVE_MONEY:
      return Double.valueOf(getGiveMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVE_ID:
      return isSetActiveId();
    case ACTIVE_NAME:
      return isSetActiveName();
    case ACTIVE_TYPE:
      return isSetActiveType();
    case CUT_MONEY:
      return isSetCutMoney();
    case ACTIVE_STATUS:
      return isSetActiveStatus();
    case STATUS_MSG:
      return isSetStatusMsg();
    case IS_MINATO:
      return isSetIsMinato();
    case IS_LOWEST_DELETE:
      return isSetIsLowestDelete();
    case GIVE_TYPE:
      return isSetGiveType();
    case GIVE_MONEY:
      return isSetGiveMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShoppingCartResActiveVo)
      return this.equals((ShoppingCartResActiveVo)that);
    return false;
  }

  public boolean equals(ShoppingCartResActiveVo that) {
    if (that == null)
      return false;

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_activeName = true && this.isSetActiveName();
    boolean that_present_activeName = true && that.isSetActiveName();
    if (this_present_activeName || that_present_activeName) {
      if (!(this_present_activeName && that_present_activeName))
        return false;
      if (!this.activeName.equals(that.activeName))
        return false;
    }

    boolean this_present_activeType = true && this.isSetActiveType();
    boolean that_present_activeType = true && that.isSetActiveType();
    if (this_present_activeType || that_present_activeType) {
      if (!(this_present_activeType && that_present_activeType))
        return false;
      if (!this.activeType.equals(that.activeType))
        return false;
    }

    boolean this_present_cutMoney = true;
    boolean that_present_cutMoney = true;
    if (this_present_cutMoney || that_present_cutMoney) {
      if (!(this_present_cutMoney && that_present_cutMoney))
        return false;
      if (this.cutMoney != that.cutMoney)
        return false;
    }

    boolean this_present_activeStatus = true && this.isSetActiveStatus();
    boolean that_present_activeStatus = true && that.isSetActiveStatus();
    if (this_present_activeStatus || that_present_activeStatus) {
      if (!(this_present_activeStatus && that_present_activeStatus))
        return false;
      if (!this.activeStatus.equals(that.activeStatus))
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    boolean this_present_isMinato = true;
    boolean that_present_isMinato = true;
    if (this_present_isMinato || that_present_isMinato) {
      if (!(this_present_isMinato && that_present_isMinato))
        return false;
      if (this.isMinato != that.isMinato)
        return false;
    }

    boolean this_present_isLowestDelete = true;
    boolean that_present_isLowestDelete = true;
    if (this_present_isLowestDelete || that_present_isLowestDelete) {
      if (!(this_present_isLowestDelete && that_present_isLowestDelete))
        return false;
      if (this.isLowestDelete != that.isLowestDelete)
        return false;
    }

    boolean this_present_giveType = true && this.isSetGiveType();
    boolean that_present_giveType = true && that.isSetGiveType();
    if (this_present_giveType || that_present_giveType) {
      if (!(this_present_giveType && that_present_giveType))
        return false;
      if (!this.giveType.equals(that.giveType))
        return false;
    }

    boolean this_present_giveMoney = true;
    boolean that_present_giveMoney = true;
    if (this_present_giveMoney || that_present_giveMoney) {
      if (!(this_present_giveMoney && that_present_giveMoney))
        return false;
      if (this.giveMoney != that.giveMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_activeName = true && (isSetActiveName());
    list.add(present_activeName);
    if (present_activeName)
      list.add(activeName);

    boolean present_activeType = true && (isSetActiveType());
    list.add(present_activeType);
    if (present_activeType)
      list.add(activeType);

    boolean present_cutMoney = true;
    list.add(present_cutMoney);
    if (present_cutMoney)
      list.add(cutMoney);

    boolean present_activeStatus = true && (isSetActiveStatus());
    list.add(present_activeStatus);
    if (present_activeStatus)
      list.add(activeStatus);

    boolean present_statusMsg = true && (isSetStatusMsg());
    list.add(present_statusMsg);
    if (present_statusMsg)
      list.add(statusMsg);

    boolean present_isMinato = true;
    list.add(present_isMinato);
    if (present_isMinato)
      list.add(isMinato);

    boolean present_isLowestDelete = true;
    list.add(present_isLowestDelete);
    if (present_isLowestDelete)
      list.add(isLowestDelete);

    boolean present_giveType = true && (isSetGiveType());
    list.add(present_giveType);
    if (present_giveType)
      list.add(giveType);

    boolean present_giveMoney = true;
    list.add(present_giveMoney);
    if (present_giveMoney)
      list.add(giveMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShoppingCartResActiveVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveName()).compareTo(other.isSetActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeName, other.activeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveType()).compareTo(other.isSetActiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeType, other.activeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutMoney()).compareTo(other.isSetCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutMoney, other.cutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStatus()).compareTo(other.isSetActiveStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStatus, other.activeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMinato()).compareTo(other.isSetIsMinato());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMinato()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMinato, other.isMinato);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLowestDelete()).compareTo(other.isSetIsLowestDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLowestDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLowestDelete, other.isLowestDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveType()).compareTo(other.isSetGiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveType, other.giveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveMoney()).compareTo(other.isSetGiveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveMoney, other.giveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShoppingCartResActiveVo(");
    boolean first = true;

    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeName:");
    if (this.activeName == null) {
      sb.append("null");
    } else {
      sb.append(this.activeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeType:");
    if (this.activeType == null) {
      sb.append("null");
    } else {
      sb.append(this.activeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutMoney:");
    sb.append(this.cutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeStatus:");
    if (this.activeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.activeStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusMsg:");
    if (this.statusMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.statusMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMinato:");
    sb.append(this.isMinato);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLowestDelete:");
    sb.append(this.isLowestDelete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveType:");
    if (this.giveType == null) {
      sb.append("null");
    } else {
      sb.append(this.giveType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveMoney:");
    sb.append(this.giveMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShoppingCartResActiveVoStandardSchemeFactory implements SchemeFactory {
    public ShoppingCartResActiveVoStandardScheme getScheme() {
      return new ShoppingCartResActiveVoStandardScheme();
    }
  }

  private static class ShoppingCartResActiveVoStandardScheme extends StandardScheme<ShoppingCartResActiveVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShoppingCartResActiveVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeName = iprot.readString();
              struct.setActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeType = iprot.readString();
              struct.setActiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cutMoney = iprot.readDouble();
              struct.setCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeStatus = iprot.readString();
              struct.setActiveStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_MINATO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMinato = iprot.readBool();
              struct.setIsMinatoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_LOWEST_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLowestDelete = iprot.readBool();
              struct.setIsLowestDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveType = iprot.readString();
              struct.setGiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GIVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.giveMoney = iprot.readDouble();
              struct.setGiveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShoppingCartResActiveVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.activeName != null) {
        oprot.writeFieldBegin(ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.activeName);
        oprot.writeFieldEnd();
      }
      if (struct.activeType != null) {
        oprot.writeFieldBegin(ACTIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.activeType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.cutMoney);
      oprot.writeFieldEnd();
      if (struct.activeStatus != null) {
        oprot.writeFieldBegin(ACTIVE_STATUS_FIELD_DESC);
        oprot.writeString(struct.activeStatus);
        oprot.writeFieldEnd();
      }
      if (struct.statusMsg != null) {
        oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
        oprot.writeString(struct.statusMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_MINATO_FIELD_DESC);
      oprot.writeBool(struct.isMinato);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LOWEST_DELETE_FIELD_DESC);
      oprot.writeBool(struct.isLowestDelete);
      oprot.writeFieldEnd();
      if (struct.giveType != null) {
        oprot.writeFieldBegin(GIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.giveType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.giveMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShoppingCartResActiveVoTupleSchemeFactory implements SchemeFactory {
    public ShoppingCartResActiveVoTupleScheme getScheme() {
      return new ShoppingCartResActiveVoTupleScheme();
    }
  }

  private static class ShoppingCartResActiveVoTupleScheme extends TupleScheme<ShoppingCartResActiveVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShoppingCartResActiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActiveId()) {
        optionals.set(0);
      }
      if (struct.isSetActiveName()) {
        optionals.set(1);
      }
      if (struct.isSetActiveType()) {
        optionals.set(2);
      }
      if (struct.isSetCutMoney()) {
        optionals.set(3);
      }
      if (struct.isSetActiveStatus()) {
        optionals.set(4);
      }
      if (struct.isSetStatusMsg()) {
        optionals.set(5);
      }
      if (struct.isSetIsMinato()) {
        optionals.set(6);
      }
      if (struct.isSetIsLowestDelete()) {
        optionals.set(7);
      }
      if (struct.isSetGiveType()) {
        optionals.set(8);
      }
      if (struct.isSetGiveMoney()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetActiveName()) {
        oprot.writeString(struct.activeName);
      }
      if (struct.isSetActiveType()) {
        oprot.writeString(struct.activeType);
      }
      if (struct.isSetCutMoney()) {
        oprot.writeDouble(struct.cutMoney);
      }
      if (struct.isSetActiveStatus()) {
        oprot.writeString(struct.activeStatus);
      }
      if (struct.isSetStatusMsg()) {
        oprot.writeString(struct.statusMsg);
      }
      if (struct.isSetIsMinato()) {
        oprot.writeBool(struct.isMinato);
      }
      if (struct.isSetIsLowestDelete()) {
        oprot.writeBool(struct.isLowestDelete);
      }
      if (struct.isSetGiveType()) {
        oprot.writeString(struct.giveType);
      }
      if (struct.isSetGiveMoney()) {
        oprot.writeDouble(struct.giveMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShoppingCartResActiveVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activeName = iprot.readString();
        struct.setActiveNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeType = iprot.readString();
        struct.setActiveTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cutMoney = iprot.readDouble();
        struct.setCutMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activeStatus = iprot.readString();
        struct.setActiveStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.statusMsg = iprot.readString();
        struct.setStatusMsgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isMinato = iprot.readBool();
        struct.setIsMinatoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isLowestDelete = iprot.readBool();
        struct.setIsLowestDeleteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.giveType = iprot.readString();
        struct.setGiveTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.giveMoney = iprot.readDouble();
        struct.setGiveMoneyIsSet(true);
      }
    }
  }

}

