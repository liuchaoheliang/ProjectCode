/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.bankcard;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 积分平台请求参数封装
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class PointApiReq implements org.apache.thrift.TBase<PointApiReq, PointApiReq._Fields>, java.io.Serializable, Cloneable, Comparable<PointApiReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointApiReq");

  private static final org.apache.thrift.protocol.TField PARTNER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_MARKED_FIELD_DESC = new org.apache.thrift.protocol.TField("accountMarked", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_MARKED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountMarkedType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OBJECT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("objectNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OBJECT_DES_FIELD_DESC = new org.apache.thrift.protocol.TField("objectDes", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("objectType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHECK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkCode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAY_POINTS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("payPointsNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField POINTS_CATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pointsCateNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ORG_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("orgPoints", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BANK_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCard", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certNo", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IDENTITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identityNo", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MOBILE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNum", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PROTOCOL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolNo", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CARD_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("cardPassword", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PROTOCOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolType", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointApiReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointApiReqTupleSchemeFactory());
  }

  /**
   * 合作伙伴编号ID
   */
  public String partnerNo; // required
  /**
   * 积分机构号
   */
  public String orgNo; // required
  /**
   * 会员标识
   */
  public String accountMarked; // required
  /**
   * 会员标识类型
   */
  public String accountMarkedType; // required
  /**
   * 消费积分的一个标识ID 如：交易号，商品ID
   */
  public String objectNo; // required
  /**
   * 消费积分的具体描述信息
   */
  public String objectDes; // required
  /**
   * 消费积分的一个东西的类型，如：订单，订单中的某商品,若是订单单，其值为1
   */
  public String objectType; // required
  /**
   * 具体积分数
   */
  public String points; // required
  /**
   * 积分帐号
   */
  public String accountId; // required
  /**
   * 验证码
   */
  public String checkCode; // required
  /**
   * 备注信息
   */
  public String remark; // required
  /**
   * 成功消费积分的消费积分单编号
   */
  public String payPointsNo; // required
  /**
   * 积分类型编号
   */
  public String pointsCateNo; // required
  /**
   * 积分机构的积分额
   */
  public String orgPoints; // required
  /**
   * 客户在积分机构的手机号
   */
  public String phone; // required
  /**
   * 银行实名信息
   */
  public String realName; // required
  /**
   * 银行编号
   */
  public String bankId; // required
  /**
   * 银行名称
   */
  public String bankName; // required
  /**
   * 银行卡号
   */
  public String bankCard; // required
  /**
   * 证件类型
   */
  public String certType; // required
  /**
   * 证件号
   */
  public String certNo; // required
  /**
   * 业务类型
   */
  public String businessType; // required
  /**
   * 身份证号
   */
  public String identityNo; // required
  /**
   * 用户预留手机号
   */
  public String mobileNum; // required
  /**
   * 银行卡卡种
   */
  public String cardType; // required
  /**
   * 银行协议号
   */
  public String protocolNo; // required
  /**
   * 充值卡卡密
   */
  public String cardPassword; // required
  /**
   * 充值卡卡号
   */
  public String cardNo; // required
  /**
   * 协议类型
   */
  public String protocolType; // required
  /**
   * 分页容量
   */
  public int pageSize; // required
  /**
   * 查询页码
   */
  public int pageNum; // required
  /**
   * 开始时间
   */
  public String fromTime; // required
  /**
   * 结束时间
   */
  public String toTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 合作伙伴编号ID
     */
    PARTNER_NO((short)1, "partnerNo"),
    /**
     * 积分机构号
     */
    ORG_NO((short)2, "orgNo"),
    /**
     * 会员标识
     */
    ACCOUNT_MARKED((short)3, "accountMarked"),
    /**
     * 会员标识类型
     */
    ACCOUNT_MARKED_TYPE((short)4, "accountMarkedType"),
    /**
     * 消费积分的一个标识ID 如：交易号，商品ID
     */
    OBJECT_NO((short)5, "objectNo"),
    /**
     * 消费积分的具体描述信息
     */
    OBJECT_DES((short)6, "objectDes"),
    /**
     * 消费积分的一个东西的类型，如：订单，订单中的某商品,若是订单单，其值为1
     */
    OBJECT_TYPE((short)7, "objectType"),
    /**
     * 具体积分数
     */
    POINTS((short)8, "points"),
    /**
     * 积分帐号
     */
    ACCOUNT_ID((short)9, "accountId"),
    /**
     * 验证码
     */
    CHECK_CODE((short)10, "checkCode"),
    /**
     * 备注信息
     */
    REMARK((short)11, "remark"),
    /**
     * 成功消费积分的消费积分单编号
     */
    PAY_POINTS_NO((short)12, "payPointsNo"),
    /**
     * 积分类型编号
     */
    POINTS_CATE_NO((short)13, "pointsCateNo"),
    /**
     * 积分机构的积分额
     */
    ORG_POINTS((short)14, "orgPoints"),
    /**
     * 客户在积分机构的手机号
     */
    PHONE((short)15, "phone"),
    /**
     * 银行实名信息
     */
    REAL_NAME((short)16, "realName"),
    /**
     * 银行编号
     */
    BANK_ID((short)17, "bankId"),
    /**
     * 银行名称
     */
    BANK_NAME((short)18, "bankName"),
    /**
     * 银行卡号
     */
    BANK_CARD((short)19, "bankCard"),
    /**
     * 证件类型
     */
    CERT_TYPE((short)20, "certType"),
    /**
     * 证件号
     */
    CERT_NO((short)21, "certNo"),
    /**
     * 业务类型
     */
    BUSINESS_TYPE((short)22, "businessType"),
    /**
     * 身份证号
     */
    IDENTITY_NO((short)23, "identityNo"),
    /**
     * 用户预留手机号
     */
    MOBILE_NUM((short)24, "mobileNum"),
    /**
     * 银行卡卡种
     */
    CARD_TYPE((short)25, "cardType"),
    /**
     * 银行协议号
     */
    PROTOCOL_NO((short)26, "protocolNo"),
    /**
     * 充值卡卡密
     */
    CARD_PASSWORD((short)27, "cardPassword"),
    /**
     * 充值卡卡号
     */
    CARD_NO((short)28, "cardNo"),
    /**
     * 协议类型
     */
    PROTOCOL_TYPE((short)29, "protocolType"),
    /**
     * 分页容量
     */
    PAGE_SIZE((short)30, "pageSize"),
    /**
     * 查询页码
     */
    PAGE_NUM((short)31, "pageNum"),
    /**
     * 开始时间
     */
    FROM_TIME((short)32, "fromTime"),
    /**
     * 结束时间
     */
    TO_TIME((short)33, "toTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_NO
          return PARTNER_NO;
        case 2: // ORG_NO
          return ORG_NO;
        case 3: // ACCOUNT_MARKED
          return ACCOUNT_MARKED;
        case 4: // ACCOUNT_MARKED_TYPE
          return ACCOUNT_MARKED_TYPE;
        case 5: // OBJECT_NO
          return OBJECT_NO;
        case 6: // OBJECT_DES
          return OBJECT_DES;
        case 7: // OBJECT_TYPE
          return OBJECT_TYPE;
        case 8: // POINTS
          return POINTS;
        case 9: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 10: // CHECK_CODE
          return CHECK_CODE;
        case 11: // REMARK
          return REMARK;
        case 12: // PAY_POINTS_NO
          return PAY_POINTS_NO;
        case 13: // POINTS_CATE_NO
          return POINTS_CATE_NO;
        case 14: // ORG_POINTS
          return ORG_POINTS;
        case 15: // PHONE
          return PHONE;
        case 16: // REAL_NAME
          return REAL_NAME;
        case 17: // BANK_ID
          return BANK_ID;
        case 18: // BANK_NAME
          return BANK_NAME;
        case 19: // BANK_CARD
          return BANK_CARD;
        case 20: // CERT_TYPE
          return CERT_TYPE;
        case 21: // CERT_NO
          return CERT_NO;
        case 22: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 23: // IDENTITY_NO
          return IDENTITY_NO;
        case 24: // MOBILE_NUM
          return MOBILE_NUM;
        case 25: // CARD_TYPE
          return CARD_TYPE;
        case 26: // PROTOCOL_NO
          return PROTOCOL_NO;
        case 27: // CARD_PASSWORD
          return CARD_PASSWORD;
        case 28: // CARD_NO
          return CARD_NO;
        case 29: // PROTOCOL_TYPE
          return PROTOCOL_TYPE;
        case 30: // PAGE_SIZE
          return PAGE_SIZE;
        case 31: // PAGE_NUM
          return PAGE_NUM;
        case 32: // FROM_TIME
          return FROM_TIME;
        case 33: // TO_TIME
          return TO_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGESIZE_ISSET_ID = 0;
  private static final int __PAGENUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("orgNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_MARKED, new org.apache.thrift.meta_data.FieldMetaData("accountMarked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_MARKED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountMarkedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_NO, new org.apache.thrift.meta_data.FieldMetaData("objectNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_DES, new org.apache.thrift.meta_data.FieldMetaData("objectDes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("objectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_CODE, new org.apache.thrift.meta_data.FieldMetaData("checkCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_POINTS_NO, new org.apache.thrift.meta_data.FieldMetaData("payPointsNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINTS_CATE_NO, new org.apache.thrift.meta_data.FieldMetaData("pointsCateNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_POINTS, new org.apache.thrift.meta_data.FieldMetaData("orgPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD, new org.apache.thrift.meta_data.FieldMetaData("bankCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NO, new org.apache.thrift.meta_data.FieldMetaData("certNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_NO, new org.apache.thrift.meta_data.FieldMetaData("identityNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_NUM, new org.apache.thrift.meta_data.FieldMetaData("mobileNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL_NO, new org.apache.thrift.meta_data.FieldMetaData("protocolNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("cardPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("protocolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointApiReq.class, metaDataMap);
  }

  public PointApiReq() {
  }

  public PointApiReq(
    String partnerNo,
    String orgNo,
    String accountMarked,
    String accountMarkedType,
    String objectNo,
    String objectDes,
    String objectType,
    String points,
    String accountId,
    String checkCode,
    String remark,
    String payPointsNo,
    String pointsCateNo,
    String orgPoints,
    String phone,
    String realName,
    String bankId,
    String bankName,
    String bankCard,
    String certType,
    String certNo,
    String businessType,
    String identityNo,
    String mobileNum,
    String cardType,
    String protocolNo,
    String cardPassword,
    String cardNo,
    String protocolType,
    int pageSize,
    int pageNum,
    String fromTime,
    String toTime)
  {
    this();
    this.partnerNo = partnerNo;
    this.orgNo = orgNo;
    this.accountMarked = accountMarked;
    this.accountMarkedType = accountMarkedType;
    this.objectNo = objectNo;
    this.objectDes = objectDes;
    this.objectType = objectType;
    this.points = points;
    this.accountId = accountId;
    this.checkCode = checkCode;
    this.remark = remark;
    this.payPointsNo = payPointsNo;
    this.pointsCateNo = pointsCateNo;
    this.orgPoints = orgPoints;
    this.phone = phone;
    this.realName = realName;
    this.bankId = bankId;
    this.bankName = bankName;
    this.bankCard = bankCard;
    this.certType = certType;
    this.certNo = certNo;
    this.businessType = businessType;
    this.identityNo = identityNo;
    this.mobileNum = mobileNum;
    this.cardType = cardType;
    this.protocolNo = protocolNo;
    this.cardPassword = cardPassword;
    this.cardNo = cardNo;
    this.protocolType = protocolType;
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    this.fromTime = fromTime;
    this.toTime = toTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointApiReq(PointApiReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerNo()) {
      this.partnerNo = other.partnerNo;
    }
    if (other.isSetOrgNo()) {
      this.orgNo = other.orgNo;
    }
    if (other.isSetAccountMarked()) {
      this.accountMarked = other.accountMarked;
    }
    if (other.isSetAccountMarkedType()) {
      this.accountMarkedType = other.accountMarkedType;
    }
    if (other.isSetObjectNo()) {
      this.objectNo = other.objectNo;
    }
    if (other.isSetObjectDes()) {
      this.objectDes = other.objectDes;
    }
    if (other.isSetObjectType()) {
      this.objectType = other.objectType;
    }
    if (other.isSetPoints()) {
      this.points = other.points;
    }
    if (other.isSetAccountId()) {
      this.accountId = other.accountId;
    }
    if (other.isSetCheckCode()) {
      this.checkCode = other.checkCode;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPayPointsNo()) {
      this.payPointsNo = other.payPointsNo;
    }
    if (other.isSetPointsCateNo()) {
      this.pointsCateNo = other.pointsCateNo;
    }
    if (other.isSetOrgPoints()) {
      this.orgPoints = other.orgPoints;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetBankId()) {
      this.bankId = other.bankId;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBankCard()) {
      this.bankCard = other.bankCard;
    }
    if (other.isSetCertType()) {
      this.certType = other.certType;
    }
    if (other.isSetCertNo()) {
      this.certNo = other.certNo;
    }
    if (other.isSetBusinessType()) {
      this.businessType = other.businessType;
    }
    if (other.isSetIdentityNo()) {
      this.identityNo = other.identityNo;
    }
    if (other.isSetMobileNum()) {
      this.mobileNum = other.mobileNum;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetProtocolNo()) {
      this.protocolNo = other.protocolNo;
    }
    if (other.isSetCardPassword()) {
      this.cardPassword = other.cardPassword;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetProtocolType()) {
      this.protocolType = other.protocolType;
    }
    this.pageSize = other.pageSize;
    this.pageNum = other.pageNum;
    if (other.isSetFromTime()) {
      this.fromTime = other.fromTime;
    }
    if (other.isSetToTime()) {
      this.toTime = other.toTime;
    }
  }

  public PointApiReq deepCopy() {
    return new PointApiReq(this);
  }

  @Override
  public void clear() {
    this.partnerNo = null;
    this.orgNo = null;
    this.accountMarked = null;
    this.accountMarkedType = null;
    this.objectNo = null;
    this.objectDes = null;
    this.objectType = null;
    this.points = null;
    this.accountId = null;
    this.checkCode = null;
    this.remark = null;
    this.payPointsNo = null;
    this.pointsCateNo = null;
    this.orgPoints = null;
    this.phone = null;
    this.realName = null;
    this.bankId = null;
    this.bankName = null;
    this.bankCard = null;
    this.certType = null;
    this.certNo = null;
    this.businessType = null;
    this.identityNo = null;
    this.mobileNum = null;
    this.cardType = null;
    this.protocolNo = null;
    this.cardPassword = null;
    this.cardNo = null;
    this.protocolType = null;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setPageNumIsSet(false);
    this.pageNum = 0;
    this.fromTime = null;
    this.toTime = null;
  }

  /**
   * 合作伙伴编号ID
   */
  public String getPartnerNo() {
    return this.partnerNo;
  }

  /**
   * 合作伙伴编号ID
   */
  public PointApiReq setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
    return this;
  }

  public void unsetPartnerNo() {
    this.partnerNo = null;
  }

  /** Returns true if field partnerNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerNo() {
    return this.partnerNo != null;
  }

  public void setPartnerNoIsSet(boolean value) {
    if (!value) {
      this.partnerNo = null;
    }
  }

  /**
   * 积分机构号
   */
  public String getOrgNo() {
    return this.orgNo;
  }

  /**
   * 积分机构号
   */
  public PointApiReq setOrgNo(String orgNo) {
    this.orgNo = orgNo;
    return this;
  }

  public void unsetOrgNo() {
    this.orgNo = null;
  }

  /** Returns true if field orgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgNo() {
    return this.orgNo != null;
  }

  public void setOrgNoIsSet(boolean value) {
    if (!value) {
      this.orgNo = null;
    }
  }

  /**
   * 会员标识
   */
  public String getAccountMarked() {
    return this.accountMarked;
  }

  /**
   * 会员标识
   */
  public PointApiReq setAccountMarked(String accountMarked) {
    this.accountMarked = accountMarked;
    return this;
  }

  public void unsetAccountMarked() {
    this.accountMarked = null;
  }

  /** Returns true if field accountMarked is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountMarked() {
    return this.accountMarked != null;
  }

  public void setAccountMarkedIsSet(boolean value) {
    if (!value) {
      this.accountMarked = null;
    }
  }

  /**
   * 会员标识类型
   */
  public String getAccountMarkedType() {
    return this.accountMarkedType;
  }

  /**
   * 会员标识类型
   */
  public PointApiReq setAccountMarkedType(String accountMarkedType) {
    this.accountMarkedType = accountMarkedType;
    return this;
  }

  public void unsetAccountMarkedType() {
    this.accountMarkedType = null;
  }

  /** Returns true if field accountMarkedType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountMarkedType() {
    return this.accountMarkedType != null;
  }

  public void setAccountMarkedTypeIsSet(boolean value) {
    if (!value) {
      this.accountMarkedType = null;
    }
  }

  /**
   * 消费积分的一个标识ID 如：交易号，商品ID
   */
  public String getObjectNo() {
    return this.objectNo;
  }

  /**
   * 消费积分的一个标识ID 如：交易号，商品ID
   */
  public PointApiReq setObjectNo(String objectNo) {
    this.objectNo = objectNo;
    return this;
  }

  public void unsetObjectNo() {
    this.objectNo = null;
  }

  /** Returns true if field objectNo is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectNo() {
    return this.objectNo != null;
  }

  public void setObjectNoIsSet(boolean value) {
    if (!value) {
      this.objectNo = null;
    }
  }

  /**
   * 消费积分的具体描述信息
   */
  public String getObjectDes() {
    return this.objectDes;
  }

  /**
   * 消费积分的具体描述信息
   */
  public PointApiReq setObjectDes(String objectDes) {
    this.objectDes = objectDes;
    return this;
  }

  public void unsetObjectDes() {
    this.objectDes = null;
  }

  /** Returns true if field objectDes is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectDes() {
    return this.objectDes != null;
  }

  public void setObjectDesIsSet(boolean value) {
    if (!value) {
      this.objectDes = null;
    }
  }

  /**
   * 消费积分的一个东西的类型，如：订单，订单中的某商品,若是订单单，其值为1
   */
  public String getObjectType() {
    return this.objectType;
  }

  /**
   * 消费积分的一个东西的类型，如：订单，订单中的某商品,若是订单单，其值为1
   */
  public PointApiReq setObjectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  public void unsetObjectType() {
    this.objectType = null;
  }

  /** Returns true if field objectType is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectType() {
    return this.objectType != null;
  }

  public void setObjectTypeIsSet(boolean value) {
    if (!value) {
      this.objectType = null;
    }
  }

  /**
   * 具体积分数
   */
  public String getPoints() {
    return this.points;
  }

  /**
   * 具体积分数
   */
  public PointApiReq setPoints(String points) {
    this.points = points;
    return this;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  /**
   * 积分帐号
   */
  public String getAccountId() {
    return this.accountId;
  }

  /**
   * 积分帐号
   */
  public PointApiReq setAccountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  public void unsetAccountId() {
    this.accountId = null;
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return this.accountId != null;
  }

  public void setAccountIdIsSet(boolean value) {
    if (!value) {
      this.accountId = null;
    }
  }

  /**
   * 验证码
   */
  public String getCheckCode() {
    return this.checkCode;
  }

  /**
   * 验证码
   */
  public PointApiReq setCheckCode(String checkCode) {
    this.checkCode = checkCode;
    return this;
  }

  public void unsetCheckCode() {
    this.checkCode = null;
  }

  /** Returns true if field checkCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckCode() {
    return this.checkCode != null;
  }

  public void setCheckCodeIsSet(boolean value) {
    if (!value) {
      this.checkCode = null;
    }
  }

  /**
   * 备注信息
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注信息
   */
  public PointApiReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 成功消费积分的消费积分单编号
   */
  public String getPayPointsNo() {
    return this.payPointsNo;
  }

  /**
   * 成功消费积分的消费积分单编号
   */
  public PointApiReq setPayPointsNo(String payPointsNo) {
    this.payPointsNo = payPointsNo;
    return this;
  }

  public void unsetPayPointsNo() {
    this.payPointsNo = null;
  }

  /** Returns true if field payPointsNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPointsNo() {
    return this.payPointsNo != null;
  }

  public void setPayPointsNoIsSet(boolean value) {
    if (!value) {
      this.payPointsNo = null;
    }
  }

  /**
   * 积分类型编号
   */
  public String getPointsCateNo() {
    return this.pointsCateNo;
  }

  /**
   * 积分类型编号
   */
  public PointApiReq setPointsCateNo(String pointsCateNo) {
    this.pointsCateNo = pointsCateNo;
    return this;
  }

  public void unsetPointsCateNo() {
    this.pointsCateNo = null;
  }

  /** Returns true if field pointsCateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPointsCateNo() {
    return this.pointsCateNo != null;
  }

  public void setPointsCateNoIsSet(boolean value) {
    if (!value) {
      this.pointsCateNo = null;
    }
  }

  /**
   * 积分机构的积分额
   */
  public String getOrgPoints() {
    return this.orgPoints;
  }

  /**
   * 积分机构的积分额
   */
  public PointApiReq setOrgPoints(String orgPoints) {
    this.orgPoints = orgPoints;
    return this;
  }

  public void unsetOrgPoints() {
    this.orgPoints = null;
  }

  /** Returns true if field orgPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgPoints() {
    return this.orgPoints != null;
  }

  public void setOrgPointsIsSet(boolean value) {
    if (!value) {
      this.orgPoints = null;
    }
  }

  /**
   * 客户在积分机构的手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 客户在积分机构的手机号
   */
  public PointApiReq setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 银行实名信息
   */
  public String getRealName() {
    return this.realName;
  }

  /**
   * 银行实名信息
   */
  public PointApiReq setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  /**
   * 银行编号
   */
  public String getBankId() {
    return this.bankId;
  }

  /**
   * 银行编号
   */
  public PointApiReq setBankId(String bankId) {
    this.bankId = bankId;
    return this;
  }

  public void unsetBankId() {
    this.bankId = null;
  }

  /** Returns true if field bankId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankId() {
    return this.bankId != null;
  }

  public void setBankIdIsSet(boolean value) {
    if (!value) {
      this.bankId = null;
    }
  }

  /**
   * 银行名称
   */
  public String getBankName() {
    return this.bankName;
  }

  /**
   * 银行名称
   */
  public PointApiReq setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  /**
   * 银行卡号
   */
  public String getBankCard() {
    return this.bankCard;
  }

  /**
   * 银行卡号
   */
  public PointApiReq setBankCard(String bankCard) {
    this.bankCard = bankCard;
    return this;
  }

  public void unsetBankCard() {
    this.bankCard = null;
  }

  /** Returns true if field bankCard is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCard() {
    return this.bankCard != null;
  }

  public void setBankCardIsSet(boolean value) {
    if (!value) {
      this.bankCard = null;
    }
  }

  /**
   * 证件类型
   */
  public String getCertType() {
    return this.certType;
  }

  /**
   * 证件类型
   */
  public PointApiReq setCertType(String certType) {
    this.certType = certType;
    return this;
  }

  public void unsetCertType() {
    this.certType = null;
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return this.certType != null;
  }

  public void setCertTypeIsSet(boolean value) {
    if (!value) {
      this.certType = null;
    }
  }

  /**
   * 证件号
   */
  public String getCertNo() {
    return this.certNo;
  }

  /**
   * 证件号
   */
  public PointApiReq setCertNo(String certNo) {
    this.certNo = certNo;
    return this;
  }

  public void unsetCertNo() {
    this.certNo = null;
  }

  /** Returns true if field certNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNo() {
    return this.certNo != null;
  }

  public void setCertNoIsSet(boolean value) {
    if (!value) {
      this.certNo = null;
    }
  }

  /**
   * 业务类型
   */
  public String getBusinessType() {
    return this.businessType;
  }

  /**
   * 业务类型
   */
  public PointApiReq setBusinessType(String businessType) {
    this.businessType = businessType;
    return this;
  }

  public void unsetBusinessType() {
    this.businessType = null;
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return this.businessType != null;
  }

  public void setBusinessTypeIsSet(boolean value) {
    if (!value) {
      this.businessType = null;
    }
  }

  /**
   * 身份证号
   */
  public String getIdentityNo() {
    return this.identityNo;
  }

  /**
   * 身份证号
   */
  public PointApiReq setIdentityNo(String identityNo) {
    this.identityNo = identityNo;
    return this;
  }

  public void unsetIdentityNo() {
    this.identityNo = null;
  }

  /** Returns true if field identityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityNo() {
    return this.identityNo != null;
  }

  public void setIdentityNoIsSet(boolean value) {
    if (!value) {
      this.identityNo = null;
    }
  }

  /**
   * 用户预留手机号
   */
  public String getMobileNum() {
    return this.mobileNum;
  }

  /**
   * 用户预留手机号
   */
  public PointApiReq setMobileNum(String mobileNum) {
    this.mobileNum = mobileNum;
    return this;
  }

  public void unsetMobileNum() {
    this.mobileNum = null;
  }

  /** Returns true if field mobileNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileNum() {
    return this.mobileNum != null;
  }

  public void setMobileNumIsSet(boolean value) {
    if (!value) {
      this.mobileNum = null;
    }
  }

  /**
   * 银行卡卡种
   */
  public String getCardType() {
    return this.cardType;
  }

  /**
   * 银行卡卡种
   */
  public PointApiReq setCardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  /**
   * 银行协议号
   */
  public String getProtocolNo() {
    return this.protocolNo;
  }

  /**
   * 银行协议号
   */
  public PointApiReq setProtocolNo(String protocolNo) {
    this.protocolNo = protocolNo;
    return this;
  }

  public void unsetProtocolNo() {
    this.protocolNo = null;
  }

  /** Returns true if field protocolNo is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolNo() {
    return this.protocolNo != null;
  }

  public void setProtocolNoIsSet(boolean value) {
    if (!value) {
      this.protocolNo = null;
    }
  }

  /**
   * 充值卡卡密
   */
  public String getCardPassword() {
    return this.cardPassword;
  }

  /**
   * 充值卡卡密
   */
  public PointApiReq setCardPassword(String cardPassword) {
    this.cardPassword = cardPassword;
    return this;
  }

  public void unsetCardPassword() {
    this.cardPassword = null;
  }

  /** Returns true if field cardPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetCardPassword() {
    return this.cardPassword != null;
  }

  public void setCardPasswordIsSet(boolean value) {
    if (!value) {
      this.cardPassword = null;
    }
  }

  /**
   * 充值卡卡号
   */
  public String getCardNo() {
    return this.cardNo;
  }

  /**
   * 充值卡卡号
   */
  public PointApiReq setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  /**
   * 协议类型
   */
  public String getProtocolType() {
    return this.protocolType;
  }

  /**
   * 协议类型
   */
  public PointApiReq setProtocolType(String protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  public void unsetProtocolType() {
    this.protocolType = null;
  }

  /** Returns true if field protocolType is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolType() {
    return this.protocolType != null;
  }

  public void setProtocolTypeIsSet(boolean value) {
    if (!value) {
      this.protocolType = null;
    }
  }

  /**
   * 分页容量
   */
  public int getPageSize() {
    return this.pageSize;
  }

  /**
   * 分页容量
   */
  public PointApiReq setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  /**
   * 查询页码
   */
  public int getPageNum() {
    return this.pageNum;
  }

  /**
   * 查询页码
   */
  public PointApiReq setPageNum(int pageNum) {
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    return this;
  }

  public void unsetPageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  public void setPageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
  }

  /**
   * 开始时间
   */
  public String getFromTime() {
    return this.fromTime;
  }

  /**
   * 开始时间
   */
  public PointApiReq setFromTime(String fromTime) {
    this.fromTime = fromTime;
    return this;
  }

  public void unsetFromTime() {
    this.fromTime = null;
  }

  /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTime() {
    return this.fromTime != null;
  }

  public void setFromTimeIsSet(boolean value) {
    if (!value) {
      this.fromTime = null;
    }
  }

  /**
   * 结束时间
   */
  public String getToTime() {
    return this.toTime;
  }

  /**
   * 结束时间
   */
  public PointApiReq setToTime(String toTime) {
    this.toTime = toTime;
    return this;
  }

  public void unsetToTime() {
    this.toTime = null;
  }

  /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
  public boolean isSetToTime() {
    return this.toTime != null;
  }

  public void setToTimeIsSet(boolean value) {
    if (!value) {
      this.toTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_NO:
      if (value == null) {
        unsetPartnerNo();
      } else {
        setPartnerNo((String)value);
      }
      break;

    case ORG_NO:
      if (value == null) {
        unsetOrgNo();
      } else {
        setOrgNo((String)value);
      }
      break;

    case ACCOUNT_MARKED:
      if (value == null) {
        unsetAccountMarked();
      } else {
        setAccountMarked((String)value);
      }
      break;

    case ACCOUNT_MARKED_TYPE:
      if (value == null) {
        unsetAccountMarkedType();
      } else {
        setAccountMarkedType((String)value);
      }
      break;

    case OBJECT_NO:
      if (value == null) {
        unsetObjectNo();
      } else {
        setObjectNo((String)value);
      }
      break;

    case OBJECT_DES:
      if (value == null) {
        unsetObjectDes();
      } else {
        setObjectDes((String)value);
      }
      break;

    case OBJECT_TYPE:
      if (value == null) {
        unsetObjectType();
      } else {
        setObjectType((String)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((String)value);
      }
      break;

    case CHECK_CODE:
      if (value == null) {
        unsetCheckCode();
      } else {
        setCheckCode((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PAY_POINTS_NO:
      if (value == null) {
        unsetPayPointsNo();
      } else {
        setPayPointsNo((String)value);
      }
      break;

    case POINTS_CATE_NO:
      if (value == null) {
        unsetPointsCateNo();
      } else {
        setPointsCateNo((String)value);
      }
      break;

    case ORG_POINTS:
      if (value == null) {
        unsetOrgPoints();
      } else {
        setOrgPoints((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankId();
      } else {
        setBankId((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_CARD:
      if (value == null) {
        unsetBankCard();
      } else {
        setBankCard((String)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((String)value);
      }
      break;

    case CERT_NO:
      if (value == null) {
        unsetCertNo();
      } else {
        setCertNo((String)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((String)value);
      }
      break;

    case IDENTITY_NO:
      if (value == null) {
        unsetIdentityNo();
      } else {
        setIdentityNo((String)value);
      }
      break;

    case MOBILE_NUM:
      if (value == null) {
        unsetMobileNum();
      } else {
        setMobileNum((String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((String)value);
      }
      break;

    case PROTOCOL_NO:
      if (value == null) {
        unsetProtocolNo();
      } else {
        setProtocolNo((String)value);
      }
      break;

    case CARD_PASSWORD:
      if (value == null) {
        unsetCardPassword();
      } else {
        setCardPassword((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case PROTOCOL_TYPE:
      if (value == null) {
        unsetProtocolType();
      } else {
        setProtocolType((String)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((Integer)value);
      }
      break;

    case FROM_TIME:
      if (value == null) {
        unsetFromTime();
      } else {
        setFromTime((String)value);
      }
      break;

    case TO_TIME:
      if (value == null) {
        unsetToTime();
      } else {
        setToTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_NO:
      return getPartnerNo();

    case ORG_NO:
      return getOrgNo();

    case ACCOUNT_MARKED:
      return getAccountMarked();

    case ACCOUNT_MARKED_TYPE:
      return getAccountMarkedType();

    case OBJECT_NO:
      return getObjectNo();

    case OBJECT_DES:
      return getObjectDes();

    case OBJECT_TYPE:
      return getObjectType();

    case POINTS:
      return getPoints();

    case ACCOUNT_ID:
      return getAccountId();

    case CHECK_CODE:
      return getCheckCode();

    case REMARK:
      return getRemark();

    case PAY_POINTS_NO:
      return getPayPointsNo();

    case POINTS_CATE_NO:
      return getPointsCateNo();

    case ORG_POINTS:
      return getOrgPoints();

    case PHONE:
      return getPhone();

    case REAL_NAME:
      return getRealName();

    case BANK_ID:
      return getBankId();

    case BANK_NAME:
      return getBankName();

    case BANK_CARD:
      return getBankCard();

    case CERT_TYPE:
      return getCertType();

    case CERT_NO:
      return getCertNo();

    case BUSINESS_TYPE:
      return getBusinessType();

    case IDENTITY_NO:
      return getIdentityNo();

    case MOBILE_NUM:
      return getMobileNum();

    case CARD_TYPE:
      return getCardType();

    case PROTOCOL_NO:
      return getProtocolNo();

    case CARD_PASSWORD:
      return getCardPassword();

    case CARD_NO:
      return getCardNo();

    case PROTOCOL_TYPE:
      return getProtocolType();

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PAGE_NUM:
      return Integer.valueOf(getPageNum());

    case FROM_TIME:
      return getFromTime();

    case TO_TIME:
      return getToTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_NO:
      return isSetPartnerNo();
    case ORG_NO:
      return isSetOrgNo();
    case ACCOUNT_MARKED:
      return isSetAccountMarked();
    case ACCOUNT_MARKED_TYPE:
      return isSetAccountMarkedType();
    case OBJECT_NO:
      return isSetObjectNo();
    case OBJECT_DES:
      return isSetObjectDes();
    case OBJECT_TYPE:
      return isSetObjectType();
    case POINTS:
      return isSetPoints();
    case ACCOUNT_ID:
      return isSetAccountId();
    case CHECK_CODE:
      return isSetCheckCode();
    case REMARK:
      return isSetRemark();
    case PAY_POINTS_NO:
      return isSetPayPointsNo();
    case POINTS_CATE_NO:
      return isSetPointsCateNo();
    case ORG_POINTS:
      return isSetOrgPoints();
    case PHONE:
      return isSetPhone();
    case REAL_NAME:
      return isSetRealName();
    case BANK_ID:
      return isSetBankId();
    case BANK_NAME:
      return isSetBankName();
    case BANK_CARD:
      return isSetBankCard();
    case CERT_TYPE:
      return isSetCertType();
    case CERT_NO:
      return isSetCertNo();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case IDENTITY_NO:
      return isSetIdentityNo();
    case MOBILE_NUM:
      return isSetMobileNum();
    case CARD_TYPE:
      return isSetCardType();
    case PROTOCOL_NO:
      return isSetProtocolNo();
    case CARD_PASSWORD:
      return isSetCardPassword();
    case CARD_NO:
      return isSetCardNo();
    case PROTOCOL_TYPE:
      return isSetProtocolType();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_NUM:
      return isSetPageNum();
    case FROM_TIME:
      return isSetFromTime();
    case TO_TIME:
      return isSetToTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PointApiReq)
      return this.equals((PointApiReq)that);
    return false;
  }

  public boolean equals(PointApiReq that) {
    if (that == null)
      return false;

    boolean this_present_partnerNo = true && this.isSetPartnerNo();
    boolean that_present_partnerNo = true && that.isSetPartnerNo();
    if (this_present_partnerNo || that_present_partnerNo) {
      if (!(this_present_partnerNo && that_present_partnerNo))
        return false;
      if (!this.partnerNo.equals(that.partnerNo))
        return false;
    }

    boolean this_present_orgNo = true && this.isSetOrgNo();
    boolean that_present_orgNo = true && that.isSetOrgNo();
    if (this_present_orgNo || that_present_orgNo) {
      if (!(this_present_orgNo && that_present_orgNo))
        return false;
      if (!this.orgNo.equals(that.orgNo))
        return false;
    }

    boolean this_present_accountMarked = true && this.isSetAccountMarked();
    boolean that_present_accountMarked = true && that.isSetAccountMarked();
    if (this_present_accountMarked || that_present_accountMarked) {
      if (!(this_present_accountMarked && that_present_accountMarked))
        return false;
      if (!this.accountMarked.equals(that.accountMarked))
        return false;
    }

    boolean this_present_accountMarkedType = true && this.isSetAccountMarkedType();
    boolean that_present_accountMarkedType = true && that.isSetAccountMarkedType();
    if (this_present_accountMarkedType || that_present_accountMarkedType) {
      if (!(this_present_accountMarkedType && that_present_accountMarkedType))
        return false;
      if (!this.accountMarkedType.equals(that.accountMarkedType))
        return false;
    }

    boolean this_present_objectNo = true && this.isSetObjectNo();
    boolean that_present_objectNo = true && that.isSetObjectNo();
    if (this_present_objectNo || that_present_objectNo) {
      if (!(this_present_objectNo && that_present_objectNo))
        return false;
      if (!this.objectNo.equals(that.objectNo))
        return false;
    }

    boolean this_present_objectDes = true && this.isSetObjectDes();
    boolean that_present_objectDes = true && that.isSetObjectDes();
    if (this_present_objectDes || that_present_objectDes) {
      if (!(this_present_objectDes && that_present_objectDes))
        return false;
      if (!this.objectDes.equals(that.objectDes))
        return false;
    }

    boolean this_present_objectType = true && this.isSetObjectType();
    boolean that_present_objectType = true && that.isSetObjectType();
    if (this_present_objectType || that_present_objectType) {
      if (!(this_present_objectType && that_present_objectType))
        return false;
      if (!this.objectType.equals(that.objectType))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (!this.accountId.equals(that.accountId))
        return false;
    }

    boolean this_present_checkCode = true && this.isSetCheckCode();
    boolean that_present_checkCode = true && that.isSetCheckCode();
    if (this_present_checkCode || that_present_checkCode) {
      if (!(this_present_checkCode && that_present_checkCode))
        return false;
      if (!this.checkCode.equals(that.checkCode))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_payPointsNo = true && this.isSetPayPointsNo();
    boolean that_present_payPointsNo = true && that.isSetPayPointsNo();
    if (this_present_payPointsNo || that_present_payPointsNo) {
      if (!(this_present_payPointsNo && that_present_payPointsNo))
        return false;
      if (!this.payPointsNo.equals(that.payPointsNo))
        return false;
    }

    boolean this_present_pointsCateNo = true && this.isSetPointsCateNo();
    boolean that_present_pointsCateNo = true && that.isSetPointsCateNo();
    if (this_present_pointsCateNo || that_present_pointsCateNo) {
      if (!(this_present_pointsCateNo && that_present_pointsCateNo))
        return false;
      if (!this.pointsCateNo.equals(that.pointsCateNo))
        return false;
    }

    boolean this_present_orgPoints = true && this.isSetOrgPoints();
    boolean that_present_orgPoints = true && that.isSetOrgPoints();
    if (this_present_orgPoints || that_present_orgPoints) {
      if (!(this_present_orgPoints && that_present_orgPoints))
        return false;
      if (!this.orgPoints.equals(that.orgPoints))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_bankId = true && this.isSetBankId();
    boolean that_present_bankId = true && that.isSetBankId();
    if (this_present_bankId || that_present_bankId) {
      if (!(this_present_bankId && that_present_bankId))
        return false;
      if (!this.bankId.equals(that.bankId))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankCard = true && this.isSetBankCard();
    boolean that_present_bankCard = true && that.isSetBankCard();
    if (this_present_bankCard || that_present_bankCard) {
      if (!(this_present_bankCard && that_present_bankCard))
        return false;
      if (!this.bankCard.equals(that.bankCard))
        return false;
    }

    boolean this_present_certType = true && this.isSetCertType();
    boolean that_present_certType = true && that.isSetCertType();
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (!this.certType.equals(that.certType))
        return false;
    }

    boolean this_present_certNo = true && this.isSetCertNo();
    boolean that_present_certNo = true && that.isSetCertNo();
    if (this_present_certNo || that_present_certNo) {
      if (!(this_present_certNo && that_present_certNo))
        return false;
      if (!this.certNo.equals(that.certNo))
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (!this.businessType.equals(that.businessType))
        return false;
    }

    boolean this_present_identityNo = true && this.isSetIdentityNo();
    boolean that_present_identityNo = true && that.isSetIdentityNo();
    if (this_present_identityNo || that_present_identityNo) {
      if (!(this_present_identityNo && that_present_identityNo))
        return false;
      if (!this.identityNo.equals(that.identityNo))
        return false;
    }

    boolean this_present_mobileNum = true && this.isSetMobileNum();
    boolean that_present_mobileNum = true && that.isSetMobileNum();
    if (this_present_mobileNum || that_present_mobileNum) {
      if (!(this_present_mobileNum && that_present_mobileNum))
        return false;
      if (!this.mobileNum.equals(that.mobileNum))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_protocolNo = true && this.isSetProtocolNo();
    boolean that_present_protocolNo = true && that.isSetProtocolNo();
    if (this_present_protocolNo || that_present_protocolNo) {
      if (!(this_present_protocolNo && that_present_protocolNo))
        return false;
      if (!this.protocolNo.equals(that.protocolNo))
        return false;
    }

    boolean this_present_cardPassword = true && this.isSetCardPassword();
    boolean that_present_cardPassword = true && that.isSetCardPassword();
    if (this_present_cardPassword || that_present_cardPassword) {
      if (!(this_present_cardPassword && that_present_cardPassword))
        return false;
      if (!this.cardPassword.equals(that.cardPassword))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_protocolType = true && this.isSetProtocolType();
    boolean that_present_protocolType = true && that.isSetProtocolType();
    if (this_present_protocolType || that_present_protocolType) {
      if (!(this_present_protocolType && that_present_protocolType))
        return false;
      if (!this.protocolType.equals(that.protocolType))
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_pageNum = true;
    boolean that_present_pageNum = true;
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    boolean this_present_fromTime = true && this.isSetFromTime();
    boolean that_present_fromTime = true && that.isSetFromTime();
    if (this_present_fromTime || that_present_fromTime) {
      if (!(this_present_fromTime && that_present_fromTime))
        return false;
      if (!this.fromTime.equals(that.fromTime))
        return false;
    }

    boolean this_present_toTime = true && this.isSetToTime();
    boolean that_present_toTime = true && that.isSetToTime();
    if (this_present_toTime || that_present_toTime) {
      if (!(this_present_toTime && that_present_toTime))
        return false;
      if (!this.toTime.equals(that.toTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partnerNo = true && (isSetPartnerNo());
    list.add(present_partnerNo);
    if (present_partnerNo)
      list.add(partnerNo);

    boolean present_orgNo = true && (isSetOrgNo());
    list.add(present_orgNo);
    if (present_orgNo)
      list.add(orgNo);

    boolean present_accountMarked = true && (isSetAccountMarked());
    list.add(present_accountMarked);
    if (present_accountMarked)
      list.add(accountMarked);

    boolean present_accountMarkedType = true && (isSetAccountMarkedType());
    list.add(present_accountMarkedType);
    if (present_accountMarkedType)
      list.add(accountMarkedType);

    boolean present_objectNo = true && (isSetObjectNo());
    list.add(present_objectNo);
    if (present_objectNo)
      list.add(objectNo);

    boolean present_objectDes = true && (isSetObjectDes());
    list.add(present_objectDes);
    if (present_objectDes)
      list.add(objectDes);

    boolean present_objectType = true && (isSetObjectType());
    list.add(present_objectType);
    if (present_objectType)
      list.add(objectType);

    boolean present_points = true && (isSetPoints());
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_accountId = true && (isSetAccountId());
    list.add(present_accountId);
    if (present_accountId)
      list.add(accountId);

    boolean present_checkCode = true && (isSetCheckCode());
    list.add(present_checkCode);
    if (present_checkCode)
      list.add(checkCode);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_payPointsNo = true && (isSetPayPointsNo());
    list.add(present_payPointsNo);
    if (present_payPointsNo)
      list.add(payPointsNo);

    boolean present_pointsCateNo = true && (isSetPointsCateNo());
    list.add(present_pointsCateNo);
    if (present_pointsCateNo)
      list.add(pointsCateNo);

    boolean present_orgPoints = true && (isSetOrgPoints());
    list.add(present_orgPoints);
    if (present_orgPoints)
      list.add(orgPoints);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_bankId = true && (isSetBankId());
    list.add(present_bankId);
    if (present_bankId)
      list.add(bankId);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_bankCard = true && (isSetBankCard());
    list.add(present_bankCard);
    if (present_bankCard)
      list.add(bankCard);

    boolean present_certType = true && (isSetCertType());
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_certNo = true && (isSetCertNo());
    list.add(present_certNo);
    if (present_certNo)
      list.add(certNo);

    boolean present_businessType = true && (isSetBusinessType());
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_identityNo = true && (isSetIdentityNo());
    list.add(present_identityNo);
    if (present_identityNo)
      list.add(identityNo);

    boolean present_mobileNum = true && (isSetMobileNum());
    list.add(present_mobileNum);
    if (present_mobileNum)
      list.add(mobileNum);

    boolean present_cardType = true && (isSetCardType());
    list.add(present_cardType);
    if (present_cardType)
      list.add(cardType);

    boolean present_protocolNo = true && (isSetProtocolNo());
    list.add(present_protocolNo);
    if (present_protocolNo)
      list.add(protocolNo);

    boolean present_cardPassword = true && (isSetCardPassword());
    list.add(present_cardPassword);
    if (present_cardPassword)
      list.add(cardPassword);

    boolean present_cardNo = true && (isSetCardNo());
    list.add(present_cardNo);
    if (present_cardNo)
      list.add(cardNo);

    boolean present_protocolType = true && (isSetProtocolType());
    list.add(present_protocolType);
    if (present_protocolType)
      list.add(protocolType);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_pageNum = true;
    list.add(present_pageNum);
    if (present_pageNum)
      list.add(pageNum);

    boolean present_fromTime = true && (isSetFromTime());
    list.add(present_fromTime);
    if (present_fromTime)
      list.add(fromTime);

    boolean present_toTime = true && (isSetToTime());
    list.add(present_toTime);
    if (present_toTime)
      list.add(toTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(PointApiReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerNo()).compareTo(other.isSetPartnerNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerNo, other.partnerNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgNo()).compareTo(other.isSetOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgNo, other.orgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountMarked()).compareTo(other.isSetAccountMarked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountMarked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountMarked, other.accountMarked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountMarkedType()).compareTo(other.isSetAccountMarkedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountMarkedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountMarkedType, other.accountMarkedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectNo()).compareTo(other.isSetObjectNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectNo, other.objectNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectDes()).compareTo(other.isSetObjectDes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectDes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectDes, other.objectDes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectType()).compareTo(other.isSetObjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectType, other.objectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckCode()).compareTo(other.isSetCheckCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkCode, other.checkCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPointsNo()).compareTo(other.isSetPayPointsNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPointsNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPointsNo, other.payPointsNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointsCateNo()).compareTo(other.isSetPointsCateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointsCateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointsCateNo, other.pointsCateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgPoints()).compareTo(other.isSetOrgPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgPoints, other.orgPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCard()).compareTo(other.isSetBankCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCard, other.bankCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNo()).compareTo(other.isSetCertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNo, other.certNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityNo()).compareTo(other.isSetIdentityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityNo, other.identityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileNum()).compareTo(other.isSetMobileNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNum, other.mobileNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolNo()).compareTo(other.isSetProtocolNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolNo, other.protocolNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardPassword()).compareTo(other.isSetCardPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardPassword, other.cardPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolType()).compareTo(other.isSetProtocolType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolType, other.protocolType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PointApiReq(");
    boolean first = true;

    sb.append("partnerNo:");
    if (this.partnerNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgNo:");
    if (this.orgNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orgNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountMarked:");
    if (this.accountMarked == null) {
      sb.append("null");
    } else {
      sb.append(this.accountMarked);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountMarkedType:");
    if (this.accountMarkedType == null) {
      sb.append("null");
    } else {
      sb.append(this.accountMarkedType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectNo:");
    if (this.objectNo == null) {
      sb.append("null");
    } else {
      sb.append(this.objectNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectDes:");
    if (this.objectDes == null) {
      sb.append("null");
    } else {
      sb.append(this.objectDes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectType:");
    if (this.objectType == null) {
      sb.append("null");
    } else {
      sb.append(this.objectType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("points:");
    if (this.points == null) {
      sb.append("null");
    } else {
      sb.append(this.points);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    if (this.accountId == null) {
      sb.append("null");
    } else {
      sb.append(this.accountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkCode:");
    if (this.checkCode == null) {
      sb.append("null");
    } else {
      sb.append(this.checkCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payPointsNo:");
    if (this.payPointsNo == null) {
      sb.append("null");
    } else {
      sb.append(this.payPointsNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointsCateNo:");
    if (this.pointsCateNo == null) {
      sb.append("null");
    } else {
      sb.append(this.pointsCateNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgPoints:");
    if (this.orgPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.orgPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankId:");
    if (this.bankId == null) {
      sb.append("null");
    } else {
      sb.append(this.bankId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCard:");
    if (this.bankCard == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    if (this.certType == null) {
      sb.append("null");
    } else {
      sb.append(this.certType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNo:");
    if (this.certNo == null) {
      sb.append("null");
    } else {
      sb.append(this.certNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    if (this.businessType == null) {
      sb.append("null");
    } else {
      sb.append(this.businessType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityNo:");
    if (this.identityNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identityNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobileNum:");
    if (this.mobileNum == null) {
      sb.append("null");
    } else {
      sb.append(this.mobileNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolNo:");
    if (this.protocolNo == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardPassword:");
    if (this.cardPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.cardPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolType:");
    if (this.protocolType == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNum:");
    sb.append(this.pageNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromTime:");
    if (this.fromTime == null) {
      sb.append("null");
    } else {
      sb.append(this.fromTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toTime:");
    if (this.toTime == null) {
      sb.append("null");
    } else {
      sb.append(this.toTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointApiReqStandardSchemeFactory implements SchemeFactory {
    public PointApiReqStandardScheme getScheme() {
      return new PointApiReqStandardScheme();
    }
  }

  private static class PointApiReqStandardScheme extends StandardScheme<PointApiReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointApiReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerNo = iprot.readString();
              struct.setPartnerNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgNo = iprot.readString();
              struct.setOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNT_MARKED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountMarked = iprot.readString();
              struct.setAccountMarkedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_MARKED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountMarkedType = iprot.readString();
              struct.setAccountMarkedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OBJECT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectNo = iprot.readString();
              struct.setObjectNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OBJECT_DES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectDes = iprot.readString();
              struct.setObjectDesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectType = iprot.readString();
              struct.setObjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.points = iprot.readString();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountId = iprot.readString();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHECK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkCode = iprot.readString();
              struct.setCheckCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAY_POINTS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payPointsNo = iprot.readString();
              struct.setPayPointsNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POINTS_CATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointsCateNo = iprot.readString();
              struct.setPointsCateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ORG_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgPoints = iprot.readString();
              struct.setOrgPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankId = iprot.readString();
              struct.setBankIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BANK_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCard = iprot.readString();
              struct.setBankCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certType = iprot.readString();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNo = iprot.readString();
              struct.setCertNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessType = iprot.readString();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IDENTITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityNo = iprot.readString();
              struct.setIdentityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MOBILE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileNum = iprot.readString();
              struct.setMobileNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PROTOCOL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolNo = iprot.readString();
              struct.setProtocolNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CARD_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardPassword = iprot.readString();
              struct.setCardPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROTOCOL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolType = iprot.readString();
              struct.setProtocolTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // FROM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromTime = iprot.readString();
              struct.setFromTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // TO_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toTime = iprot.readString();
              struct.setToTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointApiReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerNo != null) {
        oprot.writeFieldBegin(PARTNER_NO_FIELD_DESC);
        oprot.writeString(struct.partnerNo);
        oprot.writeFieldEnd();
      }
      if (struct.orgNo != null) {
        oprot.writeFieldBegin(ORG_NO_FIELD_DESC);
        oprot.writeString(struct.orgNo);
        oprot.writeFieldEnd();
      }
      if (struct.accountMarked != null) {
        oprot.writeFieldBegin(ACCOUNT_MARKED_FIELD_DESC);
        oprot.writeString(struct.accountMarked);
        oprot.writeFieldEnd();
      }
      if (struct.accountMarkedType != null) {
        oprot.writeFieldBegin(ACCOUNT_MARKED_TYPE_FIELD_DESC);
        oprot.writeString(struct.accountMarkedType);
        oprot.writeFieldEnd();
      }
      if (struct.objectNo != null) {
        oprot.writeFieldBegin(OBJECT_NO_FIELD_DESC);
        oprot.writeString(struct.objectNo);
        oprot.writeFieldEnd();
      }
      if (struct.objectDes != null) {
        oprot.writeFieldBegin(OBJECT_DES_FIELD_DESC);
        oprot.writeString(struct.objectDes);
        oprot.writeFieldEnd();
      }
      if (struct.objectType != null) {
        oprot.writeFieldBegin(OBJECT_TYPE_FIELD_DESC);
        oprot.writeString(struct.objectType);
        oprot.writeFieldEnd();
      }
      if (struct.points != null) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeString(struct.points);
        oprot.writeFieldEnd();
      }
      if (struct.accountId != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountId);
        oprot.writeFieldEnd();
      }
      if (struct.checkCode != null) {
        oprot.writeFieldBegin(CHECK_CODE_FIELD_DESC);
        oprot.writeString(struct.checkCode);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.payPointsNo != null) {
        oprot.writeFieldBegin(PAY_POINTS_NO_FIELD_DESC);
        oprot.writeString(struct.payPointsNo);
        oprot.writeFieldEnd();
      }
      if (struct.pointsCateNo != null) {
        oprot.writeFieldBegin(POINTS_CATE_NO_FIELD_DESC);
        oprot.writeString(struct.pointsCateNo);
        oprot.writeFieldEnd();
      }
      if (struct.orgPoints != null) {
        oprot.writeFieldBegin(ORG_POINTS_FIELD_DESC);
        oprot.writeString(struct.orgPoints);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.bankId != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankId);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCard != null) {
        oprot.writeFieldBegin(BANK_CARD_FIELD_DESC);
        oprot.writeString(struct.bankCard);
        oprot.writeFieldEnd();
      }
      if (struct.certType != null) {
        oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
        oprot.writeString(struct.certType);
        oprot.writeFieldEnd();
      }
      if (struct.certNo != null) {
        oprot.writeFieldBegin(CERT_NO_FIELD_DESC);
        oprot.writeString(struct.certNo);
        oprot.writeFieldEnd();
      }
      if (struct.businessType != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeString(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.identityNo != null) {
        oprot.writeFieldBegin(IDENTITY_NO_FIELD_DESC);
        oprot.writeString(struct.identityNo);
        oprot.writeFieldEnd();
      }
      if (struct.mobileNum != null) {
        oprot.writeFieldBegin(MOBILE_NUM_FIELD_DESC);
        oprot.writeString(struct.mobileNum);
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.cardType);
        oprot.writeFieldEnd();
      }
      if (struct.protocolNo != null) {
        oprot.writeFieldBegin(PROTOCOL_NO_FIELD_DESC);
        oprot.writeString(struct.protocolNo);
        oprot.writeFieldEnd();
      }
      if (struct.cardPassword != null) {
        oprot.writeFieldBegin(CARD_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.cardPassword);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.protocolType != null) {
        oprot.writeFieldBegin(PROTOCOL_TYPE_FIELD_DESC);
        oprot.writeString(struct.protocolType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.pageNum);
      oprot.writeFieldEnd();
      if (struct.fromTime != null) {
        oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
        oprot.writeString(struct.fromTime);
        oprot.writeFieldEnd();
      }
      if (struct.toTime != null) {
        oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
        oprot.writeString(struct.toTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointApiReqTupleSchemeFactory implements SchemeFactory {
    public PointApiReqTupleScheme getScheme() {
      return new PointApiReqTupleScheme();
    }
  }

  private static class PointApiReqTupleScheme extends TupleScheme<PointApiReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointApiReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerNo()) {
        optionals.set(0);
      }
      if (struct.isSetOrgNo()) {
        optionals.set(1);
      }
      if (struct.isSetAccountMarked()) {
        optionals.set(2);
      }
      if (struct.isSetAccountMarkedType()) {
        optionals.set(3);
      }
      if (struct.isSetObjectNo()) {
        optionals.set(4);
      }
      if (struct.isSetObjectDes()) {
        optionals.set(5);
      }
      if (struct.isSetObjectType()) {
        optionals.set(6);
      }
      if (struct.isSetPoints()) {
        optionals.set(7);
      }
      if (struct.isSetAccountId()) {
        optionals.set(8);
      }
      if (struct.isSetCheckCode()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetPayPointsNo()) {
        optionals.set(11);
      }
      if (struct.isSetPointsCateNo()) {
        optionals.set(12);
      }
      if (struct.isSetOrgPoints()) {
        optionals.set(13);
      }
      if (struct.isSetPhone()) {
        optionals.set(14);
      }
      if (struct.isSetRealName()) {
        optionals.set(15);
      }
      if (struct.isSetBankId()) {
        optionals.set(16);
      }
      if (struct.isSetBankName()) {
        optionals.set(17);
      }
      if (struct.isSetBankCard()) {
        optionals.set(18);
      }
      if (struct.isSetCertType()) {
        optionals.set(19);
      }
      if (struct.isSetCertNo()) {
        optionals.set(20);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(21);
      }
      if (struct.isSetIdentityNo()) {
        optionals.set(22);
      }
      if (struct.isSetMobileNum()) {
        optionals.set(23);
      }
      if (struct.isSetCardType()) {
        optionals.set(24);
      }
      if (struct.isSetProtocolNo()) {
        optionals.set(25);
      }
      if (struct.isSetCardPassword()) {
        optionals.set(26);
      }
      if (struct.isSetCardNo()) {
        optionals.set(27);
      }
      if (struct.isSetProtocolType()) {
        optionals.set(28);
      }
      if (struct.isSetPageSize()) {
        optionals.set(29);
      }
      if (struct.isSetPageNum()) {
        optionals.set(30);
      }
      if (struct.isSetFromTime()) {
        optionals.set(31);
      }
      if (struct.isSetToTime()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetPartnerNo()) {
        oprot.writeString(struct.partnerNo);
      }
      if (struct.isSetOrgNo()) {
        oprot.writeString(struct.orgNo);
      }
      if (struct.isSetAccountMarked()) {
        oprot.writeString(struct.accountMarked);
      }
      if (struct.isSetAccountMarkedType()) {
        oprot.writeString(struct.accountMarkedType);
      }
      if (struct.isSetObjectNo()) {
        oprot.writeString(struct.objectNo);
      }
      if (struct.isSetObjectDes()) {
        oprot.writeString(struct.objectDes);
      }
      if (struct.isSetObjectType()) {
        oprot.writeString(struct.objectType);
      }
      if (struct.isSetPoints()) {
        oprot.writeString(struct.points);
      }
      if (struct.isSetAccountId()) {
        oprot.writeString(struct.accountId);
      }
      if (struct.isSetCheckCode()) {
        oprot.writeString(struct.checkCode);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPayPointsNo()) {
        oprot.writeString(struct.payPointsNo);
      }
      if (struct.isSetPointsCateNo()) {
        oprot.writeString(struct.pointsCateNo);
      }
      if (struct.isSetOrgPoints()) {
        oprot.writeString(struct.orgPoints);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetBankId()) {
        oprot.writeString(struct.bankId);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankCard()) {
        oprot.writeString(struct.bankCard);
      }
      if (struct.isSetCertType()) {
        oprot.writeString(struct.certType);
      }
      if (struct.isSetCertNo()) {
        oprot.writeString(struct.certNo);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeString(struct.businessType);
      }
      if (struct.isSetIdentityNo()) {
        oprot.writeString(struct.identityNo);
      }
      if (struct.isSetMobileNum()) {
        oprot.writeString(struct.mobileNum);
      }
      if (struct.isSetCardType()) {
        oprot.writeString(struct.cardType);
      }
      if (struct.isSetProtocolNo()) {
        oprot.writeString(struct.protocolNo);
      }
      if (struct.isSetCardPassword()) {
        oprot.writeString(struct.cardPassword);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetProtocolType()) {
        oprot.writeString(struct.protocolType);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPageNum()) {
        oprot.writeI32(struct.pageNum);
      }
      if (struct.isSetFromTime()) {
        oprot.writeString(struct.fromTime);
      }
      if (struct.isSetToTime()) {
        oprot.writeString(struct.toTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointApiReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.partnerNo = iprot.readString();
        struct.setPartnerNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgNo = iprot.readString();
        struct.setOrgNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountMarked = iprot.readString();
        struct.setAccountMarkedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountMarkedType = iprot.readString();
        struct.setAccountMarkedTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.objectNo = iprot.readString();
        struct.setObjectNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.objectDes = iprot.readString();
        struct.setObjectDesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.objectType = iprot.readString();
        struct.setObjectTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.points = iprot.readString();
        struct.setPointsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.checkCode = iprot.readString();
        struct.setCheckCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.payPointsNo = iprot.readString();
        struct.setPayPointsNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.pointsCateNo = iprot.readString();
        struct.setPointsCateNoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.orgPoints = iprot.readString();
        struct.setOrgPointsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(15)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.bankId = iprot.readString();
        struct.setBankIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.bankCard = iprot.readString();
        struct.setBankCardIsSet(true);
      }
      if (incoming.get(19)) {
        struct.certType = iprot.readString();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.certNo = iprot.readString();
        struct.setCertNoIsSet(true);
      }
      if (incoming.get(21)) {
        struct.businessType = iprot.readString();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.identityNo = iprot.readString();
        struct.setIdentityNoIsSet(true);
      }
      if (incoming.get(23)) {
        struct.mobileNum = iprot.readString();
        struct.setMobileNumIsSet(true);
      }
      if (incoming.get(24)) {
        struct.cardType = iprot.readString();
        struct.setCardTypeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.protocolNo = iprot.readString();
        struct.setProtocolNoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.cardPassword = iprot.readString();
        struct.setCardPasswordIsSet(true);
      }
      if (incoming.get(27)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(28)) {
        struct.protocolType = iprot.readString();
        struct.setProtocolTypeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.pageNum = iprot.readI32();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(31)) {
        struct.fromTime = iprot.readString();
        struct.setFromTimeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.toTime = iprot.readString();
        struct.setToTimeIsSet(true);
      }
    }
  }

}

