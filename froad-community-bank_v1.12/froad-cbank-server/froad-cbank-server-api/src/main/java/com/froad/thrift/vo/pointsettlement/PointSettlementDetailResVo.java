/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.pointsettlement;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 积分结算详情响应VO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class PointSettlementDetailResVo implements org.apache.thrift.TBase<PointSettlementDetailResVo, PointSettlementDetailResVo._Fields>, java.io.Serializable, Cloneable, Comparable<PointSettlementDetailResVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointSettlementDetailResVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("productPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("productQuantity", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("productTotalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField BANK_POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPointRate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FROAD_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("froadPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointSettlementDetailResVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointSettlementDetailResVoTupleSchemeFactory());
  }

  /**
   * 订单编号
   */
  public String orderId; // required
  /**
   * 会员号
   */
  public String memberCode; // required
  /**
   * 会员名
   */
  public String memberName; // required
  /**
   * 会员手机号
   */
  public String mobile; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 商品单价
   */
  public double productPrice; // required
  /**
   * 商品数量
   */
  public int productQuantity; // required
  /**
   * 商品总价
   */
  public double productTotalPrice; // required
  /**
   * 结算总价
   */
  public double totalPrice; // required
  /**
   * 支付方式
   */
  public String paymentMethod; // required
  /**
   * 银行积分
   */
  public double bankPoint; // required
  /**
   * 银行积分比例
   */
  public String bankPointRate; // required
  /**
   * 联盟积分
   */
  public double froadPoint; // required
  /**
   * 现金
   */
  public double cash; // required
  /**
   * 结算时间
   */
  public long settlementTime; // required
  /**
   * 所属商户
   */
  public String merchantName; // required
  /**
   * 客户端Id
   */
  public String clientId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单编号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 会员名
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 会员手机号
     */
    MOBILE((short)4, "mobile"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)5, "productName"),
    /**
     * 商品单价
     */
    PRODUCT_PRICE((short)6, "productPrice"),
    /**
     * 商品数量
     */
    PRODUCT_QUANTITY((short)7, "productQuantity"),
    /**
     * 商品总价
     */
    PRODUCT_TOTAL_PRICE((short)8, "productTotalPrice"),
    /**
     * 结算总价
     */
    TOTAL_PRICE((short)9, "totalPrice"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD((short)10, "paymentMethod"),
    /**
     * 银行积分
     */
    BANK_POINT((short)11, "bankPoint"),
    /**
     * 银行积分比例
     */
    BANK_POINT_RATE((short)12, "bankPointRate"),
    /**
     * 联盟积分
     */
    FROAD_POINT((short)13, "froadPoint"),
    /**
     * 现金
     */
    CASH((short)14, "cash"),
    /**
     * 结算时间
     */
    SETTLEMENT_TIME((short)15, "settlementTime"),
    /**
     * 所属商户
     */
    MERCHANT_NAME((short)16, "merchantName"),
    /**
     * 客户端Id
     */
    CLIENT_ID((short)17, "clientId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // MOBILE
          return MOBILE;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // PRODUCT_PRICE
          return PRODUCT_PRICE;
        case 7: // PRODUCT_QUANTITY
          return PRODUCT_QUANTITY;
        case 8: // PRODUCT_TOTAL_PRICE
          return PRODUCT_TOTAL_PRICE;
        case 9: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 10: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 11: // BANK_POINT
          return BANK_POINT;
        case 12: // BANK_POINT_RATE
          return BANK_POINT_RATE;
        case 13: // FROAD_POINT
          return FROAD_POINT;
        case 14: // CASH
          return CASH;
        case 15: // SETTLEMENT_TIME
          return SETTLEMENT_TIME;
        case 16: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 17: // CLIENT_ID
          return CLIENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTPRICE_ISSET_ID = 0;
  private static final int __PRODUCTQUANTITY_ISSET_ID = 1;
  private static final int __PRODUCTTOTALPRICE_ISSET_ID = 2;
  private static final int __TOTALPRICE_ISSET_ID = 3;
  private static final int __BANKPOINT_ISSET_ID = 4;
  private static final int __FROADPOINT_ISSET_ID = 5;
  private static final int __CASH_ISSET_ID = 6;
  private static final int __SETTLEMENTTIME_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("productPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("productQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("productTotalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_POINT, new org.apache.thrift.meta_data.FieldMetaData("bankPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("bankPointRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROAD_POINT, new org.apache.thrift.meta_data.FieldMetaData("froadPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SETTLEMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("settlementTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointSettlementDetailResVo.class, metaDataMap);
  }

  public PointSettlementDetailResVo() {
  }

  public PointSettlementDetailResVo(
    String orderId,
    String memberCode,
    String memberName,
    String mobile,
    String productName,
    double productPrice,
    int productQuantity,
    double productTotalPrice,
    double totalPrice,
    String paymentMethod,
    double bankPoint,
    String bankPointRate,
    double froadPoint,
    double cash,
    long settlementTime,
    String merchantName,
    String clientId)
  {
    this();
    this.orderId = orderId;
    this.memberCode = memberCode;
    this.memberName = memberName;
    this.mobile = mobile;
    this.productName = productName;
    this.productPrice = productPrice;
    setProductPriceIsSet(true);
    this.productQuantity = productQuantity;
    setProductQuantityIsSet(true);
    this.productTotalPrice = productTotalPrice;
    setProductTotalPriceIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.paymentMethod = paymentMethod;
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    this.bankPointRate = bankPointRate;
    this.froadPoint = froadPoint;
    setFroadPointIsSet(true);
    this.cash = cash;
    setCashIsSet(true);
    this.settlementTime = settlementTime;
    setSettlementTimeIsSet(true);
    this.merchantName = merchantName;
    this.clientId = clientId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointSettlementDetailResVo(PointSettlementDetailResVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetMemberCode()) {
      this.memberCode = other.memberCode;
    }
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.productPrice = other.productPrice;
    this.productQuantity = other.productQuantity;
    this.productTotalPrice = other.productTotalPrice;
    this.totalPrice = other.totalPrice;
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    this.bankPoint = other.bankPoint;
    if (other.isSetBankPointRate()) {
      this.bankPointRate = other.bankPointRate;
    }
    this.froadPoint = other.froadPoint;
    this.cash = other.cash;
    this.settlementTime = other.settlementTime;
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
  }

  public PointSettlementDetailResVo deepCopy() {
    return new PointSettlementDetailResVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.memberCode = null;
    this.memberName = null;
    this.mobile = null;
    this.productName = null;
    setProductPriceIsSet(false);
    this.productPrice = 0.0;
    setProductQuantityIsSet(false);
    this.productQuantity = 0;
    setProductTotalPriceIsSet(false);
    this.productTotalPrice = 0.0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    this.paymentMethod = null;
    setBankPointIsSet(false);
    this.bankPoint = 0.0;
    this.bankPointRate = null;
    setFroadPointIsSet(false);
    this.froadPoint = 0.0;
    setCashIsSet(false);
    this.cash = 0.0;
    setSettlementTimeIsSet(false);
    this.settlementTime = 0;
    this.merchantName = null;
    this.clientId = null;
  }

  /**
   * 订单编号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单编号
   */
  public PointSettlementDetailResVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 会员号
   */
  public String getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public PointSettlementDetailResVo setMemberCode(String memberCode) {
    this.memberCode = memberCode;
    return this;
  }

  public void unsetMemberCode() {
    this.memberCode = null;
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return this.memberCode != null;
  }

  public void setMemberCodeIsSet(boolean value) {
    if (!value) {
      this.memberCode = null;
    }
  }

  /**
   * 会员名
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名
   */
  public PointSettlementDetailResVo setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 会员手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 会员手机号
   */
  public PointSettlementDetailResVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public PointSettlementDetailResVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品单价
   */
  public double getProductPrice() {
    return this.productPrice;
  }

  /**
   * 商品单价
   */
  public PointSettlementDetailResVo setProductPrice(double productPrice) {
    this.productPrice = productPrice;
    setProductPriceIsSet(true);
    return this;
  }

  public void unsetProductPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTPRICE_ISSET_ID);
  }

  /** Returns true if field productPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetProductPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTPRICE_ISSET_ID);
  }

  public void setProductPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTPRICE_ISSET_ID, value);
  }

  /**
   * 商品数量
   */
  public int getProductQuantity() {
    return this.productQuantity;
  }

  /**
   * 商品数量
   */
  public PointSettlementDetailResVo setProductQuantity(int productQuantity) {
    this.productQuantity = productQuantity;
    setProductQuantityIsSet(true);
    return this;
  }

  public void unsetProductQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTQUANTITY_ISSET_ID);
  }

  /** Returns true if field productQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetProductQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTQUANTITY_ISSET_ID);
  }

  public void setProductQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTQUANTITY_ISSET_ID, value);
  }

  /**
   * 商品总价
   */
  public double getProductTotalPrice() {
    return this.productTotalPrice;
  }

  /**
   * 商品总价
   */
  public PointSettlementDetailResVo setProductTotalPrice(double productTotalPrice) {
    this.productTotalPrice = productTotalPrice;
    setProductTotalPriceIsSet(true);
    return this;
  }

  public void unsetProductTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTOTALPRICE_ISSET_ID);
  }

  /** Returns true if field productTotalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetProductTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTOTALPRICE_ISSET_ID);
  }

  public void setProductTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTOTALPRICE_ISSET_ID, value);
  }

  /**
   * 结算总价
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 结算总价
   */
  public PointSettlementDetailResVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式
   */
  public PointSettlementDetailResVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 银行积分
   */
  public double getBankPoint() {
    return this.bankPoint;
  }

  /**
   * 银行积分
   */
  public PointSettlementDetailResVo setBankPoint(double bankPoint) {
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    return this;
  }

  public void unsetBankPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  /** Returns true if field bankPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  public void setBankPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINT_ISSET_ID, value);
  }

  /**
   * 银行积分比例
   */
  public String getBankPointRate() {
    return this.bankPointRate;
  }

  /**
   * 银行积分比例
   */
  public PointSettlementDetailResVo setBankPointRate(String bankPointRate) {
    this.bankPointRate = bankPointRate;
    return this;
  }

  public void unsetBankPointRate() {
    this.bankPointRate = null;
  }

  /** Returns true if field bankPointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPointRate() {
    return this.bankPointRate != null;
  }

  public void setBankPointRateIsSet(boolean value) {
    if (!value) {
      this.bankPointRate = null;
    }
  }

  /**
   * 联盟积分
   */
  public double getFroadPoint() {
    return this.froadPoint;
  }

  /**
   * 联盟积分
   */
  public PointSettlementDetailResVo setFroadPoint(double froadPoint) {
    this.froadPoint = froadPoint;
    setFroadPointIsSet(true);
    return this;
  }

  public void unsetFroadPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROADPOINT_ISSET_ID);
  }

  /** Returns true if field froadPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetFroadPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __FROADPOINT_ISSET_ID);
  }

  public void setFroadPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROADPOINT_ISSET_ID, value);
  }

  /**
   * 现金
   */
  public double getCash() {
    return this.cash;
  }

  /**
   * 现金
   */
  public PointSettlementDetailResVo setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  /**
   * 结算时间
   */
  public long getSettlementTime() {
    return this.settlementTime;
  }

  /**
   * 结算时间
   */
  public PointSettlementDetailResVo setSettlementTime(long settlementTime) {
    this.settlementTime = settlementTime;
    setSettlementTimeIsSet(true);
    return this;
  }

  public void unsetSettlementTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTTIME_ISSET_ID);
  }

  /** Returns true if field settlementTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTTIME_ISSET_ID);
  }

  public void setSettlementTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTTIME_ISSET_ID, value);
  }

  /**
   * 所属商户
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 所属商户
   */
  public PointSettlementDetailResVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 客户端Id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端Id
   */
  public PointSettlementDetailResVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((String)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_PRICE:
      if (value == null) {
        unsetProductPrice();
      } else {
        setProductPrice((Double)value);
      }
      break;

    case PRODUCT_QUANTITY:
      if (value == null) {
        unsetProductQuantity();
      } else {
        setProductQuantity((Integer)value);
      }
      break;

    case PRODUCT_TOTAL_PRICE:
      if (value == null) {
        unsetProductTotalPrice();
      } else {
        setProductTotalPrice((Double)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case BANK_POINT:
      if (value == null) {
        unsetBankPoint();
      } else {
        setBankPoint((Double)value);
      }
      break;

    case BANK_POINT_RATE:
      if (value == null) {
        unsetBankPointRate();
      } else {
        setBankPointRate((String)value);
      }
      break;

    case FROAD_POINT:
      if (value == null) {
        unsetFroadPoint();
      } else {
        setFroadPoint((Double)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case SETTLEMENT_TIME:
      if (value == null) {
        unsetSettlementTime();
      } else {
        setSettlementTime((Long)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case MEMBER_CODE:
      return getMemberCode();

    case MEMBER_NAME:
      return getMemberName();

    case MOBILE:
      return getMobile();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_PRICE:
      return Double.valueOf(getProductPrice());

    case PRODUCT_QUANTITY:
      return Integer.valueOf(getProductQuantity());

    case PRODUCT_TOTAL_PRICE:
      return Double.valueOf(getProductTotalPrice());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case BANK_POINT:
      return Double.valueOf(getBankPoint());

    case BANK_POINT_RATE:
      return getBankPointRate();

    case FROAD_POINT:
      return Double.valueOf(getFroadPoint());

    case CASH:
      return Double.valueOf(getCash());

    case SETTLEMENT_TIME:
      return Long.valueOf(getSettlementTime());

    case MERCHANT_NAME:
      return getMerchantName();

    case CLIENT_ID:
      return getClientId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case MOBILE:
      return isSetMobile();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_PRICE:
      return isSetProductPrice();
    case PRODUCT_QUANTITY:
      return isSetProductQuantity();
    case PRODUCT_TOTAL_PRICE:
      return isSetProductTotalPrice();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case BANK_POINT:
      return isSetBankPoint();
    case BANK_POINT_RATE:
      return isSetBankPointRate();
    case FROAD_POINT:
      return isSetFroadPoint();
    case CASH:
      return isSetCash();
    case SETTLEMENT_TIME:
      return isSetSettlementTime();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case CLIENT_ID:
      return isSetClientId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PointSettlementDetailResVo)
      return this.equals((PointSettlementDetailResVo)that);
    return false;
  }

  public boolean equals(PointSettlementDetailResVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_memberCode = true && this.isSetMemberCode();
    boolean that_present_memberCode = true && that.isSetMemberCode();
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (!this.memberCode.equals(that.memberCode))
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productPrice = true;
    boolean that_present_productPrice = true;
    if (this_present_productPrice || that_present_productPrice) {
      if (!(this_present_productPrice && that_present_productPrice))
        return false;
      if (this.productPrice != that.productPrice)
        return false;
    }

    boolean this_present_productQuantity = true;
    boolean that_present_productQuantity = true;
    if (this_present_productQuantity || that_present_productQuantity) {
      if (!(this_present_productQuantity && that_present_productQuantity))
        return false;
      if (this.productQuantity != that.productQuantity)
        return false;
    }

    boolean this_present_productTotalPrice = true;
    boolean that_present_productTotalPrice = true;
    if (this_present_productTotalPrice || that_present_productTotalPrice) {
      if (!(this_present_productTotalPrice && that_present_productTotalPrice))
        return false;
      if (this.productTotalPrice != that.productTotalPrice)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_bankPoint = true;
    boolean that_present_bankPoint = true;
    if (this_present_bankPoint || that_present_bankPoint) {
      if (!(this_present_bankPoint && that_present_bankPoint))
        return false;
      if (this.bankPoint != that.bankPoint)
        return false;
    }

    boolean this_present_bankPointRate = true && this.isSetBankPointRate();
    boolean that_present_bankPointRate = true && that.isSetBankPointRate();
    if (this_present_bankPointRate || that_present_bankPointRate) {
      if (!(this_present_bankPointRate && that_present_bankPointRate))
        return false;
      if (!this.bankPointRate.equals(that.bankPointRate))
        return false;
    }

    boolean this_present_froadPoint = true;
    boolean that_present_froadPoint = true;
    if (this_present_froadPoint || that_present_froadPoint) {
      if (!(this_present_froadPoint && that_present_froadPoint))
        return false;
      if (this.froadPoint != that.froadPoint)
        return false;
    }

    boolean this_present_cash = true;
    boolean that_present_cash = true;
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_settlementTime = true;
    boolean that_present_settlementTime = true;
    if (this_present_settlementTime || that_present_settlementTime) {
      if (!(this_present_settlementTime && that_present_settlementTime))
        return false;
      if (this.settlementTime != that.settlementTime)
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_memberCode = true && (isSetMemberCode());
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productPrice = true;
    list.add(present_productPrice);
    if (present_productPrice)
      list.add(productPrice);

    boolean present_productQuantity = true;
    list.add(present_productQuantity);
    if (present_productQuantity)
      list.add(productQuantity);

    boolean present_productTotalPrice = true;
    list.add(present_productTotalPrice);
    if (present_productTotalPrice)
      list.add(productTotalPrice);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_bankPoint = true;
    list.add(present_bankPoint);
    if (present_bankPoint)
      list.add(bankPoint);

    boolean present_bankPointRate = true && (isSetBankPointRate());
    list.add(present_bankPointRate);
    if (present_bankPointRate)
      list.add(bankPointRate);

    boolean present_froadPoint = true;
    list.add(present_froadPoint);
    if (present_froadPoint)
      list.add(froadPoint);

    boolean present_cash = true;
    list.add(present_cash);
    if (present_cash)
      list.add(cash);

    boolean present_settlementTime = true;
    list.add(present_settlementTime);
    if (present_settlementTime)
      list.add(settlementTime);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    return list.hashCode();
  }

  @Override
  public int compareTo(PointSettlementDetailResVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductPrice()).compareTo(other.isSetProductPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productPrice, other.productPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductQuantity()).compareTo(other.isSetProductQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productQuantity, other.productQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductTotalPrice()).compareTo(other.isSetProductTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productTotalPrice, other.productTotalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoint()).compareTo(other.isSetBankPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoint, other.bankPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPointRate()).compareTo(other.isSetBankPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPointRate, other.bankPointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFroadPoint()).compareTo(other.isSetFroadPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFroadPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.froadPoint, other.froadPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementTime()).compareTo(other.isSetSettlementTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementTime, other.settlementTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PointSettlementDetailResVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    if (this.memberCode == null) {
      sb.append("null");
    } else {
      sb.append(this.memberCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productPrice:");
    sb.append(this.productPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productQuantity:");
    sb.append(this.productQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productTotalPrice:");
    sb.append(this.productTotalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPoint:");
    sb.append(this.bankPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPointRate:");
    if (this.bankPointRate == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPointRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("froadPoint:");
    sb.append(this.froadPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cash:");
    sb.append(this.cash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementTime:");
    sb.append(this.settlementTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointSettlementDetailResVoStandardSchemeFactory implements SchemeFactory {
    public PointSettlementDetailResVoStandardScheme getScheme() {
      return new PointSettlementDetailResVoStandardScheme();
    }
  }

  private static class PointSettlementDetailResVoStandardScheme extends StandardScheme<PointSettlementDetailResVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointSettlementDetailResVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberCode = iprot.readString();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productPrice = iprot.readDouble();
              struct.setProductPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productQuantity = iprot.readI32();
              struct.setProductQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productTotalPrice = iprot.readDouble();
              struct.setProductTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankPoint = iprot.readDouble();
              struct.setBankPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BANK_POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPointRate = iprot.readString();
              struct.setBankPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROAD_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.froadPoint = iprot.readDouble();
              struct.setFroadPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SETTLEMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settlementTime = iprot.readI64();
              struct.setSettlementTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointSettlementDetailResVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.memberCode != null) {
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeString(struct.memberCode);
        oprot.writeFieldEnd();
      }
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.productPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.productQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.productTotalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_POINT_FIELD_DESC);
      oprot.writeDouble(struct.bankPoint);
      oprot.writeFieldEnd();
      if (struct.bankPointRate != null) {
        oprot.writeFieldBegin(BANK_POINT_RATE_FIELD_DESC);
        oprot.writeString(struct.bankPointRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROAD_POINT_FIELD_DESC);
      oprot.writeDouble(struct.froadPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_FIELD_DESC);
      oprot.writeDouble(struct.cash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLEMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.settlementTime);
      oprot.writeFieldEnd();
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointSettlementDetailResVoTupleSchemeFactory implements SchemeFactory {
    public PointSettlementDetailResVoTupleScheme getScheme() {
      return new PointSettlementDetailResVoTupleScheme();
    }
  }

  private static class PointSettlementDetailResVoTupleScheme extends TupleScheme<PointSettlementDetailResVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointSettlementDetailResVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(1);
      }
      if (struct.isSetMemberName()) {
        optionals.set(2);
      }
      if (struct.isSetMobile()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetProductPrice()) {
        optionals.set(5);
      }
      if (struct.isSetProductQuantity()) {
        optionals.set(6);
      }
      if (struct.isSetProductTotalPrice()) {
        optionals.set(7);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(9);
      }
      if (struct.isSetBankPoint()) {
        optionals.set(10);
      }
      if (struct.isSetBankPointRate()) {
        optionals.set(11);
      }
      if (struct.isSetFroadPoint()) {
        optionals.set(12);
      }
      if (struct.isSetCash()) {
        optionals.set(13);
      }
      if (struct.isSetSettlementTime()) {
        optionals.set(14);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(15);
      }
      if (struct.isSetClientId()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeString(struct.memberCode);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductPrice()) {
        oprot.writeDouble(struct.productPrice);
      }
      if (struct.isSetProductQuantity()) {
        oprot.writeI32(struct.productQuantity);
      }
      if (struct.isSetProductTotalPrice()) {
        oprot.writeDouble(struct.productTotalPrice);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetBankPoint()) {
        oprot.writeDouble(struct.bankPoint);
      }
      if (struct.isSetBankPointRate()) {
        oprot.writeString(struct.bankPointRate);
      }
      if (struct.isSetFroadPoint()) {
        oprot.writeDouble(struct.froadPoint);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetSettlementTime()) {
        oprot.writeI64(struct.settlementTime);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointSettlementDetailResVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memberCode = iprot.readString();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productPrice = iprot.readDouble();
        struct.setProductPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.productQuantity = iprot.readI32();
        struct.setProductQuantityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.productTotalPrice = iprot.readDouble();
        struct.setProductTotalPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankPoint = iprot.readDouble();
        struct.setBankPointIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bankPointRate = iprot.readString();
        struct.setBankPointRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.froadPoint = iprot.readDouble();
        struct.setFroadPointIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(14)) {
        struct.settlementTime = iprot.readI64();
        struct.setSettlementTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
    }
  }

}

