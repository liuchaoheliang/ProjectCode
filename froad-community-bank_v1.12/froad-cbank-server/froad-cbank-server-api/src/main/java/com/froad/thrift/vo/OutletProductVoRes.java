/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OutletProductVoRes implements org.apache.thrift.TBase<OutletProductVoRes, OutletProductVoRes._Fields>, java.io.Serializable, Cloneable, Comparable<OutletProductVoRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutletProductVoRes");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONSUME_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField NOT_DISCOUNT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("notDiscountAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DISCOUNT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("discountRate", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OutletProductVoResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OutletProductVoResTupleSchemeFactory());
  }

  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 商户id
   */
  public String merchantId; // required
  /**
   * 门店id
   */
  public String outletId; // required
  /**
   * 价格
   */
  public double cost; // required
  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 商户商标
   */
  public String logo; // required
  /**
   * 门店名称
   */
  public String outletName; // required
  /**
   * 消费总金额
   */
  public double consumeAmount; // required
  /**
   * 不参与优惠金额
   */
  public double notDiscountAmount; // required
  /**
   * 折扣优惠率
   */
  public double discountRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端id
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商户id
     */
    MERCHANT_ID((short)2, "merchantId"),
    /**
     * 门店id
     */
    OUTLET_ID((short)3, "outletId"),
    /**
     * 价格
     */
    COST((short)4, "cost"),
    /**
     * 商品id
     */
    PRODUCT_ID((short)5, "productId"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)6, "merchantName"),
    /**
     * 商户商标
     */
    LOGO((short)7, "logo"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)8, "outletName"),
    /**
     * 消费总金额
     */
    CONSUME_AMOUNT((short)9, "consumeAmount"),
    /**
     * 不参与优惠金额
     */
    NOT_DISCOUNT_AMOUNT((short)10, "notDiscountAmount"),
    /**
     * 折扣优惠率
     */
    DISCOUNT_RATE((short)11, "discountRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // OUTLET_ID
          return OUTLET_ID;
        case 4: // COST
          return COST;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 6: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 7: // LOGO
          return LOGO;
        case 8: // OUTLET_NAME
          return OUTLET_NAME;
        case 9: // CONSUME_AMOUNT
          return CONSUME_AMOUNT;
        case 10: // NOT_DISCOUNT_AMOUNT
          return NOT_DISCOUNT_AMOUNT;
        case 11: // DISCOUNT_RATE
          return DISCOUNT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COST_ISSET_ID = 0;
  private static final int __CONSUMEAMOUNT_ISSET_ID = 1;
  private static final int __NOTDISCOUNTAMOUNT_ISSET_ID = 2;
  private static final int __DISCOUNTRATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSUME_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("consumeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOT_DISCOUNT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("notDiscountAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNT_RATE, new org.apache.thrift.meta_data.FieldMetaData("discountRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OutletProductVoRes.class, metaDataMap);
  }

  public OutletProductVoRes() {
  }

  public OutletProductVoRes(
    String clientId,
    String merchantId,
    String outletId,
    double cost,
    String productId,
    String merchantName,
    String logo,
    String outletName,
    double consumeAmount,
    double notDiscountAmount,
    double discountRate)
  {
    this();
    this.clientId = clientId;
    this.merchantId = merchantId;
    this.outletId = outletId;
    this.cost = cost;
    setCostIsSet(true);
    this.productId = productId;
    this.merchantName = merchantName;
    this.logo = logo;
    this.outletName = outletName;
    this.consumeAmount = consumeAmount;
    setConsumeAmountIsSet(true);
    this.notDiscountAmount = notDiscountAmount;
    setNotDiscountAmountIsSet(true);
    this.discountRate = discountRate;
    setDiscountRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OutletProductVoRes(OutletProductVoRes other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    this.cost = other.cost;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    this.consumeAmount = other.consumeAmount;
    this.notDiscountAmount = other.notDiscountAmount;
    this.discountRate = other.discountRate;
  }

  public OutletProductVoRes deepCopy() {
    return new OutletProductVoRes(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.merchantId = null;
    this.outletId = null;
    setCostIsSet(false);
    this.cost = 0.0;
    this.productId = null;
    this.merchantName = null;
    this.logo = null;
    this.outletName = null;
    setConsumeAmountIsSet(false);
    this.consumeAmount = 0.0;
    setNotDiscountAmountIsSet(false);
    this.notDiscountAmount = 0.0;
    setDiscountRateIsSet(false);
    this.discountRate = 0.0;
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public OutletProductVoRes setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户id
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户id
   */
  public OutletProductVoRes setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 门店id
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店id
   */
  public OutletProductVoRes setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 价格
   */
  public double getCost() {
    return this.cost;
  }

  /**
   * 价格
   */
  public OutletProductVoRes setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public OutletProductVoRes setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public OutletProductVoRes setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商户商标
   */
  public String getLogo() {
    return this.logo;
  }

  /**
   * 商户商标
   */
  public OutletProductVoRes setLogo(String logo) {
    this.logo = logo;
    return this;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public OutletProductVoRes setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 消费总金额
   */
  public double getConsumeAmount() {
    return this.consumeAmount;
  }

  /**
   * 消费总金额
   */
  public OutletProductVoRes setConsumeAmount(double consumeAmount) {
    this.consumeAmount = consumeAmount;
    setConsumeAmountIsSet(true);
    return this;
  }

  public void unsetConsumeAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMEAMOUNT_ISSET_ID);
  }

  /** Returns true if field consumeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMEAMOUNT_ISSET_ID);
  }

  public void setConsumeAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMEAMOUNT_ISSET_ID, value);
  }

  /**
   * 不参与优惠金额
   */
  public double getNotDiscountAmount() {
    return this.notDiscountAmount;
  }

  /**
   * 不参与优惠金额
   */
  public OutletProductVoRes setNotDiscountAmount(double notDiscountAmount) {
    this.notDiscountAmount = notDiscountAmount;
    setNotDiscountAmountIsSet(true);
    return this;
  }

  public void unsetNotDiscountAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTDISCOUNTAMOUNT_ISSET_ID);
  }

  /** Returns true if field notDiscountAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetNotDiscountAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTDISCOUNTAMOUNT_ISSET_ID);
  }

  public void setNotDiscountAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTDISCOUNTAMOUNT_ISSET_ID, value);
  }

  /**
   * 折扣优惠率
   */
  public double getDiscountRate() {
    return this.discountRate;
  }

  /**
   * 折扣优惠率
   */
  public OutletProductVoRes setDiscountRate(double discountRate) {
    this.discountRate = discountRate;
    setDiscountRateIsSet(true);
    return this;
  }

  public void unsetDiscountRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTRATE_ISSET_ID);
  }

  /** Returns true if field discountRate is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountRate() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTRATE_ISSET_ID);
  }

  public void setDiscountRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((Double)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case CONSUME_AMOUNT:
      if (value == null) {
        unsetConsumeAmount();
      } else {
        setConsumeAmount((Double)value);
      }
      break;

    case NOT_DISCOUNT_AMOUNT:
      if (value == null) {
        unsetNotDiscountAmount();
      } else {
        setNotDiscountAmount((Double)value);
      }
      break;

    case DISCOUNT_RATE:
      if (value == null) {
        unsetDiscountRate();
      } else {
        setDiscountRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MERCHANT_ID:
      return getMerchantId();

    case OUTLET_ID:
      return getOutletId();

    case COST:
      return Double.valueOf(getCost());

    case PRODUCT_ID:
      return getProductId();

    case MERCHANT_NAME:
      return getMerchantName();

    case LOGO:
      return getLogo();

    case OUTLET_NAME:
      return getOutletName();

    case CONSUME_AMOUNT:
      return Double.valueOf(getConsumeAmount());

    case NOT_DISCOUNT_AMOUNT:
      return Double.valueOf(getNotDiscountAmount());

    case DISCOUNT_RATE:
      return Double.valueOf(getDiscountRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case OUTLET_ID:
      return isSetOutletId();
    case COST:
      return isSetCost();
    case PRODUCT_ID:
      return isSetProductId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case LOGO:
      return isSetLogo();
    case OUTLET_NAME:
      return isSetOutletName();
    case CONSUME_AMOUNT:
      return isSetConsumeAmount();
    case NOT_DISCOUNT_AMOUNT:
      return isSetNotDiscountAmount();
    case DISCOUNT_RATE:
      return isSetDiscountRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OutletProductVoRes)
      return this.equals((OutletProductVoRes)that);
    return false;
  }

  public boolean equals(OutletProductVoRes that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_consumeAmount = true;
    boolean that_present_consumeAmount = true;
    if (this_present_consumeAmount || that_present_consumeAmount) {
      if (!(this_present_consumeAmount && that_present_consumeAmount))
        return false;
      if (this.consumeAmount != that.consumeAmount)
        return false;
    }

    boolean this_present_notDiscountAmount = true;
    boolean that_present_notDiscountAmount = true;
    if (this_present_notDiscountAmount || that_present_notDiscountAmount) {
      if (!(this_present_notDiscountAmount && that_present_notDiscountAmount))
        return false;
      if (this.notDiscountAmount != that.notDiscountAmount)
        return false;
    }

    boolean this_present_discountRate = true;
    boolean that_present_discountRate = true;
    if (this_present_discountRate || that_present_discountRate) {
      if (!(this_present_discountRate && that_present_discountRate))
        return false;
      if (this.discountRate != that.discountRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_cost = true;
    list.add(present_cost);
    if (present_cost)
      list.add(cost);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_consumeAmount = true;
    list.add(present_consumeAmount);
    if (present_consumeAmount)
      list.add(consumeAmount);

    boolean present_notDiscountAmount = true;
    list.add(present_notDiscountAmount);
    if (present_notDiscountAmount)
      list.add(notDiscountAmount);

    boolean present_discountRate = true;
    list.add(present_discountRate);
    if (present_discountRate)
      list.add(discountRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(OutletProductVoRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeAmount()).compareTo(other.isSetConsumeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeAmount, other.consumeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotDiscountAmount()).compareTo(other.isSetNotDiscountAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotDiscountAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notDiscountAmount, other.notDiscountAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountRate()).compareTo(other.isSetDiscountRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountRate, other.discountRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OutletProductVoRes(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo:");
    if (this.logo == null) {
      sb.append("null");
    } else {
      sb.append(this.logo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeAmount:");
    sb.append(this.consumeAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notDiscountAmount:");
    sb.append(this.notDiscountAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountRate:");
    sb.append(this.discountRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OutletProductVoResStandardSchemeFactory implements SchemeFactory {
    public OutletProductVoResStandardScheme getScheme() {
      return new OutletProductVoResStandardScheme();
    }
  }

  private static class OutletProductVoResStandardScheme extends StandardScheme<OutletProductVoRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OutletProductVoRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONSUME_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consumeAmount = iprot.readDouble();
              struct.setConsumeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOT_DISCOUNT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notDiscountAmount = iprot.readDouble();
              struct.setNotDiscountAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISCOUNT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountRate = iprot.readDouble();
              struct.setDiscountRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OutletProductVoRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.logo != null) {
        oprot.writeFieldBegin(LOGO_FIELD_DESC);
        oprot.writeString(struct.logo);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSUME_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.consumeAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOT_DISCOUNT_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.notDiscountAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.discountRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OutletProductVoResTupleSchemeFactory implements SchemeFactory {
    public OutletProductVoResTupleScheme getScheme() {
      return new OutletProductVoResTupleScheme();
    }
  }

  private static class OutletProductVoResTupleScheme extends TupleScheme<OutletProductVoRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OutletProductVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetOutletId()) {
        optionals.set(2);
      }
      if (struct.isSetCost()) {
        optionals.set(3);
      }
      if (struct.isSetProductId()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(5);
      }
      if (struct.isSetLogo()) {
        optionals.set(6);
      }
      if (struct.isSetOutletName()) {
        optionals.set(7);
      }
      if (struct.isSetConsumeAmount()) {
        optionals.set(8);
      }
      if (struct.isSetNotDiscountAmount()) {
        optionals.set(9);
      }
      if (struct.isSetDiscountRate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetConsumeAmount()) {
        oprot.writeDouble(struct.consumeAmount);
      }
      if (struct.isSetNotDiscountAmount()) {
        oprot.writeDouble(struct.notDiscountAmount);
      }
      if (struct.isSetDiscountRate()) {
        oprot.writeDouble(struct.discountRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OutletProductVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.consumeAmount = iprot.readDouble();
        struct.setConsumeAmountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.notDiscountAmount = iprot.readDouble();
        struct.setNotDiscountAmountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.discountRate = iprot.readDouble();
        struct.setDiscountRateIsSet(true);
      }
    }
  }

}

