/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 购物车请求商品
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShoppingCartReqProductVo implements org.apache.thrift.TBase<ShoppingCartReqProductVo, ShoppingCartReqProductVo._Fields>, java.io.Serializable, Cloneable, Comparable<ShoppingCartReqProductVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShoppingCartReqProductVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("productTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField VIP_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShoppingCartReqProductVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShoppingCartReqProductVoTupleSchemeFactory());
  }

  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 商品总金额
   */
  public double productTotalMoney; // required
  /**
   * 商品vip总金额
   */
  public double vipTotalMoney; // required
  /**
   * 活动id 后台逻辑使用-前天不要传
   */
  public String activeId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品id
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 商品总金额
     */
    PRODUCT_TOTAL_MONEY((short)3, "productTotalMoney"),
    /**
     * 商品vip总金额
     */
    VIP_TOTAL_MONEY((short)4, "vipTotalMoney"),
    /**
     * 活动id 后台逻辑使用-前天不要传
     */
    ACTIVE_ID((short)5, "activeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // PRODUCT_TOTAL_MONEY
          return PRODUCT_TOTAL_MONEY;
        case 4: // VIP_TOTAL_MONEY
          return VIP_TOTAL_MONEY;
        case 5: // ACTIVE_ID
          return ACTIVE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTTOTALMONEY_ISSET_ID = 0;
  private static final int __VIPTOTALMONEY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACTIVE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("productTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShoppingCartReqProductVo.class, metaDataMap);
  }

  public ShoppingCartReqProductVo() {
  }

  public ShoppingCartReqProductVo(
    String productId,
    String productName,
    double productTotalMoney,
    double vipTotalMoney)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.productTotalMoney = productTotalMoney;
    setProductTotalMoneyIsSet(true);
    this.vipTotalMoney = vipTotalMoney;
    setVipTotalMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShoppingCartReqProductVo(ShoppingCartReqProductVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.productTotalMoney = other.productTotalMoney;
    this.vipTotalMoney = other.vipTotalMoney;
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
  }

  public ShoppingCartReqProductVo deepCopy() {
    return new ShoppingCartReqProductVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setProductTotalMoneyIsSet(false);
    this.productTotalMoney = 0.0;
    setVipTotalMoneyIsSet(false);
    this.vipTotalMoney = 0.0;
    this.activeId = null;
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public ShoppingCartReqProductVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public ShoppingCartReqProductVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 商品总金额
   */
  public double getProductTotalMoney() {
    return this.productTotalMoney;
  }

  /**
   * 商品总金额
   */
  public ShoppingCartReqProductVo setProductTotalMoney(double productTotalMoney) {
    this.productTotalMoney = productTotalMoney;
    setProductTotalMoneyIsSet(true);
    return this;
  }

  public void unsetProductTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field productTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetProductTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTOTALMONEY_ISSET_ID);
  }

  public void setProductTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 商品vip总金额
   */
  public double getVipTotalMoney() {
    return this.vipTotalMoney;
  }

  /**
   * 商品vip总金额
   */
  public ShoppingCartReqProductVo setVipTotalMoney(double vipTotalMoney) {
    this.vipTotalMoney = vipTotalMoney;
    setVipTotalMoneyIsSet(true);
    return this;
  }

  public void unsetVipTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field vipTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPTOTALMONEY_ISSET_ID);
  }

  public void setVipTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 活动id 后台逻辑使用-前天不要传
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id 后台逻辑使用-前天不要传
   */
  public ShoppingCartReqProductVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_TOTAL_MONEY:
      if (value == null) {
        unsetProductTotalMoney();
      } else {
        setProductTotalMoney((Double)value);
      }
      break;

    case VIP_TOTAL_MONEY:
      if (value == null) {
        unsetVipTotalMoney();
      } else {
        setVipTotalMoney((Double)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_TOTAL_MONEY:
      return Double.valueOf(getProductTotalMoney());

    case VIP_TOTAL_MONEY:
      return Double.valueOf(getVipTotalMoney());

    case ACTIVE_ID:
      return getActiveId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_TOTAL_MONEY:
      return isSetProductTotalMoney();
    case VIP_TOTAL_MONEY:
      return isSetVipTotalMoney();
    case ACTIVE_ID:
      return isSetActiveId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShoppingCartReqProductVo)
      return this.equals((ShoppingCartReqProductVo)that);
    return false;
  }

  public boolean equals(ShoppingCartReqProductVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productTotalMoney = true;
    boolean that_present_productTotalMoney = true;
    if (this_present_productTotalMoney || that_present_productTotalMoney) {
      if (!(this_present_productTotalMoney && that_present_productTotalMoney))
        return false;
      if (this.productTotalMoney != that.productTotalMoney)
        return false;
    }

    boolean this_present_vipTotalMoney = true;
    boolean that_present_vipTotalMoney = true;
    if (this_present_vipTotalMoney || that_present_vipTotalMoney) {
      if (!(this_present_vipTotalMoney && that_present_vipTotalMoney))
        return false;
      if (this.vipTotalMoney != that.vipTotalMoney)
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productTotalMoney = true;
    list.add(present_productTotalMoney);
    if (present_productTotalMoney)
      list.add(productTotalMoney);

    boolean present_vipTotalMoney = true;
    list.add(present_vipTotalMoney);
    if (present_vipTotalMoney)
      list.add(vipTotalMoney);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShoppingCartReqProductVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductTotalMoney()).compareTo(other.isSetProductTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productTotalMoney, other.productTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipTotalMoney()).compareTo(other.isSetVipTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipTotalMoney, other.vipTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShoppingCartReqProductVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productTotalMoney:");
    sb.append(this.productTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipTotalMoney:");
    sb.append(this.vipTotalMoney);
    first = false;
    if (isSetActiveId()) {
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShoppingCartReqProductVoStandardSchemeFactory implements SchemeFactory {
    public ShoppingCartReqProductVoStandardScheme getScheme() {
      return new ShoppingCartReqProductVoStandardScheme();
    }
  }

  private static class ShoppingCartReqProductVoStandardScheme extends StandardScheme<ShoppingCartReqProductVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShoppingCartReqProductVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productTotalMoney = iprot.readDouble();
              struct.setProductTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIP_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipTotalMoney = iprot.readDouble();
              struct.setVipTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShoppingCartReqProductVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.productTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipTotalMoney);
      oprot.writeFieldEnd();
      if (struct.activeId != null) {
        if (struct.isSetActiveId()) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShoppingCartReqProductVoTupleSchemeFactory implements SchemeFactory {
    public ShoppingCartReqProductVoTupleScheme getScheme() {
      return new ShoppingCartReqProductVoTupleScheme();
    }
  }

  private static class ShoppingCartReqProductVoTupleScheme extends TupleScheme<ShoppingCartReqProductVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShoppingCartReqProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetProductTotalMoney()) {
        optionals.set(2);
      }
      if (struct.isSetVipTotalMoney()) {
        optionals.set(3);
      }
      if (struct.isSetActiveId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductTotalMoney()) {
        oprot.writeDouble(struct.productTotalMoney);
      }
      if (struct.isSetVipTotalMoney()) {
        oprot.writeDouble(struct.vipTotalMoney);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShoppingCartReqProductVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productTotalMoney = iprot.readDouble();
        struct.setProductTotalMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vipTotalMoney = iprot.readDouble();
        struct.setVipTotalMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
    }
  }

}

