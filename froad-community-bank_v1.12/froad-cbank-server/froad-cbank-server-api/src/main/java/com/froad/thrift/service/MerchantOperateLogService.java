/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantOperateLogService {

  /**
   * MerchantOperateLogService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 添加日志
     * @param MerchantOperateLogVo
     * @return boolean
     * 
     * @param MerchantOperateLogVo
     */
    public boolean addMerchantOperateLog(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException;

    /**
     * 获取分页日志
     * @return MerchantOperateLogPageVoRes
     * 
     * @param page
     * @param MerchantOperateLogVo
     */
    public com.froad.thrift.vo.MerchantOperateLogPageVoRes getMerchantOperateLogByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantOperateLog(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantOperateLogByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addMerchantOperateLog(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException
    {
      send_addMerchantOperateLog(MerchantOperateLogVo);
      return recv_addMerchantOperateLog();
    }

    public void send_addMerchantOperateLog(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException
    {
      addMerchantOperateLog_args args = new addMerchantOperateLog_args();
      args.setMerchantOperateLogVo(MerchantOperateLogVo);
      sendBase("addMerchantOperateLog", args);
    }

    public boolean recv_addMerchantOperateLog() throws org.apache.thrift.TException
    {
      addMerchantOperateLog_result result = new addMerchantOperateLog_result();
      receiveBase(result, "addMerchantOperateLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantOperateLog failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantOperateLogPageVoRes getMerchantOperateLogByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException
    {
      send_getMerchantOperateLogByPage(page, MerchantOperateLogVo);
      return recv_getMerchantOperateLogByPage();
    }

    public void send_getMerchantOperateLogByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) throws org.apache.thrift.TException
    {
      getMerchantOperateLogByPage_args args = new getMerchantOperateLogByPage_args();
      args.setPage(page);
      args.setMerchantOperateLogVo(MerchantOperateLogVo);
      sendBase("getMerchantOperateLogByPage", args);
    }

    public com.froad.thrift.vo.MerchantOperateLogPageVoRes recv_getMerchantOperateLogByPage() throws org.apache.thrift.TException
    {
      getMerchantOperateLogByPage_result result = new getMerchantOperateLogByPage_result();
      receiveBase(result, "getMerchantOperateLogByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantOperateLogByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantOperateLog(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantOperateLog_call method_call = new addMerchantOperateLog_call(MerchantOperateLogVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantOperateLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo;
      public addMerchantOperateLog_call(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.MerchantOperateLogVo = MerchantOperateLogVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantOperateLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantOperateLog_args args = new addMerchantOperateLog_args();
        args.setMerchantOperateLogVo(MerchantOperateLogVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantOperateLog();
      }
    }

    public void getMerchantOperateLogByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantOperateLogByPage_call method_call = new getMerchantOperateLogByPage_call(page, MerchantOperateLogVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantOperateLogByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo;
      public getMerchantOperateLogByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.MerchantOperateLogVo = MerchantOperateLogVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantOperateLogByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantOperateLogByPage_args args = new getMerchantOperateLogByPage_args();
        args.setPage(page);
        args.setMerchantOperateLogVo(MerchantOperateLogVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantOperateLogPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantOperateLogByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantOperateLog", new addMerchantOperateLog());
      processMap.put("getMerchantOperateLogByPage", new getMerchantOperateLogByPage());
      return processMap;
    }

    public static class addMerchantOperateLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantOperateLog_args> {
      public addMerchantOperateLog() {
        super("addMerchantOperateLog");
      }

      public addMerchantOperateLog_args getEmptyArgsInstance() {
        return new addMerchantOperateLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantOperateLog_result getResult(I iface, addMerchantOperateLog_args args) throws org.apache.thrift.TException {
        addMerchantOperateLog_result result = new addMerchantOperateLog_result();
        result.success = iface.addMerchantOperateLog(args.MerchantOperateLogVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMerchantOperateLogByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantOperateLogByPage_args> {
      public getMerchantOperateLogByPage() {
        super("getMerchantOperateLogByPage");
      }

      public getMerchantOperateLogByPage_args getEmptyArgsInstance() {
        return new getMerchantOperateLogByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantOperateLogByPage_result getResult(I iface, getMerchantOperateLogByPage_args args) throws org.apache.thrift.TException {
        getMerchantOperateLogByPage_result result = new getMerchantOperateLogByPage_result();
        result.success = iface.getMerchantOperateLogByPage(args.page, args.MerchantOperateLogVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantOperateLog", new addMerchantOperateLog());
      processMap.put("getMerchantOperateLogByPage", new getMerchantOperateLogByPage());
      return processMap;
    }

    public static class addMerchantOperateLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantOperateLog_args, Boolean> {
      public addMerchantOperateLog() {
        super("addMerchantOperateLog");
      }

      public addMerchantOperateLog_args getEmptyArgsInstance() {
        return new addMerchantOperateLog_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addMerchantOperateLog_result result = new addMerchantOperateLog_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantOperateLog_result result = new addMerchantOperateLog_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantOperateLog_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addMerchantOperateLog(args.MerchantOperateLogVo,resultHandler);
      }
    }

    public static class getMerchantOperateLogByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantOperateLogByPage_args, com.froad.thrift.vo.MerchantOperateLogPageVoRes> {
      public getMerchantOperateLogByPage() {
        super("getMerchantOperateLogByPage");
      }

      public getMerchantOperateLogByPage_args getEmptyArgsInstance() {
        return new getMerchantOperateLogByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantOperateLogPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantOperateLogPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantOperateLogPageVoRes o) {
            getMerchantOperateLogByPage_result result = new getMerchantOperateLogByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantOperateLogByPage_result result = new getMerchantOperateLogByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantOperateLogByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantOperateLogPageVoRes> resultHandler) throws TException {
        iface.getMerchantOperateLogByPage(args.page, args.MerchantOperateLogVo,resultHandler);
      }
    }

  }

  public static class addMerchantOperateLog_args implements org.apache.thrift.TBase<addMerchantOperateLog_args, addMerchantOperateLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOperateLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOperateLog_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_OPERATE_LOG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantOperateLogVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOperateLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOperateLog_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_OPERATE_LOG_VO((short)1, "MerchantOperateLogVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_OPERATE_LOG_VO
            return MERCHANT_OPERATE_LOG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_OPERATE_LOG_VO, new org.apache.thrift.meta_data.FieldMetaData("MerchantOperateLogVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOperateLogVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOperateLog_args.class, metaDataMap);
    }

    public addMerchantOperateLog_args() {
    }

    public addMerchantOperateLog_args(
      com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo)
    {
      this();
      this.MerchantOperateLogVo = MerchantOperateLogVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOperateLog_args(addMerchantOperateLog_args other) {
      if (other.isSetMerchantOperateLogVo()) {
        this.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo(other.MerchantOperateLogVo);
      }
    }

    public addMerchantOperateLog_args deepCopy() {
      return new addMerchantOperateLog_args(this);
    }

    @Override
    public void clear() {
      this.MerchantOperateLogVo = null;
    }

    public com.froad.thrift.vo.MerchantOperateLogVo getMerchantOperateLogVo() {
      return this.MerchantOperateLogVo;
    }

    public addMerchantOperateLog_args setMerchantOperateLogVo(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) {
      this.MerchantOperateLogVo = MerchantOperateLogVo;
      return this;
    }

    public void unsetMerchantOperateLogVo() {
      this.MerchantOperateLogVo = null;
    }

    /** Returns true if field MerchantOperateLogVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOperateLogVo() {
      return this.MerchantOperateLogVo != null;
    }

    public void setMerchantOperateLogVoIsSet(boolean value) {
      if (!value) {
        this.MerchantOperateLogVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_OPERATE_LOG_VO:
        if (value == null) {
          unsetMerchantOperateLogVo();
        } else {
          setMerchantOperateLogVo((com.froad.thrift.vo.MerchantOperateLogVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_OPERATE_LOG_VO:
        return getMerchantOperateLogVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_OPERATE_LOG_VO:
        return isSetMerchantOperateLogVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOperateLog_args)
        return this.equals((addMerchantOperateLog_args)that);
      return false;
    }

    public boolean equals(addMerchantOperateLog_args that) {
      if (that == null)
        return false;

      boolean this_present_MerchantOperateLogVo = true && this.isSetMerchantOperateLogVo();
      boolean that_present_MerchantOperateLogVo = true && that.isSetMerchantOperateLogVo();
      if (this_present_MerchantOperateLogVo || that_present_MerchantOperateLogVo) {
        if (!(this_present_MerchantOperateLogVo && that_present_MerchantOperateLogVo))
          return false;
        if (!this.MerchantOperateLogVo.equals(that.MerchantOperateLogVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_MerchantOperateLogVo = true && (isSetMerchantOperateLogVo());
      list.add(present_MerchantOperateLogVo);
      if (present_MerchantOperateLogVo)
        list.add(MerchantOperateLogVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOperateLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantOperateLogVo()).compareTo(other.isSetMerchantOperateLogVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOperateLogVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantOperateLogVo, other.MerchantOperateLogVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOperateLog_args(");
      boolean first = true;

      sb.append("MerchantOperateLogVo:");
      if (this.MerchantOperateLogVo == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantOperateLogVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (MerchantOperateLogVo != null) {
        MerchantOperateLogVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOperateLog_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantOperateLog_argsStandardScheme getScheme() {
        return new addMerchantOperateLog_argsStandardScheme();
      }
    }

    private static class addMerchantOperateLog_argsStandardScheme extends StandardScheme<addMerchantOperateLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOperateLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_OPERATE_LOG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo();
                struct.MerchantOperateLogVo.read(iprot);
                struct.setMerchantOperateLogVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOperateLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.MerchantOperateLogVo != null) {
          oprot.writeFieldBegin(MERCHANT_OPERATE_LOG_VO_FIELD_DESC);
          struct.MerchantOperateLogVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOperateLog_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantOperateLog_argsTupleScheme getScheme() {
        return new addMerchantOperateLog_argsTupleScheme();
      }
    }

    private static class addMerchantOperateLog_argsTupleScheme extends TupleScheme<addMerchantOperateLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOperateLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantOperateLogVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantOperateLogVo()) {
          struct.MerchantOperateLogVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOperateLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo();
          struct.MerchantOperateLogVo.read(iprot);
          struct.setMerchantOperateLogVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantOperateLog_result implements org.apache.thrift.TBase<addMerchantOperateLog_result, addMerchantOperateLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantOperateLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantOperateLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantOperateLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantOperateLog_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantOperateLog_result.class, metaDataMap);
    }

    public addMerchantOperateLog_result() {
    }

    public addMerchantOperateLog_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantOperateLog_result(addMerchantOperateLog_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addMerchantOperateLog_result deepCopy() {
      return new addMerchantOperateLog_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addMerchantOperateLog_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantOperateLog_result)
        return this.equals((addMerchantOperateLog_result)that);
      return false;
    }

    public boolean equals(addMerchantOperateLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantOperateLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantOperateLog_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantOperateLog_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantOperateLog_resultStandardScheme getScheme() {
        return new addMerchantOperateLog_resultStandardScheme();
      }
    }

    private static class addMerchantOperateLog_resultStandardScheme extends StandardScheme<addMerchantOperateLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantOperateLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantOperateLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantOperateLog_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantOperateLog_resultTupleScheme getScheme() {
        return new addMerchantOperateLog_resultTupleScheme();
      }
    }

    private static class addMerchantOperateLog_resultTupleScheme extends TupleScheme<addMerchantOperateLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantOperateLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantOperateLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOperateLogByPage_args implements org.apache.thrift.TBase<getMerchantOperateLogByPage_args, getMerchantOperateLogByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOperateLogByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOperateLogByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_OPERATE_LOG_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantOperateLogVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOperateLogByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOperateLogByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_OPERATE_LOG_VO((short)2, "MerchantOperateLogVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_OPERATE_LOG_VO
            return MERCHANT_OPERATE_LOG_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_OPERATE_LOG_VO, new org.apache.thrift.meta_data.FieldMetaData("MerchantOperateLogVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOperateLogVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOperateLogByPage_args.class, metaDataMap);
    }

    public getMerchantOperateLogByPage_args() {
    }

    public getMerchantOperateLogByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo)
    {
      this();
      this.page = page;
      this.MerchantOperateLogVo = MerchantOperateLogVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOperateLogByPage_args(getMerchantOperateLogByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantOperateLogVo()) {
        this.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo(other.MerchantOperateLogVo);
      }
    }

    public getMerchantOperateLogByPage_args deepCopy() {
      return new getMerchantOperateLogByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.MerchantOperateLogVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantOperateLogByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantOperateLogVo getMerchantOperateLogVo() {
      return this.MerchantOperateLogVo;
    }

    public getMerchantOperateLogByPage_args setMerchantOperateLogVo(com.froad.thrift.vo.MerchantOperateLogVo MerchantOperateLogVo) {
      this.MerchantOperateLogVo = MerchantOperateLogVo;
      return this;
    }

    public void unsetMerchantOperateLogVo() {
      this.MerchantOperateLogVo = null;
    }

    /** Returns true if field MerchantOperateLogVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantOperateLogVo() {
      return this.MerchantOperateLogVo != null;
    }

    public void setMerchantOperateLogVoIsSet(boolean value) {
      if (!value) {
        this.MerchantOperateLogVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_OPERATE_LOG_VO:
        if (value == null) {
          unsetMerchantOperateLogVo();
        } else {
          setMerchantOperateLogVo((com.froad.thrift.vo.MerchantOperateLogVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_OPERATE_LOG_VO:
        return getMerchantOperateLogVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_OPERATE_LOG_VO:
        return isSetMerchantOperateLogVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOperateLogByPage_args)
        return this.equals((getMerchantOperateLogByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantOperateLogByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_MerchantOperateLogVo = true && this.isSetMerchantOperateLogVo();
      boolean that_present_MerchantOperateLogVo = true && that.isSetMerchantOperateLogVo();
      if (this_present_MerchantOperateLogVo || that_present_MerchantOperateLogVo) {
        if (!(this_present_MerchantOperateLogVo && that_present_MerchantOperateLogVo))
          return false;
        if (!this.MerchantOperateLogVo.equals(that.MerchantOperateLogVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_MerchantOperateLogVo = true && (isSetMerchantOperateLogVo());
      list.add(present_MerchantOperateLogVo);
      if (present_MerchantOperateLogVo)
        list.add(MerchantOperateLogVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOperateLogByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantOperateLogVo()).compareTo(other.isSetMerchantOperateLogVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantOperateLogVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantOperateLogVo, other.MerchantOperateLogVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOperateLogByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("MerchantOperateLogVo:");
      if (this.MerchantOperateLogVo == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantOperateLogVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (MerchantOperateLogVo != null) {
        MerchantOperateLogVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOperateLogByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantOperateLogByPage_argsStandardScheme getScheme() {
        return new getMerchantOperateLogByPage_argsStandardScheme();
      }
    }

    private static class getMerchantOperateLogByPage_argsStandardScheme extends StandardScheme<getMerchantOperateLogByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOperateLogByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_OPERATE_LOG_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo();
                struct.MerchantOperateLogVo.read(iprot);
                struct.setMerchantOperateLogVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOperateLogByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.MerchantOperateLogVo != null) {
          oprot.writeFieldBegin(MERCHANT_OPERATE_LOG_VO_FIELD_DESC);
          struct.MerchantOperateLogVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOperateLogByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantOperateLogByPage_argsTupleScheme getScheme() {
        return new getMerchantOperateLogByPage_argsTupleScheme();
      }
    }

    private static class getMerchantOperateLogByPage_argsTupleScheme extends TupleScheme<getMerchantOperateLogByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOperateLogByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantOperateLogVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantOperateLogVo()) {
          struct.MerchantOperateLogVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOperateLogByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.MerchantOperateLogVo = new com.froad.thrift.vo.MerchantOperateLogVo();
          struct.MerchantOperateLogVo.read(iprot);
          struct.setMerchantOperateLogVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantOperateLogByPage_result implements org.apache.thrift.TBase<getMerchantOperateLogByPage_result, getMerchantOperateLogByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantOperateLogByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantOperateLogByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantOperateLogByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantOperateLogByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantOperateLogPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantOperateLogPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantOperateLogByPage_result.class, metaDataMap);
    }

    public getMerchantOperateLogByPage_result() {
    }

    public getMerchantOperateLogByPage_result(
      com.froad.thrift.vo.MerchantOperateLogPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantOperateLogByPage_result(getMerchantOperateLogByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantOperateLogPageVoRes(other.success);
      }
    }

    public getMerchantOperateLogByPage_result deepCopy() {
      return new getMerchantOperateLogByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantOperateLogPageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantOperateLogByPage_result setSuccess(com.froad.thrift.vo.MerchantOperateLogPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantOperateLogPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantOperateLogByPage_result)
        return this.equals((getMerchantOperateLogByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantOperateLogByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantOperateLogByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantOperateLogByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantOperateLogByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantOperateLogByPage_resultStandardScheme getScheme() {
        return new getMerchantOperateLogByPage_resultStandardScheme();
      }
    }

    private static class getMerchantOperateLogByPage_resultStandardScheme extends StandardScheme<getMerchantOperateLogByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantOperateLogByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantOperateLogPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantOperateLogByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantOperateLogByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantOperateLogByPage_resultTupleScheme getScheme() {
        return new getMerchantOperateLogByPage_resultTupleScheme();
      }
    }

    private static class getMerchantOperateLogByPage_resultTupleScheme extends TupleScheme<getMerchantOperateLogByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantOperateLogByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantOperateLogByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantOperateLogPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
