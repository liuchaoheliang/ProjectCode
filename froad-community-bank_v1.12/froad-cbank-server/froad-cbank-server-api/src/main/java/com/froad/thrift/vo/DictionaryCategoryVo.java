/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 字典类别vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class DictionaryCategoryVo implements org.apache.thrift.TBase<DictionaryCategoryVo, DictionaryCategoryVo._Fields>, java.io.Serializable, Cloneable, Comparable<DictionaryCategoryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DictionaryCategoryVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPICTION_FIELD_DESC = new org.apache.thrift.protocol.TField("depiction", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryLevel", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnable", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DictionaryCategoryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DictionaryCategoryVoTupleSchemeFactory());
  }

  /**
   * 字典类别id(自增主键)
   */
  public long id; // optional
  /**
   * 字典类别编号
   */
  public String categoryCode; // required
  /**
   * 字典类别名称
   */
  public String categoryName; // required
  /**
   * 字典类别描述
   */
  public String depiction; // required
  /**
   * 字典类别级别
   */
  public String categoryLevel; // required
  /**
   * 父字典类别ID
   */
  public long parentId; // required
  /**
   * 树路径
   */
  public String treePath; // required
  /**
   * 排序值
   */
  public short orderValue; // required
  /**
   * 是否有效
   */
  public boolean isEnable; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 字典类别id(自增主键)
     */
    ID((short)1, "id"),
    /**
     * 字典类别编号
     */
    CATEGORY_CODE((short)2, "categoryCode"),
    /**
     * 字典类别名称
     */
    CATEGORY_NAME((short)3, "categoryName"),
    /**
     * 字典类别描述
     */
    DEPICTION((short)4, "depiction"),
    /**
     * 字典类别级别
     */
    CATEGORY_LEVEL((short)5, "categoryLevel"),
    /**
     * 父字典类别ID
     */
    PARENT_ID((short)6, "parentId"),
    /**
     * 树路径
     */
    TREE_PATH((short)7, "treePath"),
    /**
     * 排序值
     */
    ORDER_VALUE((short)8, "orderValue"),
    /**
     * 是否有效
     */
    IS_ENABLE((short)9, "isEnable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CATEGORY_CODE
          return CATEGORY_CODE;
        case 3: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 4: // DEPICTION
          return DEPICTION;
        case 5: // CATEGORY_LEVEL
          return CATEGORY_LEVEL;
        case 6: // PARENT_ID
          return PARENT_ID;
        case 7: // TREE_PATH
          return TREE_PATH;
        case 8: // ORDER_VALUE
          return ORDER_VALUE;
        case 9: // IS_ENABLE
          return IS_ENABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENTID_ISSET_ID = 1;
  private static final int __ORDERVALUE_ISSET_ID = 2;
  private static final int __ISENABLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATEGORY_CODE, new org.apache.thrift.meta_data.FieldMetaData("categoryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPICTION, new org.apache.thrift.meta_data.FieldMetaData("depiction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("categoryLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IS_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("isEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DictionaryCategoryVo.class, metaDataMap);
  }

  public DictionaryCategoryVo() {
  }

  public DictionaryCategoryVo(
    String categoryCode,
    String categoryName,
    String depiction,
    String categoryLevel,
    long parentId,
    String treePath,
    short orderValue,
    boolean isEnable)
  {
    this();
    this.categoryCode = categoryCode;
    this.categoryName = categoryName;
    this.depiction = depiction;
    this.categoryLevel = categoryLevel;
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.treePath = treePath;
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    this.isEnable = isEnable;
    setIsEnableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DictionaryCategoryVo(DictionaryCategoryVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCategoryCode()) {
      this.categoryCode = other.categoryCode;
    }
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    if (other.isSetDepiction()) {
      this.depiction = other.depiction;
    }
    if (other.isSetCategoryLevel()) {
      this.categoryLevel = other.categoryLevel;
    }
    this.parentId = other.parentId;
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    this.orderValue = other.orderValue;
    this.isEnable = other.isEnable;
  }

  public DictionaryCategoryVo deepCopy() {
    return new DictionaryCategoryVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.categoryCode = null;
    this.categoryName = null;
    this.depiction = null;
    this.categoryLevel = null;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.treePath = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
    setIsEnableIsSet(false);
    this.isEnable = false;
  }

  /**
   * 字典类别id(自增主键)
   */
  public long getId() {
    return this.id;
  }

  /**
   * 字典类别id(自增主键)
   */
  public DictionaryCategoryVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 字典类别编号
   */
  public String getCategoryCode() {
    return this.categoryCode;
  }

  /**
   * 字典类别编号
   */
  public DictionaryCategoryVo setCategoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
    return this;
  }

  public void unsetCategoryCode() {
    this.categoryCode = null;
  }

  /** Returns true if field categoryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryCode() {
    return this.categoryCode != null;
  }

  public void setCategoryCodeIsSet(boolean value) {
    if (!value) {
      this.categoryCode = null;
    }
  }

  /**
   * 字典类别名称
   */
  public String getCategoryName() {
    return this.categoryName;
  }

  /**
   * 字典类别名称
   */
  public DictionaryCategoryVo setCategoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  /**
   * 字典类别描述
   */
  public String getDepiction() {
    return this.depiction;
  }

  /**
   * 字典类别描述
   */
  public DictionaryCategoryVo setDepiction(String depiction) {
    this.depiction = depiction;
    return this;
  }

  public void unsetDepiction() {
    this.depiction = null;
  }

  /** Returns true if field depiction is set (has been assigned a value) and false otherwise */
  public boolean isSetDepiction() {
    return this.depiction != null;
  }

  public void setDepictionIsSet(boolean value) {
    if (!value) {
      this.depiction = null;
    }
  }

  /**
   * 字典类别级别
   */
  public String getCategoryLevel() {
    return this.categoryLevel;
  }

  /**
   * 字典类别级别
   */
  public DictionaryCategoryVo setCategoryLevel(String categoryLevel) {
    this.categoryLevel = categoryLevel;
    return this;
  }

  public void unsetCategoryLevel() {
    this.categoryLevel = null;
  }

  /** Returns true if field categoryLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryLevel() {
    return this.categoryLevel != null;
  }

  public void setCategoryLevelIsSet(boolean value) {
    if (!value) {
      this.categoryLevel = null;
    }
  }

  /**
   * 父字典类别ID
   */
  public long getParentId() {
    return this.parentId;
  }

  /**
   * 父字典类别ID
   */
  public DictionaryCategoryVo setParentId(long parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  /**
   * 树路径
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 树路径
   */
  public DictionaryCategoryVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 排序值
   */
  public short getOrderValue() {
    return this.orderValue;
  }

  /**
   * 排序值
   */
  public DictionaryCategoryVo setOrderValue(short orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  /**
   * 是否有效
   */
  public boolean isIsEnable() {
    return this.isEnable;
  }

  /**
   * 是否有效
   */
  public DictionaryCategoryVo setIsEnable(boolean isEnable) {
    this.isEnable = isEnable;
    setIsEnableIsSet(true);
    return this;
  }

  public void unsetIsEnable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  /** Returns true if field isEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  public void setIsEnableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CATEGORY_CODE:
      if (value == null) {
        unsetCategoryCode();
      } else {
        setCategoryCode((String)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case DEPICTION:
      if (value == null) {
        unsetDepiction();
      } else {
        setDepiction((String)value);
      }
      break;

    case CATEGORY_LEVEL:
      if (value == null) {
        unsetCategoryLevel();
      } else {
        setCategoryLevel((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Long)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Short)value);
      }
      break;

    case IS_ENABLE:
      if (value == null) {
        unsetIsEnable();
      } else {
        setIsEnable((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CATEGORY_CODE:
      return getCategoryCode();

    case CATEGORY_NAME:
      return getCategoryName();

    case DEPICTION:
      return getDepiction();

    case CATEGORY_LEVEL:
      return getCategoryLevel();

    case PARENT_ID:
      return Long.valueOf(getParentId());

    case TREE_PATH:
      return getTreePath();

    case ORDER_VALUE:
      return Short.valueOf(getOrderValue());

    case IS_ENABLE:
      return Boolean.valueOf(isIsEnable());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CATEGORY_CODE:
      return isSetCategoryCode();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case DEPICTION:
      return isSetDepiction();
    case CATEGORY_LEVEL:
      return isSetCategoryLevel();
    case PARENT_ID:
      return isSetParentId();
    case TREE_PATH:
      return isSetTreePath();
    case ORDER_VALUE:
      return isSetOrderValue();
    case IS_ENABLE:
      return isSetIsEnable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DictionaryCategoryVo)
      return this.equals((DictionaryCategoryVo)that);
    return false;
  }

  public boolean equals(DictionaryCategoryVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_categoryCode = true && this.isSetCategoryCode();
    boolean that_present_categoryCode = true && that.isSetCategoryCode();
    if (this_present_categoryCode || that_present_categoryCode) {
      if (!(this_present_categoryCode && that_present_categoryCode))
        return false;
      if (!this.categoryCode.equals(that.categoryCode))
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_depiction = true && this.isSetDepiction();
    boolean that_present_depiction = true && that.isSetDepiction();
    if (this_present_depiction || that_present_depiction) {
      if (!(this_present_depiction && that_present_depiction))
        return false;
      if (!this.depiction.equals(that.depiction))
        return false;
    }

    boolean this_present_categoryLevel = true && this.isSetCategoryLevel();
    boolean that_present_categoryLevel = true && that.isSetCategoryLevel();
    if (this_present_categoryLevel || that_present_categoryLevel) {
      if (!(this_present_categoryLevel && that_present_categoryLevel))
        return false;
      if (!this.categoryLevel.equals(that.categoryLevel))
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_orderValue = true;
    boolean that_present_orderValue = true;
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    boolean this_present_isEnable = true;
    boolean that_present_isEnable = true;
    if (this_present_isEnable || that_present_isEnable) {
      if (!(this_present_isEnable && that_present_isEnable))
        return false;
      if (this.isEnable != that.isEnable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_categoryCode = true && (isSetCategoryCode());
    list.add(present_categoryCode);
    if (present_categoryCode)
      list.add(categoryCode);

    boolean present_categoryName = true && (isSetCategoryName());
    list.add(present_categoryName);
    if (present_categoryName)
      list.add(categoryName);

    boolean present_depiction = true && (isSetDepiction());
    list.add(present_depiction);
    if (present_depiction)
      list.add(depiction);

    boolean present_categoryLevel = true && (isSetCategoryLevel());
    list.add(present_categoryLevel);
    if (present_categoryLevel)
      list.add(categoryLevel);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_orderValue = true;
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    boolean present_isEnable = true;
    list.add(present_isEnable);
    if (present_isEnable)
      list.add(isEnable);

    return list.hashCode();
  }

  @Override
  public int compareTo(DictionaryCategoryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryCode()).compareTo(other.isSetCategoryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryCode, other.categoryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepiction()).compareTo(other.isSetDepiction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepiction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depiction, other.depiction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryLevel()).compareTo(other.isSetCategoryLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryLevel, other.categoryLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnable()).compareTo(other.isSetIsEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnable, other.isEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DictionaryCategoryVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("categoryCode:");
    if (this.categoryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryName:");
    if (this.categoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depiction:");
    if (this.depiction == null) {
      sb.append("null");
    } else {
      sb.append(this.depiction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryLevel:");
    if (this.categoryLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("treePath:");
    if (this.treePath == null) {
      sb.append("null");
    } else {
      sb.append(this.treePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderValue:");
    sb.append(this.orderValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnable:");
    sb.append(this.isEnable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DictionaryCategoryVoStandardSchemeFactory implements SchemeFactory {
    public DictionaryCategoryVoStandardScheme getScheme() {
      return new DictionaryCategoryVoStandardScheme();
    }
  }

  private static class DictionaryCategoryVoStandardScheme extends StandardScheme<DictionaryCategoryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DictionaryCategoryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryCode = iprot.readString();
              struct.setCategoryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPICTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depiction = iprot.readString();
              struct.setDepictionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGORY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryLevel = iprot.readString();
              struct.setCategoryLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.orderValue = iprot.readI16();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnable = iprot.readBool();
              struct.setIsEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DictionaryCategoryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.categoryCode != null) {
        oprot.writeFieldBegin(CATEGORY_CODE_FIELD_DESC);
        oprot.writeString(struct.categoryCode);
        oprot.writeFieldEnd();
      }
      if (struct.categoryName != null) {
        oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryName);
        oprot.writeFieldEnd();
      }
      if (struct.depiction != null) {
        oprot.writeFieldBegin(DEPICTION_FIELD_DESC);
        oprot.writeString(struct.depiction);
        oprot.writeFieldEnd();
      }
      if (struct.categoryLevel != null) {
        oprot.writeFieldBegin(CATEGORY_LEVEL_FIELD_DESC);
        oprot.writeString(struct.categoryLevel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.treePath != null) {
        oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
        oprot.writeString(struct.treePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
      oprot.writeI16(struct.orderValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLE_FIELD_DESC);
      oprot.writeBool(struct.isEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DictionaryCategoryVoTupleSchemeFactory implements SchemeFactory {
    public DictionaryCategoryVoTupleScheme getScheme() {
      return new DictionaryCategoryVoTupleScheme();
    }
  }

  private static class DictionaryCategoryVoTupleScheme extends TupleScheme<DictionaryCategoryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DictionaryCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCategoryCode()) {
        optionals.set(1);
      }
      if (struct.isSetCategoryName()) {
        optionals.set(2);
      }
      if (struct.isSetDepiction()) {
        optionals.set(3);
      }
      if (struct.isSetCategoryLevel()) {
        optionals.set(4);
      }
      if (struct.isSetParentId()) {
        optionals.set(5);
      }
      if (struct.isSetTreePath()) {
        optionals.set(6);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(7);
      }
      if (struct.isSetIsEnable()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCategoryCode()) {
        oprot.writeString(struct.categoryCode);
      }
      if (struct.isSetCategoryName()) {
        oprot.writeString(struct.categoryName);
      }
      if (struct.isSetDepiction()) {
        oprot.writeString(struct.depiction);
      }
      if (struct.isSetCategoryLevel()) {
        oprot.writeString(struct.categoryLevel);
      }
      if (struct.isSetParentId()) {
        oprot.writeI64(struct.parentId);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI16(struct.orderValue);
      }
      if (struct.isSetIsEnable()) {
        oprot.writeBool(struct.isEnable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DictionaryCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.categoryCode = iprot.readString();
        struct.setCategoryCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.categoryName = iprot.readString();
        struct.setCategoryNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.depiction = iprot.readString();
        struct.setDepictionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.categoryLevel = iprot.readString();
        struct.setCategoryLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentId = iprot.readI64();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderValue = iprot.readI16();
        struct.setOrderValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isEnable = iprot.readBool();
        struct.setIsEnableIsSet(true);
      }
    }
  }

}

