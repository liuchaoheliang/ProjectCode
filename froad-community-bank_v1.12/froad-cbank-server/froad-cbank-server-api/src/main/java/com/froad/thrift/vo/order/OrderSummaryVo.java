/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单概要信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OrderSummaryVo implements org.apache.thrift.TBase<OrderSummaryVo, OrderSummaryVo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderSummaryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderSummaryVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_SUMMARY_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productSummaryVoList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnableCancel", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnablePay", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeckill", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVERY_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryFlag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_VIP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isVipOrder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField VIP_DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("vipDiscount", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderSummaryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderSummaryVoTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 订单状态
   */
  public String orderStatus; // required
  /**
   * 订单实际总货币值
   */
  public double totalPrice; // required
  /**
   * 商品概要信息
   */
  public List<ProductSummaryVo> productSummaryVoList; // required
  /**
   * 是否可取消
   */
  public boolean isEnableCancel; // required
  /**
   * 是否可支付
   */
  public boolean isEnablePay; // required
  /**
   * 是否秒杀
   */
  public boolean isSeckill; // required
  /**
   * 是否补全配送信息:
   * 0：秒杀成功+已填信息
   * 1：秒杀成功+自提
   * 2：秒杀成功+配送
   * 3：秒杀成功+自提、配送
   */
  public String deliveryFlag; // required
  /**
   * 是否VIP订单
   */
  public boolean isVipOrder; // required
  /**
   * VIP优惠金额
   */
  public double vipDiscount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)2, "orderStatus"),
    /**
     * 订单实际总货币值
     */
    TOTAL_PRICE((short)3, "totalPrice"),
    /**
     * 商品概要信息
     */
    PRODUCT_SUMMARY_VO_LIST((short)4, "productSummaryVoList"),
    /**
     * 是否可取消
     */
    IS_ENABLE_CANCEL((short)5, "isEnableCancel"),
    /**
     * 是否可支付
     */
    IS_ENABLE_PAY((short)6, "isEnablePay"),
    /**
     * 是否秒杀
     */
    IS_SECKILL((short)7, "isSeckill"),
    /**
     * 是否补全配送信息:
     * 0：秒杀成功+已填信息
     * 1：秒杀成功+自提
     * 2：秒杀成功+配送
     * 3：秒杀成功+自提、配送
     */
    DELIVERY_FLAG((short)8, "deliveryFlag"),
    /**
     * 是否VIP订单
     */
    IS_VIP_ORDER((short)9, "isVipOrder"),
    /**
     * VIP优惠金额
     */
    VIP_DISCOUNT((short)10, "vipDiscount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // ORDER_STATUS
          return ORDER_STATUS;
        case 3: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 4: // PRODUCT_SUMMARY_VO_LIST
          return PRODUCT_SUMMARY_VO_LIST;
        case 5: // IS_ENABLE_CANCEL
          return IS_ENABLE_CANCEL;
        case 6: // IS_ENABLE_PAY
          return IS_ENABLE_PAY;
        case 7: // IS_SECKILL
          return IS_SECKILL;
        case 8: // DELIVERY_FLAG
          return DELIVERY_FLAG;
        case 9: // IS_VIP_ORDER
          return IS_VIP_ORDER;
        case 10: // VIP_DISCOUNT
          return VIP_DISCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPRICE_ISSET_ID = 0;
  private static final int __ISENABLECANCEL_ISSET_ID = 1;
  private static final int __ISENABLEPAY_ISSET_ID = 2;
  private static final int __ISSECKILL_ISSET_ID = 3;
  private static final int __ISVIPORDER_ISSET_ID = 4;
  private static final int __VIPDISCOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_SUMMARY_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("productSummaryVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductSummaryVo.class))));
    tmpMap.put(_Fields.IS_ENABLE_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("isEnableCancel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isEnablePay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("isSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELIVERY_FLAG, new org.apache.thrift.meta_data.FieldMetaData("deliveryFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VIP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isVipOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VIP_DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("vipDiscount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderSummaryVo.class, metaDataMap);
  }

  public OrderSummaryVo() {
  }

  public OrderSummaryVo(
    String orderId,
    String orderStatus,
    double totalPrice,
    List<ProductSummaryVo> productSummaryVoList,
    boolean isEnableCancel,
    boolean isEnablePay,
    boolean isSeckill,
    String deliveryFlag,
    boolean isVipOrder,
    double vipDiscount)
  {
    this();
    this.orderId = orderId;
    this.orderStatus = orderStatus;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.productSummaryVoList = productSummaryVoList;
    this.isEnableCancel = isEnableCancel;
    setIsEnableCancelIsSet(true);
    this.isEnablePay = isEnablePay;
    setIsEnablePayIsSet(true);
    this.isSeckill = isSeckill;
    setIsSeckillIsSet(true);
    this.deliveryFlag = deliveryFlag;
    this.isVipOrder = isVipOrder;
    setIsVipOrderIsSet(true);
    this.vipDiscount = vipDiscount;
    setVipDiscountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderSummaryVo(OrderSummaryVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.totalPrice = other.totalPrice;
    if (other.isSetProductSummaryVoList()) {
      List<ProductSummaryVo> __this__productSummaryVoList = new ArrayList<ProductSummaryVo>(other.productSummaryVoList.size());
      for (ProductSummaryVo other_element : other.productSummaryVoList) {
        __this__productSummaryVoList.add(new ProductSummaryVo(other_element));
      }
      this.productSummaryVoList = __this__productSummaryVoList;
    }
    this.isEnableCancel = other.isEnableCancel;
    this.isEnablePay = other.isEnablePay;
    this.isSeckill = other.isSeckill;
    if (other.isSetDeliveryFlag()) {
      this.deliveryFlag = other.deliveryFlag;
    }
    this.isVipOrder = other.isVipOrder;
    this.vipDiscount = other.vipDiscount;
  }

  public OrderSummaryVo deepCopy() {
    return new OrderSummaryVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.orderStatus = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    this.productSummaryVoList = null;
    setIsEnableCancelIsSet(false);
    this.isEnableCancel = false;
    setIsEnablePayIsSet(false);
    this.isEnablePay = false;
    setIsSeckillIsSet(false);
    this.isSeckill = false;
    this.deliveryFlag = null;
    setIsVipOrderIsSet(false);
    this.isVipOrder = false;
    setVipDiscountIsSet(false);
    this.vipDiscount = 0.0;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public OrderSummaryVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public OrderSummaryVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单实际总货币值
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 订单实际总货币值
   */
  public OrderSummaryVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  public int getProductSummaryVoListSize() {
    return (this.productSummaryVoList == null) ? 0 : this.productSummaryVoList.size();
  }

  public java.util.Iterator<ProductSummaryVo> getProductSummaryVoListIterator() {
    return (this.productSummaryVoList == null) ? null : this.productSummaryVoList.iterator();
  }

  public void addToProductSummaryVoList(ProductSummaryVo elem) {
    if (this.productSummaryVoList == null) {
      this.productSummaryVoList = new ArrayList<ProductSummaryVo>();
    }
    this.productSummaryVoList.add(elem);
  }

  /**
   * 商品概要信息
   */
  public List<ProductSummaryVo> getProductSummaryVoList() {
    return this.productSummaryVoList;
  }

  /**
   * 商品概要信息
   */
  public OrderSummaryVo setProductSummaryVoList(List<ProductSummaryVo> productSummaryVoList) {
    this.productSummaryVoList = productSummaryVoList;
    return this;
  }

  public void unsetProductSummaryVoList() {
    this.productSummaryVoList = null;
  }

  /** Returns true if field productSummaryVoList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductSummaryVoList() {
    return this.productSummaryVoList != null;
  }

  public void setProductSummaryVoListIsSet(boolean value) {
    if (!value) {
      this.productSummaryVoList = null;
    }
  }

  /**
   * 是否可取消
   */
  public boolean isIsEnableCancel() {
    return this.isEnableCancel;
  }

  /**
   * 是否可取消
   */
  public OrderSummaryVo setIsEnableCancel(boolean isEnableCancel) {
    this.isEnableCancel = isEnableCancel;
    setIsEnableCancelIsSet(true);
    return this;
  }

  public void unsetIsEnableCancel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID);
  }

  /** Returns true if field isEnableCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnableCancel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID);
  }

  public void setIsEnableCancelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID, value);
  }

  /**
   * 是否可支付
   */
  public boolean isIsEnablePay() {
    return this.isEnablePay;
  }

  /**
   * 是否可支付
   */
  public OrderSummaryVo setIsEnablePay(boolean isEnablePay) {
    this.isEnablePay = isEnablePay;
    setIsEnablePayIsSet(true);
    return this;
  }

  public void unsetIsEnablePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID);
  }

  /** Returns true if field isEnablePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnablePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID);
  }

  public void setIsEnablePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID, value);
  }

  /**
   * 是否秒杀
   */
  public boolean isIsSeckill() {
    return this.isSeckill;
  }

  /**
   * 是否秒杀
   */
  public OrderSummaryVo setIsSeckill(boolean isSeckill) {
    this.isSeckill = isSeckill;
    setIsSeckillIsSet(true);
    return this;
  }

  public void unsetIsSeckill() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSECKILL_ISSET_ID);
  }

  /** Returns true if field isSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeckill() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSECKILL_ISSET_ID);
  }

  public void setIsSeckillIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSECKILL_ISSET_ID, value);
  }

  /**
   * 是否补全配送信息:
   * 0：秒杀成功+已填信息
   * 1：秒杀成功+自提
   * 2：秒杀成功+配送
   * 3：秒杀成功+自提、配送
   */
  public String getDeliveryFlag() {
    return this.deliveryFlag;
  }

  /**
   * 是否补全配送信息:
   * 0：秒杀成功+已填信息
   * 1：秒杀成功+自提
   * 2：秒杀成功+配送
   * 3：秒杀成功+自提、配送
   */
  public OrderSummaryVo setDeliveryFlag(String deliveryFlag) {
    this.deliveryFlag = deliveryFlag;
    return this;
  }

  public void unsetDeliveryFlag() {
    this.deliveryFlag = null;
  }

  /** Returns true if field deliveryFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryFlag() {
    return this.deliveryFlag != null;
  }

  public void setDeliveryFlagIsSet(boolean value) {
    if (!value) {
      this.deliveryFlag = null;
    }
  }

  /**
   * 是否VIP订单
   */
  public boolean isIsVipOrder() {
    return this.isVipOrder;
  }

  /**
   * 是否VIP订单
   */
  public OrderSummaryVo setIsVipOrder(boolean isVipOrder) {
    this.isVipOrder = isVipOrder;
    setIsVipOrderIsSet(true);
    return this;
  }

  public void unsetIsVipOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVIPORDER_ISSET_ID);
  }

  /** Returns true if field isVipOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVipOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVIPORDER_ISSET_ID);
  }

  public void setIsVipOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVIPORDER_ISSET_ID, value);
  }

  /**
   * VIP优惠金额
   */
  public double getVipDiscount() {
    return this.vipDiscount;
  }

  /**
   * VIP优惠金额
   */
  public OrderSummaryVo setVipDiscount(double vipDiscount) {
    this.vipDiscount = vipDiscount;
    setVipDiscountIsSet(true);
    return this;
  }

  public void unsetVipDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPDISCOUNT_ISSET_ID);
  }

  /** Returns true if field vipDiscount is set (has been assigned a value) and false otherwise */
  public boolean isSetVipDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPDISCOUNT_ISSET_ID);
  }

  public void setVipDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPDISCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case PRODUCT_SUMMARY_VO_LIST:
      if (value == null) {
        unsetProductSummaryVoList();
      } else {
        setProductSummaryVoList((List<ProductSummaryVo>)value);
      }
      break;

    case IS_ENABLE_CANCEL:
      if (value == null) {
        unsetIsEnableCancel();
      } else {
        setIsEnableCancel((Boolean)value);
      }
      break;

    case IS_ENABLE_PAY:
      if (value == null) {
        unsetIsEnablePay();
      } else {
        setIsEnablePay((Boolean)value);
      }
      break;

    case IS_SECKILL:
      if (value == null) {
        unsetIsSeckill();
      } else {
        setIsSeckill((Boolean)value);
      }
      break;

    case DELIVERY_FLAG:
      if (value == null) {
        unsetDeliveryFlag();
      } else {
        setDeliveryFlag((String)value);
      }
      break;

    case IS_VIP_ORDER:
      if (value == null) {
        unsetIsVipOrder();
      } else {
        setIsVipOrder((Boolean)value);
      }
      break;

    case VIP_DISCOUNT:
      if (value == null) {
        unsetVipDiscount();
      } else {
        setVipDiscount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case ORDER_STATUS:
      return getOrderStatus();

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case PRODUCT_SUMMARY_VO_LIST:
      return getProductSummaryVoList();

    case IS_ENABLE_CANCEL:
      return Boolean.valueOf(isIsEnableCancel());

    case IS_ENABLE_PAY:
      return Boolean.valueOf(isIsEnablePay());

    case IS_SECKILL:
      return Boolean.valueOf(isIsSeckill());

    case DELIVERY_FLAG:
      return getDeliveryFlag();

    case IS_VIP_ORDER:
      return Boolean.valueOf(isIsVipOrder());

    case VIP_DISCOUNT:
      return Double.valueOf(getVipDiscount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case PRODUCT_SUMMARY_VO_LIST:
      return isSetProductSummaryVoList();
    case IS_ENABLE_CANCEL:
      return isSetIsEnableCancel();
    case IS_ENABLE_PAY:
      return isSetIsEnablePay();
    case IS_SECKILL:
      return isSetIsSeckill();
    case DELIVERY_FLAG:
      return isSetDeliveryFlag();
    case IS_VIP_ORDER:
      return isSetIsVipOrder();
    case VIP_DISCOUNT:
      return isSetVipDiscount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderSummaryVo)
      return this.equals((OrderSummaryVo)that);
    return false;
  }

  public boolean equals(OrderSummaryVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_productSummaryVoList = true && this.isSetProductSummaryVoList();
    boolean that_present_productSummaryVoList = true && that.isSetProductSummaryVoList();
    if (this_present_productSummaryVoList || that_present_productSummaryVoList) {
      if (!(this_present_productSummaryVoList && that_present_productSummaryVoList))
        return false;
      if (!this.productSummaryVoList.equals(that.productSummaryVoList))
        return false;
    }

    boolean this_present_isEnableCancel = true;
    boolean that_present_isEnableCancel = true;
    if (this_present_isEnableCancel || that_present_isEnableCancel) {
      if (!(this_present_isEnableCancel && that_present_isEnableCancel))
        return false;
      if (this.isEnableCancel != that.isEnableCancel)
        return false;
    }

    boolean this_present_isEnablePay = true;
    boolean that_present_isEnablePay = true;
    if (this_present_isEnablePay || that_present_isEnablePay) {
      if (!(this_present_isEnablePay && that_present_isEnablePay))
        return false;
      if (this.isEnablePay != that.isEnablePay)
        return false;
    }

    boolean this_present_isSeckill = true;
    boolean that_present_isSeckill = true;
    if (this_present_isSeckill || that_present_isSeckill) {
      if (!(this_present_isSeckill && that_present_isSeckill))
        return false;
      if (this.isSeckill != that.isSeckill)
        return false;
    }

    boolean this_present_deliveryFlag = true && this.isSetDeliveryFlag();
    boolean that_present_deliveryFlag = true && that.isSetDeliveryFlag();
    if (this_present_deliveryFlag || that_present_deliveryFlag) {
      if (!(this_present_deliveryFlag && that_present_deliveryFlag))
        return false;
      if (!this.deliveryFlag.equals(that.deliveryFlag))
        return false;
    }

    boolean this_present_isVipOrder = true;
    boolean that_present_isVipOrder = true;
    if (this_present_isVipOrder || that_present_isVipOrder) {
      if (!(this_present_isVipOrder && that_present_isVipOrder))
        return false;
      if (this.isVipOrder != that.isVipOrder)
        return false;
    }

    boolean this_present_vipDiscount = true;
    boolean that_present_vipDiscount = true;
    if (this_present_vipDiscount || that_present_vipDiscount) {
      if (!(this_present_vipDiscount && that_present_vipDiscount))
        return false;
      if (this.vipDiscount != that.vipDiscount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_productSummaryVoList = true && (isSetProductSummaryVoList());
    list.add(present_productSummaryVoList);
    if (present_productSummaryVoList)
      list.add(productSummaryVoList);

    boolean present_isEnableCancel = true;
    list.add(present_isEnableCancel);
    if (present_isEnableCancel)
      list.add(isEnableCancel);

    boolean present_isEnablePay = true;
    list.add(present_isEnablePay);
    if (present_isEnablePay)
      list.add(isEnablePay);

    boolean present_isSeckill = true;
    list.add(present_isSeckill);
    if (present_isSeckill)
      list.add(isSeckill);

    boolean present_deliveryFlag = true && (isSetDeliveryFlag());
    list.add(present_deliveryFlag);
    if (present_deliveryFlag)
      list.add(deliveryFlag);

    boolean present_isVipOrder = true;
    list.add(present_isVipOrder);
    if (present_isVipOrder)
      list.add(isVipOrder);

    boolean present_vipDiscount = true;
    list.add(present_vipDiscount);
    if (present_vipDiscount)
      list.add(vipDiscount);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderSummaryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSummaryVoList()).compareTo(other.isSetProductSummaryVoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSummaryVoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSummaryVoList, other.productSummaryVoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnableCancel()).compareTo(other.isSetIsEnableCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnableCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnableCancel, other.isEnableCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnablePay()).compareTo(other.isSetIsEnablePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnablePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnablePay, other.isEnablePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeckill()).compareTo(other.isSetIsSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeckill, other.isSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryFlag()).compareTo(other.isSetDeliveryFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryFlag, other.deliveryFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVipOrder()).compareTo(other.isSetIsVipOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVipOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVipOrder, other.isVipOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipDiscount()).compareTo(other.isSetVipDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipDiscount, other.vipDiscount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderSummaryVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productSummaryVoList:");
    if (this.productSummaryVoList == null) {
      sb.append("null");
    } else {
      sb.append(this.productSummaryVoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnableCancel:");
    sb.append(this.isEnableCancel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnablePay:");
    sb.append(this.isEnablePay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeckill:");
    sb.append(this.isSeckill);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryFlag:");
    if (this.deliveryFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVipOrder:");
    sb.append(this.isVipOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipDiscount:");
    sb.append(this.vipDiscount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderSummaryVoStandardSchemeFactory implements SchemeFactory {
    public OrderSummaryVoStandardScheme getScheme() {
      return new OrderSummaryVoStandardScheme();
    }
  }

  private static class OrderSummaryVoStandardScheme extends StandardScheme<OrderSummaryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderSummaryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_SUMMARY_VO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.productSummaryVoList = new ArrayList<ProductSummaryVo>(_list8.size);
                ProductSummaryVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ProductSummaryVo();
                  _elem9.read(iprot);
                  struct.productSummaryVoList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setProductSummaryVoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ENABLE_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnableCancel = iprot.readBool();
              struct.setIsEnableCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_ENABLE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnablePay = iprot.readBool();
              struct.setIsEnablePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSeckill = iprot.readBool();
              struct.setIsSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVERY_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryFlag = iprot.readString();
              struct.setDeliveryFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_VIP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isVipOrder = iprot.readBool();
              struct.setIsVipOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIP_DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipDiscount = iprot.readDouble();
              struct.setVipDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderSummaryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      if (struct.productSummaryVoList != null) {
        oprot.writeFieldBegin(PRODUCT_SUMMARY_VO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productSummaryVoList.size()));
          for (ProductSummaryVo _iter11 : struct.productSummaryVoList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ENABLE_CANCEL_FIELD_DESC);
      oprot.writeBool(struct.isEnableCancel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLE_PAY_FIELD_DESC);
      oprot.writeBool(struct.isEnablePay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SECKILL_FIELD_DESC);
      oprot.writeBool(struct.isSeckill);
      oprot.writeFieldEnd();
      if (struct.deliveryFlag != null) {
        oprot.writeFieldBegin(DELIVERY_FLAG_FIELD_DESC);
        oprot.writeString(struct.deliveryFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_VIP_ORDER_FIELD_DESC);
      oprot.writeBool(struct.isVipOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.vipDiscount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderSummaryVoTupleSchemeFactory implements SchemeFactory {
    public OrderSummaryVoTupleScheme getScheme() {
      return new OrderSummaryVoTupleScheme();
    }
  }

  private static class OrderSummaryVoTupleScheme extends TupleScheme<OrderSummaryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderSummaryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(1);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(2);
      }
      if (struct.isSetProductSummaryVoList()) {
        optionals.set(3);
      }
      if (struct.isSetIsEnableCancel()) {
        optionals.set(4);
      }
      if (struct.isSetIsEnablePay()) {
        optionals.set(5);
      }
      if (struct.isSetIsSeckill()) {
        optionals.set(6);
      }
      if (struct.isSetDeliveryFlag()) {
        optionals.set(7);
      }
      if (struct.isSetIsVipOrder()) {
        optionals.set(8);
      }
      if (struct.isSetVipDiscount()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetProductSummaryVoList()) {
        {
          oprot.writeI32(struct.productSummaryVoList.size());
          for (ProductSummaryVo _iter12 : struct.productSummaryVoList)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetIsEnableCancel()) {
        oprot.writeBool(struct.isEnableCancel);
      }
      if (struct.isSetIsEnablePay()) {
        oprot.writeBool(struct.isEnablePay);
      }
      if (struct.isSetIsSeckill()) {
        oprot.writeBool(struct.isSeckill);
      }
      if (struct.isSetDeliveryFlag()) {
        oprot.writeString(struct.deliveryFlag);
      }
      if (struct.isSetIsVipOrder()) {
        oprot.writeBool(struct.isVipOrder);
      }
      if (struct.isSetVipDiscount()) {
        oprot.writeDouble(struct.vipDiscount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderSummaryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productSummaryVoList = new ArrayList<ProductSummaryVo>(_list13.size);
          ProductSummaryVo _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new ProductSummaryVo();
            _elem14.read(iprot);
            struct.productSummaryVoList.add(_elem14);
          }
        }
        struct.setProductSummaryVoListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isEnableCancel = iprot.readBool();
        struct.setIsEnableCancelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isEnablePay = iprot.readBool();
        struct.setIsEnablePayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isSeckill = iprot.readBool();
        struct.setIsSeckillIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deliveryFlag = iprot.readString();
        struct.setDeliveryFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isVipOrder = iprot.readBool();
        struct.setIsVipOrderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.vipDiscount = iprot.readDouble();
        struct.setVipDiscountIsSet(true);
      }
    }
  }

}

