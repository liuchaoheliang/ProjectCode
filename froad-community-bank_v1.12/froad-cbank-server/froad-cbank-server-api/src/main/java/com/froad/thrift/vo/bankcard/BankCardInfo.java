/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.bankcard;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行卡信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankCardInfo implements org.apache.thrift.TBase<BankCardInfo, BankCardInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BankCardInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BankCardInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CARD_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cardHostName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AGREEMENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("agreementNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IDENTIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("identifyType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IDENTIFY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifyNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BANK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAddress", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VALID_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("validStatus", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("isDefault", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeStr", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTimeStr", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginID", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ORDER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLimit", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DAY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLimit", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MONTH_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLimit", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ALIPAY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayAccount", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField POINT_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pointCardNo", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BankCardInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BankCardInfoTupleSchemeFactory());
  }

  public long id; // required
  /**
   * 会员号
   */
  public long memberCode; // required
  /**
   * 银行组号
   */
  public String bankGroupId; // required
  /**
   * 开户行名称
   */
  public String bankName; // required
  /**
   * 开户名
   */
  public String cardHostName; // required
  /**
   * 卡号
   */
  public String cardNo; // required
  /**
   * 银行卡种类 1:借记卡，2：贷计卡,3:书香卡
   */
  public String cardType; // required
  /**
   * 预留手机号
   */
  public String mobile; // required
  /**
   * 协议号
   */
  public String agreementNo; // required
  /**
   * 证件类型
   */
  public String identifyType; // required
  /**
   * 身份证号
   */
  public String identifyNo; // required
  /**
   * 开户行地址
   */
  public String bankAddress; // required
  /**
   * 是否签约0：未签约 或认证，1已签约或认证,2已删除
   */
  public int validStatus; // required
  /**
   * 是否默认账户
   */
  public boolean isDefault; // required
  /**
   * 创建时间
   */
  public String createTimeStr; // required
  /**
   * 修改时间
   */
  public String updateTimeStr; // required
  /**
   * 登录名
   */
  public String loginID; // required
  /**
   * 类别
   */
  public String type; // required
  /**
   * 单笔限额
   */
  public String orderLimit; // required
  /**
   * 日限额
   */
  public String dayLimit; // required
  /**
   * 月限额
   */
  public String monthLimit; // required
  /**
   * 支付宝账户
   */
  public String alipayAccount; // required
  /**
   * 积分卡号
   */
  public String pointCardNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 银行组号
     */
    BANK_GROUP_ID((short)3, "bankGroupId"),
    /**
     * 开户行名称
     */
    BANK_NAME((short)4, "bankName"),
    /**
     * 开户名
     */
    CARD_HOST_NAME((short)5, "cardHostName"),
    /**
     * 卡号
     */
    CARD_NO((short)6, "cardNo"),
    /**
     * 银行卡种类 1:借记卡，2：贷计卡,3:书香卡
     */
    CARD_TYPE((short)7, "cardType"),
    /**
     * 预留手机号
     */
    MOBILE((short)8, "mobile"),
    /**
     * 协议号
     */
    AGREEMENT_NO((short)9, "agreementNo"),
    /**
     * 证件类型
     */
    IDENTIFY_TYPE((short)10, "identifyType"),
    /**
     * 身份证号
     */
    IDENTIFY_NO((short)11, "identifyNo"),
    /**
     * 开户行地址
     */
    BANK_ADDRESS((short)12, "bankAddress"),
    /**
     * 是否签约0：未签约 或认证，1已签约或认证,2已删除
     */
    VALID_STATUS((short)13, "validStatus"),
    /**
     * 是否默认账户
     */
    IS_DEFAULT((short)14, "isDefault"),
    /**
     * 创建时间
     */
    CREATE_TIME_STR((short)15, "createTimeStr"),
    /**
     * 修改时间
     */
    UPDATE_TIME_STR((short)16, "updateTimeStr"),
    /**
     * 登录名
     */
    LOGIN_ID((short)17, "loginID"),
    /**
     * 类别
     */
    TYPE((short)18, "type"),
    /**
     * 单笔限额
     */
    ORDER_LIMIT((short)19, "orderLimit"),
    /**
     * 日限额
     */
    DAY_LIMIT((short)20, "dayLimit"),
    /**
     * 月限额
     */
    MONTH_LIMIT((short)21, "monthLimit"),
    /**
     * 支付宝账户
     */
    ALIPAY_ACCOUNT((short)22, "alipayAccount"),
    /**
     * 积分卡号
     */
    POINT_CARD_NO((short)23, "pointCardNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // BANK_GROUP_ID
          return BANK_GROUP_ID;
        case 4: // BANK_NAME
          return BANK_NAME;
        case 5: // CARD_HOST_NAME
          return CARD_HOST_NAME;
        case 6: // CARD_NO
          return CARD_NO;
        case 7: // CARD_TYPE
          return CARD_TYPE;
        case 8: // MOBILE
          return MOBILE;
        case 9: // AGREEMENT_NO
          return AGREEMENT_NO;
        case 10: // IDENTIFY_TYPE
          return IDENTIFY_TYPE;
        case 11: // IDENTIFY_NO
          return IDENTIFY_NO;
        case 12: // BANK_ADDRESS
          return BANK_ADDRESS;
        case 13: // VALID_STATUS
          return VALID_STATUS;
        case 14: // IS_DEFAULT
          return IS_DEFAULT;
        case 15: // CREATE_TIME_STR
          return CREATE_TIME_STR;
        case 16: // UPDATE_TIME_STR
          return UPDATE_TIME_STR;
        case 17: // LOGIN_ID
          return LOGIN_ID;
        case 18: // TYPE
          return TYPE;
        case 19: // ORDER_LIMIT
          return ORDER_LIMIT;
        case 20: // DAY_LIMIT
          return DAY_LIMIT;
        case 21: // MONTH_LIMIT
          return MONTH_LIMIT;
        case 22: // ALIPAY_ACCOUNT
          return ALIPAY_ACCOUNT;
        case 23: // POINT_CARD_NO
          return POINT_CARD_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MEMBERCODE_ISSET_ID = 1;
  private static final int __VALIDSTATUS_ISSET_ID = 2;
  private static final int __ISDEFAULT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BANK_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("bankGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("cardHostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGREEMENT_NO, new org.apache.thrift.meta_data.FieldMetaData("agreementNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("identifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFY_NO, new org.apache.thrift.meta_data.FieldMetaData("identifyNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("bankAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_STATUS, new org.apache.thrift.meta_data.FieldMetaData("validStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("isDefault", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATE_TIME_STR, new org.apache.thrift.meta_data.FieldMetaData("createTimeStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME_STR, new org.apache.thrift.meta_data.FieldMetaData("updateTimeStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("orderLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("dayLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("monthLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIPAY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("alipayAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("pointCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BankCardInfo.class, metaDataMap);
  }

  public BankCardInfo() {
  }

  public BankCardInfo(
    long id,
    long memberCode,
    String bankGroupId,
    String bankName,
    String cardHostName,
    String cardNo,
    String cardType,
    String mobile,
    String agreementNo,
    String identifyType,
    String identifyNo,
    String bankAddress,
    int validStatus,
    boolean isDefault,
    String createTimeStr,
    String updateTimeStr,
    String loginID,
    String type,
    String orderLimit,
    String dayLimit,
    String monthLimit,
    String alipayAccount,
    String pointCardNo)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.bankGroupId = bankGroupId;
    this.bankName = bankName;
    this.cardHostName = cardHostName;
    this.cardNo = cardNo;
    this.cardType = cardType;
    this.mobile = mobile;
    this.agreementNo = agreementNo;
    this.identifyType = identifyType;
    this.identifyNo = identifyNo;
    this.bankAddress = bankAddress;
    this.validStatus = validStatus;
    setValidStatusIsSet(true);
    this.isDefault = isDefault;
    setIsDefaultIsSet(true);
    this.createTimeStr = createTimeStr;
    this.updateTimeStr = updateTimeStr;
    this.loginID = loginID;
    this.type = type;
    this.orderLimit = orderLimit;
    this.dayLimit = dayLimit;
    this.monthLimit = monthLimit;
    this.alipayAccount = alipayAccount;
    this.pointCardNo = pointCardNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BankCardInfo(BankCardInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.memberCode = other.memberCode;
    if (other.isSetBankGroupId()) {
      this.bankGroupId = other.bankGroupId;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetCardHostName()) {
      this.cardHostName = other.cardHostName;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetAgreementNo()) {
      this.agreementNo = other.agreementNo;
    }
    if (other.isSetIdentifyType()) {
      this.identifyType = other.identifyType;
    }
    if (other.isSetIdentifyNo()) {
      this.identifyNo = other.identifyNo;
    }
    if (other.isSetBankAddress()) {
      this.bankAddress = other.bankAddress;
    }
    this.validStatus = other.validStatus;
    this.isDefault = other.isDefault;
    if (other.isSetCreateTimeStr()) {
      this.createTimeStr = other.createTimeStr;
    }
    if (other.isSetUpdateTimeStr()) {
      this.updateTimeStr = other.updateTimeStr;
    }
    if (other.isSetLoginID()) {
      this.loginID = other.loginID;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOrderLimit()) {
      this.orderLimit = other.orderLimit;
    }
    if (other.isSetDayLimit()) {
      this.dayLimit = other.dayLimit;
    }
    if (other.isSetMonthLimit()) {
      this.monthLimit = other.monthLimit;
    }
    if (other.isSetAlipayAccount()) {
      this.alipayAccount = other.alipayAccount;
    }
    if (other.isSetPointCardNo()) {
      this.pointCardNo = other.pointCardNo;
    }
  }

  public BankCardInfo deepCopy() {
    return new BankCardInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.bankGroupId = null;
    this.bankName = null;
    this.cardHostName = null;
    this.cardNo = null;
    this.cardType = null;
    this.mobile = null;
    this.agreementNo = null;
    this.identifyType = null;
    this.identifyNo = null;
    this.bankAddress = null;
    setValidStatusIsSet(false);
    this.validStatus = 0;
    setIsDefaultIsSet(false);
    this.isDefault = false;
    this.createTimeStr = null;
    this.updateTimeStr = null;
    this.loginID = null;
    this.type = null;
    this.orderLimit = null;
    this.dayLimit = null;
    this.monthLimit = null;
    this.alipayAccount = null;
    this.pointCardNo = null;
  }

  public long getId() {
    return this.id;
  }

  public BankCardInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 会员号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public BankCardInfo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 银行组号
   */
  public String getBankGroupId() {
    return this.bankGroupId;
  }

  /**
   * 银行组号
   */
  public BankCardInfo setBankGroupId(String bankGroupId) {
    this.bankGroupId = bankGroupId;
    return this;
  }

  public void unsetBankGroupId() {
    this.bankGroupId = null;
  }

  /** Returns true if field bankGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankGroupId() {
    return this.bankGroupId != null;
  }

  public void setBankGroupIdIsSet(boolean value) {
    if (!value) {
      this.bankGroupId = null;
    }
  }

  /**
   * 开户行名称
   */
  public String getBankName() {
    return this.bankName;
  }

  /**
   * 开户行名称
   */
  public BankCardInfo setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  /**
   * 开户名
   */
  public String getCardHostName() {
    return this.cardHostName;
  }

  /**
   * 开户名
   */
  public BankCardInfo setCardHostName(String cardHostName) {
    this.cardHostName = cardHostName;
    return this;
  }

  public void unsetCardHostName() {
    this.cardHostName = null;
  }

  /** Returns true if field cardHostName is set (has been assigned a value) and false otherwise */
  public boolean isSetCardHostName() {
    return this.cardHostName != null;
  }

  public void setCardHostNameIsSet(boolean value) {
    if (!value) {
      this.cardHostName = null;
    }
  }

  /**
   * 卡号
   */
  public String getCardNo() {
    return this.cardNo;
  }

  /**
   * 卡号
   */
  public BankCardInfo setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  /**
   * 银行卡种类 1:借记卡，2：贷计卡,3:书香卡
   */
  public String getCardType() {
    return this.cardType;
  }

  /**
   * 银行卡种类 1:借记卡，2：贷计卡,3:书香卡
   */
  public BankCardInfo setCardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  /**
   * 预留手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 预留手机号
   */
  public BankCardInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 协议号
   */
  public String getAgreementNo() {
    return this.agreementNo;
  }

  /**
   * 协议号
   */
  public BankCardInfo setAgreementNo(String agreementNo) {
    this.agreementNo = agreementNo;
    return this;
  }

  public void unsetAgreementNo() {
    this.agreementNo = null;
  }

  /** Returns true if field agreementNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAgreementNo() {
    return this.agreementNo != null;
  }

  public void setAgreementNoIsSet(boolean value) {
    if (!value) {
      this.agreementNo = null;
    }
  }

  /**
   * 证件类型
   */
  public String getIdentifyType() {
    return this.identifyType;
  }

  /**
   * 证件类型
   */
  public BankCardInfo setIdentifyType(String identifyType) {
    this.identifyType = identifyType;
    return this;
  }

  public void unsetIdentifyType() {
    this.identifyType = null;
  }

  /** Returns true if field identifyType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifyType() {
    return this.identifyType != null;
  }

  public void setIdentifyTypeIsSet(boolean value) {
    if (!value) {
      this.identifyType = null;
    }
  }

  /**
   * 身份证号
   */
  public String getIdentifyNo() {
    return this.identifyNo;
  }

  /**
   * 身份证号
   */
  public BankCardInfo setIdentifyNo(String identifyNo) {
    this.identifyNo = identifyNo;
    return this;
  }

  public void unsetIdentifyNo() {
    this.identifyNo = null;
  }

  /** Returns true if field identifyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifyNo() {
    return this.identifyNo != null;
  }

  public void setIdentifyNoIsSet(boolean value) {
    if (!value) {
      this.identifyNo = null;
    }
  }

  /**
   * 开户行地址
   */
  public String getBankAddress() {
    return this.bankAddress;
  }

  /**
   * 开户行地址
   */
  public BankCardInfo setBankAddress(String bankAddress) {
    this.bankAddress = bankAddress;
    return this;
  }

  public void unsetBankAddress() {
    this.bankAddress = null;
  }

  /** Returns true if field bankAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAddress() {
    return this.bankAddress != null;
  }

  public void setBankAddressIsSet(boolean value) {
    if (!value) {
      this.bankAddress = null;
    }
  }

  /**
   * 是否签约0：未签约 或认证，1已签约或认证,2已删除
   */
  public int getValidStatus() {
    return this.validStatus;
  }

  /**
   * 是否签约0：未签约 或认证，1已签约或认证,2已删除
   */
  public BankCardInfo setValidStatus(int validStatus) {
    this.validStatus = validStatus;
    setValidStatusIsSet(true);
    return this;
  }

  public void unsetValidStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDSTATUS_ISSET_ID);
  }

  /** Returns true if field validStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetValidStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDSTATUS_ISSET_ID);
  }

  public void setValidStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDSTATUS_ISSET_ID, value);
  }

  /**
   * 是否默认账户
   */
  public boolean isIsDefault() {
    return this.isDefault;
  }

  /**
   * 是否默认账户
   */
  public BankCardInfo setIsDefault(boolean isDefault) {
    this.isDefault = isDefault;
    setIsDefaultIsSet(true);
    return this;
  }

  public void unsetIsDefault() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDEFAULT_ISSET_ID);
  }

  /** Returns true if field isDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDefault() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDEFAULT_ISSET_ID);
  }

  public void setIsDefaultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDEFAULT_ISSET_ID, value);
  }

  /**
   * 创建时间
   */
  public String getCreateTimeStr() {
    return this.createTimeStr;
  }

  /**
   * 创建时间
   */
  public BankCardInfo setCreateTimeStr(String createTimeStr) {
    this.createTimeStr = createTimeStr;
    return this;
  }

  public void unsetCreateTimeStr() {
    this.createTimeStr = null;
  }

  /** Returns true if field createTimeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeStr() {
    return this.createTimeStr != null;
  }

  public void setCreateTimeStrIsSet(boolean value) {
    if (!value) {
      this.createTimeStr = null;
    }
  }

  /**
   * 修改时间
   */
  public String getUpdateTimeStr() {
    return this.updateTimeStr;
  }

  /**
   * 修改时间
   */
  public BankCardInfo setUpdateTimeStr(String updateTimeStr) {
    this.updateTimeStr = updateTimeStr;
    return this;
  }

  public void unsetUpdateTimeStr() {
    this.updateTimeStr = null;
  }

  /** Returns true if field updateTimeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTimeStr() {
    return this.updateTimeStr != null;
  }

  public void setUpdateTimeStrIsSet(boolean value) {
    if (!value) {
      this.updateTimeStr = null;
    }
  }

  /**
   * 登录名
   */
  public String getLoginID() {
    return this.loginID;
  }

  /**
   * 登录名
   */
  public BankCardInfo setLoginID(String loginID) {
    this.loginID = loginID;
    return this;
  }

  public void unsetLoginID() {
    this.loginID = null;
  }

  /** Returns true if field loginID is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginID() {
    return this.loginID != null;
  }

  public void setLoginIDIsSet(boolean value) {
    if (!value) {
      this.loginID = null;
    }
  }

  /**
   * 类别
   */
  public String getType() {
    return this.type;
  }

  /**
   * 类别
   */
  public BankCardInfo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 单笔限额
   */
  public String getOrderLimit() {
    return this.orderLimit;
  }

  /**
   * 单笔限额
   */
  public BankCardInfo setOrderLimit(String orderLimit) {
    this.orderLimit = orderLimit;
    return this;
  }

  public void unsetOrderLimit() {
    this.orderLimit = null;
  }

  /** Returns true if field orderLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLimit() {
    return this.orderLimit != null;
  }

  public void setOrderLimitIsSet(boolean value) {
    if (!value) {
      this.orderLimit = null;
    }
  }

  /**
   * 日限额
   */
  public String getDayLimit() {
    return this.dayLimit;
  }

  /**
   * 日限额
   */
  public BankCardInfo setDayLimit(String dayLimit) {
    this.dayLimit = dayLimit;
    return this;
  }

  public void unsetDayLimit() {
    this.dayLimit = null;
  }

  /** Returns true if field dayLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLimit() {
    return this.dayLimit != null;
  }

  public void setDayLimitIsSet(boolean value) {
    if (!value) {
      this.dayLimit = null;
    }
  }

  /**
   * 月限额
   */
  public String getMonthLimit() {
    return this.monthLimit;
  }

  /**
   * 月限额
   */
  public BankCardInfo setMonthLimit(String monthLimit) {
    this.monthLimit = monthLimit;
    return this;
  }

  public void unsetMonthLimit() {
    this.monthLimit = null;
  }

  /** Returns true if field monthLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLimit() {
    return this.monthLimit != null;
  }

  public void setMonthLimitIsSet(boolean value) {
    if (!value) {
      this.monthLimit = null;
    }
  }

  /**
   * 支付宝账户
   */
  public String getAlipayAccount() {
    return this.alipayAccount;
  }

  /**
   * 支付宝账户
   */
  public BankCardInfo setAlipayAccount(String alipayAccount) {
    this.alipayAccount = alipayAccount;
    return this;
  }

  public void unsetAlipayAccount() {
    this.alipayAccount = null;
  }

  /** Returns true if field alipayAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayAccount() {
    return this.alipayAccount != null;
  }

  public void setAlipayAccountIsSet(boolean value) {
    if (!value) {
      this.alipayAccount = null;
    }
  }

  /**
   * 积分卡号
   */
  public String getPointCardNo() {
    return this.pointCardNo;
  }

  /**
   * 积分卡号
   */
  public BankCardInfo setPointCardNo(String pointCardNo) {
    this.pointCardNo = pointCardNo;
    return this;
  }

  public void unsetPointCardNo() {
    this.pointCardNo = null;
  }

  /** Returns true if field pointCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPointCardNo() {
    return this.pointCardNo != null;
  }

  public void setPointCardNoIsSet(boolean value) {
    if (!value) {
      this.pointCardNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case BANK_GROUP_ID:
      if (value == null) {
        unsetBankGroupId();
      } else {
        setBankGroupId((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case CARD_HOST_NAME:
      if (value == null) {
        unsetCardHostName();
      } else {
        setCardHostName((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case AGREEMENT_NO:
      if (value == null) {
        unsetAgreementNo();
      } else {
        setAgreementNo((String)value);
      }
      break;

    case IDENTIFY_TYPE:
      if (value == null) {
        unsetIdentifyType();
      } else {
        setIdentifyType((String)value);
      }
      break;

    case IDENTIFY_NO:
      if (value == null) {
        unsetIdentifyNo();
      } else {
        setIdentifyNo((String)value);
      }
      break;

    case BANK_ADDRESS:
      if (value == null) {
        unsetBankAddress();
      } else {
        setBankAddress((String)value);
      }
      break;

    case VALID_STATUS:
      if (value == null) {
        unsetValidStatus();
      } else {
        setValidStatus((Integer)value);
      }
      break;

    case IS_DEFAULT:
      if (value == null) {
        unsetIsDefault();
      } else {
        setIsDefault((Boolean)value);
      }
      break;

    case CREATE_TIME_STR:
      if (value == null) {
        unsetCreateTimeStr();
      } else {
        setCreateTimeStr((String)value);
      }
      break;

    case UPDATE_TIME_STR:
      if (value == null) {
        unsetUpdateTimeStr();
      } else {
        setUpdateTimeStr((String)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginID();
      } else {
        setLoginID((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ORDER_LIMIT:
      if (value == null) {
        unsetOrderLimit();
      } else {
        setOrderLimit((String)value);
      }
      break;

    case DAY_LIMIT:
      if (value == null) {
        unsetDayLimit();
      } else {
        setDayLimit((String)value);
      }
      break;

    case MONTH_LIMIT:
      if (value == null) {
        unsetMonthLimit();
      } else {
        setMonthLimit((String)value);
      }
      break;

    case ALIPAY_ACCOUNT:
      if (value == null) {
        unsetAlipayAccount();
      } else {
        setAlipayAccount((String)value);
      }
      break;

    case POINT_CARD_NO:
      if (value == null) {
        unsetPointCardNo();
      } else {
        setPointCardNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case BANK_GROUP_ID:
      return getBankGroupId();

    case BANK_NAME:
      return getBankName();

    case CARD_HOST_NAME:
      return getCardHostName();

    case CARD_NO:
      return getCardNo();

    case CARD_TYPE:
      return getCardType();

    case MOBILE:
      return getMobile();

    case AGREEMENT_NO:
      return getAgreementNo();

    case IDENTIFY_TYPE:
      return getIdentifyType();

    case IDENTIFY_NO:
      return getIdentifyNo();

    case BANK_ADDRESS:
      return getBankAddress();

    case VALID_STATUS:
      return Integer.valueOf(getValidStatus());

    case IS_DEFAULT:
      return Boolean.valueOf(isIsDefault());

    case CREATE_TIME_STR:
      return getCreateTimeStr();

    case UPDATE_TIME_STR:
      return getUpdateTimeStr();

    case LOGIN_ID:
      return getLoginID();

    case TYPE:
      return getType();

    case ORDER_LIMIT:
      return getOrderLimit();

    case DAY_LIMIT:
      return getDayLimit();

    case MONTH_LIMIT:
      return getMonthLimit();

    case ALIPAY_ACCOUNT:
      return getAlipayAccount();

    case POINT_CARD_NO:
      return getPointCardNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case BANK_GROUP_ID:
      return isSetBankGroupId();
    case BANK_NAME:
      return isSetBankName();
    case CARD_HOST_NAME:
      return isSetCardHostName();
    case CARD_NO:
      return isSetCardNo();
    case CARD_TYPE:
      return isSetCardType();
    case MOBILE:
      return isSetMobile();
    case AGREEMENT_NO:
      return isSetAgreementNo();
    case IDENTIFY_TYPE:
      return isSetIdentifyType();
    case IDENTIFY_NO:
      return isSetIdentifyNo();
    case BANK_ADDRESS:
      return isSetBankAddress();
    case VALID_STATUS:
      return isSetValidStatus();
    case IS_DEFAULT:
      return isSetIsDefault();
    case CREATE_TIME_STR:
      return isSetCreateTimeStr();
    case UPDATE_TIME_STR:
      return isSetUpdateTimeStr();
    case LOGIN_ID:
      return isSetLoginID();
    case TYPE:
      return isSetType();
    case ORDER_LIMIT:
      return isSetOrderLimit();
    case DAY_LIMIT:
      return isSetDayLimit();
    case MONTH_LIMIT:
      return isSetMonthLimit();
    case ALIPAY_ACCOUNT:
      return isSetAlipayAccount();
    case POINT_CARD_NO:
      return isSetPointCardNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BankCardInfo)
      return this.equals((BankCardInfo)that);
    return false;
  }

  public boolean equals(BankCardInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_bankGroupId = true && this.isSetBankGroupId();
    boolean that_present_bankGroupId = true && that.isSetBankGroupId();
    if (this_present_bankGroupId || that_present_bankGroupId) {
      if (!(this_present_bankGroupId && that_present_bankGroupId))
        return false;
      if (!this.bankGroupId.equals(that.bankGroupId))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_cardHostName = true && this.isSetCardHostName();
    boolean that_present_cardHostName = true && that.isSetCardHostName();
    if (this_present_cardHostName || that_present_cardHostName) {
      if (!(this_present_cardHostName && that_present_cardHostName))
        return false;
      if (!this.cardHostName.equals(that.cardHostName))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_agreementNo = true && this.isSetAgreementNo();
    boolean that_present_agreementNo = true && that.isSetAgreementNo();
    if (this_present_agreementNo || that_present_agreementNo) {
      if (!(this_present_agreementNo && that_present_agreementNo))
        return false;
      if (!this.agreementNo.equals(that.agreementNo))
        return false;
    }

    boolean this_present_identifyType = true && this.isSetIdentifyType();
    boolean that_present_identifyType = true && that.isSetIdentifyType();
    if (this_present_identifyType || that_present_identifyType) {
      if (!(this_present_identifyType && that_present_identifyType))
        return false;
      if (!this.identifyType.equals(that.identifyType))
        return false;
    }

    boolean this_present_identifyNo = true && this.isSetIdentifyNo();
    boolean that_present_identifyNo = true && that.isSetIdentifyNo();
    if (this_present_identifyNo || that_present_identifyNo) {
      if (!(this_present_identifyNo && that_present_identifyNo))
        return false;
      if (!this.identifyNo.equals(that.identifyNo))
        return false;
    }

    boolean this_present_bankAddress = true && this.isSetBankAddress();
    boolean that_present_bankAddress = true && that.isSetBankAddress();
    if (this_present_bankAddress || that_present_bankAddress) {
      if (!(this_present_bankAddress && that_present_bankAddress))
        return false;
      if (!this.bankAddress.equals(that.bankAddress))
        return false;
    }

    boolean this_present_validStatus = true;
    boolean that_present_validStatus = true;
    if (this_present_validStatus || that_present_validStatus) {
      if (!(this_present_validStatus && that_present_validStatus))
        return false;
      if (this.validStatus != that.validStatus)
        return false;
    }

    boolean this_present_isDefault = true;
    boolean that_present_isDefault = true;
    if (this_present_isDefault || that_present_isDefault) {
      if (!(this_present_isDefault && that_present_isDefault))
        return false;
      if (this.isDefault != that.isDefault)
        return false;
    }

    boolean this_present_createTimeStr = true && this.isSetCreateTimeStr();
    boolean that_present_createTimeStr = true && that.isSetCreateTimeStr();
    if (this_present_createTimeStr || that_present_createTimeStr) {
      if (!(this_present_createTimeStr && that_present_createTimeStr))
        return false;
      if (!this.createTimeStr.equals(that.createTimeStr))
        return false;
    }

    boolean this_present_updateTimeStr = true && this.isSetUpdateTimeStr();
    boolean that_present_updateTimeStr = true && that.isSetUpdateTimeStr();
    if (this_present_updateTimeStr || that_present_updateTimeStr) {
      if (!(this_present_updateTimeStr && that_present_updateTimeStr))
        return false;
      if (!this.updateTimeStr.equals(that.updateTimeStr))
        return false;
    }

    boolean this_present_loginID = true && this.isSetLoginID();
    boolean that_present_loginID = true && that.isSetLoginID();
    if (this_present_loginID || that_present_loginID) {
      if (!(this_present_loginID && that_present_loginID))
        return false;
      if (!this.loginID.equals(that.loginID))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_orderLimit = true && this.isSetOrderLimit();
    boolean that_present_orderLimit = true && that.isSetOrderLimit();
    if (this_present_orderLimit || that_present_orderLimit) {
      if (!(this_present_orderLimit && that_present_orderLimit))
        return false;
      if (!this.orderLimit.equals(that.orderLimit))
        return false;
    }

    boolean this_present_dayLimit = true && this.isSetDayLimit();
    boolean that_present_dayLimit = true && that.isSetDayLimit();
    if (this_present_dayLimit || that_present_dayLimit) {
      if (!(this_present_dayLimit && that_present_dayLimit))
        return false;
      if (!this.dayLimit.equals(that.dayLimit))
        return false;
    }

    boolean this_present_monthLimit = true && this.isSetMonthLimit();
    boolean that_present_monthLimit = true && that.isSetMonthLimit();
    if (this_present_monthLimit || that_present_monthLimit) {
      if (!(this_present_monthLimit && that_present_monthLimit))
        return false;
      if (!this.monthLimit.equals(that.monthLimit))
        return false;
    }

    boolean this_present_alipayAccount = true && this.isSetAlipayAccount();
    boolean that_present_alipayAccount = true && that.isSetAlipayAccount();
    if (this_present_alipayAccount || that_present_alipayAccount) {
      if (!(this_present_alipayAccount && that_present_alipayAccount))
        return false;
      if (!this.alipayAccount.equals(that.alipayAccount))
        return false;
    }

    boolean this_present_pointCardNo = true && this.isSetPointCardNo();
    boolean that_present_pointCardNo = true && that.isSetPointCardNo();
    if (this_present_pointCardNo || that_present_pointCardNo) {
      if (!(this_present_pointCardNo && that_present_pointCardNo))
        return false;
      if (!this.pointCardNo.equals(that.pointCardNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_bankGroupId = true && (isSetBankGroupId());
    list.add(present_bankGroupId);
    if (present_bankGroupId)
      list.add(bankGroupId);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_cardHostName = true && (isSetCardHostName());
    list.add(present_cardHostName);
    if (present_cardHostName)
      list.add(cardHostName);

    boolean present_cardNo = true && (isSetCardNo());
    list.add(present_cardNo);
    if (present_cardNo)
      list.add(cardNo);

    boolean present_cardType = true && (isSetCardType());
    list.add(present_cardType);
    if (present_cardType)
      list.add(cardType);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_agreementNo = true && (isSetAgreementNo());
    list.add(present_agreementNo);
    if (present_agreementNo)
      list.add(agreementNo);

    boolean present_identifyType = true && (isSetIdentifyType());
    list.add(present_identifyType);
    if (present_identifyType)
      list.add(identifyType);

    boolean present_identifyNo = true && (isSetIdentifyNo());
    list.add(present_identifyNo);
    if (present_identifyNo)
      list.add(identifyNo);

    boolean present_bankAddress = true && (isSetBankAddress());
    list.add(present_bankAddress);
    if (present_bankAddress)
      list.add(bankAddress);

    boolean present_validStatus = true;
    list.add(present_validStatus);
    if (present_validStatus)
      list.add(validStatus);

    boolean present_isDefault = true;
    list.add(present_isDefault);
    if (present_isDefault)
      list.add(isDefault);

    boolean present_createTimeStr = true && (isSetCreateTimeStr());
    list.add(present_createTimeStr);
    if (present_createTimeStr)
      list.add(createTimeStr);

    boolean present_updateTimeStr = true && (isSetUpdateTimeStr());
    list.add(present_updateTimeStr);
    if (present_updateTimeStr)
      list.add(updateTimeStr);

    boolean present_loginID = true && (isSetLoginID());
    list.add(present_loginID);
    if (present_loginID)
      list.add(loginID);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_orderLimit = true && (isSetOrderLimit());
    list.add(present_orderLimit);
    if (present_orderLimit)
      list.add(orderLimit);

    boolean present_dayLimit = true && (isSetDayLimit());
    list.add(present_dayLimit);
    if (present_dayLimit)
      list.add(dayLimit);

    boolean present_monthLimit = true && (isSetMonthLimit());
    list.add(present_monthLimit);
    if (present_monthLimit)
      list.add(monthLimit);

    boolean present_alipayAccount = true && (isSetAlipayAccount());
    list.add(present_alipayAccount);
    if (present_alipayAccount)
      list.add(alipayAccount);

    boolean present_pointCardNo = true && (isSetPointCardNo());
    list.add(present_pointCardNo);
    if (present_pointCardNo)
      list.add(pointCardNo);

    return list.hashCode();
  }

  @Override
  public int compareTo(BankCardInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankGroupId()).compareTo(other.isSetBankGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankGroupId, other.bankGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardHostName()).compareTo(other.isSetCardHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardHostName, other.cardHostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgreementNo()).compareTo(other.isSetAgreementNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgreementNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agreementNo, other.agreementNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifyType()).compareTo(other.isSetIdentifyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifyType, other.identifyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifyNo()).compareTo(other.isSetIdentifyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifyNo, other.identifyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAddress()).compareTo(other.isSetBankAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAddress, other.bankAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidStatus()).compareTo(other.isSetValidStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validStatus, other.validStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDefault()).compareTo(other.isSetIsDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDefault, other.isDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeStr()).compareTo(other.isSetCreateTimeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeStr, other.createTimeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTimeStr()).compareTo(other.isSetUpdateTimeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTimeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTimeStr, other.updateTimeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginID()).compareTo(other.isSetLoginID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginID, other.loginID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLimit()).compareTo(other.isSetOrderLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLimit, other.orderLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLimit()).compareTo(other.isSetDayLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLimit, other.dayLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLimit()).compareTo(other.isSetMonthLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLimit, other.monthLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayAccount()).compareTo(other.isSetAlipayAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayAccount, other.alipayAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointCardNo()).compareTo(other.isSetPointCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointCardNo, other.pointCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BankCardInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankGroupId:");
    if (this.bankGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.bankGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardHostName:");
    if (this.cardHostName == null) {
      sb.append("null");
    } else {
      sb.append(this.cardHostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agreementNo:");
    if (this.agreementNo == null) {
      sb.append("null");
    } else {
      sb.append(this.agreementNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifyType:");
    if (this.identifyType == null) {
      sb.append("null");
    } else {
      sb.append(this.identifyType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifyNo:");
    if (this.identifyNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifyNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAddress:");
    if (this.bankAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validStatus:");
    sb.append(this.validStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDefault:");
    sb.append(this.isDefault);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeStr:");
    if (this.createTimeStr == null) {
      sb.append("null");
    } else {
      sb.append(this.createTimeStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTimeStr:");
    if (this.updateTimeStr == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTimeStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginID:");
    if (this.loginID == null) {
      sb.append("null");
    } else {
      sb.append(this.loginID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderLimit:");
    if (this.orderLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.orderLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLimit:");
    if (this.dayLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.dayLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLimit:");
    if (this.monthLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.monthLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayAccount:");
    if (this.alipayAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointCardNo:");
    if (this.pointCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.pointCardNo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BankCardInfoStandardSchemeFactory implements SchemeFactory {
    public BankCardInfoStandardScheme getScheme() {
      return new BankCardInfoStandardScheme();
    }
  }

  private static class BankCardInfoStandardScheme extends StandardScheme<BankCardInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BankCardInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankGroupId = iprot.readString();
              struct.setBankGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CARD_HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardHostName = iprot.readString();
              struct.setCardHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AGREEMENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agreementNo = iprot.readString();
              struct.setAgreementNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IDENTIFY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifyType = iprot.readString();
              struct.setIdentifyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IDENTIFY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifyNo = iprot.readString();
              struct.setIdentifyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BANK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAddress = iprot.readString();
              struct.setBankAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VALID_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validStatus = iprot.readI32();
              struct.setValidStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDefault = iprot.readBool();
              struct.setIsDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTimeStr = iprot.readString();
              struct.setCreateTimeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTimeStr = iprot.readString();
              struct.setUpdateTimeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginID = iprot.readString();
              struct.setLoginIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORDER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLimit = iprot.readString();
              struct.setOrderLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DAY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dayLimit = iprot.readString();
              struct.setDayLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MONTH_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monthLimit = iprot.readString();
              struct.setMonthLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ALIPAY_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayAccount = iprot.readString();
              struct.setAlipayAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POINT_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointCardNo = iprot.readString();
              struct.setPointCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BankCardInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.bankGroupId != null) {
        oprot.writeFieldBegin(BANK_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.bankGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.cardHostName != null) {
        oprot.writeFieldBegin(CARD_HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.cardHostName);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.cardType);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.agreementNo != null) {
        oprot.writeFieldBegin(AGREEMENT_NO_FIELD_DESC);
        oprot.writeString(struct.agreementNo);
        oprot.writeFieldEnd();
      }
      if (struct.identifyType != null) {
        oprot.writeFieldBegin(IDENTIFY_TYPE_FIELD_DESC);
        oprot.writeString(struct.identifyType);
        oprot.writeFieldEnd();
      }
      if (struct.identifyNo != null) {
        oprot.writeFieldBegin(IDENTIFY_NO_FIELD_DESC);
        oprot.writeString(struct.identifyNo);
        oprot.writeFieldEnd();
      }
      if (struct.bankAddress != null) {
        oprot.writeFieldBegin(BANK_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.bankAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALID_STATUS_FIELD_DESC);
      oprot.writeI32(struct.validStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DEFAULT_FIELD_DESC);
      oprot.writeBool(struct.isDefault);
      oprot.writeFieldEnd();
      if (struct.createTimeStr != null) {
        oprot.writeFieldBegin(CREATE_TIME_STR_FIELD_DESC);
        oprot.writeString(struct.createTimeStr);
        oprot.writeFieldEnd();
      }
      if (struct.updateTimeStr != null) {
        oprot.writeFieldBegin(UPDATE_TIME_STR_FIELD_DESC);
        oprot.writeString(struct.updateTimeStr);
        oprot.writeFieldEnd();
      }
      if (struct.loginID != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginID);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.orderLimit != null) {
        oprot.writeFieldBegin(ORDER_LIMIT_FIELD_DESC);
        oprot.writeString(struct.orderLimit);
        oprot.writeFieldEnd();
      }
      if (struct.dayLimit != null) {
        oprot.writeFieldBegin(DAY_LIMIT_FIELD_DESC);
        oprot.writeString(struct.dayLimit);
        oprot.writeFieldEnd();
      }
      if (struct.monthLimit != null) {
        oprot.writeFieldBegin(MONTH_LIMIT_FIELD_DESC);
        oprot.writeString(struct.monthLimit);
        oprot.writeFieldEnd();
      }
      if (struct.alipayAccount != null) {
        oprot.writeFieldBegin(ALIPAY_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.alipayAccount);
        oprot.writeFieldEnd();
      }
      if (struct.pointCardNo != null) {
        oprot.writeFieldBegin(POINT_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.pointCardNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BankCardInfoTupleSchemeFactory implements SchemeFactory {
    public BankCardInfoTupleScheme getScheme() {
      return new BankCardInfoTupleScheme();
    }
  }

  private static class BankCardInfoTupleScheme extends TupleScheme<BankCardInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BankCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(1);
      }
      if (struct.isSetBankGroupId()) {
        optionals.set(2);
      }
      if (struct.isSetBankName()) {
        optionals.set(3);
      }
      if (struct.isSetCardHostName()) {
        optionals.set(4);
      }
      if (struct.isSetCardNo()) {
        optionals.set(5);
      }
      if (struct.isSetCardType()) {
        optionals.set(6);
      }
      if (struct.isSetMobile()) {
        optionals.set(7);
      }
      if (struct.isSetAgreementNo()) {
        optionals.set(8);
      }
      if (struct.isSetIdentifyType()) {
        optionals.set(9);
      }
      if (struct.isSetIdentifyNo()) {
        optionals.set(10);
      }
      if (struct.isSetBankAddress()) {
        optionals.set(11);
      }
      if (struct.isSetValidStatus()) {
        optionals.set(12);
      }
      if (struct.isSetIsDefault()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTimeStr()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateTimeStr()) {
        optionals.set(15);
      }
      if (struct.isSetLoginID()) {
        optionals.set(16);
      }
      if (struct.isSetType()) {
        optionals.set(17);
      }
      if (struct.isSetOrderLimit()) {
        optionals.set(18);
      }
      if (struct.isSetDayLimit()) {
        optionals.set(19);
      }
      if (struct.isSetMonthLimit()) {
        optionals.set(20);
      }
      if (struct.isSetAlipayAccount()) {
        optionals.set(21);
      }
      if (struct.isSetPointCardNo()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetBankGroupId()) {
        oprot.writeString(struct.bankGroupId);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetCardHostName()) {
        oprot.writeString(struct.cardHostName);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetCardType()) {
        oprot.writeString(struct.cardType);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetAgreementNo()) {
        oprot.writeString(struct.agreementNo);
      }
      if (struct.isSetIdentifyType()) {
        oprot.writeString(struct.identifyType);
      }
      if (struct.isSetIdentifyNo()) {
        oprot.writeString(struct.identifyNo);
      }
      if (struct.isSetBankAddress()) {
        oprot.writeString(struct.bankAddress);
      }
      if (struct.isSetValidStatus()) {
        oprot.writeI32(struct.validStatus);
      }
      if (struct.isSetIsDefault()) {
        oprot.writeBool(struct.isDefault);
      }
      if (struct.isSetCreateTimeStr()) {
        oprot.writeString(struct.createTimeStr);
      }
      if (struct.isSetUpdateTimeStr()) {
        oprot.writeString(struct.updateTimeStr);
      }
      if (struct.isSetLoginID()) {
        oprot.writeString(struct.loginID);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetOrderLimit()) {
        oprot.writeString(struct.orderLimit);
      }
      if (struct.isSetDayLimit()) {
        oprot.writeString(struct.dayLimit);
      }
      if (struct.isSetMonthLimit()) {
        oprot.writeString(struct.monthLimit);
      }
      if (struct.isSetAlipayAccount()) {
        oprot.writeString(struct.alipayAccount);
      }
      if (struct.isSetPointCardNo()) {
        oprot.writeString(struct.pointCardNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BankCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankGroupId = iprot.readString();
        struct.setBankGroupIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cardHostName = iprot.readString();
        struct.setCardHostNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cardType = iprot.readString();
        struct.setCardTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(8)) {
        struct.agreementNo = iprot.readString();
        struct.setAgreementNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.identifyType = iprot.readString();
        struct.setIdentifyTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.identifyNo = iprot.readString();
        struct.setIdentifyNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bankAddress = iprot.readString();
        struct.setBankAddressIsSet(true);
      }
      if (incoming.get(12)) {
        struct.validStatus = iprot.readI32();
        struct.setValidStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isDefault = iprot.readBool();
        struct.setIsDefaultIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTimeStr = iprot.readString();
        struct.setCreateTimeStrIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateTimeStr = iprot.readString();
        struct.setUpdateTimeStrIsSet(true);
      }
      if (incoming.get(16)) {
        struct.loginID = iprot.readString();
        struct.setLoginIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orderLimit = iprot.readString();
        struct.setOrderLimitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.dayLimit = iprot.readString();
        struct.setDayLimitIsSet(true);
      }
      if (incoming.get(20)) {
        struct.monthLimit = iprot.readString();
        struct.setMonthLimitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.alipayAccount = iprot.readString();
        struct.setAlipayAccountIsSet(true);
      }
      if (incoming.get(22)) {
        struct.pointCardNo = iprot.readString();
        struct.setPointCardNoIsSet(true);
      }
    }
  }

}

