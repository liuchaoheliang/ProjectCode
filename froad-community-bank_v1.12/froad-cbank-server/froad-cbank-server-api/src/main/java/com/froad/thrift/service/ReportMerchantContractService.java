/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportMerchantContractService {

  /**
   * 商户签约人统计
   */
  public interface Iface {

    /**
     * 签约人商户数排行榜
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.MerchantContractRankResVo merchantContractRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商户新增类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo merchantTypeAddPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 签约人新增商户数排行
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.MerchantContractRankResVo merchantContractAddRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 签约人商户统计详细列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo merchantContractDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 签约人商户统计详细列表(分页)
     * 
     * @param pageVo
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo merchantContractDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void merchantContractRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantTypeAddPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantContractAddRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantContractDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantContractDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo merchantContractRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_merchantContractRank(commonParamVo);
      return recv_merchantContractRank();
    }

    public void send_merchantContractRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      merchantContractRank_args args = new merchantContractRank_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("merchantContractRank", args);
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo recv_merchantContractRank() throws org.apache.thrift.TException
    {
      merchantContractRank_result result = new merchantContractRank_result();
      receiveBase(result, "merchantContractRank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantContractRank failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo merchantTypeAddPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_merchantTypeAddPercent(commonParamVo);
      return recv_merchantTypeAddPercent();
    }

    public void send_merchantTypeAddPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      merchantTypeAddPercent_args args = new merchantTypeAddPercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("merchantTypeAddPercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_merchantTypeAddPercent() throws org.apache.thrift.TException
    {
      merchantTypeAddPercent_result result = new merchantTypeAddPercent_result();
      receiveBase(result, "merchantTypeAddPercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantTypeAddPercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo merchantContractAddRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_merchantContractAddRank(commonParamVo);
      return recv_merchantContractAddRank();
    }

    public void send_merchantContractAddRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      merchantContractAddRank_args args = new merchantContractAddRank_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("merchantContractAddRank", args);
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo recv_merchantContractAddRank() throws org.apache.thrift.TException
    {
      merchantContractAddRank_result result = new merchantContractAddRank_result();
      receiveBase(result, "merchantContractAddRank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantContractAddRank failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo merchantContractDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_merchantContractDetailList(commonParamVo);
      return recv_merchantContractDetailList();
    }

    public void send_merchantContractDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      merchantContractDetailList_args args = new merchantContractDetailList_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("merchantContractDetailList", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo recv_merchantContractDetailList() throws org.apache.thrift.TException
    {
      merchantContractDetailList_result result = new merchantContractDetailList_result();
      receiveBase(result, "merchantContractDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantContractDetailList failed: unknown result");
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo merchantContractDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_merchantContractDetailListByPage(pageVo, commonParamVo);
      return recv_merchantContractDetailListByPage();
    }

    public void send_merchantContractDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      merchantContractDetailListByPage_args args = new merchantContractDetailListByPage_args();
      args.setPageVo(pageVo);
      args.setCommonParamVo(commonParamVo);
      sendBase("merchantContractDetailListByPage", args);
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo recv_merchantContractDetailListByPage() throws org.apache.thrift.TException
    {
      merchantContractDetailListByPage_result result = new merchantContractDetailListByPage_result();
      receiveBase(result, "merchantContractDetailListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantContractDetailListByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void merchantContractRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantContractRank_call method_call = new merchantContractRank_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantContractRank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public merchantContractRank_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantContractRank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantContractRank_args args = new merchantContractRank_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.MerchantContractRankResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantContractRank();
      }
    }

    public void merchantTypeAddPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantTypeAddPercent_call method_call = new merchantTypeAddPercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantTypeAddPercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public merchantTypeAddPercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantTypeAddPercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantTypeAddPercent_args args = new merchantTypeAddPercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantTypeAddPercent();
      }
    }

    public void merchantContractAddRank(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantContractAddRank_call method_call = new merchantContractAddRank_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantContractAddRank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public merchantContractAddRank_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantContractAddRank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantContractAddRank_args args = new merchantContractAddRank_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.MerchantContractRankResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantContractAddRank();
      }
    }

    public void merchantContractDetailList(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantContractDetailList_call method_call = new merchantContractDetailList_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantContractDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public merchantContractDetailList_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantContractDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantContractDetailList_args args = new merchantContractDetailList_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantContractDetailList();
      }
    }

    public void merchantContractDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantContractDetailListByPage_call method_call = new merchantContractDetailListByPage_call(pageVo, commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantContractDetailListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public merchantContractDetailListByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantContractDetailListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantContractDetailListByPage_args args = new merchantContractDetailListByPage_args();
        args.setPageVo(pageVo);
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantContractDetailListByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("merchantContractRank", new merchantContractRank());
      processMap.put("merchantTypeAddPercent", new merchantTypeAddPercent());
      processMap.put("merchantContractAddRank", new merchantContractAddRank());
      processMap.put("merchantContractDetailList", new merchantContractDetailList());
      processMap.put("merchantContractDetailListByPage", new merchantContractDetailListByPage());
      return processMap;
    }

    public static class merchantContractRank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantContractRank_args> {
      public merchantContractRank() {
        super("merchantContractRank");
      }

      public merchantContractRank_args getEmptyArgsInstance() {
        return new merchantContractRank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantContractRank_result getResult(I iface, merchantContractRank_args args) throws org.apache.thrift.TException {
        merchantContractRank_result result = new merchantContractRank_result();
        result.success = iface.merchantContractRank(args.commonParamVo);
        return result;
      }
    }

    public static class merchantTypeAddPercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantTypeAddPercent_args> {
      public merchantTypeAddPercent() {
        super("merchantTypeAddPercent");
      }

      public merchantTypeAddPercent_args getEmptyArgsInstance() {
        return new merchantTypeAddPercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantTypeAddPercent_result getResult(I iface, merchantTypeAddPercent_args args) throws org.apache.thrift.TException {
        merchantTypeAddPercent_result result = new merchantTypeAddPercent_result();
        result.success = iface.merchantTypeAddPercent(args.commonParamVo);
        return result;
      }
    }

    public static class merchantContractAddRank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantContractAddRank_args> {
      public merchantContractAddRank() {
        super("merchantContractAddRank");
      }

      public merchantContractAddRank_args getEmptyArgsInstance() {
        return new merchantContractAddRank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantContractAddRank_result getResult(I iface, merchantContractAddRank_args args) throws org.apache.thrift.TException {
        merchantContractAddRank_result result = new merchantContractAddRank_result();
        result.success = iface.merchantContractAddRank(args.commonParamVo);
        return result;
      }
    }

    public static class merchantContractDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantContractDetailList_args> {
      public merchantContractDetailList() {
        super("merchantContractDetailList");
      }

      public merchantContractDetailList_args getEmptyArgsInstance() {
        return new merchantContractDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantContractDetailList_result getResult(I iface, merchantContractDetailList_args args) throws org.apache.thrift.TException {
        merchantContractDetailList_result result = new merchantContractDetailList_result();
        result.success = iface.merchantContractDetailList(args.commonParamVo);
        return result;
      }
    }

    public static class merchantContractDetailListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantContractDetailListByPage_args> {
      public merchantContractDetailListByPage() {
        super("merchantContractDetailListByPage");
      }

      public merchantContractDetailListByPage_args getEmptyArgsInstance() {
        return new merchantContractDetailListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantContractDetailListByPage_result getResult(I iface, merchantContractDetailListByPage_args args) throws org.apache.thrift.TException {
        merchantContractDetailListByPage_result result = new merchantContractDetailListByPage_result();
        result.success = iface.merchantContractDetailListByPage(args.pageVo, args.commonParamVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("merchantContractRank", new merchantContractRank());
      processMap.put("merchantTypeAddPercent", new merchantTypeAddPercent());
      processMap.put("merchantContractAddRank", new merchantContractAddRank());
      processMap.put("merchantContractDetailList", new merchantContractDetailList());
      processMap.put("merchantContractDetailListByPage", new merchantContractDetailListByPage());
      return processMap;
    }

    public static class merchantContractRank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantContractRank_args, com.froad.thrift.vo.report.MerchantContractRankResVo> {
      public merchantContractRank() {
        super("merchantContractRank");
      }

      public merchantContractRank_args getEmptyArgsInstance() {
        return new merchantContractRank_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.MerchantContractRankResVo o) {
            merchantContractRank_result result = new merchantContractRank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantContractRank_result result = new merchantContractRank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantContractRank_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo> resultHandler) throws TException {
        iface.merchantContractRank(args.commonParamVo,resultHandler);
      }
    }

    public static class merchantTypeAddPercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantTypeAddPercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public merchantTypeAddPercent() {
        super("merchantTypeAddPercent");
      }

      public merchantTypeAddPercent_args getEmptyArgsInstance() {
        return new merchantTypeAddPercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            merchantTypeAddPercent_result result = new merchantTypeAddPercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantTypeAddPercent_result result = new merchantTypeAddPercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantTypeAddPercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.merchantTypeAddPercent(args.commonParamVo,resultHandler);
      }
    }

    public static class merchantContractAddRank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantContractAddRank_args, com.froad.thrift.vo.report.MerchantContractRankResVo> {
      public merchantContractAddRank() {
        super("merchantContractAddRank");
      }

      public merchantContractAddRank_args getEmptyArgsInstance() {
        return new merchantContractAddRank_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.MerchantContractRankResVo o) {
            merchantContractAddRank_result result = new merchantContractAddRank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantContractAddRank_result result = new merchantContractAddRank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantContractAddRank_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.MerchantContractRankResVo> resultHandler) throws TException {
        iface.merchantContractAddRank(args.commonParamVo,resultHandler);
      }
    }

    public static class merchantContractDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantContractDetailList_args, com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo> {
      public merchantContractDetailList() {
        super("merchantContractDetailList");
      }

      public merchantContractDetailList_args getEmptyArgsInstance() {
        return new merchantContractDetailList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo o) {
            merchantContractDetailList_result result = new merchantContractDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantContractDetailList_result result = new merchantContractDetailList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantContractDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo> resultHandler) throws TException {
        iface.merchantContractDetailList(args.commonParamVo,resultHandler);
      }
    }

    public static class merchantContractDetailListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantContractDetailListByPage_args, com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo> {
      public merchantContractDetailListByPage() {
        super("merchantContractDetailListByPage");
      }

      public merchantContractDetailListByPage_args getEmptyArgsInstance() {
        return new merchantContractDetailListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo o) {
            merchantContractDetailListByPage_result result = new merchantContractDetailListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantContractDetailListByPage_result result = new merchantContractDetailListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantContractDetailListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo> resultHandler) throws TException {
        iface.merchantContractDetailListByPage(args.pageVo, args.commonParamVo,resultHandler);
      }
    }

  }

  public static class merchantContractRank_args implements org.apache.thrift.TBase<merchantContractRank_args, merchantContractRank_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractRank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractRank_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractRank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractRank_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractRank_args.class, metaDataMap);
    }

    public merchantContractRank_args() {
    }

    public merchantContractRank_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractRank_args(merchantContractRank_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public merchantContractRank_args deepCopy() {
      return new merchantContractRank_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public merchantContractRank_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractRank_args)
        return this.equals((merchantContractRank_args)that);
      return false;
    }

    public boolean equals(merchantContractRank_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractRank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractRank_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractRank_argsStandardSchemeFactory implements SchemeFactory {
      public merchantContractRank_argsStandardScheme getScheme() {
        return new merchantContractRank_argsStandardScheme();
      }
    }

    private static class merchantContractRank_argsStandardScheme extends StandardScheme<merchantContractRank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractRank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractRank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractRank_argsTupleSchemeFactory implements SchemeFactory {
      public merchantContractRank_argsTupleScheme getScheme() {
        return new merchantContractRank_argsTupleScheme();
      }
    }

    private static class merchantContractRank_argsTupleScheme extends TupleScheme<merchantContractRank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractRank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractRank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class merchantContractRank_result implements org.apache.thrift.TBase<merchantContractRank_result, merchantContractRank_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractRank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractRank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractRank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractRank_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.MerchantContractRankResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractRank_result.class, metaDataMap);
    }

    public merchantContractRank_result() {
    }

    public merchantContractRank_result(
      com.froad.thrift.vo.report.MerchantContractRankResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractRank_result(merchantContractRank_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.MerchantContractRankResVo(other.success);
      }
    }

    public merchantContractRank_result deepCopy() {
      return new merchantContractRank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo getSuccess() {
      return this.success;
    }

    public merchantContractRank_result setSuccess(com.froad.thrift.vo.report.MerchantContractRankResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.MerchantContractRankResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractRank_result)
        return this.equals((merchantContractRank_result)that);
      return false;
    }

    public boolean equals(merchantContractRank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractRank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractRank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractRank_resultStandardSchemeFactory implements SchemeFactory {
      public merchantContractRank_resultStandardScheme getScheme() {
        return new merchantContractRank_resultStandardScheme();
      }
    }

    private static class merchantContractRank_resultStandardScheme extends StandardScheme<merchantContractRank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractRank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.MerchantContractRankResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractRank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractRank_resultTupleSchemeFactory implements SchemeFactory {
      public merchantContractRank_resultTupleScheme getScheme() {
        return new merchantContractRank_resultTupleScheme();
      }
    }

    private static class merchantContractRank_resultTupleScheme extends TupleScheme<merchantContractRank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractRank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractRank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.MerchantContractRankResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantTypeAddPercent_args implements org.apache.thrift.TBase<merchantTypeAddPercent_args, merchantTypeAddPercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantTypeAddPercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantTypeAddPercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantTypeAddPercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantTypeAddPercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantTypeAddPercent_args.class, metaDataMap);
    }

    public merchantTypeAddPercent_args() {
    }

    public merchantTypeAddPercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantTypeAddPercent_args(merchantTypeAddPercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public merchantTypeAddPercent_args deepCopy() {
      return new merchantTypeAddPercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public merchantTypeAddPercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantTypeAddPercent_args)
        return this.equals((merchantTypeAddPercent_args)that);
      return false;
    }

    public boolean equals(merchantTypeAddPercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantTypeAddPercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantTypeAddPercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantTypeAddPercent_argsStandardSchemeFactory implements SchemeFactory {
      public merchantTypeAddPercent_argsStandardScheme getScheme() {
        return new merchantTypeAddPercent_argsStandardScheme();
      }
    }

    private static class merchantTypeAddPercent_argsStandardScheme extends StandardScheme<merchantTypeAddPercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantTypeAddPercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantTypeAddPercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantTypeAddPercent_argsTupleSchemeFactory implements SchemeFactory {
      public merchantTypeAddPercent_argsTupleScheme getScheme() {
        return new merchantTypeAddPercent_argsTupleScheme();
      }
    }

    private static class merchantTypeAddPercent_argsTupleScheme extends TupleScheme<merchantTypeAddPercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantTypeAddPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantTypeAddPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class merchantTypeAddPercent_result implements org.apache.thrift.TBase<merchantTypeAddPercent_result, merchantTypeAddPercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantTypeAddPercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantTypeAddPercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantTypeAddPercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantTypeAddPercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantTypeAddPercent_result.class, metaDataMap);
    }

    public merchantTypeAddPercent_result() {
    }

    public merchantTypeAddPercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantTypeAddPercent_result(merchantTypeAddPercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public merchantTypeAddPercent_result deepCopy() {
      return new merchantTypeAddPercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public merchantTypeAddPercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantTypeAddPercent_result)
        return this.equals((merchantTypeAddPercent_result)that);
      return false;
    }

    public boolean equals(merchantTypeAddPercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantTypeAddPercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantTypeAddPercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantTypeAddPercent_resultStandardSchemeFactory implements SchemeFactory {
      public merchantTypeAddPercent_resultStandardScheme getScheme() {
        return new merchantTypeAddPercent_resultStandardScheme();
      }
    }

    private static class merchantTypeAddPercent_resultStandardScheme extends StandardScheme<merchantTypeAddPercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantTypeAddPercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantTypeAddPercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantTypeAddPercent_resultTupleSchemeFactory implements SchemeFactory {
      public merchantTypeAddPercent_resultTupleScheme getScheme() {
        return new merchantTypeAddPercent_resultTupleScheme();
      }
    }

    private static class merchantTypeAddPercent_resultTupleScheme extends TupleScheme<merchantTypeAddPercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantTypeAddPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantTypeAddPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantContractAddRank_args implements org.apache.thrift.TBase<merchantContractAddRank_args, merchantContractAddRank_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractAddRank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractAddRank_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractAddRank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractAddRank_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractAddRank_args.class, metaDataMap);
    }

    public merchantContractAddRank_args() {
    }

    public merchantContractAddRank_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractAddRank_args(merchantContractAddRank_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public merchantContractAddRank_args deepCopy() {
      return new merchantContractAddRank_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public merchantContractAddRank_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractAddRank_args)
        return this.equals((merchantContractAddRank_args)that);
      return false;
    }

    public boolean equals(merchantContractAddRank_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractAddRank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractAddRank_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractAddRank_argsStandardSchemeFactory implements SchemeFactory {
      public merchantContractAddRank_argsStandardScheme getScheme() {
        return new merchantContractAddRank_argsStandardScheme();
      }
    }

    private static class merchantContractAddRank_argsStandardScheme extends StandardScheme<merchantContractAddRank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractAddRank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractAddRank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractAddRank_argsTupleSchemeFactory implements SchemeFactory {
      public merchantContractAddRank_argsTupleScheme getScheme() {
        return new merchantContractAddRank_argsTupleScheme();
      }
    }

    private static class merchantContractAddRank_argsTupleScheme extends TupleScheme<merchantContractAddRank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractAddRank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractAddRank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class merchantContractAddRank_result implements org.apache.thrift.TBase<merchantContractAddRank_result, merchantContractAddRank_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractAddRank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractAddRank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractAddRank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractAddRank_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.MerchantContractRankResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractAddRank_result.class, metaDataMap);
    }

    public merchantContractAddRank_result() {
    }

    public merchantContractAddRank_result(
      com.froad.thrift.vo.report.MerchantContractRankResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractAddRank_result(merchantContractAddRank_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.MerchantContractRankResVo(other.success);
      }
    }

    public merchantContractAddRank_result deepCopy() {
      return new merchantContractAddRank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.MerchantContractRankResVo getSuccess() {
      return this.success;
    }

    public merchantContractAddRank_result setSuccess(com.froad.thrift.vo.report.MerchantContractRankResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.MerchantContractRankResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractAddRank_result)
        return this.equals((merchantContractAddRank_result)that);
      return false;
    }

    public boolean equals(merchantContractAddRank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractAddRank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractAddRank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractAddRank_resultStandardSchemeFactory implements SchemeFactory {
      public merchantContractAddRank_resultStandardScheme getScheme() {
        return new merchantContractAddRank_resultStandardScheme();
      }
    }

    private static class merchantContractAddRank_resultStandardScheme extends StandardScheme<merchantContractAddRank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractAddRank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.MerchantContractRankResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractAddRank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractAddRank_resultTupleSchemeFactory implements SchemeFactory {
      public merchantContractAddRank_resultTupleScheme getScheme() {
        return new merchantContractAddRank_resultTupleScheme();
      }
    }

    private static class merchantContractAddRank_resultTupleScheme extends TupleScheme<merchantContractAddRank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractAddRank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractAddRank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.MerchantContractRankResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantContractDetailList_args implements org.apache.thrift.TBase<merchantContractDetailList_args, merchantContractDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractDetailList_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractDetailList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractDetailList_args.class, metaDataMap);
    }

    public merchantContractDetailList_args() {
    }

    public merchantContractDetailList_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractDetailList_args(merchantContractDetailList_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public merchantContractDetailList_args deepCopy() {
      return new merchantContractDetailList_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public merchantContractDetailList_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractDetailList_args)
        return this.equals((merchantContractDetailList_args)that);
      return false;
    }

    public boolean equals(merchantContractDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractDetailList_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public merchantContractDetailList_argsStandardScheme getScheme() {
        return new merchantContractDetailList_argsStandardScheme();
      }
    }

    private static class merchantContractDetailList_argsStandardScheme extends StandardScheme<merchantContractDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public merchantContractDetailList_argsTupleScheme getScheme() {
        return new merchantContractDetailList_argsTupleScheme();
      }
    }

    private static class merchantContractDetailList_argsTupleScheme extends TupleScheme<merchantContractDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class merchantContractDetailList_result implements org.apache.thrift.TBase<merchantContractDetailList_result, merchantContractDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractDetailList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractDetailList_result.class, metaDataMap);
    }

    public merchantContractDetailList_result() {
    }

    public merchantContractDetailList_result(
      com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractDetailList_result(merchantContractDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo(other.success);
      }
    }

    public merchantContractDetailList_result deepCopy() {
      return new merchantContractDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo getSuccess() {
      return this.success;
    }

    public merchantContractDetailList_result setSuccess(com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractDetailList_result)
        return this.equals((merchantContractDetailList_result)that);
      return false;
    }

    public boolean equals(merchantContractDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public merchantContractDetailList_resultStandardScheme getScheme() {
        return new merchantContractDetailList_resultStandardScheme();
      }
    }

    private static class merchantContractDetailList_resultStandardScheme extends StandardScheme<merchantContractDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public merchantContractDetailList_resultTupleScheme getScheme() {
        return new merchantContractDetailList_resultTupleScheme();
      }
    }

    private static class merchantContractDetailList_resultTupleScheme extends TupleScheme<merchantContractDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantContractDetailListByPage_args implements org.apache.thrift.TBase<merchantContractDetailListByPage_args, merchantContractDetailListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractDetailListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractDetailListByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractDetailListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractDetailListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      COMMON_PARAM_VO((short)2, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractDetailListByPage_args.class, metaDataMap);
    }

    public merchantContractDetailListByPage_args() {
    }

    public merchantContractDetailListByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.pageVo = pageVo;
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractDetailListByPage_args(merchantContractDetailListByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public merchantContractDetailListByPage_args deepCopy() {
      return new merchantContractDetailListByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public merchantContractDetailListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public merchantContractDetailListByPage_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractDetailListByPage_args)
        return this.equals((merchantContractDetailListByPage_args)that);
      return false;
    }

    public boolean equals(merchantContractDetailListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractDetailListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractDetailListByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractDetailListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public merchantContractDetailListByPage_argsStandardScheme getScheme() {
        return new merchantContractDetailListByPage_argsStandardScheme();
      }
    }

    private static class merchantContractDetailListByPage_argsStandardScheme extends StandardScheme<merchantContractDetailListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractDetailListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractDetailListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractDetailListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public merchantContractDetailListByPage_argsTupleScheme getScheme() {
        return new merchantContractDetailListByPage_argsTupleScheme();
      }
    }

    private static class merchantContractDetailListByPage_argsTupleScheme extends TupleScheme<merchantContractDetailListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetCommonParamVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class merchantContractDetailListByPage_result implements org.apache.thrift.TBase<merchantContractDetailListByPage_result, merchantContractDetailListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantContractDetailListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantContractDetailListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantContractDetailListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantContractDetailListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantContractDetailListByPage_result.class, metaDataMap);
    }

    public merchantContractDetailListByPage_result() {
    }

    public merchantContractDetailListByPage_result(
      com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantContractDetailListByPage_result(merchantContractDetailListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo(other.success);
      }
    }

    public merchantContractDetailListByPage_result deepCopy() {
      return new merchantContractDetailListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo getSuccess() {
      return this.success;
    }

    public merchantContractDetailListByPage_result setSuccess(com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantContractDetailListByPage_result)
        return this.equals((merchantContractDetailListByPage_result)that);
      return false;
    }

    public boolean equals(merchantContractDetailListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantContractDetailListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantContractDetailListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantContractDetailListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public merchantContractDetailListByPage_resultStandardScheme getScheme() {
        return new merchantContractDetailListByPage_resultStandardScheme();
      }
    }

    private static class merchantContractDetailListByPage_resultStandardScheme extends StandardScheme<merchantContractDetailListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantContractDetailListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantContractDetailListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantContractDetailListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public merchantContractDetailListByPage_resultTupleScheme getScheme() {
        return new merchantContractDetailListByPage_resultTupleScheme();
      }
    }

    private static class merchantContractDetailListByPage_resultTupleScheme extends TupleScheme<merchantContractDetailListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantContractDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ReportMerchantContractDeatailPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
