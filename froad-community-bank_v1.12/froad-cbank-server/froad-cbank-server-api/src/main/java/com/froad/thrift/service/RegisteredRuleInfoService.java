/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RegisteredRuleInfoService {

  /**
   * 注册(首单)规则信息 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 RegisteredRuleInfo
     * 
     * @param originVo
     * @param registeredRuleInfoVo
     */
    public com.froad.thrift.vo.active.AddResultVo addRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 禁用 RegisteredRuleInfo
     * 
     * @param originVo
     * @param clientId
     * @param activeId
     * @param operator
     */
    public com.froad.thrift.vo.ResultVo disableRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException;

    /**
     * 修改 RegisteredRuleInfo
     * 
     * @param originVo
     * @param registeredRuleInfoVo
     */
    public com.froad.thrift.vo.ResultVo updateRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 RegisteredRuleInfo 列表
     * 
     * @param registeredRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo getRegisteredRuleInfo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 RegisteredRuleInfo
     * 
     * @param page
     * @param registeredRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo getRegisteredRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 VouchersRuleInfo 单个
     * 
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo getRegisteredRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 下载活动URL
     * 
     * @param registeredRuleInfoVo
     */
    public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes exportRegisteredRuleInfoInfoResUrl(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disableRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegisteredRuleInfo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegisteredRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegisteredRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportRegisteredRuleInfoInfoResUrl(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.AddResultVo addRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      send_addRegisteredRuleInfo(originVo, registeredRuleInfoVo);
      return recv_addRegisteredRuleInfo();
    }

    public void send_addRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      addRegisteredRuleInfo_args args = new addRegisteredRuleInfo_args();
      args.setOriginVo(originVo);
      args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
      sendBase("addRegisteredRuleInfo", args);
    }

    public com.froad.thrift.vo.active.AddResultVo recv_addRegisteredRuleInfo() throws org.apache.thrift.TException
    {
      addRegisteredRuleInfo_result result = new addRegisteredRuleInfo_result();
      receiveBase(result, "addRegisteredRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRegisteredRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo disableRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      send_disableRegisteredRuleInfo(originVo, clientId, activeId, operator);
      return recv_disableRegisteredRuleInfo();
    }

    public void send_disableRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      disableRegisteredRuleInfo_args args = new disableRegisteredRuleInfo_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setActiveId(activeId);
      args.setOperator(operator);
      sendBase("disableRegisteredRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_disableRegisteredRuleInfo() throws org.apache.thrift.TException
    {
      disableRegisteredRuleInfo_result result = new disableRegisteredRuleInfo_result();
      receiveBase(result, "disableRegisteredRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disableRegisteredRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      send_updateRegisteredRuleInfo(originVo, registeredRuleInfoVo);
      return recv_updateRegisteredRuleInfo();
    }

    public void send_updateRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      updateRegisteredRuleInfo_args args = new updateRegisteredRuleInfo_args();
      args.setOriginVo(originVo);
      args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
      sendBase("updateRegisteredRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateRegisteredRuleInfo() throws org.apache.thrift.TException
    {
      updateRegisteredRuleInfo_result result = new updateRegisteredRuleInfo_result();
      receiveBase(result, "updateRegisteredRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRegisteredRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo getRegisteredRuleInfo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getRegisteredRuleInfo(registeredRuleInfoVo);
      return recv_getRegisteredRuleInfo();
    }

    public void send_getRegisteredRuleInfo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      getRegisteredRuleInfo_args args = new getRegisteredRuleInfo_args();
      args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
      sendBase("getRegisteredRuleInfo", args);
    }

    public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo recv_getRegisteredRuleInfo() throws org.apache.thrift.TException
    {
      getRegisteredRuleInfo_result result = new getRegisteredRuleInfo_result();
      receiveBase(result, "getRegisteredRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegisteredRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo getRegisteredRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getRegisteredRuleInfoByPage(page, registeredRuleInfoVo);
      return recv_getRegisteredRuleInfoByPage();
    }

    public void send_getRegisteredRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      getRegisteredRuleInfoByPage_args args = new getRegisteredRuleInfoByPage_args();
      args.setPage(page);
      args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
      sendBase("getRegisteredRuleInfoByPage", args);
    }

    public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo recv_getRegisteredRuleInfoByPage() throws org.apache.thrift.TException
    {
      getRegisteredRuleInfoByPage_result result = new getRegisteredRuleInfoByPage_result();
      receiveBase(result, "getRegisteredRuleInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegisteredRuleInfoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo getRegisteredRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_getRegisteredRuleInfoById(clientId, activeId);
      return recv_getRegisteredRuleInfoById();
    }

    public void send_getRegisteredRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      getRegisteredRuleInfoById_args args = new getRegisteredRuleInfoById_args();
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("getRegisteredRuleInfoById", args);
    }

    public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo recv_getRegisteredRuleInfoById() throws org.apache.thrift.TException
    {
      getRegisteredRuleInfoById_result result = new getRegisteredRuleInfoById_result();
      receiveBase(result, "getRegisteredRuleInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegisteredRuleInfoById failed: unknown result");
    }

    public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes exportRegisteredRuleInfoInfoResUrl(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      send_exportRegisteredRuleInfoInfoResUrl(registeredRuleInfoVo);
      return recv_exportRegisteredRuleInfoInfoResUrl();
    }

    public void send_exportRegisteredRuleInfoInfoResUrl(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) throws org.apache.thrift.TException
    {
      exportRegisteredRuleInfoInfoResUrl_args args = new exportRegisteredRuleInfoInfoResUrl_args();
      args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
      sendBase("exportRegisteredRuleInfoInfoResUrl", args);
    }

    public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes recv_exportRegisteredRuleInfoInfoResUrl() throws org.apache.thrift.TException
    {
      exportRegisteredRuleInfoInfoResUrl_result result = new exportRegisteredRuleInfoInfoResUrl_result();
      receiveBase(result, "exportRegisteredRuleInfoInfoResUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportRegisteredRuleInfoInfoResUrl failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRegisteredRuleInfo_call method_call = new addRegisteredRuleInfo_call(originVo, registeredRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRegisteredRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo;
      public addRegisteredRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.registeredRuleInfoVo = registeredRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRegisteredRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRegisteredRuleInfo_args args = new addRegisteredRuleInfo_args();
        args.setOriginVo(originVo);
        args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRegisteredRuleInfo();
      }
    }

    public void disableRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disableRegisteredRuleInfo_call method_call = new disableRegisteredRuleInfo_call(originVo, clientId, activeId, operator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disableRegisteredRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private String activeId;
      private String operator;
      public disableRegisteredRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.activeId = activeId;
        this.operator = operator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableRegisteredRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disableRegisteredRuleInfo_args args = new disableRegisteredRuleInfo_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.setOperator(operator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disableRegisteredRuleInfo();
      }
    }

    public void updateRegisteredRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRegisteredRuleInfo_call method_call = new updateRegisteredRuleInfo_call(originVo, registeredRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRegisteredRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo;
      public updateRegisteredRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.registeredRuleInfoVo = registeredRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRegisteredRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRegisteredRuleInfo_args args = new updateRegisteredRuleInfo_args();
        args.setOriginVo(originVo);
        args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRegisteredRuleInfo();
      }
    }

    public void getRegisteredRuleInfo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegisteredRuleInfo_call method_call = new getRegisteredRuleInfo_call(registeredRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegisteredRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo;
      public getRegisteredRuleInfo_call(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registeredRuleInfoVo = registeredRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegisteredRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegisteredRuleInfo_args args = new getRegisteredRuleInfo_args();
        args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegisteredRuleInfo();
      }
    }

    public void getRegisteredRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegisteredRuleInfoByPage_call method_call = new getRegisteredRuleInfoByPage_call(page, registeredRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegisteredRuleInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo;
      public getRegisteredRuleInfoByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.registeredRuleInfoVo = registeredRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegisteredRuleInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegisteredRuleInfoByPage_args args = new getRegisteredRuleInfoByPage_args();
        args.setPage(page);
        args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegisteredRuleInfoByPage();
      }
    }

    public void getRegisteredRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegisteredRuleInfoById_call method_call = new getRegisteredRuleInfoById_call(clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegisteredRuleInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String activeId;
      public getRegisteredRuleInfoById_call(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegisteredRuleInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegisteredRuleInfoById_args args = new getRegisteredRuleInfoById_args();
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegisteredRuleInfoById();
      }
    }

    public void exportRegisteredRuleInfoInfoResUrl(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportRegisteredRuleInfoInfoResUrl_call method_call = new exportRegisteredRuleInfoInfoResUrl_call(registeredRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportRegisteredRuleInfoInfoResUrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo;
      public exportRegisteredRuleInfoInfoResUrl_call(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registeredRuleInfoVo = registeredRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportRegisteredRuleInfoInfoResUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportRegisteredRuleInfoInfoResUrl_args args = new exportRegisteredRuleInfoInfoResUrl_args();
        args.setRegisteredRuleInfoVo(registeredRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportRegisteredRuleInfoInfoResUrl();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addRegisteredRuleInfo", new addRegisteredRuleInfo());
      processMap.put("disableRegisteredRuleInfo", new disableRegisteredRuleInfo());
      processMap.put("updateRegisteredRuleInfo", new updateRegisteredRuleInfo());
      processMap.put("getRegisteredRuleInfo", new getRegisteredRuleInfo());
      processMap.put("getRegisteredRuleInfoByPage", new getRegisteredRuleInfoByPage());
      processMap.put("getRegisteredRuleInfoById", new getRegisteredRuleInfoById());
      processMap.put("exportRegisteredRuleInfoInfoResUrl", new exportRegisteredRuleInfoInfoResUrl());
      return processMap;
    }

    public static class addRegisteredRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRegisteredRuleInfo_args> {
      public addRegisteredRuleInfo() {
        super("addRegisteredRuleInfo");
      }

      public addRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new addRegisteredRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRegisteredRuleInfo_result getResult(I iface, addRegisteredRuleInfo_args args) throws org.apache.thrift.TException {
        addRegisteredRuleInfo_result result = new addRegisteredRuleInfo_result();
        result.success = iface.addRegisteredRuleInfo(args.originVo, args.registeredRuleInfoVo);
        return result;
      }
    }

    public static class disableRegisteredRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disableRegisteredRuleInfo_args> {
      public disableRegisteredRuleInfo() {
        super("disableRegisteredRuleInfo");
      }

      public disableRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new disableRegisteredRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disableRegisteredRuleInfo_result getResult(I iface, disableRegisteredRuleInfo_args args) throws org.apache.thrift.TException {
        disableRegisteredRuleInfo_result result = new disableRegisteredRuleInfo_result();
        result.success = iface.disableRegisteredRuleInfo(args.originVo, args.clientId, args.activeId, args.operator);
        return result;
      }
    }

    public static class updateRegisteredRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRegisteredRuleInfo_args> {
      public updateRegisteredRuleInfo() {
        super("updateRegisteredRuleInfo");
      }

      public updateRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new updateRegisteredRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRegisteredRuleInfo_result getResult(I iface, updateRegisteredRuleInfo_args args) throws org.apache.thrift.TException {
        updateRegisteredRuleInfo_result result = new updateRegisteredRuleInfo_result();
        result.success = iface.updateRegisteredRuleInfo(args.originVo, args.registeredRuleInfoVo);
        return result;
      }
    }

    public static class getRegisteredRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegisteredRuleInfo_args> {
      public getRegisteredRuleInfo() {
        super("getRegisteredRuleInfo");
      }

      public getRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegisteredRuleInfo_result getResult(I iface, getRegisteredRuleInfo_args args) throws org.apache.thrift.TException {
        getRegisteredRuleInfo_result result = new getRegisteredRuleInfo_result();
        result.success = iface.getRegisteredRuleInfo(args.registeredRuleInfoVo);
        return result;
      }
    }

    public static class getRegisteredRuleInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegisteredRuleInfoByPage_args> {
      public getRegisteredRuleInfoByPage() {
        super("getRegisteredRuleInfoByPage");
      }

      public getRegisteredRuleInfoByPage_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegisteredRuleInfoByPage_result getResult(I iface, getRegisteredRuleInfoByPage_args args) throws org.apache.thrift.TException {
        getRegisteredRuleInfoByPage_result result = new getRegisteredRuleInfoByPage_result();
        result.success = iface.getRegisteredRuleInfoByPage(args.page, args.registeredRuleInfoVo);
        return result;
      }
    }

    public static class getRegisteredRuleInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegisteredRuleInfoById_args> {
      public getRegisteredRuleInfoById() {
        super("getRegisteredRuleInfoById");
      }

      public getRegisteredRuleInfoById_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegisteredRuleInfoById_result getResult(I iface, getRegisteredRuleInfoById_args args) throws org.apache.thrift.TException {
        getRegisteredRuleInfoById_result result = new getRegisteredRuleInfoById_result();
        result.success = iface.getRegisteredRuleInfoById(args.clientId, args.activeId);
        return result;
      }
    }

    public static class exportRegisteredRuleInfoInfoResUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportRegisteredRuleInfoInfoResUrl_args> {
      public exportRegisteredRuleInfoInfoResUrl() {
        super("exportRegisteredRuleInfoInfoResUrl");
      }

      public exportRegisteredRuleInfoInfoResUrl_args getEmptyArgsInstance() {
        return new exportRegisteredRuleInfoInfoResUrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportRegisteredRuleInfoInfoResUrl_result getResult(I iface, exportRegisteredRuleInfoInfoResUrl_args args) throws org.apache.thrift.TException {
        exportRegisteredRuleInfoInfoResUrl_result result = new exportRegisteredRuleInfoInfoResUrl_result();
        result.success = iface.exportRegisteredRuleInfoInfoResUrl(args.registeredRuleInfoVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addRegisteredRuleInfo", new addRegisteredRuleInfo());
      processMap.put("disableRegisteredRuleInfo", new disableRegisteredRuleInfo());
      processMap.put("updateRegisteredRuleInfo", new updateRegisteredRuleInfo());
      processMap.put("getRegisteredRuleInfo", new getRegisteredRuleInfo());
      processMap.put("getRegisteredRuleInfoByPage", new getRegisteredRuleInfoByPage());
      processMap.put("getRegisteredRuleInfoById", new getRegisteredRuleInfoById());
      processMap.put("exportRegisteredRuleInfoInfoResUrl", new exportRegisteredRuleInfoInfoResUrl());
      return processMap;
    }

    public static class addRegisteredRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRegisteredRuleInfo_args, com.froad.thrift.vo.active.AddResultVo> {
      public addRegisteredRuleInfo() {
        super("addRegisteredRuleInfo");
      }

      public addRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new addRegisteredRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.AddResultVo o) {
            addRegisteredRuleInfo_result result = new addRegisteredRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRegisteredRuleInfo_result result = new addRegisteredRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRegisteredRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> resultHandler) throws TException {
        iface.addRegisteredRuleInfo(args.originVo, args.registeredRuleInfoVo,resultHandler);
      }
    }

    public static class disableRegisteredRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disableRegisteredRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public disableRegisteredRuleInfo() {
        super("disableRegisteredRuleInfo");
      }

      public disableRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new disableRegisteredRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            disableRegisteredRuleInfo_result result = new disableRegisteredRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disableRegisteredRuleInfo_result result = new disableRegisteredRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disableRegisteredRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.disableRegisteredRuleInfo(args.originVo, args.clientId, args.activeId, args.operator,resultHandler);
      }
    }

    public static class updateRegisteredRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRegisteredRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public updateRegisteredRuleInfo() {
        super("updateRegisteredRuleInfo");
      }

      public updateRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new updateRegisteredRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateRegisteredRuleInfo_result result = new updateRegisteredRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRegisteredRuleInfo_result result = new updateRegisteredRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRegisteredRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateRegisteredRuleInfo(args.originVo, args.registeredRuleInfoVo,resultHandler);
      }
    }

    public static class getRegisteredRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegisteredRuleInfo_args, com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo> {
      public getRegisteredRuleInfo() {
        super("getRegisteredRuleInfo");
      }

      public getRegisteredRuleInfo_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo o) {
            getRegisteredRuleInfo_result result = new getRegisteredRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegisteredRuleInfo_result result = new getRegisteredRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegisteredRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getRegisteredRuleInfo(args.registeredRuleInfoVo,resultHandler);
      }
    }

    public static class getRegisteredRuleInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegisteredRuleInfoByPage_args, com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo> {
      public getRegisteredRuleInfoByPage() {
        super("getRegisteredRuleInfoByPage");
      }

      public getRegisteredRuleInfoByPage_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo o) {
            getRegisteredRuleInfoByPage_result result = new getRegisteredRuleInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegisteredRuleInfoByPage_result result = new getRegisteredRuleInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegisteredRuleInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getRegisteredRuleInfoByPage(args.page, args.registeredRuleInfoVo,resultHandler);
      }
    }

    public static class getRegisteredRuleInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegisteredRuleInfoById_args, com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo> {
      public getRegisteredRuleInfoById() {
        super("getRegisteredRuleInfoById");
      }

      public getRegisteredRuleInfoById_args getEmptyArgsInstance() {
        return new getRegisteredRuleInfoById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo o) {
            getRegisteredRuleInfoById_result result = new getRegisteredRuleInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegisteredRuleInfoById_result result = new getRegisteredRuleInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegisteredRuleInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getRegisteredRuleInfoById(args.clientId, args.activeId,resultHandler);
      }
    }

    public static class exportRegisteredRuleInfoInfoResUrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportRegisteredRuleInfoInfoResUrl_args, com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes> {
      public exportRegisteredRuleInfoInfoResUrl() {
        super("exportRegisteredRuleInfoInfoResUrl");
      }

      public exportRegisteredRuleInfoInfoResUrl_args getEmptyArgsInstance() {
        return new exportRegisteredRuleInfoInfoResUrl_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes>() { 
          public void onComplete(com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes o) {
            exportRegisteredRuleInfoInfoResUrl_result result = new exportRegisteredRuleInfoInfoResUrl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportRegisteredRuleInfoInfoResUrl_result result = new exportRegisteredRuleInfoInfoResUrl_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportRegisteredRuleInfoInfoResUrl_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes> resultHandler) throws TException {
        iface.exportRegisteredRuleInfoInfoResUrl(args.registeredRuleInfoVo,resultHandler);
      }
    }

  }

  public static class addRegisteredRuleInfo_args implements org.apache.thrift.TBase<addRegisteredRuleInfo_args, addRegisteredRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRegisteredRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRegisteredRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTERED_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRegisteredRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRegisteredRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      REGISTERED_RULE_INFO_VO((short)2, "registeredRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // REGISTERED_RULE_INFO_VO
            return REGISTERED_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.REGISTERED_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("registeredRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.RegisteredRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRegisteredRuleInfo_args.class, metaDataMap);
    }

    public addRegisteredRuleInfo_args() {
    }

    public addRegisteredRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.registeredRuleInfoVo = registeredRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRegisteredRuleInfo_args(addRegisteredRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetRegisteredRuleInfoVo()) {
        this.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo(other.registeredRuleInfoVo);
      }
    }

    public addRegisteredRuleInfo_args deepCopy() {
      return new addRegisteredRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.registeredRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addRegisteredRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo getRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo;
    }

    public addRegisteredRuleInfo_args setRegisteredRuleInfoVo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) {
      this.registeredRuleInfoVo = registeredRuleInfoVo;
      return this;
    }

    public void unsetRegisteredRuleInfoVo() {
      this.registeredRuleInfoVo = null;
    }

    /** Returns true if field registeredRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo != null;
    }

    public void setRegisteredRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.registeredRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case REGISTERED_RULE_INFO_VO:
        if (value == null) {
          unsetRegisteredRuleInfoVo();
        } else {
          setRegisteredRuleInfoVo((com.froad.thrift.vo.active.RegisteredRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case REGISTERED_RULE_INFO_VO:
        return getRegisteredRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case REGISTERED_RULE_INFO_VO:
        return isSetRegisteredRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRegisteredRuleInfo_args)
        return this.equals((addRegisteredRuleInfo_args)that);
      return false;
    }

    public boolean equals(addRegisteredRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_registeredRuleInfoVo = true && this.isSetRegisteredRuleInfoVo();
      boolean that_present_registeredRuleInfoVo = true && that.isSetRegisteredRuleInfoVo();
      if (this_present_registeredRuleInfoVo || that_present_registeredRuleInfoVo) {
        if (!(this_present_registeredRuleInfoVo && that_present_registeredRuleInfoVo))
          return false;
        if (!this.registeredRuleInfoVo.equals(that.registeredRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_registeredRuleInfoVo = true && (isSetRegisteredRuleInfoVo());
      list.add(present_registeredRuleInfoVo);
      if (present_registeredRuleInfoVo)
        list.add(registeredRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRegisteredRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegisteredRuleInfoVo()).compareTo(other.isSetRegisteredRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisteredRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredRuleInfoVo, other.registeredRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRegisteredRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registeredRuleInfoVo:");
      if (this.registeredRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.registeredRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (registeredRuleInfoVo != null) {
        registeredRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRegisteredRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addRegisteredRuleInfo_argsStandardScheme getScheme() {
        return new addRegisteredRuleInfo_argsStandardScheme();
      }
    }

    private static class addRegisteredRuleInfo_argsStandardScheme extends StandardScheme<addRegisteredRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTERED_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
                struct.registeredRuleInfoVo.read(iprot);
                struct.setRegisteredRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.registeredRuleInfoVo != null) {
          oprot.writeFieldBegin(REGISTERED_RULE_INFO_VO_FIELD_DESC);
          struct.registeredRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRegisteredRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addRegisteredRuleInfo_argsTupleScheme getScheme() {
        return new addRegisteredRuleInfo_argsTupleScheme();
      }
    }

    private static class addRegisteredRuleInfo_argsTupleScheme extends TupleScheme<addRegisteredRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          struct.registeredRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
          struct.registeredRuleInfoVo.read(iprot);
          struct.setRegisteredRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addRegisteredRuleInfo_result implements org.apache.thrift.TBase<addRegisteredRuleInfo_result, addRegisteredRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRegisteredRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRegisteredRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRegisteredRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRegisteredRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRegisteredRuleInfo_result.class, metaDataMap);
    }

    public addRegisteredRuleInfo_result() {
    }

    public addRegisteredRuleInfo_result(
      com.froad.thrift.vo.active.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRegisteredRuleInfo_result(addRegisteredRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.AddResultVo(other.success);
      }
    }

    public addRegisteredRuleInfo_result deepCopy() {
      return new addRegisteredRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.AddResultVo getSuccess() {
      return this.success;
    }

    public addRegisteredRuleInfo_result setSuccess(com.froad.thrift.vo.active.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRegisteredRuleInfo_result)
        return this.equals((addRegisteredRuleInfo_result)that);
      return false;
    }

    public boolean equals(addRegisteredRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRegisteredRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRegisteredRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRegisteredRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addRegisteredRuleInfo_resultStandardScheme getScheme() {
        return new addRegisteredRuleInfo_resultStandardScheme();
      }
    }

    private static class addRegisteredRuleInfo_resultStandardScheme extends StandardScheme<addRegisteredRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRegisteredRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addRegisteredRuleInfo_resultTupleScheme getScheme() {
        return new addRegisteredRuleInfo_resultTupleScheme();
      }
    }

    private static class addRegisteredRuleInfo_resultTupleScheme extends TupleScheme<addRegisteredRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disableRegisteredRuleInfo_args implements org.apache.thrift.TBase<disableRegisteredRuleInfo_args, disableRegisteredRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<disableRegisteredRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableRegisteredRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableRegisteredRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableRegisteredRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public String activeId; // required
    public String operator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ACTIVE_ID((short)3, "activeId"),
      OPERATOR((short)4, "operator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ACTIVE_ID
            return ACTIVE_ID;
          case 4: // OPERATOR
            return OPERATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableRegisteredRuleInfo_args.class, metaDataMap);
    }

    public disableRegisteredRuleInfo_args() {
    }

    public disableRegisteredRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      String activeId,
      String operator)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.activeId = activeId;
      this.operator = operator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableRegisteredRuleInfo_args(disableRegisteredRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
      if (other.isSetOperator()) {
        this.operator = other.operator;
      }
    }

    public disableRegisteredRuleInfo_args deepCopy() {
      return new disableRegisteredRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.activeId = null;
      this.operator = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public disableRegisteredRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public disableRegisteredRuleInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public disableRegisteredRuleInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public String getOperator() {
      return this.operator;
    }

    public disableRegisteredRuleInfo_args setOperator(String operator) {
      this.operator = operator;
      return this;
    }

    public void unsetOperator() {
      this.operator = null;
    }

    /** Returns true if field operator is set (has been assigned a value) and false otherwise */
    public boolean isSetOperator() {
      return this.operator != null;
    }

    public void setOperatorIsSet(boolean value) {
      if (!value) {
        this.operator = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      case OPERATOR:
        if (value == null) {
          unsetOperator();
        } else {
          setOperator((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      case OPERATOR:
        return getOperator();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      case OPERATOR:
        return isSetOperator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableRegisteredRuleInfo_args)
        return this.equals((disableRegisteredRuleInfo_args)that);
      return false;
    }

    public boolean equals(disableRegisteredRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      boolean this_present_operator = true && this.isSetOperator();
      boolean that_present_operator = true && that.isSetOperator();
      if (this_present_operator || that_present_operator) {
        if (!(this_present_operator && that_present_operator))
          return false;
        if (!this.operator.equals(that.operator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      boolean present_operator = true && (isSetOperator());
      list.add(present_operator);
      if (present_operator)
        list.add(operator);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableRegisteredRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableRegisteredRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableRegisteredRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public disableRegisteredRuleInfo_argsStandardScheme getScheme() {
        return new disableRegisteredRuleInfo_argsStandardScheme();
      }
    }

    private static class disableRegisteredRuleInfo_argsStandardScheme extends StandardScheme<disableRegisteredRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPERATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operator = iprot.readString();
                struct.setOperatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        if (struct.operator != null) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          oprot.writeString(struct.operator);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableRegisteredRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public disableRegisteredRuleInfo_argsTupleScheme getScheme() {
        return new disableRegisteredRuleInfo_argsTupleScheme();
      }
    }

    private static class disableRegisteredRuleInfo_argsTupleScheme extends TupleScheme<disableRegisteredRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetActiveId()) {
          optionals.set(2);
        }
        if (struct.isSetOperator()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
        if (struct.isSetOperator()) {
          oprot.writeString(struct.operator);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.operator = iprot.readString();
          struct.setOperatorIsSet(true);
        }
      }
    }

  }

  public static class disableRegisteredRuleInfo_result implements org.apache.thrift.TBase<disableRegisteredRuleInfo_result, disableRegisteredRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<disableRegisteredRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableRegisteredRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableRegisteredRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableRegisteredRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableRegisteredRuleInfo_result.class, metaDataMap);
    }

    public disableRegisteredRuleInfo_result() {
    }

    public disableRegisteredRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableRegisteredRuleInfo_result(disableRegisteredRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public disableRegisteredRuleInfo_result deepCopy() {
      return new disableRegisteredRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public disableRegisteredRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableRegisteredRuleInfo_result)
        return this.equals((disableRegisteredRuleInfo_result)that);
      return false;
    }

    public boolean equals(disableRegisteredRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableRegisteredRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableRegisteredRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableRegisteredRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public disableRegisteredRuleInfo_resultStandardScheme getScheme() {
        return new disableRegisteredRuleInfo_resultStandardScheme();
      }
    }

    private static class disableRegisteredRuleInfo_resultStandardScheme extends StandardScheme<disableRegisteredRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableRegisteredRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public disableRegisteredRuleInfo_resultTupleScheme getScheme() {
        return new disableRegisteredRuleInfo_resultTupleScheme();
      }
    }

    private static class disableRegisteredRuleInfo_resultTupleScheme extends TupleScheme<disableRegisteredRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRegisteredRuleInfo_args implements org.apache.thrift.TBase<updateRegisteredRuleInfo_args, updateRegisteredRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegisteredRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegisteredRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTERED_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegisteredRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegisteredRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      REGISTERED_RULE_INFO_VO((short)2, "registeredRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // REGISTERED_RULE_INFO_VO
            return REGISTERED_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.REGISTERED_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("registeredRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.RegisteredRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegisteredRuleInfo_args.class, metaDataMap);
    }

    public updateRegisteredRuleInfo_args() {
    }

    public updateRegisteredRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.registeredRuleInfoVo = registeredRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegisteredRuleInfo_args(updateRegisteredRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetRegisteredRuleInfoVo()) {
        this.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo(other.registeredRuleInfoVo);
      }
    }

    public updateRegisteredRuleInfo_args deepCopy() {
      return new updateRegisteredRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.registeredRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateRegisteredRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo getRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo;
    }

    public updateRegisteredRuleInfo_args setRegisteredRuleInfoVo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) {
      this.registeredRuleInfoVo = registeredRuleInfoVo;
      return this;
    }

    public void unsetRegisteredRuleInfoVo() {
      this.registeredRuleInfoVo = null;
    }

    /** Returns true if field registeredRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo != null;
    }

    public void setRegisteredRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.registeredRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case REGISTERED_RULE_INFO_VO:
        if (value == null) {
          unsetRegisteredRuleInfoVo();
        } else {
          setRegisteredRuleInfoVo((com.froad.thrift.vo.active.RegisteredRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case REGISTERED_RULE_INFO_VO:
        return getRegisteredRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case REGISTERED_RULE_INFO_VO:
        return isSetRegisteredRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegisteredRuleInfo_args)
        return this.equals((updateRegisteredRuleInfo_args)that);
      return false;
    }

    public boolean equals(updateRegisteredRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_registeredRuleInfoVo = true && this.isSetRegisteredRuleInfoVo();
      boolean that_present_registeredRuleInfoVo = true && that.isSetRegisteredRuleInfoVo();
      if (this_present_registeredRuleInfoVo || that_present_registeredRuleInfoVo) {
        if (!(this_present_registeredRuleInfoVo && that_present_registeredRuleInfoVo))
          return false;
        if (!this.registeredRuleInfoVo.equals(that.registeredRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_registeredRuleInfoVo = true && (isSetRegisteredRuleInfoVo());
      list.add(present_registeredRuleInfoVo);
      if (present_registeredRuleInfoVo)
        list.add(registeredRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRegisteredRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegisteredRuleInfoVo()).compareTo(other.isSetRegisteredRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisteredRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredRuleInfoVo, other.registeredRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegisteredRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registeredRuleInfoVo:");
      if (this.registeredRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.registeredRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (registeredRuleInfoVo != null) {
        registeredRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegisteredRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateRegisteredRuleInfo_argsStandardScheme getScheme() {
        return new updateRegisteredRuleInfo_argsStandardScheme();
      }
    }

    private static class updateRegisteredRuleInfo_argsStandardScheme extends StandardScheme<updateRegisteredRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTERED_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
                struct.registeredRuleInfoVo.read(iprot);
                struct.setRegisteredRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.registeredRuleInfoVo != null) {
          oprot.writeFieldBegin(REGISTERED_RULE_INFO_VO_FIELD_DESC);
          struct.registeredRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegisteredRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateRegisteredRuleInfo_argsTupleScheme getScheme() {
        return new updateRegisteredRuleInfo_argsTupleScheme();
      }
    }

    private static class updateRegisteredRuleInfo_argsTupleScheme extends TupleScheme<updateRegisteredRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          struct.registeredRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
          struct.registeredRuleInfoVo.read(iprot);
          struct.setRegisteredRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateRegisteredRuleInfo_result implements org.apache.thrift.TBase<updateRegisteredRuleInfo_result, updateRegisteredRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegisteredRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegisteredRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegisteredRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegisteredRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegisteredRuleInfo_result.class, metaDataMap);
    }

    public updateRegisteredRuleInfo_result() {
    }

    public updateRegisteredRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegisteredRuleInfo_result(updateRegisteredRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateRegisteredRuleInfo_result deepCopy() {
      return new updateRegisteredRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateRegisteredRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegisteredRuleInfo_result)
        return this.equals((updateRegisteredRuleInfo_result)that);
      return false;
    }

    public boolean equals(updateRegisteredRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRegisteredRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegisteredRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegisteredRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateRegisteredRuleInfo_resultStandardScheme getScheme() {
        return new updateRegisteredRuleInfo_resultStandardScheme();
      }
    }

    private static class updateRegisteredRuleInfo_resultStandardScheme extends StandardScheme<updateRegisteredRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegisteredRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateRegisteredRuleInfo_resultTupleScheme getScheme() {
        return new updateRegisteredRuleInfo_resultTupleScheme();
      }
    }

    private static class updateRegisteredRuleInfo_resultTupleScheme extends TupleScheme<updateRegisteredRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfo_args implements org.apache.thrift.TBase<getRegisteredRuleInfo_args, getRegisteredRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfo_args");

    private static final org.apache.thrift.protocol.TField REGISTERED_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTERED_RULE_INFO_VO((short)1, "registeredRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTERED_RULE_INFO_VO
            return REGISTERED_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTERED_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("registeredRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.RegisteredRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfo_args.class, metaDataMap);
    }

    public getRegisteredRuleInfo_args() {
    }

    public getRegisteredRuleInfo_args(
      com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo)
    {
      this();
      this.registeredRuleInfoVo = registeredRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfo_args(getRegisteredRuleInfo_args other) {
      if (other.isSetRegisteredRuleInfoVo()) {
        this.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo(other.registeredRuleInfoVo);
      }
    }

    public getRegisteredRuleInfo_args deepCopy() {
      return new getRegisteredRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.registeredRuleInfoVo = null;
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo getRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo;
    }

    public getRegisteredRuleInfo_args setRegisteredRuleInfoVo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) {
      this.registeredRuleInfoVo = registeredRuleInfoVo;
      return this;
    }

    public void unsetRegisteredRuleInfoVo() {
      this.registeredRuleInfoVo = null;
    }

    /** Returns true if field registeredRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo != null;
    }

    public void setRegisteredRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.registeredRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        if (value == null) {
          unsetRegisteredRuleInfoVo();
        } else {
          setRegisteredRuleInfoVo((com.froad.thrift.vo.active.RegisteredRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        return getRegisteredRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        return isSetRegisteredRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfo_args)
        return this.equals((getRegisteredRuleInfo_args)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_registeredRuleInfoVo = true && this.isSetRegisteredRuleInfoVo();
      boolean that_present_registeredRuleInfoVo = true && that.isSetRegisteredRuleInfoVo();
      if (this_present_registeredRuleInfoVo || that_present_registeredRuleInfoVo) {
        if (!(this_present_registeredRuleInfoVo && that_present_registeredRuleInfoVo))
          return false;
        if (!this.registeredRuleInfoVo.equals(that.registeredRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_registeredRuleInfoVo = true && (isSetRegisteredRuleInfoVo());
      list.add(present_registeredRuleInfoVo);
      if (present_registeredRuleInfoVo)
        list.add(registeredRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegisteredRuleInfoVo()).compareTo(other.isSetRegisteredRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisteredRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredRuleInfoVo, other.registeredRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfo_args(");
      boolean first = true;

      sb.append("registeredRuleInfoVo:");
      if (this.registeredRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.registeredRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registeredRuleInfoVo != null) {
        registeredRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfo_argsStandardScheme getScheme() {
        return new getRegisteredRuleInfo_argsStandardScheme();
      }
    }

    private static class getRegisteredRuleInfo_argsStandardScheme extends StandardScheme<getRegisteredRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTERED_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
                struct.registeredRuleInfoVo.read(iprot);
                struct.setRegisteredRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registeredRuleInfoVo != null) {
          oprot.writeFieldBegin(REGISTERED_RULE_INFO_VO_FIELD_DESC);
          struct.registeredRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfo_argsTupleScheme getScheme() {
        return new getRegisteredRuleInfo_argsTupleScheme();
      }
    }

    private static class getRegisteredRuleInfo_argsTupleScheme extends TupleScheme<getRegisteredRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegisteredRuleInfoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisteredRuleInfoVo()) {
          struct.registeredRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
          struct.registeredRuleInfoVo.read(iprot);
          struct.setRegisteredRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfo_result implements org.apache.thrift.TBase<getRegisteredRuleInfo_result, getRegisteredRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfo_result.class, metaDataMap);
    }

    public getRegisteredRuleInfo_result() {
    }

    public getRegisteredRuleInfo_result(
      com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfo_result(getRegisteredRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo(other.success);
      }
    }

    public getRegisteredRuleInfo_result deepCopy() {
      return new getRegisteredRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getRegisteredRuleInfo_result setSuccess(com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfo_result)
        return this.equals((getRegisteredRuleInfo_result)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfo_resultStandardScheme getScheme() {
        return new getRegisteredRuleInfo_resultStandardScheme();
      }
    }

    private static class getRegisteredRuleInfo_resultStandardScheme extends StandardScheme<getRegisteredRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfo_resultTupleScheme getScheme() {
        return new getRegisteredRuleInfo_resultTupleScheme();
      }
    }

    private static class getRegisteredRuleInfo_resultTupleScheme extends TupleScheme<getRegisteredRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindAllRegisteredRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfoByPage_args implements org.apache.thrift.TBase<getRegisteredRuleInfoByPage_args, getRegisteredRuleInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTERED_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      REGISTERED_RULE_INFO_VO((short)2, "registeredRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // REGISTERED_RULE_INFO_VO
            return REGISTERED_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.REGISTERED_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("registeredRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.RegisteredRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfoByPage_args.class, metaDataMap);
    }

    public getRegisteredRuleInfoByPage_args() {
    }

    public getRegisteredRuleInfoByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo)
    {
      this();
      this.page = page;
      this.registeredRuleInfoVo = registeredRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfoByPage_args(getRegisteredRuleInfoByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetRegisteredRuleInfoVo()) {
        this.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo(other.registeredRuleInfoVo);
      }
    }

    public getRegisteredRuleInfoByPage_args deepCopy() {
      return new getRegisteredRuleInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.registeredRuleInfoVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getRegisteredRuleInfoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo getRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo;
    }

    public getRegisteredRuleInfoByPage_args setRegisteredRuleInfoVo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) {
      this.registeredRuleInfoVo = registeredRuleInfoVo;
      return this;
    }

    public void unsetRegisteredRuleInfoVo() {
      this.registeredRuleInfoVo = null;
    }

    /** Returns true if field registeredRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo != null;
    }

    public void setRegisteredRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.registeredRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case REGISTERED_RULE_INFO_VO:
        if (value == null) {
          unsetRegisteredRuleInfoVo();
        } else {
          setRegisteredRuleInfoVo((com.froad.thrift.vo.active.RegisteredRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case REGISTERED_RULE_INFO_VO:
        return getRegisteredRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case REGISTERED_RULE_INFO_VO:
        return isSetRegisteredRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfoByPage_args)
        return this.equals((getRegisteredRuleInfoByPage_args)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_registeredRuleInfoVo = true && this.isSetRegisteredRuleInfoVo();
      boolean that_present_registeredRuleInfoVo = true && that.isSetRegisteredRuleInfoVo();
      if (this_present_registeredRuleInfoVo || that_present_registeredRuleInfoVo) {
        if (!(this_present_registeredRuleInfoVo && that_present_registeredRuleInfoVo))
          return false;
        if (!this.registeredRuleInfoVo.equals(that.registeredRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_registeredRuleInfoVo = true && (isSetRegisteredRuleInfoVo());
      list.add(present_registeredRuleInfoVo);
      if (present_registeredRuleInfoVo)
        list.add(registeredRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegisteredRuleInfoVo()).compareTo(other.isSetRegisteredRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisteredRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredRuleInfoVo, other.registeredRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registeredRuleInfoVo:");
      if (this.registeredRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.registeredRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (registeredRuleInfoVo != null) {
        registeredRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoByPage_argsStandardScheme getScheme() {
        return new getRegisteredRuleInfoByPage_argsStandardScheme();
      }
    }

    private static class getRegisteredRuleInfoByPage_argsStandardScheme extends StandardScheme<getRegisteredRuleInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTERED_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
                struct.registeredRuleInfoVo.read(iprot);
                struct.setRegisteredRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.registeredRuleInfoVo != null) {
          oprot.writeFieldBegin(REGISTERED_RULE_INFO_VO_FIELD_DESC);
          struct.registeredRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoByPage_argsTupleScheme getScheme() {
        return new getRegisteredRuleInfoByPage_argsTupleScheme();
      }
    }

    private static class getRegisteredRuleInfoByPage_argsTupleScheme extends TupleScheme<getRegisteredRuleInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetRegisteredRuleInfoVo()) {
          struct.registeredRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
          struct.registeredRuleInfoVo.read(iprot);
          struct.setRegisteredRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfoByPage_result implements org.apache.thrift.TBase<getRegisteredRuleInfoByPage_result, getRegisteredRuleInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfoByPage_result.class, metaDataMap);
    }

    public getRegisteredRuleInfoByPage_result() {
    }

    public getRegisteredRuleInfoByPage_result(
      com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfoByPage_result(getRegisteredRuleInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo(other.success);
      }
    }

    public getRegisteredRuleInfoByPage_result deepCopy() {
      return new getRegisteredRuleInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getRegisteredRuleInfoByPage_result setSuccess(com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfoByPage_result)
        return this.equals((getRegisteredRuleInfoByPage_result)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoByPage_resultStandardScheme getScheme() {
        return new getRegisteredRuleInfoByPage_resultStandardScheme();
      }
    }

    private static class getRegisteredRuleInfoByPage_resultStandardScheme extends StandardScheme<getRegisteredRuleInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoByPage_resultTupleScheme getScheme() {
        return new getRegisteredRuleInfoByPage_resultTupleScheme();
      }
    }

    private static class getRegisteredRuleInfoByPage_resultTupleScheme extends TupleScheme<getRegisteredRuleInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindPageRegisteredRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfoById_args implements org.apache.thrift.TBase<getRegisteredRuleInfoById_args, getRegisteredRuleInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfoById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfoById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACTIVE_ID((short)2, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfoById_args.class, metaDataMap);
    }

    public getRegisteredRuleInfoById_args() {
    }

    public getRegisteredRuleInfoById_args(
      String clientId,
      String activeId)
    {
      this();
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfoById_args(getRegisteredRuleInfoById_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public getRegisteredRuleInfoById_args deepCopy() {
      return new getRegisteredRuleInfoById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.activeId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getRegisteredRuleInfoById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public getRegisteredRuleInfoById_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfoById_args)
        return this.equals((getRegisteredRuleInfoById_args)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfoById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoById_argsStandardScheme getScheme() {
        return new getRegisteredRuleInfoById_argsStandardScheme();
      }
    }

    private static class getRegisteredRuleInfoById_argsStandardScheme extends StandardScheme<getRegisteredRuleInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoById_argsTupleScheme getScheme() {
        return new getRegisteredRuleInfoById_argsTupleScheme();
      }
    }

    private static class getRegisteredRuleInfoById_argsTupleScheme extends TupleScheme<getRegisteredRuleInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetActiveId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class getRegisteredRuleInfoById_result implements org.apache.thrift.TBase<getRegisteredRuleInfoById_result, getRegisteredRuleInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegisteredRuleInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisteredRuleInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisteredRuleInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisteredRuleInfoById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisteredRuleInfoById_result.class, metaDataMap);
    }

    public getRegisteredRuleInfoById_result() {
    }

    public getRegisteredRuleInfoById_result(
      com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisteredRuleInfoById_result(getRegisteredRuleInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo(other.success);
      }
    }

    public getRegisteredRuleInfoById_result deepCopy() {
      return new getRegisteredRuleInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getRegisteredRuleInfoById_result setSuccess(com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisteredRuleInfoById_result)
        return this.equals((getRegisteredRuleInfoById_result)that);
      return false;
    }

    public boolean equals(getRegisteredRuleInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegisteredRuleInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisteredRuleInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisteredRuleInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoById_resultStandardScheme getScheme() {
        return new getRegisteredRuleInfoById_resultStandardScheme();
      }
    }

    private static class getRegisteredRuleInfoById_resultStandardScheme extends StandardScheme<getRegisteredRuleInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisteredRuleInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisteredRuleInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisteredRuleInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getRegisteredRuleInfoById_resultTupleScheme getScheme() {
        return new getRegisteredRuleInfoById_resultTupleScheme();
      }
    }

    private static class getRegisteredRuleInfoById_resultTupleScheme extends TupleScheme<getRegisteredRuleInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisteredRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindRegisteredRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportRegisteredRuleInfoInfoResUrl_args implements org.apache.thrift.TBase<exportRegisteredRuleInfoInfoResUrl_args, exportRegisteredRuleInfoInfoResUrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportRegisteredRuleInfoInfoResUrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportRegisteredRuleInfoInfoResUrl_args");

    private static final org.apache.thrift.protocol.TField REGISTERED_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportRegisteredRuleInfoInfoResUrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportRegisteredRuleInfoInfoResUrl_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTERED_RULE_INFO_VO((short)1, "registeredRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTERED_RULE_INFO_VO
            return REGISTERED_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTERED_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("registeredRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.RegisteredRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportRegisteredRuleInfoInfoResUrl_args.class, metaDataMap);
    }

    public exportRegisteredRuleInfoInfoResUrl_args() {
    }

    public exportRegisteredRuleInfoInfoResUrl_args(
      com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo)
    {
      this();
      this.registeredRuleInfoVo = registeredRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportRegisteredRuleInfoInfoResUrl_args(exportRegisteredRuleInfoInfoResUrl_args other) {
      if (other.isSetRegisteredRuleInfoVo()) {
        this.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo(other.registeredRuleInfoVo);
      }
    }

    public exportRegisteredRuleInfoInfoResUrl_args deepCopy() {
      return new exportRegisteredRuleInfoInfoResUrl_args(this);
    }

    @Override
    public void clear() {
      this.registeredRuleInfoVo = null;
    }

    public com.froad.thrift.vo.active.RegisteredRuleInfoVo getRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo;
    }

    public exportRegisteredRuleInfoInfoResUrl_args setRegisteredRuleInfoVo(com.froad.thrift.vo.active.RegisteredRuleInfoVo registeredRuleInfoVo) {
      this.registeredRuleInfoVo = registeredRuleInfoVo;
      return this;
    }

    public void unsetRegisteredRuleInfoVo() {
      this.registeredRuleInfoVo = null;
    }

    /** Returns true if field registeredRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisteredRuleInfoVo() {
      return this.registeredRuleInfoVo != null;
    }

    public void setRegisteredRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.registeredRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        if (value == null) {
          unsetRegisteredRuleInfoVo();
        } else {
          setRegisteredRuleInfoVo((com.froad.thrift.vo.active.RegisteredRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        return getRegisteredRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTERED_RULE_INFO_VO:
        return isSetRegisteredRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportRegisteredRuleInfoInfoResUrl_args)
        return this.equals((exportRegisteredRuleInfoInfoResUrl_args)that);
      return false;
    }

    public boolean equals(exportRegisteredRuleInfoInfoResUrl_args that) {
      if (that == null)
        return false;

      boolean this_present_registeredRuleInfoVo = true && this.isSetRegisteredRuleInfoVo();
      boolean that_present_registeredRuleInfoVo = true && that.isSetRegisteredRuleInfoVo();
      if (this_present_registeredRuleInfoVo || that_present_registeredRuleInfoVo) {
        if (!(this_present_registeredRuleInfoVo && that_present_registeredRuleInfoVo))
          return false;
        if (!this.registeredRuleInfoVo.equals(that.registeredRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_registeredRuleInfoVo = true && (isSetRegisteredRuleInfoVo());
      list.add(present_registeredRuleInfoVo);
      if (present_registeredRuleInfoVo)
        list.add(registeredRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportRegisteredRuleInfoInfoResUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegisteredRuleInfoVo()).compareTo(other.isSetRegisteredRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisteredRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredRuleInfoVo, other.registeredRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportRegisteredRuleInfoInfoResUrl_args(");
      boolean first = true;

      sb.append("registeredRuleInfoVo:");
      if (this.registeredRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.registeredRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registeredRuleInfoVo != null) {
        registeredRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_argsStandardSchemeFactory implements SchemeFactory {
      public exportRegisteredRuleInfoInfoResUrl_argsStandardScheme getScheme() {
        return new exportRegisteredRuleInfoInfoResUrl_argsStandardScheme();
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_argsStandardScheme extends StandardScheme<exportRegisteredRuleInfoInfoResUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportRegisteredRuleInfoInfoResUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTERED_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
                struct.registeredRuleInfoVo.read(iprot);
                struct.setRegisteredRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportRegisteredRuleInfoInfoResUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registeredRuleInfoVo != null) {
          oprot.writeFieldBegin(REGISTERED_RULE_INFO_VO_FIELD_DESC);
          struct.registeredRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportRegisteredRuleInfoInfoResUrl_argsTupleSchemeFactory implements SchemeFactory {
      public exportRegisteredRuleInfoInfoResUrl_argsTupleScheme getScheme() {
        return new exportRegisteredRuleInfoInfoResUrl_argsTupleScheme();
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_argsTupleScheme extends TupleScheme<exportRegisteredRuleInfoInfoResUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportRegisteredRuleInfoInfoResUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegisteredRuleInfoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisteredRuleInfoVo()) {
          struct.registeredRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportRegisteredRuleInfoInfoResUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registeredRuleInfoVo = new com.froad.thrift.vo.active.RegisteredRuleInfoVo();
          struct.registeredRuleInfoVo.read(iprot);
          struct.setRegisteredRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class exportRegisteredRuleInfoInfoResUrl_result implements org.apache.thrift.TBase<exportRegisteredRuleInfoInfoResUrl_result, exportRegisteredRuleInfoInfoResUrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportRegisteredRuleInfoInfoResUrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportRegisteredRuleInfoInfoResUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportRegisteredRuleInfoInfoResUrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportRegisteredRuleInfoInfoResUrl_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportRegisteredRuleInfoInfoResUrl_result.class, metaDataMap);
    }

    public exportRegisteredRuleInfoInfoResUrl_result() {
    }

    public exportRegisteredRuleInfoInfoResUrl_result(
      com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportRegisteredRuleInfoInfoResUrl_result(exportRegisteredRuleInfoInfoResUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes(other.success);
      }
    }

    public exportRegisteredRuleInfoInfoResUrl_result deepCopy() {
      return new exportRegisteredRuleInfoInfoResUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes getSuccess() {
      return this.success;
    }

    public exportRegisteredRuleInfoInfoResUrl_result setSuccess(com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportRegisteredRuleInfoInfoResUrl_result)
        return this.equals((exportRegisteredRuleInfoInfoResUrl_result)that);
      return false;
    }

    public boolean equals(exportRegisteredRuleInfoInfoResUrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportRegisteredRuleInfoInfoResUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportRegisteredRuleInfoInfoResUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_resultStandardSchemeFactory implements SchemeFactory {
      public exportRegisteredRuleInfoInfoResUrl_resultStandardScheme getScheme() {
        return new exportRegisteredRuleInfoInfoResUrl_resultStandardScheme();
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_resultStandardScheme extends StandardScheme<exportRegisteredRuleInfoInfoResUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportRegisteredRuleInfoInfoResUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportRegisteredRuleInfoInfoResUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportRegisteredRuleInfoInfoResUrl_resultTupleSchemeFactory implements SchemeFactory {
      public exportRegisteredRuleInfoInfoResUrl_resultTupleScheme getScheme() {
        return new exportRegisteredRuleInfoInfoResUrl_resultTupleScheme();
      }
    }

    private static class exportRegisteredRuleInfoInfoResUrl_resultTupleScheme extends TupleScheme<exportRegisteredRuleInfoInfoResUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportRegisteredRuleInfoInfoResUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportRegisteredRuleInfoInfoResUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.ExportRegisteredRuleInfoInfoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
