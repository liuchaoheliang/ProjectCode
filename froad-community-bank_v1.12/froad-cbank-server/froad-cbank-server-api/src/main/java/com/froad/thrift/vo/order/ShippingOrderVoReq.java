/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 7.订单发货
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShippingOrderVoReq implements org.apache.thrift.TBase<ShippingOrderVoReq, ShippingOrderVoReq._Fields>, java.io.Serializable, Cloneable, Comparable<ShippingOrderVoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShippingOrderVoReq");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELIVERY_CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryCorpId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DELIVERY_CORP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryCorpName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRACKING_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShippingOrderVoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShippingOrderVoReqTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 子订单ID
   */
  public String subOrderId; // required
  /**
   * 物流公司ID
   */
  public String deliveryCorpId; // required
  /**
   * 物流公司名称
   */
  public String deliveryCorpName; // required
  /**
   * 物流单号
   */
  public String trackingNo; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 商户用户号
   */
  public String merchantUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 子订单ID
     */
    SUB_ORDER_ID((short)2, "subOrderId"),
    /**
     * 物流公司ID
     */
    DELIVERY_CORP_ID((short)3, "deliveryCorpId"),
    /**
     * 物流公司名称
     */
    DELIVERY_CORP_NAME((short)4, "deliveryCorpName"),
    /**
     * 物流单号
     */
    TRACKING_NO((short)5, "trackingNo"),
    /**
     * 备注
     */
    REMARK((short)6, "remark"),
    /**
     * 商户用户号
     */
    MERCHANT_USER_ID((short)7, "merchantUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 3: // DELIVERY_CORP_ID
          return DELIVERY_CORP_ID;
        case 4: // DELIVERY_CORP_NAME
          return DELIVERY_CORP_NAME;
        case 5: // TRACKING_NO
          return TRACKING_NO;
        case 6: // REMARK
          return REMARK;
        case 7: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryCorpId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_CORP_NAME, new org.apache.thrift.meta_data.FieldMetaData("deliveryCorpName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_NO, new org.apache.thrift.meta_data.FieldMetaData("trackingNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShippingOrderVoReq.class, metaDataMap);
  }

  public ShippingOrderVoReq() {
  }

  public ShippingOrderVoReq(
    String orderId,
    String subOrderId,
    String deliveryCorpId,
    String deliveryCorpName,
    String trackingNo,
    String remark,
    String merchantUserId)
  {
    this();
    this.orderId = orderId;
    this.subOrderId = subOrderId;
    this.deliveryCorpId = deliveryCorpId;
    this.deliveryCorpName = deliveryCorpName;
    this.trackingNo = trackingNo;
    this.remark = remark;
    this.merchantUserId = merchantUserId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShippingOrderVoReq(ShippingOrderVoReq other) {
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetDeliveryCorpId()) {
      this.deliveryCorpId = other.deliveryCorpId;
    }
    if (other.isSetDeliveryCorpName()) {
      this.deliveryCorpName = other.deliveryCorpName;
    }
    if (other.isSetTrackingNo()) {
      this.trackingNo = other.trackingNo;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetMerchantUserId()) {
      this.merchantUserId = other.merchantUserId;
    }
  }

  public ShippingOrderVoReq deepCopy() {
    return new ShippingOrderVoReq(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.subOrderId = null;
    this.deliveryCorpId = null;
    this.deliveryCorpName = null;
    this.trackingNo = null;
    this.remark = null;
    this.merchantUserId = null;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public ShippingOrderVoReq setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 子订单ID
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单ID
   */
  public ShippingOrderVoReq setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 物流公司ID
   */
  public String getDeliveryCorpId() {
    return this.deliveryCorpId;
  }

  /**
   * 物流公司ID
   */
  public ShippingOrderVoReq setDeliveryCorpId(String deliveryCorpId) {
    this.deliveryCorpId = deliveryCorpId;
    return this;
  }

  public void unsetDeliveryCorpId() {
    this.deliveryCorpId = null;
  }

  /** Returns true if field deliveryCorpId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryCorpId() {
    return this.deliveryCorpId != null;
  }

  public void setDeliveryCorpIdIsSet(boolean value) {
    if (!value) {
      this.deliveryCorpId = null;
    }
  }

  /**
   * 物流公司名称
   */
  public String getDeliveryCorpName() {
    return this.deliveryCorpName;
  }

  /**
   * 物流公司名称
   */
  public ShippingOrderVoReq setDeliveryCorpName(String deliveryCorpName) {
    this.deliveryCorpName = deliveryCorpName;
    return this;
  }

  public void unsetDeliveryCorpName() {
    this.deliveryCorpName = null;
  }

  /** Returns true if field deliveryCorpName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryCorpName() {
    return this.deliveryCorpName != null;
  }

  public void setDeliveryCorpNameIsSet(boolean value) {
    if (!value) {
      this.deliveryCorpName = null;
    }
  }

  /**
   * 物流单号
   */
  public String getTrackingNo() {
    return this.trackingNo;
  }

  /**
   * 物流单号
   */
  public ShippingOrderVoReq setTrackingNo(String trackingNo) {
    this.trackingNo = trackingNo;
    return this;
  }

  public void unsetTrackingNo() {
    this.trackingNo = null;
  }

  /** Returns true if field trackingNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingNo() {
    return this.trackingNo != null;
  }

  public void setTrackingNoIsSet(boolean value) {
    if (!value) {
      this.trackingNo = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public ShippingOrderVoReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 商户用户号
   */
  public String getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 商户用户号
   */
  public ShippingOrderVoReq setMerchantUserId(String merchantUserId) {
    this.merchantUserId = merchantUserId;
    return this;
  }

  public void unsetMerchantUserId() {
    this.merchantUserId = null;
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return this.merchantUserId != null;
  }

  public void setMerchantUserIdIsSet(boolean value) {
    if (!value) {
      this.merchantUserId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case DELIVERY_CORP_ID:
      if (value == null) {
        unsetDeliveryCorpId();
      } else {
        setDeliveryCorpId((String)value);
      }
      break;

    case DELIVERY_CORP_NAME:
      if (value == null) {
        unsetDeliveryCorpName();
      } else {
        setDeliveryCorpName((String)value);
      }
      break;

    case TRACKING_NO:
      if (value == null) {
        unsetTrackingNo();
      } else {
        setTrackingNo((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case DELIVERY_CORP_ID:
      return getDeliveryCorpId();

    case DELIVERY_CORP_NAME:
      return getDeliveryCorpName();

    case TRACKING_NO:
      return getTrackingNo();

    case REMARK:
      return getRemark();

    case MERCHANT_USER_ID:
      return getMerchantUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case DELIVERY_CORP_ID:
      return isSetDeliveryCorpId();
    case DELIVERY_CORP_NAME:
      return isSetDeliveryCorpName();
    case TRACKING_NO:
      return isSetTrackingNo();
    case REMARK:
      return isSetRemark();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShippingOrderVoReq)
      return this.equals((ShippingOrderVoReq)that);
    return false;
  }

  public boolean equals(ShippingOrderVoReq that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_deliveryCorpId = true && this.isSetDeliveryCorpId();
    boolean that_present_deliveryCorpId = true && that.isSetDeliveryCorpId();
    if (this_present_deliveryCorpId || that_present_deliveryCorpId) {
      if (!(this_present_deliveryCorpId && that_present_deliveryCorpId))
        return false;
      if (!this.deliveryCorpId.equals(that.deliveryCorpId))
        return false;
    }

    boolean this_present_deliveryCorpName = true && this.isSetDeliveryCorpName();
    boolean that_present_deliveryCorpName = true && that.isSetDeliveryCorpName();
    if (this_present_deliveryCorpName || that_present_deliveryCorpName) {
      if (!(this_present_deliveryCorpName && that_present_deliveryCorpName))
        return false;
      if (!this.deliveryCorpName.equals(that.deliveryCorpName))
        return false;
    }

    boolean this_present_trackingNo = true && this.isSetTrackingNo();
    boolean that_present_trackingNo = true && that.isSetTrackingNo();
    if (this_present_trackingNo || that_present_trackingNo) {
      if (!(this_present_trackingNo && that_present_trackingNo))
        return false;
      if (!this.trackingNo.equals(that.trackingNo))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_merchantUserId = true && this.isSetMerchantUserId();
    boolean that_present_merchantUserId = true && that.isSetMerchantUserId();
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (!this.merchantUserId.equals(that.merchantUserId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_deliveryCorpId = true && (isSetDeliveryCorpId());
    list.add(present_deliveryCorpId);
    if (present_deliveryCorpId)
      list.add(deliveryCorpId);

    boolean present_deliveryCorpName = true && (isSetDeliveryCorpName());
    list.add(present_deliveryCorpName);
    if (present_deliveryCorpName)
      list.add(deliveryCorpName);

    boolean present_trackingNo = true && (isSetTrackingNo());
    list.add(present_trackingNo);
    if (present_trackingNo)
      list.add(trackingNo);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_merchantUserId = true && (isSetMerchantUserId());
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShippingOrderVoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryCorpId()).compareTo(other.isSetDeliveryCorpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryCorpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryCorpId, other.deliveryCorpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryCorpName()).compareTo(other.isSetDeliveryCorpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryCorpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryCorpName, other.deliveryCorpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingNo()).compareTo(other.isSetTrackingNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingNo, other.trackingNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShippingOrderVoReq(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryCorpId:");
    if (this.deliveryCorpId == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryCorpId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryCorpName:");
    if (this.deliveryCorpName == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryCorpName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackingNo:");
    if (this.trackingNo == null) {
      sb.append("null");
    } else {
      sb.append(this.trackingNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    if (this.merchantUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantUserId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    if (subOrderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subOrderId' was not present! Struct: " + toString());
    }
    if (deliveryCorpId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryCorpId' was not present! Struct: " + toString());
    }
    if (deliveryCorpName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deliveryCorpName' was not present! Struct: " + toString());
    }
    if (trackingNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'trackingNo' was not present! Struct: " + toString());
    }
    if (merchantUserId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'merchantUserId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShippingOrderVoReqStandardSchemeFactory implements SchemeFactory {
    public ShippingOrderVoReqStandardScheme getScheme() {
      return new ShippingOrderVoReqStandardScheme();
    }
  }

  private static class ShippingOrderVoReqStandardScheme extends StandardScheme<ShippingOrderVoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShippingOrderVoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELIVERY_CORP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryCorpId = iprot.readString();
              struct.setDeliveryCorpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELIVERY_CORP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryCorpName = iprot.readString();
              struct.setDeliveryCorpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACKING_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trackingNo = iprot.readString();
              struct.setTrackingNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantUserId = iprot.readString();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShippingOrderVoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryCorpId != null) {
        oprot.writeFieldBegin(DELIVERY_CORP_ID_FIELD_DESC);
        oprot.writeString(struct.deliveryCorpId);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryCorpName != null) {
        oprot.writeFieldBegin(DELIVERY_CORP_NAME_FIELD_DESC);
        oprot.writeString(struct.deliveryCorpName);
        oprot.writeFieldEnd();
      }
      if (struct.trackingNo != null) {
        oprot.writeFieldBegin(TRACKING_NO_FIELD_DESC);
        oprot.writeString(struct.trackingNo);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.merchantUserId != null) {
        oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
        oprot.writeString(struct.merchantUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShippingOrderVoReqTupleSchemeFactory implements SchemeFactory {
    public ShippingOrderVoReqTupleScheme getScheme() {
      return new ShippingOrderVoReqTupleScheme();
    }
  }

  private static class ShippingOrderVoReqTupleScheme extends TupleScheme<ShippingOrderVoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShippingOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.orderId);
      oprot.writeString(struct.subOrderId);
      oprot.writeString(struct.deliveryCorpId);
      oprot.writeString(struct.deliveryCorpName);
      oprot.writeString(struct.trackingNo);
      oprot.writeString(struct.merchantUserId);
      BitSet optionals = new BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShippingOrderVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.subOrderId = iprot.readString();
      struct.setSubOrderIdIsSet(true);
      struct.deliveryCorpId = iprot.readString();
      struct.setDeliveryCorpIdIsSet(true);
      struct.deliveryCorpName = iprot.readString();
      struct.setDeliveryCorpNameIsSet(true);
      struct.trackingNo = iprot.readString();
      struct.setTrackingNoIsSet(true);
      struct.merchantUserId = iprot.readString();
      struct.setMerchantUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}

