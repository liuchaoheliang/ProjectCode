/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 代金券详细规则
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersDetailRuleVo implements org.apache.thrift.TBase<VouchersDetailRuleVo, VouchersDetailRuleVo._Fields>, java.io.Serializable, Cloneable, Comparable<VouchersDetailRuleVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VouchersDetailRuleVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("minMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField IS_TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isTotalDay", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDay", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_MIN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMinMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField IS_PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPerDay", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("perDay", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("perCount", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IS_REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("isRepeat", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField IS_OTHER_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOtherActive", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField IS_PRE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrePay", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField IS_FTOF_FIELD_DESC = new org.apache.thrift.protocol.TField("isFtof", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField IS_ONLY_NEW_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("isOnlyNewUsers", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField PAY_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("payMethod", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ACTIVE_SUSTAIN_RELATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("activeSustainRelationList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField VOUCHERS_COUPON_CODELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersCouponCodelist", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField VOUCHERS_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersTotal", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField TEMPORARY_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("temporaryActiveId", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VouchersDetailRuleVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VouchersDetailRuleVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 活动ID
   */
  public String activeId; // required
  /**
   * 代金券最小金额
   */
  public double minMoney; // required
  /**
   * 代金券最大金额
   */
  public double maxMoney; // required
  /**
   * 代金券总金额
   */
  public double totalMoney; // required
  /**
   * 时间段限制单位0小时1天
   */
  public boolean isTotalDay; // required
  /**
   * 时间段限制数量
   */
  public int totalDay; // required
  /**
   * 时间段限制次数
   */
  public int totalCount; // required
  /**
   * 订单最小限额-才能使用
   */
  public double orderMinMoney; // required
  /**
   * 每人限购-时间段单位
   */
  public boolean isPerDay; // required
  /**
   * 每人限购-时间段数量
   */
  public int perDay; // required
  /**
   * 每人限购-数量
   */
  public int perCount; // required
  /**
   * 是否可以和其它红包重复使用
   */
  public boolean isRepeat; // required
  /**
   * 是否支持参与其它促销
   */
  public boolean isOtherActive; // required
  /**
   * 0-⽀付前 1-⽀付后
   */
  public boolean isPrePay; // required
  /**
   * 是否支持面对面
   */
  public boolean isFtof; // required
  /**
   * 是否仅限新用户试用 *
   */
  public boolean isOnlyNewUsers; // required
  /**
   * ⽀付⽅式限制类型
   */
  public String payMethod; // optional
  /**
   * 支持参与的促销活动列表
   */
  public List<ActiveSustainRelationVo> activeSustainRelationList; // optional
  /**
   * 代金券id 列表
   */
  public List<VouchersCouponCodeVO> vouchersCouponCodelist; // optional
  /**
   * 代金券实际总数 （分批录入）
   */
  public long vouchersTotal; // required
  /**
   * 上传券码活动ID
   */
  public String temporaryActiveId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 活动ID
     */
    ACTIVE_ID((short)3, "activeId"),
    /**
     * 代金券最小金额
     */
    MIN_MONEY((short)4, "minMoney"),
    /**
     * 代金券最大金额
     */
    MAX_MONEY((short)5, "maxMoney"),
    /**
     * 代金券总金额
     */
    TOTAL_MONEY((short)6, "totalMoney"),
    /**
     * 时间段限制单位0小时1天
     */
    IS_TOTAL_DAY((short)7, "isTotalDay"),
    /**
     * 时间段限制数量
     */
    TOTAL_DAY((short)8, "totalDay"),
    /**
     * 时间段限制次数
     */
    TOTAL_COUNT((short)9, "totalCount"),
    /**
     * 订单最小限额-才能使用
     */
    ORDER_MIN_MONEY((short)10, "orderMinMoney"),
    /**
     * 每人限购-时间段单位
     */
    IS_PER_DAY((short)11, "isPerDay"),
    /**
     * 每人限购-时间段数量
     */
    PER_DAY((short)12, "perDay"),
    /**
     * 每人限购-数量
     */
    PER_COUNT((short)13, "perCount"),
    /**
     * 是否可以和其它红包重复使用
     */
    IS_REPEAT((short)14, "isRepeat"),
    /**
     * 是否支持参与其它促销
     */
    IS_OTHER_ACTIVE((short)15, "isOtherActive"),
    /**
     * 0-⽀付前 1-⽀付后
     */
    IS_PRE_PAY((short)16, "isPrePay"),
    /**
     * 是否支持面对面
     */
    IS_FTOF((short)17, "isFtof"),
    /**
     * 是否仅限新用户试用 *
     */
    IS_ONLY_NEW_USERS((short)18, "isOnlyNewUsers"),
    /**
     * ⽀付⽅式限制类型
     */
    PAY_METHOD((short)19, "payMethod"),
    /**
     * 支持参与的促销活动列表
     */
    ACTIVE_SUSTAIN_RELATION_LIST((short)20, "activeSustainRelationList"),
    /**
     * 代金券id 列表
     */
    VOUCHERS_COUPON_CODELIST((short)21, "vouchersCouponCodelist"),
    /**
     * 代金券实际总数 （分批录入）
     */
    VOUCHERS_TOTAL((short)22, "vouchersTotal"),
    /**
     * 上传券码活动ID
     */
    TEMPORARY_ACTIVE_ID((short)23, "temporaryActiveId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // ACTIVE_ID
          return ACTIVE_ID;
        case 4: // MIN_MONEY
          return MIN_MONEY;
        case 5: // MAX_MONEY
          return MAX_MONEY;
        case 6: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 7: // IS_TOTAL_DAY
          return IS_TOTAL_DAY;
        case 8: // TOTAL_DAY
          return TOTAL_DAY;
        case 9: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 10: // ORDER_MIN_MONEY
          return ORDER_MIN_MONEY;
        case 11: // IS_PER_DAY
          return IS_PER_DAY;
        case 12: // PER_DAY
          return PER_DAY;
        case 13: // PER_COUNT
          return PER_COUNT;
        case 14: // IS_REPEAT
          return IS_REPEAT;
        case 15: // IS_OTHER_ACTIVE
          return IS_OTHER_ACTIVE;
        case 16: // IS_PRE_PAY
          return IS_PRE_PAY;
        case 17: // IS_FTOF
          return IS_FTOF;
        case 18: // IS_ONLY_NEW_USERS
          return IS_ONLY_NEW_USERS;
        case 19: // PAY_METHOD
          return PAY_METHOD;
        case 20: // ACTIVE_SUSTAIN_RELATION_LIST
          return ACTIVE_SUSTAIN_RELATION_LIST;
        case 21: // VOUCHERS_COUPON_CODELIST
          return VOUCHERS_COUPON_CODELIST;
        case 22: // VOUCHERS_TOTAL
          return VOUCHERS_TOTAL;
        case 23: // TEMPORARY_ACTIVE_ID
          return TEMPORARY_ACTIVE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MINMONEY_ISSET_ID = 1;
  private static final int __MAXMONEY_ISSET_ID = 2;
  private static final int __TOTALMONEY_ISSET_ID = 3;
  private static final int __ISTOTALDAY_ISSET_ID = 4;
  private static final int __TOTALDAY_ISSET_ID = 5;
  private static final int __TOTALCOUNT_ISSET_ID = 6;
  private static final int __ORDERMINMONEY_ISSET_ID = 7;
  private static final int __ISPERDAY_ISSET_ID = 8;
  private static final int __PERDAY_ISSET_ID = 9;
  private static final int __PERCOUNT_ISSET_ID = 10;
  private static final int __ISREPEAT_ISSET_ID = 11;
  private static final int __ISOTHERACTIVE_ISSET_ID = 12;
  private static final int __ISPREPAY_ISSET_ID = 13;
  private static final int __ISFTOF_ISSET_ID = 14;
  private static final int __ISONLYNEWUSERS_ISSET_ID = 15;
  private static final int __VOUCHERSTOTAL_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAY_METHOD,_Fields.ACTIVE_SUSTAIN_RELATION_LIST,_Fields.VOUCHERS_COUPON_CODELIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("minMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_MONEY, new org.apache.thrift.meta_data.FieldMetaData("maxMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("isTotalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("totalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_MIN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("orderMinMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("isPerDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("perDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("perCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REPEAT, new org.apache.thrift.meta_data.FieldMetaData("isRepeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_OTHER_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isOtherActive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PRE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPrePay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FTOF, new org.apache.thrift.meta_data.FieldMetaData("isFtof", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ONLY_NEW_USERS, new org.apache.thrift.meta_data.FieldMetaData("isOnlyNewUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAY_METHOD, new org.apache.thrift.meta_data.FieldMetaData("payMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_SUSTAIN_RELATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("activeSustainRelationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ActiveSustainRelationVo"))));
    tmpMap.put(_Fields.VOUCHERS_COUPON_CODELIST, new org.apache.thrift.meta_data.FieldMetaData("vouchersCouponCodelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "VouchersCouponCodeVO"))));
    tmpMap.put(_Fields.VOUCHERS_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("vouchersTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEMPORARY_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("temporaryActiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VouchersDetailRuleVo.class, metaDataMap);
  }

  public VouchersDetailRuleVo() {
  }

  public VouchersDetailRuleVo(
    long id,
    String clientId,
    String activeId,
    double minMoney,
    double maxMoney,
    double totalMoney,
    boolean isTotalDay,
    int totalDay,
    int totalCount,
    double orderMinMoney,
    boolean isPerDay,
    int perDay,
    int perCount,
    boolean isRepeat,
    boolean isOtherActive,
    boolean isPrePay,
    boolean isFtof,
    boolean isOnlyNewUsers,
    long vouchersTotal,
    String temporaryActiveId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.activeId = activeId;
    this.minMoney = minMoney;
    setMinMoneyIsSet(true);
    this.maxMoney = maxMoney;
    setMaxMoneyIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.orderMinMoney = orderMinMoney;
    setOrderMinMoneyIsSet(true);
    this.isPerDay = isPerDay;
    setIsPerDayIsSet(true);
    this.perDay = perDay;
    setPerDayIsSet(true);
    this.perCount = perCount;
    setPerCountIsSet(true);
    this.isRepeat = isRepeat;
    setIsRepeatIsSet(true);
    this.isOtherActive = isOtherActive;
    setIsOtherActiveIsSet(true);
    this.isPrePay = isPrePay;
    setIsPrePayIsSet(true);
    this.isFtof = isFtof;
    setIsFtofIsSet(true);
    this.isOnlyNewUsers = isOnlyNewUsers;
    setIsOnlyNewUsersIsSet(true);
    this.vouchersTotal = vouchersTotal;
    setVouchersTotalIsSet(true);
    this.temporaryActiveId = temporaryActiveId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VouchersDetailRuleVo(VouchersDetailRuleVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    this.minMoney = other.minMoney;
    this.maxMoney = other.maxMoney;
    this.totalMoney = other.totalMoney;
    this.isTotalDay = other.isTotalDay;
    this.totalDay = other.totalDay;
    this.totalCount = other.totalCount;
    this.orderMinMoney = other.orderMinMoney;
    this.isPerDay = other.isPerDay;
    this.perDay = other.perDay;
    this.perCount = other.perCount;
    this.isRepeat = other.isRepeat;
    this.isOtherActive = other.isOtherActive;
    this.isPrePay = other.isPrePay;
    this.isFtof = other.isFtof;
    this.isOnlyNewUsers = other.isOnlyNewUsers;
    if (other.isSetPayMethod()) {
      this.payMethod = other.payMethod;
    }
    if (other.isSetActiveSustainRelationList()) {
      List<ActiveSustainRelationVo> __this__activeSustainRelationList = new ArrayList<ActiveSustainRelationVo>(other.activeSustainRelationList.size());
      for (ActiveSustainRelationVo other_element : other.activeSustainRelationList) {
        __this__activeSustainRelationList.add(other_element);
      }
      this.activeSustainRelationList = __this__activeSustainRelationList;
    }
    if (other.isSetVouchersCouponCodelist()) {
      List<VouchersCouponCodeVO> __this__vouchersCouponCodelist = new ArrayList<VouchersCouponCodeVO>(other.vouchersCouponCodelist.size());
      for (VouchersCouponCodeVO other_element : other.vouchersCouponCodelist) {
        __this__vouchersCouponCodelist.add(other_element);
      }
      this.vouchersCouponCodelist = __this__vouchersCouponCodelist;
    }
    this.vouchersTotal = other.vouchersTotal;
    if (other.isSetTemporaryActiveId()) {
      this.temporaryActiveId = other.temporaryActiveId;
    }
  }

  public VouchersDetailRuleVo deepCopy() {
    return new VouchersDetailRuleVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.activeId = null;
    setMinMoneyIsSet(false);
    this.minMoney = 0.0;
    setMaxMoneyIsSet(false);
    this.maxMoney = 0.0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    setIsTotalDayIsSet(false);
    this.isTotalDay = false;
    setTotalDayIsSet(false);
    this.totalDay = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setOrderMinMoneyIsSet(false);
    this.orderMinMoney = 0.0;
    setIsPerDayIsSet(false);
    this.isPerDay = false;
    setPerDayIsSet(false);
    this.perDay = 0;
    setPerCountIsSet(false);
    this.perCount = 0;
    setIsRepeatIsSet(false);
    this.isRepeat = false;
    setIsOtherActiveIsSet(false);
    this.isOtherActive = false;
    setIsPrePayIsSet(false);
    this.isPrePay = false;
    setIsFtofIsSet(false);
    this.isFtof = false;
    setIsOnlyNewUsersIsSet(false);
    this.isOnlyNewUsers = false;
    this.payMethod = null;
    this.activeSustainRelationList = null;
    this.vouchersCouponCodelist = null;
    setVouchersTotalIsSet(false);
    this.vouchersTotal = 0;
    this.temporaryActiveId = null;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public VouchersDetailRuleVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public VouchersDetailRuleVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 活动ID
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动ID
   */
  public VouchersDetailRuleVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 代金券最小金额
   */
  public double getMinMoney() {
    return this.minMoney;
  }

  /**
   * 代金券最小金额
   */
  public VouchersDetailRuleVo setMinMoney(double minMoney) {
    this.minMoney = minMoney;
    setMinMoneyIsSet(true);
    return this;
  }

  public void unsetMinMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMONEY_ISSET_ID);
  }

  /** Returns true if field minMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMONEY_ISSET_ID);
  }

  public void setMinMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMONEY_ISSET_ID, value);
  }

  /**
   * 代金券最大金额
   */
  public double getMaxMoney() {
    return this.maxMoney;
  }

  /**
   * 代金券最大金额
   */
  public VouchersDetailRuleVo setMaxMoney(double maxMoney) {
    this.maxMoney = maxMoney;
    setMaxMoneyIsSet(true);
    return this;
  }

  public void unsetMaxMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  /** Returns true if field maxMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  public void setMaxMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMONEY_ISSET_ID, value);
  }

  /**
   * 代金券总金额
   */
  public double getTotalMoney() {
    return this.totalMoney;
  }

  /**
   * 代金券总金额
   */
  public VouchersDetailRuleVo setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  /**
   * 时间段限制单位0小时1天
   */
  public boolean isIsTotalDay() {
    return this.isTotalDay;
  }

  /**
   * 时间段限制单位0小时1天
   */
  public VouchersDetailRuleVo setIsTotalDay(boolean isTotalDay) {
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    return this;
  }

  public void unsetIsTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  /** Returns true if field isTotalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  public void setIsTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID, value);
  }

  /**
   * 时间段限制数量
   */
  public int getTotalDay() {
    return this.totalDay;
  }

  /**
   * 时间段限制数量
   */
  public VouchersDetailRuleVo setTotalDay(int totalDay) {
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    return this;
  }

  public void unsetTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  /** Returns true if field totalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  public void setTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDAY_ISSET_ID, value);
  }

  /**
   * 时间段限制次数
   */
  public int getTotalCount() {
    return this.totalCount;
  }

  /**
   * 时间段限制次数
   */
  public VouchersDetailRuleVo setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 订单最小限额-才能使用
   */
  public double getOrderMinMoney() {
    return this.orderMinMoney;
  }

  /**
   * 订单最小限额-才能使用
   */
  public VouchersDetailRuleVo setOrderMinMoney(double orderMinMoney) {
    this.orderMinMoney = orderMinMoney;
    setOrderMinMoneyIsSet(true);
    return this;
  }

  public void unsetOrderMinMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERMINMONEY_ISSET_ID);
  }

  /** Returns true if field orderMinMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMinMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERMINMONEY_ISSET_ID);
  }

  public void setOrderMinMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERMINMONEY_ISSET_ID, value);
  }

  /**
   * 每人限购-时间段单位
   */
  public boolean isIsPerDay() {
    return this.isPerDay;
  }

  /**
   * 每人限购-时间段单位
   */
  public VouchersDetailRuleVo setIsPerDay(boolean isPerDay) {
    this.isPerDay = isPerDay;
    setIsPerDayIsSet(true);
    return this;
  }

  public void unsetIsPerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPERDAY_ISSET_ID);
  }

  /** Returns true if field isPerDay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPERDAY_ISSET_ID);
  }

  public void setIsPerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPERDAY_ISSET_ID, value);
  }

  /**
   * 每人限购-时间段数量
   */
  public int getPerDay() {
    return this.perDay;
  }

  /**
   * 每人限购-时间段数量
   */
  public VouchersDetailRuleVo setPerDay(int perDay) {
    this.perDay = perDay;
    setPerDayIsSet(true);
    return this;
  }

  public void unsetPerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERDAY_ISSET_ID);
  }

  /** Returns true if field perDay is set (has been assigned a value) and false otherwise */
  public boolean isSetPerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __PERDAY_ISSET_ID);
  }

  public void setPerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERDAY_ISSET_ID, value);
  }

  /**
   * 每人限购-数量
   */
  public int getPerCount() {
    return this.perCount;
  }

  /**
   * 每人限购-数量
   */
  public VouchersDetailRuleVo setPerCount(int perCount) {
    this.perCount = perCount;
    setPerCountIsSet(true);
    return this;
  }

  public void unsetPerCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCOUNT_ISSET_ID);
  }

  /** Returns true if field perCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPerCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCOUNT_ISSET_ID);
  }

  public void setPerCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCOUNT_ISSET_ID, value);
  }

  /**
   * 是否可以和其它红包重复使用
   */
  public boolean isIsRepeat() {
    return this.isRepeat;
  }

  /**
   * 是否可以和其它红包重复使用
   */
  public VouchersDetailRuleVo setIsRepeat(boolean isRepeat) {
    this.isRepeat = isRepeat;
    setIsRepeatIsSet(true);
    return this;
  }

  public void unsetIsRepeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREPEAT_ISSET_ID);
  }

  /** Returns true if field isRepeat is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRepeat() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREPEAT_ISSET_ID);
  }

  public void setIsRepeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREPEAT_ISSET_ID, value);
  }

  /**
   * 是否支持参与其它促销
   */
  public boolean isIsOtherActive() {
    return this.isOtherActive;
  }

  /**
   * 是否支持参与其它促销
   */
  public VouchersDetailRuleVo setIsOtherActive(boolean isOtherActive) {
    this.isOtherActive = isOtherActive;
    setIsOtherActiveIsSet(true);
    return this;
  }

  public void unsetIsOtherActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOTHERACTIVE_ISSET_ID);
  }

  /** Returns true if field isOtherActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOtherActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOTHERACTIVE_ISSET_ID);
  }

  public void setIsOtherActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOTHERACTIVE_ISSET_ID, value);
  }

  /**
   * 0-⽀付前 1-⽀付后
   */
  public boolean isIsPrePay() {
    return this.isPrePay;
  }

  /**
   * 0-⽀付前 1-⽀付后
   */
  public VouchersDetailRuleVo setIsPrePay(boolean isPrePay) {
    this.isPrePay = isPrePay;
    setIsPrePayIsSet(true);
    return this;
  }

  public void unsetIsPrePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREPAY_ISSET_ID);
  }

  /** Returns true if field isPrePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPrePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREPAY_ISSET_ID);
  }

  public void setIsPrePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREPAY_ISSET_ID, value);
  }

  /**
   * 是否支持面对面
   */
  public boolean isIsFtof() {
    return this.isFtof;
  }

  /**
   * 是否支持面对面
   */
  public VouchersDetailRuleVo setIsFtof(boolean isFtof) {
    this.isFtof = isFtof;
    setIsFtofIsSet(true);
    return this;
  }

  public void unsetIsFtof() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFTOF_ISSET_ID);
  }

  /** Returns true if field isFtof is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFtof() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFTOF_ISSET_ID);
  }

  public void setIsFtofIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFTOF_ISSET_ID, value);
  }

  /**
   * 是否仅限新用户试用 *
   */
  public boolean isIsOnlyNewUsers() {
    return this.isOnlyNewUsers;
  }

  /**
   * 是否仅限新用户试用 *
   */
  public VouchersDetailRuleVo setIsOnlyNewUsers(boolean isOnlyNewUsers) {
    this.isOnlyNewUsers = isOnlyNewUsers;
    setIsOnlyNewUsersIsSet(true);
    return this;
  }

  public void unsetIsOnlyNewUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISONLYNEWUSERS_ISSET_ID);
  }

  /** Returns true if field isOnlyNewUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOnlyNewUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __ISONLYNEWUSERS_ISSET_ID);
  }

  public void setIsOnlyNewUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISONLYNEWUSERS_ISSET_ID, value);
  }

  /**
   * ⽀付⽅式限制类型
   */
  public String getPayMethod() {
    return this.payMethod;
  }

  /**
   * ⽀付⽅式限制类型
   */
  public VouchersDetailRuleVo setPayMethod(String payMethod) {
    this.payMethod = payMethod;
    return this;
  }

  public void unsetPayMethod() {
    this.payMethod = null;
  }

  /** Returns true if field payMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMethod() {
    return this.payMethod != null;
  }

  public void setPayMethodIsSet(boolean value) {
    if (!value) {
      this.payMethod = null;
    }
  }

  public int getActiveSustainRelationListSize() {
    return (this.activeSustainRelationList == null) ? 0 : this.activeSustainRelationList.size();
  }

  public java.util.Iterator<ActiveSustainRelationVo> getActiveSustainRelationListIterator() {
    return (this.activeSustainRelationList == null) ? null : this.activeSustainRelationList.iterator();
  }

  public void addToActiveSustainRelationList(ActiveSustainRelationVo elem) {
    if (this.activeSustainRelationList == null) {
      this.activeSustainRelationList = new ArrayList<ActiveSustainRelationVo>();
    }
    this.activeSustainRelationList.add(elem);
  }

  /**
   * 支持参与的促销活动列表
   */
  public List<ActiveSustainRelationVo> getActiveSustainRelationList() {
    return this.activeSustainRelationList;
  }

  /**
   * 支持参与的促销活动列表
   */
  public VouchersDetailRuleVo setActiveSustainRelationList(List<ActiveSustainRelationVo> activeSustainRelationList) {
    this.activeSustainRelationList = activeSustainRelationList;
    return this;
  }

  public void unsetActiveSustainRelationList() {
    this.activeSustainRelationList = null;
  }

  /** Returns true if field activeSustainRelationList is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveSustainRelationList() {
    return this.activeSustainRelationList != null;
  }

  public void setActiveSustainRelationListIsSet(boolean value) {
    if (!value) {
      this.activeSustainRelationList = null;
    }
  }

  public int getVouchersCouponCodelistSize() {
    return (this.vouchersCouponCodelist == null) ? 0 : this.vouchersCouponCodelist.size();
  }

  public java.util.Iterator<VouchersCouponCodeVO> getVouchersCouponCodelistIterator() {
    return (this.vouchersCouponCodelist == null) ? null : this.vouchersCouponCodelist.iterator();
  }

  public void addToVouchersCouponCodelist(VouchersCouponCodeVO elem) {
    if (this.vouchersCouponCodelist == null) {
      this.vouchersCouponCodelist = new ArrayList<VouchersCouponCodeVO>();
    }
    this.vouchersCouponCodelist.add(elem);
  }

  /**
   * 代金券id 列表
   */
  public List<VouchersCouponCodeVO> getVouchersCouponCodelist() {
    return this.vouchersCouponCodelist;
  }

  /**
   * 代金券id 列表
   */
  public VouchersDetailRuleVo setVouchersCouponCodelist(List<VouchersCouponCodeVO> vouchersCouponCodelist) {
    this.vouchersCouponCodelist = vouchersCouponCodelist;
    return this;
  }

  public void unsetVouchersCouponCodelist() {
    this.vouchersCouponCodelist = null;
  }

  /** Returns true if field vouchersCouponCodelist is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersCouponCodelist() {
    return this.vouchersCouponCodelist != null;
  }

  public void setVouchersCouponCodelistIsSet(boolean value) {
    if (!value) {
      this.vouchersCouponCodelist = null;
    }
  }

  /**
   * 代金券实际总数 （分批录入）
   */
  public long getVouchersTotal() {
    return this.vouchersTotal;
  }

  /**
   * 代金券实际总数 （分批录入）
   */
  public VouchersDetailRuleVo setVouchersTotal(long vouchersTotal) {
    this.vouchersTotal = vouchersTotal;
    setVouchersTotalIsSet(true);
    return this;
  }

  public void unsetVouchersTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUCHERSTOTAL_ISSET_ID);
  }

  /** Returns true if field vouchersTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUCHERSTOTAL_ISSET_ID);
  }

  public void setVouchersTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUCHERSTOTAL_ISSET_ID, value);
  }

  /**
   * 上传券码活动ID
   */
  public String getTemporaryActiveId() {
    return this.temporaryActiveId;
  }

  /**
   * 上传券码活动ID
   */
  public VouchersDetailRuleVo setTemporaryActiveId(String temporaryActiveId) {
    this.temporaryActiveId = temporaryActiveId;
    return this;
  }

  public void unsetTemporaryActiveId() {
    this.temporaryActiveId = null;
  }

  /** Returns true if field temporaryActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemporaryActiveId() {
    return this.temporaryActiveId != null;
  }

  public void setTemporaryActiveIdIsSet(boolean value) {
    if (!value) {
      this.temporaryActiveId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case MIN_MONEY:
      if (value == null) {
        unsetMinMoney();
      } else {
        setMinMoney((Double)value);
      }
      break;

    case MAX_MONEY:
      if (value == null) {
        unsetMaxMoney();
      } else {
        setMaxMoney((Double)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case IS_TOTAL_DAY:
      if (value == null) {
        unsetIsTotalDay();
      } else {
        setIsTotalDay((Boolean)value);
      }
      break;

    case TOTAL_DAY:
      if (value == null) {
        unsetTotalDay();
      } else {
        setTotalDay((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case ORDER_MIN_MONEY:
      if (value == null) {
        unsetOrderMinMoney();
      } else {
        setOrderMinMoney((Double)value);
      }
      break;

    case IS_PER_DAY:
      if (value == null) {
        unsetIsPerDay();
      } else {
        setIsPerDay((Boolean)value);
      }
      break;

    case PER_DAY:
      if (value == null) {
        unsetPerDay();
      } else {
        setPerDay((Integer)value);
      }
      break;

    case PER_COUNT:
      if (value == null) {
        unsetPerCount();
      } else {
        setPerCount((Integer)value);
      }
      break;

    case IS_REPEAT:
      if (value == null) {
        unsetIsRepeat();
      } else {
        setIsRepeat((Boolean)value);
      }
      break;

    case IS_OTHER_ACTIVE:
      if (value == null) {
        unsetIsOtherActive();
      } else {
        setIsOtherActive((Boolean)value);
      }
      break;

    case IS_PRE_PAY:
      if (value == null) {
        unsetIsPrePay();
      } else {
        setIsPrePay((Boolean)value);
      }
      break;

    case IS_FTOF:
      if (value == null) {
        unsetIsFtof();
      } else {
        setIsFtof((Boolean)value);
      }
      break;

    case IS_ONLY_NEW_USERS:
      if (value == null) {
        unsetIsOnlyNewUsers();
      } else {
        setIsOnlyNewUsers((Boolean)value);
      }
      break;

    case PAY_METHOD:
      if (value == null) {
        unsetPayMethod();
      } else {
        setPayMethod((String)value);
      }
      break;

    case ACTIVE_SUSTAIN_RELATION_LIST:
      if (value == null) {
        unsetActiveSustainRelationList();
      } else {
        setActiveSustainRelationList((List<ActiveSustainRelationVo>)value);
      }
      break;

    case VOUCHERS_COUPON_CODELIST:
      if (value == null) {
        unsetVouchersCouponCodelist();
      } else {
        setVouchersCouponCodelist((List<VouchersCouponCodeVO>)value);
      }
      break;

    case VOUCHERS_TOTAL:
      if (value == null) {
        unsetVouchersTotal();
      } else {
        setVouchersTotal((Long)value);
      }
      break;

    case TEMPORARY_ACTIVE_ID:
      if (value == null) {
        unsetTemporaryActiveId();
      } else {
        setTemporaryActiveId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case ACTIVE_ID:
      return getActiveId();

    case MIN_MONEY:
      return Double.valueOf(getMinMoney());

    case MAX_MONEY:
      return Double.valueOf(getMaxMoney());

    case TOTAL_MONEY:
      return Double.valueOf(getTotalMoney());

    case IS_TOTAL_DAY:
      return Boolean.valueOf(isIsTotalDay());

    case TOTAL_DAY:
      return Integer.valueOf(getTotalDay());

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case ORDER_MIN_MONEY:
      return Double.valueOf(getOrderMinMoney());

    case IS_PER_DAY:
      return Boolean.valueOf(isIsPerDay());

    case PER_DAY:
      return Integer.valueOf(getPerDay());

    case PER_COUNT:
      return Integer.valueOf(getPerCount());

    case IS_REPEAT:
      return Boolean.valueOf(isIsRepeat());

    case IS_OTHER_ACTIVE:
      return Boolean.valueOf(isIsOtherActive());

    case IS_PRE_PAY:
      return Boolean.valueOf(isIsPrePay());

    case IS_FTOF:
      return Boolean.valueOf(isIsFtof());

    case IS_ONLY_NEW_USERS:
      return Boolean.valueOf(isIsOnlyNewUsers());

    case PAY_METHOD:
      return getPayMethod();

    case ACTIVE_SUSTAIN_RELATION_LIST:
      return getActiveSustainRelationList();

    case VOUCHERS_COUPON_CODELIST:
      return getVouchersCouponCodelist();

    case VOUCHERS_TOTAL:
      return Long.valueOf(getVouchersTotal());

    case TEMPORARY_ACTIVE_ID:
      return getTemporaryActiveId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case ACTIVE_ID:
      return isSetActiveId();
    case MIN_MONEY:
      return isSetMinMoney();
    case MAX_MONEY:
      return isSetMaxMoney();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case IS_TOTAL_DAY:
      return isSetIsTotalDay();
    case TOTAL_DAY:
      return isSetTotalDay();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case ORDER_MIN_MONEY:
      return isSetOrderMinMoney();
    case IS_PER_DAY:
      return isSetIsPerDay();
    case PER_DAY:
      return isSetPerDay();
    case PER_COUNT:
      return isSetPerCount();
    case IS_REPEAT:
      return isSetIsRepeat();
    case IS_OTHER_ACTIVE:
      return isSetIsOtherActive();
    case IS_PRE_PAY:
      return isSetIsPrePay();
    case IS_FTOF:
      return isSetIsFtof();
    case IS_ONLY_NEW_USERS:
      return isSetIsOnlyNewUsers();
    case PAY_METHOD:
      return isSetPayMethod();
    case ACTIVE_SUSTAIN_RELATION_LIST:
      return isSetActiveSustainRelationList();
    case VOUCHERS_COUPON_CODELIST:
      return isSetVouchersCouponCodelist();
    case VOUCHERS_TOTAL:
      return isSetVouchersTotal();
    case TEMPORARY_ACTIVE_ID:
      return isSetTemporaryActiveId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VouchersDetailRuleVo)
      return this.equals((VouchersDetailRuleVo)that);
    return false;
  }

  public boolean equals(VouchersDetailRuleVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_minMoney = true;
    boolean that_present_minMoney = true;
    if (this_present_minMoney || that_present_minMoney) {
      if (!(this_present_minMoney && that_present_minMoney))
        return false;
      if (this.minMoney != that.minMoney)
        return false;
    }

    boolean this_present_maxMoney = true;
    boolean that_present_maxMoney = true;
    if (this_present_maxMoney || that_present_maxMoney) {
      if (!(this_present_maxMoney && that_present_maxMoney))
        return false;
      if (this.maxMoney != that.maxMoney)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_isTotalDay = true;
    boolean that_present_isTotalDay = true;
    if (this_present_isTotalDay || that_present_isTotalDay) {
      if (!(this_present_isTotalDay && that_present_isTotalDay))
        return false;
      if (this.isTotalDay != that.isTotalDay)
        return false;
    }

    boolean this_present_totalDay = true;
    boolean that_present_totalDay = true;
    if (this_present_totalDay || that_present_totalDay) {
      if (!(this_present_totalDay && that_present_totalDay))
        return false;
      if (this.totalDay != that.totalDay)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_orderMinMoney = true;
    boolean that_present_orderMinMoney = true;
    if (this_present_orderMinMoney || that_present_orderMinMoney) {
      if (!(this_present_orderMinMoney && that_present_orderMinMoney))
        return false;
      if (this.orderMinMoney != that.orderMinMoney)
        return false;
    }

    boolean this_present_isPerDay = true;
    boolean that_present_isPerDay = true;
    if (this_present_isPerDay || that_present_isPerDay) {
      if (!(this_present_isPerDay && that_present_isPerDay))
        return false;
      if (this.isPerDay != that.isPerDay)
        return false;
    }

    boolean this_present_perDay = true;
    boolean that_present_perDay = true;
    if (this_present_perDay || that_present_perDay) {
      if (!(this_present_perDay && that_present_perDay))
        return false;
      if (this.perDay != that.perDay)
        return false;
    }

    boolean this_present_perCount = true;
    boolean that_present_perCount = true;
    if (this_present_perCount || that_present_perCount) {
      if (!(this_present_perCount && that_present_perCount))
        return false;
      if (this.perCount != that.perCount)
        return false;
    }

    boolean this_present_isRepeat = true;
    boolean that_present_isRepeat = true;
    if (this_present_isRepeat || that_present_isRepeat) {
      if (!(this_present_isRepeat && that_present_isRepeat))
        return false;
      if (this.isRepeat != that.isRepeat)
        return false;
    }

    boolean this_present_isOtherActive = true;
    boolean that_present_isOtherActive = true;
    if (this_present_isOtherActive || that_present_isOtherActive) {
      if (!(this_present_isOtherActive && that_present_isOtherActive))
        return false;
      if (this.isOtherActive != that.isOtherActive)
        return false;
    }

    boolean this_present_isPrePay = true;
    boolean that_present_isPrePay = true;
    if (this_present_isPrePay || that_present_isPrePay) {
      if (!(this_present_isPrePay && that_present_isPrePay))
        return false;
      if (this.isPrePay != that.isPrePay)
        return false;
    }

    boolean this_present_isFtof = true;
    boolean that_present_isFtof = true;
    if (this_present_isFtof || that_present_isFtof) {
      if (!(this_present_isFtof && that_present_isFtof))
        return false;
      if (this.isFtof != that.isFtof)
        return false;
    }

    boolean this_present_isOnlyNewUsers = true;
    boolean that_present_isOnlyNewUsers = true;
    if (this_present_isOnlyNewUsers || that_present_isOnlyNewUsers) {
      if (!(this_present_isOnlyNewUsers && that_present_isOnlyNewUsers))
        return false;
      if (this.isOnlyNewUsers != that.isOnlyNewUsers)
        return false;
    }

    boolean this_present_payMethod = true && this.isSetPayMethod();
    boolean that_present_payMethod = true && that.isSetPayMethod();
    if (this_present_payMethod || that_present_payMethod) {
      if (!(this_present_payMethod && that_present_payMethod))
        return false;
      if (!this.payMethod.equals(that.payMethod))
        return false;
    }

    boolean this_present_activeSustainRelationList = true && this.isSetActiveSustainRelationList();
    boolean that_present_activeSustainRelationList = true && that.isSetActiveSustainRelationList();
    if (this_present_activeSustainRelationList || that_present_activeSustainRelationList) {
      if (!(this_present_activeSustainRelationList && that_present_activeSustainRelationList))
        return false;
      if (!this.activeSustainRelationList.equals(that.activeSustainRelationList))
        return false;
    }

    boolean this_present_vouchersCouponCodelist = true && this.isSetVouchersCouponCodelist();
    boolean that_present_vouchersCouponCodelist = true && that.isSetVouchersCouponCodelist();
    if (this_present_vouchersCouponCodelist || that_present_vouchersCouponCodelist) {
      if (!(this_present_vouchersCouponCodelist && that_present_vouchersCouponCodelist))
        return false;
      if (!this.vouchersCouponCodelist.equals(that.vouchersCouponCodelist))
        return false;
    }

    boolean this_present_vouchersTotal = true;
    boolean that_present_vouchersTotal = true;
    if (this_present_vouchersTotal || that_present_vouchersTotal) {
      if (!(this_present_vouchersTotal && that_present_vouchersTotal))
        return false;
      if (this.vouchersTotal != that.vouchersTotal)
        return false;
    }

    boolean this_present_temporaryActiveId = true && this.isSetTemporaryActiveId();
    boolean that_present_temporaryActiveId = true && that.isSetTemporaryActiveId();
    if (this_present_temporaryActiveId || that_present_temporaryActiveId) {
      if (!(this_present_temporaryActiveId && that_present_temporaryActiveId))
        return false;
      if (!this.temporaryActiveId.equals(that.temporaryActiveId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_minMoney = true;
    list.add(present_minMoney);
    if (present_minMoney)
      list.add(minMoney);

    boolean present_maxMoney = true;
    list.add(present_maxMoney);
    if (present_maxMoney)
      list.add(maxMoney);

    boolean present_totalMoney = true;
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_isTotalDay = true;
    list.add(present_isTotalDay);
    if (present_isTotalDay)
      list.add(isTotalDay);

    boolean present_totalDay = true;
    list.add(present_totalDay);
    if (present_totalDay)
      list.add(totalDay);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_orderMinMoney = true;
    list.add(present_orderMinMoney);
    if (present_orderMinMoney)
      list.add(orderMinMoney);

    boolean present_isPerDay = true;
    list.add(present_isPerDay);
    if (present_isPerDay)
      list.add(isPerDay);

    boolean present_perDay = true;
    list.add(present_perDay);
    if (present_perDay)
      list.add(perDay);

    boolean present_perCount = true;
    list.add(present_perCount);
    if (present_perCount)
      list.add(perCount);

    boolean present_isRepeat = true;
    list.add(present_isRepeat);
    if (present_isRepeat)
      list.add(isRepeat);

    boolean present_isOtherActive = true;
    list.add(present_isOtherActive);
    if (present_isOtherActive)
      list.add(isOtherActive);

    boolean present_isPrePay = true;
    list.add(present_isPrePay);
    if (present_isPrePay)
      list.add(isPrePay);

    boolean present_isFtof = true;
    list.add(present_isFtof);
    if (present_isFtof)
      list.add(isFtof);

    boolean present_isOnlyNewUsers = true;
    list.add(present_isOnlyNewUsers);
    if (present_isOnlyNewUsers)
      list.add(isOnlyNewUsers);

    boolean present_payMethod = true && (isSetPayMethod());
    list.add(present_payMethod);
    if (present_payMethod)
      list.add(payMethod);

    boolean present_activeSustainRelationList = true && (isSetActiveSustainRelationList());
    list.add(present_activeSustainRelationList);
    if (present_activeSustainRelationList)
      list.add(activeSustainRelationList);

    boolean present_vouchersCouponCodelist = true && (isSetVouchersCouponCodelist());
    list.add(present_vouchersCouponCodelist);
    if (present_vouchersCouponCodelist)
      list.add(vouchersCouponCodelist);

    boolean present_vouchersTotal = true;
    list.add(present_vouchersTotal);
    if (present_vouchersTotal)
      list.add(vouchersTotal);

    boolean present_temporaryActiveId = true && (isSetTemporaryActiveId());
    list.add(present_temporaryActiveId);
    if (present_temporaryActiveId)
      list.add(temporaryActiveId);

    return list.hashCode();
  }

  @Override
  public int compareTo(VouchersDetailRuleVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMoney()).compareTo(other.isSetMinMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMoney, other.minMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMoney()).compareTo(other.isSetMaxMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMoney, other.maxMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTotalDay()).compareTo(other.isSetIsTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTotalDay, other.isTotalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDay()).compareTo(other.isSetTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDay, other.totalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMinMoney()).compareTo(other.isSetOrderMinMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMinMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMinMoney, other.orderMinMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPerDay()).compareTo(other.isSetIsPerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPerDay, other.isPerDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerDay()).compareTo(other.isSetPerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perDay, other.perDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerCount()).compareTo(other.isSetPerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perCount, other.perCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRepeat()).compareTo(other.isSetIsRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRepeat, other.isRepeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOtherActive()).compareTo(other.isSetIsOtherActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOtherActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOtherActive, other.isOtherActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPrePay()).compareTo(other.isSetIsPrePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPrePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrePay, other.isPrePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFtof()).compareTo(other.isSetIsFtof());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFtof()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFtof, other.isFtof);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOnlyNewUsers()).compareTo(other.isSetIsOnlyNewUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOnlyNewUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOnlyNewUsers, other.isOnlyNewUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMethod()).compareTo(other.isSetPayMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethod, other.payMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveSustainRelationList()).compareTo(other.isSetActiveSustainRelationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveSustainRelationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeSustainRelationList, other.activeSustainRelationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersCouponCodelist()).compareTo(other.isSetVouchersCouponCodelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersCouponCodelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersCouponCodelist, other.vouchersCouponCodelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersTotal()).compareTo(other.isSetVouchersTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersTotal, other.vouchersTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemporaryActiveId()).compareTo(other.isSetTemporaryActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemporaryActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temporaryActiveId, other.temporaryActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VouchersDetailRuleVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minMoney:");
    sb.append(this.minMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMoney:");
    sb.append(this.maxMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTotalDay:");
    sb.append(this.isTotalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDay:");
    sb.append(this.totalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderMinMoney:");
    sb.append(this.orderMinMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPerDay:");
    sb.append(this.isPerDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perDay:");
    sb.append(this.perDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perCount:");
    sb.append(this.perCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRepeat:");
    sb.append(this.isRepeat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOtherActive:");
    sb.append(this.isOtherActive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPrePay:");
    sb.append(this.isPrePay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFtof:");
    sb.append(this.isFtof);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOnlyNewUsers:");
    sb.append(this.isOnlyNewUsers);
    first = false;
    if (isSetPayMethod()) {
      if (!first) sb.append(", ");
      sb.append("payMethod:");
      if (this.payMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.payMethod);
      }
      first = false;
    }
    if (isSetActiveSustainRelationList()) {
      if (!first) sb.append(", ");
      sb.append("activeSustainRelationList:");
      if (this.activeSustainRelationList == null) {
        sb.append("null");
      } else {
        sb.append(this.activeSustainRelationList);
      }
      first = false;
    }
    if (isSetVouchersCouponCodelist()) {
      if (!first) sb.append(", ");
      sb.append("vouchersCouponCodelist:");
      if (this.vouchersCouponCodelist == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersCouponCodelist);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("vouchersTotal:");
    sb.append(this.vouchersTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temporaryActiveId:");
    if (this.temporaryActiveId == null) {
      sb.append("null");
    } else {
      sb.append(this.temporaryActiveId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VouchersDetailRuleVoStandardSchemeFactory implements SchemeFactory {
    public VouchersDetailRuleVoStandardScheme getScheme() {
      return new VouchersDetailRuleVoStandardScheme();
    }
  }

  private static class VouchersDetailRuleVoStandardScheme extends StandardScheme<VouchersDetailRuleVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VouchersDetailRuleVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minMoney = iprot.readDouble();
              struct.setMinMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxMoney = iprot.readDouble();
              struct.setMaxMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalMoney = iprot.readDouble();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTotalDay = iprot.readBool();
              struct.setIsTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDay = iprot.readI32();
              struct.setTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_MIN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderMinMoney = iprot.readDouble();
              struct.setOrderMinMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPerDay = iprot.readBool();
              struct.setIsPerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perDay = iprot.readI32();
              struct.setPerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perCount = iprot.readI32();
              struct.setPerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRepeat = iprot.readBool();
              struct.setIsRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_OTHER_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOtherActive = iprot.readBool();
              struct.setIsOtherActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_PRE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPrePay = iprot.readBool();
              struct.setIsPrePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_FTOF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFtof = iprot.readBool();
              struct.setIsFtofIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_ONLY_NEW_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOnlyNewUsers = iprot.readBool();
              struct.setIsOnlyNewUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PAY_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payMethod = iprot.readString();
              struct.setPayMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACTIVE_SUSTAIN_RELATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                struct.activeSustainRelationList = new ArrayList<ActiveSustainRelationVo>(_list280.size);
                ActiveSustainRelationVo _elem281;
                for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                {
                  _elem281 = new ActiveSustainRelationVo();
                  _elem281.read(iprot);
                  struct.activeSustainRelationList.add(_elem281);
                }
                iprot.readListEnd();
              }
              struct.setActiveSustainRelationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // VOUCHERS_COUPON_CODELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list283 = iprot.readListBegin();
                struct.vouchersCouponCodelist = new ArrayList<VouchersCouponCodeVO>(_list283.size);
                VouchersCouponCodeVO _elem284;
                for (int _i285 = 0; _i285 < _list283.size; ++_i285)
                {
                  _elem284 = new VouchersCouponCodeVO();
                  _elem284.read(iprot);
                  struct.vouchersCouponCodelist.add(_elem284);
                }
                iprot.readListEnd();
              }
              struct.setVouchersCouponCodelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // VOUCHERS_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vouchersTotal = iprot.readI64();
              struct.setVouchersTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TEMPORARY_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.temporaryActiveId = iprot.readString();
              struct.setTemporaryActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VouchersDetailRuleVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.minMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.maxMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TOTAL_DAY_FIELD_DESC);
      oprot.writeBool(struct.isTotalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_DAY_FIELD_DESC);
      oprot.writeI32(struct.totalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_MIN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.orderMinMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PER_DAY_FIELD_DESC);
      oprot.writeBool(struct.isPerDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_DAY_FIELD_DESC);
      oprot.writeI32(struct.perDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.perCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REPEAT_FIELD_DESC);
      oprot.writeBool(struct.isRepeat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OTHER_ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.isOtherActive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PRE_PAY_FIELD_DESC);
      oprot.writeBool(struct.isPrePay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FTOF_FIELD_DESC);
      oprot.writeBool(struct.isFtof);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ONLY_NEW_USERS_FIELD_DESC);
      oprot.writeBool(struct.isOnlyNewUsers);
      oprot.writeFieldEnd();
      if (struct.payMethod != null) {
        if (struct.isSetPayMethod()) {
          oprot.writeFieldBegin(PAY_METHOD_FIELD_DESC);
          oprot.writeString(struct.payMethod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeSustainRelationList != null) {
        if (struct.isSetActiveSustainRelationList()) {
          oprot.writeFieldBegin(ACTIVE_SUSTAIN_RELATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activeSustainRelationList.size()));
            for (ActiveSustainRelationVo _iter286 : struct.activeSustainRelationList)
            {
              _iter286.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.vouchersCouponCodelist != null) {
        if (struct.isSetVouchersCouponCodelist()) {
          oprot.writeFieldBegin(VOUCHERS_COUPON_CODELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vouchersCouponCodelist.size()));
            for (VouchersCouponCodeVO _iter287 : struct.vouchersCouponCodelist)
            {
              _iter287.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(VOUCHERS_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.vouchersTotal);
      oprot.writeFieldEnd();
      if (struct.temporaryActiveId != null) {
        oprot.writeFieldBegin(TEMPORARY_ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.temporaryActiveId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VouchersDetailRuleVoTupleSchemeFactory implements SchemeFactory {
    public VouchersDetailRuleVoTupleScheme getScheme() {
      return new VouchersDetailRuleVoTupleScheme();
    }
  }

  private static class VouchersDetailRuleVoTupleScheme extends TupleScheme<VouchersDetailRuleVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VouchersDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetActiveId()) {
        optionals.set(2);
      }
      if (struct.isSetMinMoney()) {
        optionals.set(3);
      }
      if (struct.isSetMaxMoney()) {
        optionals.set(4);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetIsTotalDay()) {
        optionals.set(6);
      }
      if (struct.isSetTotalDay()) {
        optionals.set(7);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(8);
      }
      if (struct.isSetOrderMinMoney()) {
        optionals.set(9);
      }
      if (struct.isSetIsPerDay()) {
        optionals.set(10);
      }
      if (struct.isSetPerDay()) {
        optionals.set(11);
      }
      if (struct.isSetPerCount()) {
        optionals.set(12);
      }
      if (struct.isSetIsRepeat()) {
        optionals.set(13);
      }
      if (struct.isSetIsOtherActive()) {
        optionals.set(14);
      }
      if (struct.isSetIsPrePay()) {
        optionals.set(15);
      }
      if (struct.isSetIsFtof()) {
        optionals.set(16);
      }
      if (struct.isSetIsOnlyNewUsers()) {
        optionals.set(17);
      }
      if (struct.isSetPayMethod()) {
        optionals.set(18);
      }
      if (struct.isSetActiveSustainRelationList()) {
        optionals.set(19);
      }
      if (struct.isSetVouchersCouponCodelist()) {
        optionals.set(20);
      }
      if (struct.isSetVouchersTotal()) {
        optionals.set(21);
      }
      if (struct.isSetTemporaryActiveId()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetMinMoney()) {
        oprot.writeDouble(struct.minMoney);
      }
      if (struct.isSetMaxMoney()) {
        oprot.writeDouble(struct.maxMoney);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeDouble(struct.totalMoney);
      }
      if (struct.isSetIsTotalDay()) {
        oprot.writeBool(struct.isTotalDay);
      }
      if (struct.isSetTotalDay()) {
        oprot.writeI32(struct.totalDay);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetOrderMinMoney()) {
        oprot.writeDouble(struct.orderMinMoney);
      }
      if (struct.isSetIsPerDay()) {
        oprot.writeBool(struct.isPerDay);
      }
      if (struct.isSetPerDay()) {
        oprot.writeI32(struct.perDay);
      }
      if (struct.isSetPerCount()) {
        oprot.writeI32(struct.perCount);
      }
      if (struct.isSetIsRepeat()) {
        oprot.writeBool(struct.isRepeat);
      }
      if (struct.isSetIsOtherActive()) {
        oprot.writeBool(struct.isOtherActive);
      }
      if (struct.isSetIsPrePay()) {
        oprot.writeBool(struct.isPrePay);
      }
      if (struct.isSetIsFtof()) {
        oprot.writeBool(struct.isFtof);
      }
      if (struct.isSetIsOnlyNewUsers()) {
        oprot.writeBool(struct.isOnlyNewUsers);
      }
      if (struct.isSetPayMethod()) {
        oprot.writeString(struct.payMethod);
      }
      if (struct.isSetActiveSustainRelationList()) {
        {
          oprot.writeI32(struct.activeSustainRelationList.size());
          for (ActiveSustainRelationVo _iter288 : struct.activeSustainRelationList)
          {
            _iter288.write(oprot);
          }
        }
      }
      if (struct.isSetVouchersCouponCodelist()) {
        {
          oprot.writeI32(struct.vouchersCouponCodelist.size());
          for (VouchersCouponCodeVO _iter289 : struct.vouchersCouponCodelist)
          {
            _iter289.write(oprot);
          }
        }
      }
      if (struct.isSetVouchersTotal()) {
        oprot.writeI64(struct.vouchersTotal);
      }
      if (struct.isSetTemporaryActiveId()) {
        oprot.writeString(struct.temporaryActiveId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VouchersDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minMoney = iprot.readDouble();
        struct.setMinMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxMoney = iprot.readDouble();
        struct.setMaxMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalMoney = iprot.readDouble();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isTotalDay = iprot.readBool();
        struct.setIsTotalDayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalDay = iprot.readI32();
        struct.setTotalDayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderMinMoney = iprot.readDouble();
        struct.setOrderMinMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isPerDay = iprot.readBool();
        struct.setIsPerDayIsSet(true);
      }
      if (incoming.get(11)) {
        struct.perDay = iprot.readI32();
        struct.setPerDayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.perCount = iprot.readI32();
        struct.setPerCountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isRepeat = iprot.readBool();
        struct.setIsRepeatIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isOtherActive = iprot.readBool();
        struct.setIsOtherActiveIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isPrePay = iprot.readBool();
        struct.setIsPrePayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isFtof = iprot.readBool();
        struct.setIsFtofIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isOnlyNewUsers = iprot.readBool();
        struct.setIsOnlyNewUsersIsSet(true);
      }
      if (incoming.get(18)) {
        struct.payMethod = iprot.readString();
        struct.setPayMethodIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list290 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activeSustainRelationList = new ArrayList<ActiveSustainRelationVo>(_list290.size);
          ActiveSustainRelationVo _elem291;
          for (int _i292 = 0; _i292 < _list290.size; ++_i292)
          {
            _elem291 = new ActiveSustainRelationVo();
            _elem291.read(iprot);
            struct.activeSustainRelationList.add(_elem291);
          }
        }
        struct.setActiveSustainRelationListIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vouchersCouponCodelist = new ArrayList<VouchersCouponCodeVO>(_list293.size);
          VouchersCouponCodeVO _elem294;
          for (int _i295 = 0; _i295 < _list293.size; ++_i295)
          {
            _elem294 = new VouchersCouponCodeVO();
            _elem294.read(iprot);
            struct.vouchersCouponCodelist.add(_elem294);
          }
        }
        struct.setVouchersCouponCodelistIsSet(true);
      }
      if (incoming.get(21)) {
        struct.vouchersTotal = iprot.readI64();
        struct.setVouchersTotalIsSet(true);
      }
      if (incoming.get(22)) {
        struct.temporaryActiveId = iprot.readString();
        struct.setTemporaryActiveIdIsSet(true);
      }
    }
  }

}

