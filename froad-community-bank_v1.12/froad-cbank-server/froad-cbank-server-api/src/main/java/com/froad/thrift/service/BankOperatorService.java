/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankOperatorService {

  /**
   * 银行操作员服务接口
   * BankOperatorService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 BankOperator
     * @param bankOperator
     * @return long    主键ID(异常及错误返回-1)
     * 
     * @param originVo
     * @param bankOperatorVo
     */
    public com.froad.thrift.vo.CommonAddVoRes addBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 删除 BankOperator
     * @param bankOperator
     * @说明：根据主键id和cliend_id进行删除操作，cliend_id可传可不传，银行管理平台需传，boss可不传)
     * @return boolean   操作是否成功
     * 
     * @param originVo
     * @param bankOperatorVo
     */
    public com.froad.thrift.vo.ResultVo deleteBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 修改 BankOperator
     * @param bankOperator(根据主键id和cliend_id进行删除操作)
     * @说明：根据主键id和cliend_id进行删除操作，cliend_id可传可不传，银行管理平台需传，boss可不传)
     * @return boolean   操作是否成功
     * 
     * @param originVo
     * @param bankOperatorVo
     */
    public com.froad.thrift.vo.ResultVo updateBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 银行用户登录
     * @param username 登录名
     * @param password 密码
     * @param token值 (用户第一次登录可为空后续登录验证操作需传token值过来验证)
     * @param operatorIp 登录ip
     * @return LoginBankOperatorVoRes 登录成功后返回结果对象
     * 
     * @param originVo
     * @param username
     * @param password
     */
    public com.froad.thrift.vo.LoginBankOperatorVoRes loginBankOperator(com.froad.thrift.vo.OriginVo originVo, String username, String password) throws org.apache.thrift.TException;

    /**
     * 银行用户登录获取错误次数
     * @param username 登录名
     * @param token值 (用户第一次登录可为空后续登录验证操作需传token值过来验证)
     * @param operatorIp 登录ip
     * @return LoginBankOperatorVoRes 登录成功后返回结果对象
     * 
     * @param originVo
     * @param username
     */
    public com.froad.thrift.vo.LoginBankOperatorVoRes getLoginFailureCount(com.froad.thrift.vo.OriginVo originVo, String username) throws org.apache.thrift.TException;

    /**
     * token校验
     * @param clientId 客户端Id
     * @param userId 用户编号
     * @param token 类似uuid的值
     * @return   BankOperatorCheckVoRes结果
     * 
     * @param clientId
     * @param userId
     * @param token
     */
    public com.froad.thrift.vo.BankOperatorCheckVoRes checkToken(String clientId, long userId, String token) throws org.apache.thrift.TException;

    /**
     * 根据id查询单个银行管理员信息
     * @param clientId 客户端id(可为0,boss查的时候可传clientId值为0过来，银行管理平台需传具体值过来)
     * @param userId 用户id
     * @return BankOperatorVo 返回银行用户信息
     * 
     * @param clientId
     * @param userId
     */
    public com.froad.thrift.vo.BankOperatorVo getBankOperatorById(String clientId, long userId) throws org.apache.thrift.TException;

    /**
     * 查询 BankOperator
     * @param bankOperator 查询条件
     * @return List<BankOperatorVo> 银行用户List
     * 
     * @param bankOperatorVo
     */
    public List<com.froad.thrift.vo.BankOperatorVo> getBankOperator(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BankOperator
     * @param page 查询条件
     * @param bankOperator 查询条件
     * @return BankOperatorPageVoRes
     * 
     * @param page
     * @param bankOperatorVo
     */
    public com.froad.thrift.vo.BankOperatorPageVoRes getBankOperatorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BankOperator 只返回当前机构下的
     * @param page 查询条件
     * @param bankOperator 查询条件
     * @return BankOperatorPageVoRes
     * 
     * @param pageVo
     * @param bankOperatorVo
     */
    public com.froad.thrift.vo.BankOperatorPageVoRes getBankOperatorByPageInCurrentOrg(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException;

    /**
     * 银行用户退出
     * @param token
     * @return bool 是否成功
     * 
     * @param token
     */
    public com.froad.thrift.vo.ResultVo logoutBankOperator(String token) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginBankOperator(com.froad.thrift.vo.OriginVo originVo, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoginFailureCount(com.froad.thrift.vo.OriginVo originVo, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkToken(String clientId, long userId, String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankOperatorById(String clientId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankOperator(com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankOperatorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankOperatorByPageInCurrentOrg(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void logoutBankOperator(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_addBankOperator(originVo, bankOperatorVo);
      return recv_addBankOperator();
    }

    public void send_addBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      addBankOperator_args args = new addBankOperator_args();
      args.setOriginVo(originVo);
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("addBankOperator", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addBankOperator() throws org.apache.thrift.TException
    {
      addBankOperator_result result = new addBankOperator_result();
      receiveBase(result, "addBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBankOperator failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_deleteBankOperator(originVo, bankOperatorVo);
      return recv_deleteBankOperator();
    }

    public void send_deleteBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      deleteBankOperator_args args = new deleteBankOperator_args();
      args.setOriginVo(originVo);
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("deleteBankOperator", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteBankOperator() throws org.apache.thrift.TException
    {
      deleteBankOperator_result result = new deleteBankOperator_result();
      receiveBase(result, "deleteBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBankOperator failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_updateBankOperator(originVo, bankOperatorVo);
      return recv_updateBankOperator();
    }

    public void send_updateBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      updateBankOperator_args args = new updateBankOperator_args();
      args.setOriginVo(originVo);
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("updateBankOperator", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateBankOperator() throws org.apache.thrift.TException
    {
      updateBankOperator_result result = new updateBankOperator_result();
      receiveBase(result, "updateBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBankOperator failed: unknown result");
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes loginBankOperator(com.froad.thrift.vo.OriginVo originVo, String username, String password) throws org.apache.thrift.TException
    {
      send_loginBankOperator(originVo, username, password);
      return recv_loginBankOperator();
    }

    public void send_loginBankOperator(com.froad.thrift.vo.OriginVo originVo, String username, String password) throws org.apache.thrift.TException
    {
      loginBankOperator_args args = new loginBankOperator_args();
      args.setOriginVo(originVo);
      args.setUsername(username);
      args.setPassword(password);
      sendBase("loginBankOperator", args);
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes recv_loginBankOperator() throws org.apache.thrift.TException
    {
      loginBankOperator_result result = new loginBankOperator_result();
      receiveBase(result, "loginBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginBankOperator failed: unknown result");
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes getLoginFailureCount(com.froad.thrift.vo.OriginVo originVo, String username) throws org.apache.thrift.TException
    {
      send_getLoginFailureCount(originVo, username);
      return recv_getLoginFailureCount();
    }

    public void send_getLoginFailureCount(com.froad.thrift.vo.OriginVo originVo, String username) throws org.apache.thrift.TException
    {
      getLoginFailureCount_args args = new getLoginFailureCount_args();
      args.setOriginVo(originVo);
      args.setUsername(username);
      sendBase("getLoginFailureCount", args);
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes recv_getLoginFailureCount() throws org.apache.thrift.TException
    {
      getLoginFailureCount_result result = new getLoginFailureCount_result();
      receiveBase(result, "getLoginFailureCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoginFailureCount failed: unknown result");
    }

    public com.froad.thrift.vo.BankOperatorCheckVoRes checkToken(String clientId, long userId, String token) throws org.apache.thrift.TException
    {
      send_checkToken(clientId, userId, token);
      return recv_checkToken();
    }

    public void send_checkToken(String clientId, long userId, String token) throws org.apache.thrift.TException
    {
      checkToken_args args = new checkToken_args();
      args.setClientId(clientId);
      args.setUserId(userId);
      args.setToken(token);
      sendBase("checkToken", args);
    }

    public com.froad.thrift.vo.BankOperatorCheckVoRes recv_checkToken() throws org.apache.thrift.TException
    {
      checkToken_result result = new checkToken_result();
      receiveBase(result, "checkToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkToken failed: unknown result");
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorById(String clientId, long userId) throws org.apache.thrift.TException
    {
      send_getBankOperatorById(clientId, userId);
      return recv_getBankOperatorById();
    }

    public void send_getBankOperatorById(String clientId, long userId) throws org.apache.thrift.TException
    {
      getBankOperatorById_args args = new getBankOperatorById_args();
      args.setClientId(clientId);
      args.setUserId(userId);
      sendBase("getBankOperatorById", args);
    }

    public com.froad.thrift.vo.BankOperatorVo recv_getBankOperatorById() throws org.apache.thrift.TException
    {
      getBankOperatorById_result result = new getBankOperatorById_result();
      receiveBase(result, "getBankOperatorById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankOperatorById failed: unknown result");
    }

    public List<com.froad.thrift.vo.BankOperatorVo> getBankOperator(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_getBankOperator(bankOperatorVo);
      return recv_getBankOperator();
    }

    public void send_getBankOperator(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      getBankOperator_args args = new getBankOperator_args();
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("getBankOperator", args);
    }

    public List<com.froad.thrift.vo.BankOperatorVo> recv_getBankOperator() throws org.apache.thrift.TException
    {
      getBankOperator_result result = new getBankOperator_result();
      receiveBase(result, "getBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankOperator failed: unknown result");
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes getBankOperatorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_getBankOperatorByPage(page, bankOperatorVo);
      return recv_getBankOperatorByPage();
    }

    public void send_getBankOperatorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      getBankOperatorByPage_args args = new getBankOperatorByPage_args();
      args.setPage(page);
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("getBankOperatorByPage", args);
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes recv_getBankOperatorByPage() throws org.apache.thrift.TException
    {
      getBankOperatorByPage_result result = new getBankOperatorByPage_result();
      receiveBase(result, "getBankOperatorByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankOperatorByPage failed: unknown result");
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes getBankOperatorByPageInCurrentOrg(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      send_getBankOperatorByPageInCurrentOrg(pageVo, bankOperatorVo);
      return recv_getBankOperatorByPageInCurrentOrg();
    }

    public void send_getBankOperatorByPageInCurrentOrg(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo) throws org.apache.thrift.TException
    {
      getBankOperatorByPageInCurrentOrg_args args = new getBankOperatorByPageInCurrentOrg_args();
      args.setPageVo(pageVo);
      args.setBankOperatorVo(bankOperatorVo);
      sendBase("getBankOperatorByPageInCurrentOrg", args);
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes recv_getBankOperatorByPageInCurrentOrg() throws org.apache.thrift.TException
    {
      getBankOperatorByPageInCurrentOrg_result result = new getBankOperatorByPageInCurrentOrg_result();
      receiveBase(result, "getBankOperatorByPageInCurrentOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankOperatorByPageInCurrentOrg failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo logoutBankOperator(String token) throws org.apache.thrift.TException
    {
      send_logoutBankOperator(token);
      return recv_logoutBankOperator();
    }

    public void send_logoutBankOperator(String token) throws org.apache.thrift.TException
    {
      logoutBankOperator_args args = new logoutBankOperator_args();
      args.setToken(token);
      sendBase("logoutBankOperator", args);
    }

    public com.froad.thrift.vo.ResultVo recv_logoutBankOperator() throws org.apache.thrift.TException
    {
      logoutBankOperator_result result = new logoutBankOperator_result();
      receiveBase(result, "logoutBankOperator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logoutBankOperator failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBankOperator_call method_call = new addBankOperator_call(originVo, bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public addBankOperator_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBankOperator_args args = new addBankOperator_args();
        args.setOriginVo(originVo);
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBankOperator();
      }
    }

    public void deleteBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBankOperator_call method_call = new deleteBankOperator_call(originVo, bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public deleteBankOperator_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBankOperator_args args = new deleteBankOperator_args();
        args.setOriginVo(originVo);
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBankOperator();
      }
    }

    public void updateBankOperator(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBankOperator_call method_call = new updateBankOperator_call(originVo, bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public updateBankOperator_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBankOperator_args args = new updateBankOperator_args();
        args.setOriginVo(originVo);
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBankOperator();
      }
    }

    public void loginBankOperator(com.froad.thrift.vo.OriginVo originVo, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginBankOperator_call method_call = new loginBankOperator_call(originVo, username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String username;
      private String password;
      public loginBankOperator_call(com.froad.thrift.vo.OriginVo originVo, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginBankOperator_args args = new loginBankOperator_args();
        args.setOriginVo(originVo);
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.LoginBankOperatorVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginBankOperator();
      }
    }

    public void getLoginFailureCount(com.froad.thrift.vo.OriginVo originVo, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoginFailureCount_call method_call = new getLoginFailureCount_call(originVo, username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoginFailureCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String username;
      public getLoginFailureCount_call(com.froad.thrift.vo.OriginVo originVo, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoginFailureCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoginFailureCount_args args = new getLoginFailureCount_args();
        args.setOriginVo(originVo);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.LoginBankOperatorVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoginFailureCount();
      }
    }

    public void checkToken(String clientId, long userId, String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkToken_call method_call = new checkToken_call(clientId, userId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long userId;
      private String token;
      public checkToken_call(String clientId, long userId, String token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.userId = userId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkToken_args args = new checkToken_args();
        args.setClientId(clientId);
        args.setUserId(userId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankOperatorCheckVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkToken();
      }
    }

    public void getBankOperatorById(String clientId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankOperatorById_call method_call = new getBankOperatorById_call(clientId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankOperatorById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long userId;
      public getBankOperatorById_call(String clientId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankOperatorById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankOperatorById_args args = new getBankOperatorById_args();
        args.setClientId(clientId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankOperatorVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankOperatorById();
      }
    }

    public void getBankOperator(com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankOperator_call method_call = new getBankOperator_call(bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public getBankOperator_call(com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankOperator_args args = new getBankOperator_args();
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BankOperatorVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankOperator();
      }
    }

    public void getBankOperatorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankOperatorByPage_call method_call = new getBankOperatorByPage_call(page, bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankOperatorByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public getBankOperatorByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankOperatorByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankOperatorByPage_args args = new getBankOperatorByPage_args();
        args.setPage(page);
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankOperatorPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankOperatorByPage();
      }
    }

    public void getBankOperatorByPageInCurrentOrg(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankOperatorByPageInCurrentOrg_call method_call = new getBankOperatorByPageInCurrentOrg_call(pageVo, bankOperatorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankOperatorByPageInCurrentOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.BankOperatorVo bankOperatorVo;
      public getBankOperatorByPageInCurrentOrg_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.BankOperatorVo bankOperatorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.bankOperatorVo = bankOperatorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankOperatorByPageInCurrentOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankOperatorByPageInCurrentOrg_args args = new getBankOperatorByPageInCurrentOrg_args();
        args.setPageVo(pageVo);
        args.setBankOperatorVo(bankOperatorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankOperatorPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankOperatorByPageInCurrentOrg();
      }
    }

    public void logoutBankOperator(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logoutBankOperator_call method_call = new logoutBankOperator_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logoutBankOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public logoutBankOperator_call(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logoutBankOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logoutBankOperator_args args = new logoutBankOperator_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logoutBankOperator();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBankOperator", new addBankOperator());
      processMap.put("deleteBankOperator", new deleteBankOperator());
      processMap.put("updateBankOperator", new updateBankOperator());
      processMap.put("loginBankOperator", new loginBankOperator());
      processMap.put("getLoginFailureCount", new getLoginFailureCount());
      processMap.put("checkToken", new checkToken());
      processMap.put("getBankOperatorById", new getBankOperatorById());
      processMap.put("getBankOperator", new getBankOperator());
      processMap.put("getBankOperatorByPage", new getBankOperatorByPage());
      processMap.put("getBankOperatorByPageInCurrentOrg", new getBankOperatorByPageInCurrentOrg());
      processMap.put("logoutBankOperator", new logoutBankOperator());
      return processMap;
    }

    public static class addBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBankOperator_args> {
      public addBankOperator() {
        super("addBankOperator");
      }

      public addBankOperator_args getEmptyArgsInstance() {
        return new addBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBankOperator_result getResult(I iface, addBankOperator_args args) throws org.apache.thrift.TException {
        addBankOperator_result result = new addBankOperator_result();
        result.success = iface.addBankOperator(args.originVo, args.bankOperatorVo);
        return result;
      }
    }

    public static class deleteBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBankOperator_args> {
      public deleteBankOperator() {
        super("deleteBankOperator");
      }

      public deleteBankOperator_args getEmptyArgsInstance() {
        return new deleteBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBankOperator_result getResult(I iface, deleteBankOperator_args args) throws org.apache.thrift.TException {
        deleteBankOperator_result result = new deleteBankOperator_result();
        result.success = iface.deleteBankOperator(args.originVo, args.bankOperatorVo);
        return result;
      }
    }

    public static class updateBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBankOperator_args> {
      public updateBankOperator() {
        super("updateBankOperator");
      }

      public updateBankOperator_args getEmptyArgsInstance() {
        return new updateBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBankOperator_result getResult(I iface, updateBankOperator_args args) throws org.apache.thrift.TException {
        updateBankOperator_result result = new updateBankOperator_result();
        result.success = iface.updateBankOperator(args.originVo, args.bankOperatorVo);
        return result;
      }
    }

    public static class loginBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginBankOperator_args> {
      public loginBankOperator() {
        super("loginBankOperator");
      }

      public loginBankOperator_args getEmptyArgsInstance() {
        return new loginBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginBankOperator_result getResult(I iface, loginBankOperator_args args) throws org.apache.thrift.TException {
        loginBankOperator_result result = new loginBankOperator_result();
        result.success = iface.loginBankOperator(args.originVo, args.username, args.password);
        return result;
      }
    }

    public static class getLoginFailureCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoginFailureCount_args> {
      public getLoginFailureCount() {
        super("getLoginFailureCount");
      }

      public getLoginFailureCount_args getEmptyArgsInstance() {
        return new getLoginFailureCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoginFailureCount_result getResult(I iface, getLoginFailureCount_args args) throws org.apache.thrift.TException {
        getLoginFailureCount_result result = new getLoginFailureCount_result();
        result.success = iface.getLoginFailureCount(args.originVo, args.username);
        return result;
      }
    }

    public static class checkToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkToken_args> {
      public checkToken() {
        super("checkToken");
      }

      public checkToken_args getEmptyArgsInstance() {
        return new checkToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkToken_result getResult(I iface, checkToken_args args) throws org.apache.thrift.TException {
        checkToken_result result = new checkToken_result();
        result.success = iface.checkToken(args.clientId, args.userId, args.token);
        return result;
      }
    }

    public static class getBankOperatorById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankOperatorById_args> {
      public getBankOperatorById() {
        super("getBankOperatorById");
      }

      public getBankOperatorById_args getEmptyArgsInstance() {
        return new getBankOperatorById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankOperatorById_result getResult(I iface, getBankOperatorById_args args) throws org.apache.thrift.TException {
        getBankOperatorById_result result = new getBankOperatorById_result();
        result.success = iface.getBankOperatorById(args.clientId, args.userId);
        return result;
      }
    }

    public static class getBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankOperator_args> {
      public getBankOperator() {
        super("getBankOperator");
      }

      public getBankOperator_args getEmptyArgsInstance() {
        return new getBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankOperator_result getResult(I iface, getBankOperator_args args) throws org.apache.thrift.TException {
        getBankOperator_result result = new getBankOperator_result();
        result.success = iface.getBankOperator(args.bankOperatorVo);
        return result;
      }
    }

    public static class getBankOperatorByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankOperatorByPage_args> {
      public getBankOperatorByPage() {
        super("getBankOperatorByPage");
      }

      public getBankOperatorByPage_args getEmptyArgsInstance() {
        return new getBankOperatorByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankOperatorByPage_result getResult(I iface, getBankOperatorByPage_args args) throws org.apache.thrift.TException {
        getBankOperatorByPage_result result = new getBankOperatorByPage_result();
        result.success = iface.getBankOperatorByPage(args.page, args.bankOperatorVo);
        return result;
      }
    }

    public static class getBankOperatorByPageInCurrentOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankOperatorByPageInCurrentOrg_args> {
      public getBankOperatorByPageInCurrentOrg() {
        super("getBankOperatorByPageInCurrentOrg");
      }

      public getBankOperatorByPageInCurrentOrg_args getEmptyArgsInstance() {
        return new getBankOperatorByPageInCurrentOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankOperatorByPageInCurrentOrg_result getResult(I iface, getBankOperatorByPageInCurrentOrg_args args) throws org.apache.thrift.TException {
        getBankOperatorByPageInCurrentOrg_result result = new getBankOperatorByPageInCurrentOrg_result();
        result.success = iface.getBankOperatorByPageInCurrentOrg(args.pageVo, args.bankOperatorVo);
        return result;
      }
    }

    public static class logoutBankOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logoutBankOperator_args> {
      public logoutBankOperator() {
        super("logoutBankOperator");
      }

      public logoutBankOperator_args getEmptyArgsInstance() {
        return new logoutBankOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logoutBankOperator_result getResult(I iface, logoutBankOperator_args args) throws org.apache.thrift.TException {
        logoutBankOperator_result result = new logoutBankOperator_result();
        result.success = iface.logoutBankOperator(args.token);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBankOperator", new addBankOperator());
      processMap.put("deleteBankOperator", new deleteBankOperator());
      processMap.put("updateBankOperator", new updateBankOperator());
      processMap.put("loginBankOperator", new loginBankOperator());
      processMap.put("getLoginFailureCount", new getLoginFailureCount());
      processMap.put("checkToken", new checkToken());
      processMap.put("getBankOperatorById", new getBankOperatorById());
      processMap.put("getBankOperator", new getBankOperator());
      processMap.put("getBankOperatorByPage", new getBankOperatorByPage());
      processMap.put("getBankOperatorByPageInCurrentOrg", new getBankOperatorByPageInCurrentOrg());
      processMap.put("logoutBankOperator", new logoutBankOperator());
      return processMap;
    }

    public static class addBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBankOperator_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addBankOperator() {
        super("addBankOperator");
      }

      public addBankOperator_args getEmptyArgsInstance() {
        return new addBankOperator_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addBankOperator_result result = new addBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBankOperator_result result = new addBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addBankOperator(args.originVo, args.bankOperatorVo,resultHandler);
      }
    }

    public static class deleteBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBankOperator_args, com.froad.thrift.vo.ResultVo> {
      public deleteBankOperator() {
        super("deleteBankOperator");
      }

      public deleteBankOperator_args getEmptyArgsInstance() {
        return new deleteBankOperator_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteBankOperator_result result = new deleteBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBankOperator_result result = new deleteBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteBankOperator(args.originVo, args.bankOperatorVo,resultHandler);
      }
    }

    public static class updateBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBankOperator_args, com.froad.thrift.vo.ResultVo> {
      public updateBankOperator() {
        super("updateBankOperator");
      }

      public updateBankOperator_args getEmptyArgsInstance() {
        return new updateBankOperator_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateBankOperator_result result = new updateBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBankOperator_result result = new updateBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateBankOperator(args.originVo, args.bankOperatorVo,resultHandler);
      }
    }

    public static class loginBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginBankOperator_args, com.froad.thrift.vo.LoginBankOperatorVoRes> {
      public loginBankOperator() {
        super("loginBankOperator");
      }

      public loginBankOperator_args getEmptyArgsInstance() {
        return new loginBankOperator_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes>() { 
          public void onComplete(com.froad.thrift.vo.LoginBankOperatorVoRes o) {
            loginBankOperator_result result = new loginBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginBankOperator_result result = new loginBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes> resultHandler) throws TException {
        iface.loginBankOperator(args.originVo, args.username, args.password,resultHandler);
      }
    }

    public static class getLoginFailureCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoginFailureCount_args, com.froad.thrift.vo.LoginBankOperatorVoRes> {
      public getLoginFailureCount() {
        super("getLoginFailureCount");
      }

      public getLoginFailureCount_args getEmptyArgsInstance() {
        return new getLoginFailureCount_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes>() { 
          public void onComplete(com.froad.thrift.vo.LoginBankOperatorVoRes o) {
            getLoginFailureCount_result result = new getLoginFailureCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoginFailureCount_result result = new getLoginFailureCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoginFailureCount_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.LoginBankOperatorVoRes> resultHandler) throws TException {
        iface.getLoginFailureCount(args.originVo, args.username,resultHandler);
      }
    }

    public static class checkToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkToken_args, com.froad.thrift.vo.BankOperatorCheckVoRes> {
      public checkToken() {
        super("checkToken");
      }

      public checkToken_args getEmptyArgsInstance() {
        return new checkToken_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankOperatorCheckVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankOperatorCheckVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BankOperatorCheckVoRes o) {
            checkToken_result result = new checkToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkToken_result result = new checkToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkToken_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankOperatorCheckVoRes> resultHandler) throws TException {
        iface.checkToken(args.clientId, args.userId, args.token,resultHandler);
      }
    }

    public static class getBankOperatorById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankOperatorById_args, com.froad.thrift.vo.BankOperatorVo> {
      public getBankOperatorById() {
        super("getBankOperatorById");
      }

      public getBankOperatorById_args getEmptyArgsInstance() {
        return new getBankOperatorById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankOperatorVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankOperatorVo>() { 
          public void onComplete(com.froad.thrift.vo.BankOperatorVo o) {
            getBankOperatorById_result result = new getBankOperatorById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankOperatorById_result result = new getBankOperatorById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankOperatorById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankOperatorVo> resultHandler) throws TException {
        iface.getBankOperatorById(args.clientId, args.userId,resultHandler);
      }
    }

    public static class getBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankOperator_args, List<com.froad.thrift.vo.BankOperatorVo>> {
      public getBankOperator() {
        super("getBankOperator");
      }

      public getBankOperator_args getEmptyArgsInstance() {
        return new getBankOperator_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BankOperatorVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BankOperatorVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BankOperatorVo> o) {
            getBankOperator_result result = new getBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankOperator_result result = new getBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BankOperatorVo>> resultHandler) throws TException {
        iface.getBankOperator(args.bankOperatorVo,resultHandler);
      }
    }

    public static class getBankOperatorByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankOperatorByPage_args, com.froad.thrift.vo.BankOperatorPageVoRes> {
      public getBankOperatorByPage() {
        super("getBankOperatorByPage");
      }

      public getBankOperatorByPage_args getEmptyArgsInstance() {
        return new getBankOperatorByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BankOperatorPageVoRes o) {
            getBankOperatorByPage_result result = new getBankOperatorByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankOperatorByPage_result result = new getBankOperatorByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankOperatorByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes> resultHandler) throws TException {
        iface.getBankOperatorByPage(args.page, args.bankOperatorVo,resultHandler);
      }
    }

    public static class getBankOperatorByPageInCurrentOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankOperatorByPageInCurrentOrg_args, com.froad.thrift.vo.BankOperatorPageVoRes> {
      public getBankOperatorByPageInCurrentOrg() {
        super("getBankOperatorByPageInCurrentOrg");
      }

      public getBankOperatorByPageInCurrentOrg_args getEmptyArgsInstance() {
        return new getBankOperatorByPageInCurrentOrg_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BankOperatorPageVoRes o) {
            getBankOperatorByPageInCurrentOrg_result result = new getBankOperatorByPageInCurrentOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankOperatorByPageInCurrentOrg_result result = new getBankOperatorByPageInCurrentOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankOperatorByPageInCurrentOrg_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankOperatorPageVoRes> resultHandler) throws TException {
        iface.getBankOperatorByPageInCurrentOrg(args.pageVo, args.bankOperatorVo,resultHandler);
      }
    }

    public static class logoutBankOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logoutBankOperator_args, com.froad.thrift.vo.ResultVo> {
      public logoutBankOperator() {
        super("logoutBankOperator");
      }

      public logoutBankOperator_args getEmptyArgsInstance() {
        return new logoutBankOperator_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            logoutBankOperator_result result = new logoutBankOperator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            logoutBankOperator_result result = new logoutBankOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logoutBankOperator_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.logoutBankOperator(args.token,resultHandler);
      }
    }

  }

  public static class addBankOperator_args implements org.apache.thrift.TBase<addBankOperator_args, addBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankOperator_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankOperator_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_OPERATOR_VO((short)2, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankOperator_args.class, metaDataMap);
    }

    public addBankOperator_args() {
    }

    public addBankOperator_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.originVo = originVo;
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankOperator_args(addBankOperator_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public addBankOperator_args deepCopy() {
      return new addBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBankOperator_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public addBankOperator_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankOperator_args)
        return this.equals((addBankOperator_args)that);
      return false;
    }

    public boolean equals(addBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankOperator_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public addBankOperator_argsStandardScheme getScheme() {
        return new addBankOperator_argsStandardScheme();
      }
    }

    private static class addBankOperator_argsStandardScheme extends StandardScheme<addBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public addBankOperator_argsTupleScheme getScheme() {
        return new addBankOperator_argsTupleScheme();
      }
    }

    private static class addBankOperator_argsTupleScheme extends TupleScheme<addBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankOperatorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class addBankOperator_result implements org.apache.thrift.TBase<addBankOperator_result, addBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankOperator_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankOperator_result.class, metaDataMap);
    }

    public addBankOperator_result() {
    }

    public addBankOperator_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankOperator_result(addBankOperator_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addBankOperator_result deepCopy() {
      return new addBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addBankOperator_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankOperator_result)
        return this.equals((addBankOperator_result)that);
      return false;
    }

    public boolean equals(addBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public addBankOperator_resultStandardScheme getScheme() {
        return new addBankOperator_resultStandardScheme();
      }
    }

    private static class addBankOperator_resultStandardScheme extends StandardScheme<addBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public addBankOperator_resultTupleScheme getScheme() {
        return new addBankOperator_resultTupleScheme();
      }
    }

    private static class addBankOperator_resultTupleScheme extends TupleScheme<addBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBankOperator_args implements org.apache.thrift.TBase<deleteBankOperator_args, deleteBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankOperator_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankOperator_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_OPERATOR_VO((short)2, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankOperator_args.class, metaDataMap);
    }

    public deleteBankOperator_args() {
    }

    public deleteBankOperator_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.originVo = originVo;
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankOperator_args(deleteBankOperator_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public deleteBankOperator_args deepCopy() {
      return new deleteBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBankOperator_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public deleteBankOperator_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankOperator_args)
        return this.equals((deleteBankOperator_args)that);
      return false;
    }

    public boolean equals(deleteBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankOperator_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBankOperator_argsStandardScheme getScheme() {
        return new deleteBankOperator_argsStandardScheme();
      }
    }

    private static class deleteBankOperator_argsStandardScheme extends StandardScheme<deleteBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBankOperator_argsTupleScheme getScheme() {
        return new deleteBankOperator_argsTupleScheme();
      }
    }

    private static class deleteBankOperator_argsTupleScheme extends TupleScheme<deleteBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankOperatorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class deleteBankOperator_result implements org.apache.thrift.TBase<deleteBankOperator_result, deleteBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankOperator_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankOperator_result.class, metaDataMap);
    }

    public deleteBankOperator_result() {
    }

    public deleteBankOperator_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankOperator_result(deleteBankOperator_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteBankOperator_result deepCopy() {
      return new deleteBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteBankOperator_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankOperator_result)
        return this.equals((deleteBankOperator_result)that);
      return false;
    }

    public boolean equals(deleteBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBankOperator_resultStandardScheme getScheme() {
        return new deleteBankOperator_resultStandardScheme();
      }
    }

    private static class deleteBankOperator_resultStandardScheme extends StandardScheme<deleteBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBankOperator_resultTupleScheme getScheme() {
        return new deleteBankOperator_resultTupleScheme();
      }
    }

    private static class deleteBankOperator_resultTupleScheme extends TupleScheme<deleteBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBankOperator_args implements org.apache.thrift.TBase<updateBankOperator_args, updateBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBankOperator_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBankOperator_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_OPERATOR_VO((short)2, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBankOperator_args.class, metaDataMap);
    }

    public updateBankOperator_args() {
    }

    public updateBankOperator_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.originVo = originVo;
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBankOperator_args(updateBankOperator_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public updateBankOperator_args deepCopy() {
      return new updateBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBankOperator_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public updateBankOperator_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBankOperator_args)
        return this.equals((updateBankOperator_args)that);
      return false;
    }

    public boolean equals(updateBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBankOperator_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public updateBankOperator_argsStandardScheme getScheme() {
        return new updateBankOperator_argsStandardScheme();
      }
    }

    private static class updateBankOperator_argsStandardScheme extends StandardScheme<updateBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public updateBankOperator_argsTupleScheme getScheme() {
        return new updateBankOperator_argsTupleScheme();
      }
    }

    private static class updateBankOperator_argsTupleScheme extends TupleScheme<updateBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankOperatorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class updateBankOperator_result implements org.apache.thrift.TBase<updateBankOperator_result, updateBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBankOperator_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBankOperator_result.class, metaDataMap);
    }

    public updateBankOperator_result() {
    }

    public updateBankOperator_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBankOperator_result(updateBankOperator_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateBankOperator_result deepCopy() {
      return new updateBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateBankOperator_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBankOperator_result)
        return this.equals((updateBankOperator_result)that);
      return false;
    }

    public boolean equals(updateBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public updateBankOperator_resultStandardScheme getScheme() {
        return new updateBankOperator_resultStandardScheme();
      }
    }

    private static class updateBankOperator_resultStandardScheme extends StandardScheme<updateBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public updateBankOperator_resultTupleScheme getScheme() {
        return new updateBankOperator_resultTupleScheme();
      }
    }

    private static class updateBankOperator_resultTupleScheme extends TupleScheme<updateBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loginBankOperator_args implements org.apache.thrift.TBase<loginBankOperator_args, loginBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginBankOperator_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginBankOperator_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginBankOperator_args.class, metaDataMap);
    }

    public loginBankOperator_args() {
    }

    public loginBankOperator_args(
      com.froad.thrift.vo.OriginVo originVo,
      String username,
      String password)
    {
      this();
      this.originVo = originVo;
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginBankOperator_args(loginBankOperator_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public loginBankOperator_args deepCopy() {
      return new loginBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.username = null;
      this.password = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public loginBankOperator_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public loginBankOperator_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public loginBankOperator_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginBankOperator_args)
        return this.equals((loginBankOperator_args)that);
      return false;
    }

    public boolean equals(loginBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginBankOperator_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public loginBankOperator_argsStandardScheme getScheme() {
        return new loginBankOperator_argsStandardScheme();
      }
    }

    private static class loginBankOperator_argsStandardScheme extends StandardScheme<loginBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public loginBankOperator_argsTupleScheme getScheme() {
        return new loginBankOperator_argsTupleScheme();
      }
    }

    private static class loginBankOperator_argsTupleScheme extends TupleScheme<loginBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class loginBankOperator_result implements org.apache.thrift.TBase<loginBankOperator_result, loginBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginBankOperator_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.LoginBankOperatorVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginBankOperator_result.class, metaDataMap);
    }

    public loginBankOperator_result() {
    }

    public loginBankOperator_result(
      com.froad.thrift.vo.LoginBankOperatorVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginBankOperator_result(loginBankOperator_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.LoginBankOperatorVoRes(other.success);
      }
    }

    public loginBankOperator_result deepCopy() {
      return new loginBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes getSuccess() {
      return this.success;
    }

    public loginBankOperator_result setSuccess(com.froad.thrift.vo.LoginBankOperatorVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.LoginBankOperatorVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginBankOperator_result)
        return this.equals((loginBankOperator_result)that);
      return false;
    }

    public boolean equals(loginBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public loginBankOperator_resultStandardScheme getScheme() {
        return new loginBankOperator_resultStandardScheme();
      }
    }

    private static class loginBankOperator_resultStandardScheme extends StandardScheme<loginBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.LoginBankOperatorVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public loginBankOperator_resultTupleScheme getScheme() {
        return new loginBankOperator_resultTupleScheme();
      }
    }

    private static class loginBankOperator_resultTupleScheme extends TupleScheme<loginBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.LoginBankOperatorVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLoginFailureCount_args implements org.apache.thrift.TBase<getLoginFailureCount_args, getLoginFailureCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoginFailureCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoginFailureCount_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoginFailureCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoginFailureCount_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      USERNAME((short)2, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoginFailureCount_args.class, metaDataMap);
    }

    public getLoginFailureCount_args() {
    }

    public getLoginFailureCount_args(
      com.froad.thrift.vo.OriginVo originVo,
      String username)
    {
      this();
      this.originVo = originVo;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoginFailureCount_args(getLoginFailureCount_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getLoginFailureCount_args deepCopy() {
      return new getLoginFailureCount_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.username = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public getLoginFailureCount_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public getLoginFailureCount_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoginFailureCount_args)
        return this.equals((getLoginFailureCount_args)that);
      return false;
    }

    public boolean equals(getLoginFailureCount_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoginFailureCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoginFailureCount_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoginFailureCount_argsStandardSchemeFactory implements SchemeFactory {
      public getLoginFailureCount_argsStandardScheme getScheme() {
        return new getLoginFailureCount_argsStandardScheme();
      }
    }

    private static class getLoginFailureCount_argsStandardScheme extends StandardScheme<getLoginFailureCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoginFailureCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoginFailureCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoginFailureCount_argsTupleSchemeFactory implements SchemeFactory {
      public getLoginFailureCount_argsTupleScheme getScheme() {
        return new getLoginFailureCount_argsTupleScheme();
      }
    }

    private static class getLoginFailureCount_argsTupleScheme extends TupleScheme<getLoginFailureCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoginFailureCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoginFailureCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getLoginFailureCount_result implements org.apache.thrift.TBase<getLoginFailureCount_result, getLoginFailureCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoginFailureCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoginFailureCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoginFailureCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoginFailureCount_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.LoginBankOperatorVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoginFailureCount_result.class, metaDataMap);
    }

    public getLoginFailureCount_result() {
    }

    public getLoginFailureCount_result(
      com.froad.thrift.vo.LoginBankOperatorVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoginFailureCount_result(getLoginFailureCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.LoginBankOperatorVoRes(other.success);
      }
    }

    public getLoginFailureCount_result deepCopy() {
      return new getLoginFailureCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.LoginBankOperatorVoRes getSuccess() {
      return this.success;
    }

    public getLoginFailureCount_result setSuccess(com.froad.thrift.vo.LoginBankOperatorVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.LoginBankOperatorVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoginFailureCount_result)
        return this.equals((getLoginFailureCount_result)that);
      return false;
    }

    public boolean equals(getLoginFailureCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoginFailureCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoginFailureCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoginFailureCount_resultStandardSchemeFactory implements SchemeFactory {
      public getLoginFailureCount_resultStandardScheme getScheme() {
        return new getLoginFailureCount_resultStandardScheme();
      }
    }

    private static class getLoginFailureCount_resultStandardScheme extends StandardScheme<getLoginFailureCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoginFailureCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.LoginBankOperatorVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoginFailureCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoginFailureCount_resultTupleSchemeFactory implements SchemeFactory {
      public getLoginFailureCount_resultTupleScheme getScheme() {
        return new getLoginFailureCount_resultTupleScheme();
      }
    }

    private static class getLoginFailureCount_resultTupleScheme extends TupleScheme<getLoginFailureCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoginFailureCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoginFailureCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.LoginBankOperatorVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkToken_args implements org.apache.thrift.TBase<checkToken_args, checkToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkToken_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkToken_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long userId; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      USER_ID((short)2, "userId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkToken_args.class, metaDataMap);
    }

    public checkToken_args() {
    }

    public checkToken_args(
      String clientId,
      long userId,
      String token)
    {
      this();
      this.clientId = clientId;
      this.userId = userId;
      setUserIdIsSet(true);
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkToken_args(checkToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.userId = other.userId;
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public checkToken_args deepCopy() {
      return new checkToken_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.token = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public checkToken_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public checkToken_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public checkToken_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case USER_ID:
        return Long.valueOf(getUserId());

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case USER_ID:
        return isSetUserId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkToken_args)
        return this.equals((checkToken_args)that);
      return false;
    }

    public boolean equals(checkToken_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkToken_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkToken_argsStandardSchemeFactory implements SchemeFactory {
      public checkToken_argsStandardScheme getScheme() {
        return new checkToken_argsStandardScheme();
      }
    }

    private static class checkToken_argsStandardScheme extends StandardScheme<checkToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkToken_argsTupleSchemeFactory implements SchemeFactory {
      public checkToken_argsTupleScheme getScheme() {
        return new checkToken_argsTupleScheme();
      }
    }

    private static class checkToken_argsTupleScheme extends TupleScheme<checkToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class checkToken_result implements org.apache.thrift.TBase<checkToken_result, checkToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkToken_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankOperatorCheckVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorCheckVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkToken_result.class, metaDataMap);
    }

    public checkToken_result() {
    }

    public checkToken_result(
      com.froad.thrift.vo.BankOperatorCheckVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkToken_result(checkToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankOperatorCheckVoRes(other.success);
      }
    }

    public checkToken_result deepCopy() {
      return new checkToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankOperatorCheckVoRes getSuccess() {
      return this.success;
    }

    public checkToken_result setSuccess(com.froad.thrift.vo.BankOperatorCheckVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankOperatorCheckVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkToken_result)
        return this.equals((checkToken_result)that);
      return false;
    }

    public boolean equals(checkToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkToken_resultStandardSchemeFactory implements SchemeFactory {
      public checkToken_resultStandardScheme getScheme() {
        return new checkToken_resultStandardScheme();
      }
    }

    private static class checkToken_resultStandardScheme extends StandardScheme<checkToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankOperatorCheckVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkToken_resultTupleSchemeFactory implements SchemeFactory {
      public checkToken_resultTupleScheme getScheme() {
        return new checkToken_resultTupleScheme();
      }
    }

    private static class checkToken_resultTupleScheme extends TupleScheme<checkToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankOperatorCheckVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorById_args implements org.apache.thrift.TBase<getBankOperatorById_args, getBankOperatorById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorById_args.class, metaDataMap);
    }

    public getBankOperatorById_args() {
    }

    public getBankOperatorById_args(
      String clientId,
      long userId)
    {
      this();
      this.clientId = clientId;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorById_args(getBankOperatorById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.userId = other.userId;
    }

    public getBankOperatorById_args deepCopy() {
      return new getBankOperatorById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getBankOperatorById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public getBankOperatorById_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorById_args)
        return this.equals((getBankOperatorById_args)that);
      return false;
    }

    public boolean equals(getBankOperatorById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorById_argsStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorById_argsStandardScheme getScheme() {
        return new getBankOperatorById_argsStandardScheme();
      }
    }

    private static class getBankOperatorById_argsStandardScheme extends StandardScheme<getBankOperatorById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorById_argsTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorById_argsTupleScheme getScheme() {
        return new getBankOperatorById_argsTupleScheme();
      }
    }

    private static class getBankOperatorById_argsTupleScheme extends TupleScheme<getBankOperatorById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorById_result implements org.apache.thrift.TBase<getBankOperatorById_result, getBankOperatorById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankOperatorVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorById_result.class, metaDataMap);
    }

    public getBankOperatorById_result() {
    }

    public getBankOperatorById_result(
      com.froad.thrift.vo.BankOperatorVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorById_result(getBankOperatorById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankOperatorVo(other.success);
      }
    }

    public getBankOperatorById_result deepCopy() {
      return new getBankOperatorById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankOperatorVo getSuccess() {
      return this.success;
    }

    public getBankOperatorById_result setSuccess(com.froad.thrift.vo.BankOperatorVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorById_result)
        return this.equals((getBankOperatorById_result)that);
      return false;
    }

    public boolean equals(getBankOperatorById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorById_resultStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorById_resultStandardScheme getScheme() {
        return new getBankOperatorById_resultStandardScheme();
      }
    }

    private static class getBankOperatorById_resultStandardScheme extends StandardScheme<getBankOperatorById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankOperatorVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorById_resultTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorById_resultTupleScheme getScheme() {
        return new getBankOperatorById_resultTupleScheme();
      }
    }

    private static class getBankOperatorById_resultTupleScheme extends TupleScheme<getBankOperatorById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankOperatorVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankOperator_args implements org.apache.thrift.TBase<getBankOperator_args, getBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperator_args");

    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperator_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_OPERATOR_VO((short)1, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperator_args.class, metaDataMap);
    }

    public getBankOperator_args() {
    }

    public getBankOperator_args(
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperator_args(getBankOperator_args other) {
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public getBankOperator_args deepCopy() {
      return new getBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public getBankOperator_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperator_args)
        return this.equals((getBankOperator_args)that);
      return false;
    }

    public boolean equals(getBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperator_args(");
      boolean first = true;

      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public getBankOperator_argsStandardScheme getScheme() {
        return new getBankOperator_argsStandardScheme();
      }
    }

    private static class getBankOperator_argsStandardScheme extends StandardScheme<getBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public getBankOperator_argsTupleScheme getScheme() {
        return new getBankOperator_argsTupleScheme();
      }
    }

    private static class getBankOperator_argsTupleScheme extends TupleScheme<getBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankOperatorVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class getBankOperator_result implements org.apache.thrift.TBase<getBankOperator_result, getBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperator_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BankOperatorVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperator_result.class, metaDataMap);
    }

    public getBankOperator_result() {
    }

    public getBankOperator_result(
      List<com.froad.thrift.vo.BankOperatorVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperator_result(getBankOperator_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BankOperatorVo> __this__success = new ArrayList<com.froad.thrift.vo.BankOperatorVo>(other.success.size());
        for (com.froad.thrift.vo.BankOperatorVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BankOperatorVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBankOperator_result deepCopy() {
      return new getBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BankOperatorVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BankOperatorVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BankOperatorVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BankOperatorVo> getSuccess() {
      return this.success;
    }

    public getBankOperator_result setSuccess(List<com.froad.thrift.vo.BankOperatorVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BankOperatorVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperator_result)
        return this.equals((getBankOperator_result)that);
      return false;
    }

    public boolean equals(getBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public getBankOperator_resultStandardScheme getScheme() {
        return new getBankOperator_resultStandardScheme();
      }
    }

    private static class getBankOperator_resultStandardScheme extends StandardScheme<getBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BankOperatorVo>(_list8.size);
                  com.froad.thrift.vo.BankOperatorVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.BankOperatorVo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BankOperatorVo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public getBankOperator_resultTupleScheme getScheme() {
        return new getBankOperator_resultTupleScheme();
      }
    }

    private static class getBankOperator_resultTupleScheme extends TupleScheme<getBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BankOperatorVo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BankOperatorVo>(_list13.size);
            com.froad.thrift.vo.BankOperatorVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.BankOperatorVo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorByPage_args implements org.apache.thrift.TBase<getBankOperatorByPage_args, getBankOperatorByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      BANK_OPERATOR_VO((short)2, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorByPage_args.class, metaDataMap);
    }

    public getBankOperatorByPage_args() {
    }

    public getBankOperatorByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.page = page;
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorByPage_args(getBankOperatorByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public getBankOperatorByPage_args deepCopy() {
      return new getBankOperatorByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getBankOperatorByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public getBankOperatorByPage_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorByPage_args)
        return this.equals((getBankOperatorByPage_args)that);
      return false;
    }

    public boolean equals(getBankOperatorByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorByPage_argsStandardScheme getScheme() {
        return new getBankOperatorByPage_argsStandardScheme();
      }
    }

    private static class getBankOperatorByPage_argsStandardScheme extends StandardScheme<getBankOperatorByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorByPage_argsTupleScheme getScheme() {
        return new getBankOperatorByPage_argsTupleScheme();
      }
    }

    private static class getBankOperatorByPage_argsTupleScheme extends TupleScheme<getBankOperatorByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetBankOperatorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorByPage_result implements org.apache.thrift.TBase<getBankOperatorByPage_result, getBankOperatorByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorByPage_result.class, metaDataMap);
    }

    public getBankOperatorByPage_result() {
    }

    public getBankOperatorByPage_result(
      com.froad.thrift.vo.BankOperatorPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorByPage_result(getBankOperatorByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankOperatorPageVoRes(other.success);
      }
    }

    public getBankOperatorByPage_result deepCopy() {
      return new getBankOperatorByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes getSuccess() {
      return this.success;
    }

    public getBankOperatorByPage_result setSuccess(com.froad.thrift.vo.BankOperatorPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankOperatorPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorByPage_result)
        return this.equals((getBankOperatorByPage_result)that);
      return false;
    }

    public boolean equals(getBankOperatorByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorByPage_resultStandardScheme getScheme() {
        return new getBankOperatorByPage_resultStandardScheme();
      }
    }

    private static class getBankOperatorByPage_resultStandardScheme extends StandardScheme<getBankOperatorByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankOperatorPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorByPage_resultTupleScheme getScheme() {
        return new getBankOperatorByPage_resultTupleScheme();
      }
    }

    private static class getBankOperatorByPage_resultTupleScheme extends TupleScheme<getBankOperatorByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankOperatorPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorByPageInCurrentOrg_args implements org.apache.thrift.TBase<getBankOperatorByPageInCurrentOrg_args, getBankOperatorByPageInCurrentOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorByPageInCurrentOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorByPageInCurrentOrg_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_OPERATOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOperatorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorByPageInCurrentOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorByPageInCurrentOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.BankOperatorVo bankOperatorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      BANK_OPERATOR_VO((short)2, "bankOperatorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // BANK_OPERATOR_VO
            return BANK_OPERATOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BANK_OPERATOR_VO, new org.apache.thrift.meta_data.FieldMetaData("bankOperatorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorByPageInCurrentOrg_args.class, metaDataMap);
    }

    public getBankOperatorByPageInCurrentOrg_args() {
    }

    public getBankOperatorByPageInCurrentOrg_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.BankOperatorVo bankOperatorVo)
    {
      this();
      this.pageVo = pageVo;
      this.bankOperatorVo = bankOperatorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorByPageInCurrentOrg_args(getBankOperatorByPageInCurrentOrg_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetBankOperatorVo()) {
        this.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo(other.bankOperatorVo);
      }
    }

    public getBankOperatorByPageInCurrentOrg_args deepCopy() {
      return new getBankOperatorByPageInCurrentOrg_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.bankOperatorVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getBankOperatorByPageInCurrentOrg_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.BankOperatorVo getBankOperatorVo() {
      return this.bankOperatorVo;
    }

    public getBankOperatorByPageInCurrentOrg_args setBankOperatorVo(com.froad.thrift.vo.BankOperatorVo bankOperatorVo) {
      this.bankOperatorVo = bankOperatorVo;
      return this;
    }

    public void unsetBankOperatorVo() {
      this.bankOperatorVo = null;
    }

    /** Returns true if field bankOperatorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOperatorVo() {
      return this.bankOperatorVo != null;
    }

    public void setBankOperatorVoIsSet(boolean value) {
      if (!value) {
        this.bankOperatorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BANK_OPERATOR_VO:
        if (value == null) {
          unsetBankOperatorVo();
        } else {
          setBankOperatorVo((com.froad.thrift.vo.BankOperatorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case BANK_OPERATOR_VO:
        return getBankOperatorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case BANK_OPERATOR_VO:
        return isSetBankOperatorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorByPageInCurrentOrg_args)
        return this.equals((getBankOperatorByPageInCurrentOrg_args)that);
      return false;
    }

    public boolean equals(getBankOperatorByPageInCurrentOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_bankOperatorVo = true && this.isSetBankOperatorVo();
      boolean that_present_bankOperatorVo = true && that.isSetBankOperatorVo();
      if (this_present_bankOperatorVo || that_present_bankOperatorVo) {
        if (!(this_present_bankOperatorVo && that_present_bankOperatorVo))
          return false;
        if (!this.bankOperatorVo.equals(that.bankOperatorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_bankOperatorVo = true && (isSetBankOperatorVo());
      list.add(present_bankOperatorVo);
      if (present_bankOperatorVo)
        list.add(bankOperatorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorByPageInCurrentOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankOperatorVo()).compareTo(other.isSetBankOperatorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOperatorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOperatorVo, other.bankOperatorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorByPageInCurrentOrg_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankOperatorVo:");
      if (this.bankOperatorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOperatorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (bankOperatorVo != null) {
        bankOperatorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_argsStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorByPageInCurrentOrg_argsStandardScheme getScheme() {
        return new getBankOperatorByPageInCurrentOrg_argsStandardScheme();
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_argsStandardScheme extends StandardScheme<getBankOperatorByPageInCurrentOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorByPageInCurrentOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_OPERATOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
                struct.bankOperatorVo.read(iprot);
                struct.setBankOperatorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorByPageInCurrentOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankOperatorVo != null) {
          oprot.writeFieldBegin(BANK_OPERATOR_VO_FIELD_DESC);
          struct.bankOperatorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorByPageInCurrentOrg_argsTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorByPageInCurrentOrg_argsTupleScheme getScheme() {
        return new getBankOperatorByPageInCurrentOrg_argsTupleScheme();
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_argsTupleScheme extends TupleScheme<getBankOperatorByPageInCurrentOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPageInCurrentOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankOperatorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetBankOperatorVo()) {
          struct.bankOperatorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPageInCurrentOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankOperatorVo = new com.froad.thrift.vo.BankOperatorVo();
          struct.bankOperatorVo.read(iprot);
          struct.setBankOperatorVoIsSet(true);
        }
      }
    }

  }

  public static class getBankOperatorByPageInCurrentOrg_result implements org.apache.thrift.TBase<getBankOperatorByPageInCurrentOrg_result, getBankOperatorByPageInCurrentOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankOperatorByPageInCurrentOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankOperatorByPageInCurrentOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankOperatorByPageInCurrentOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankOperatorByPageInCurrentOrg_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankOperatorPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankOperatorByPageInCurrentOrg_result.class, metaDataMap);
    }

    public getBankOperatorByPageInCurrentOrg_result() {
    }

    public getBankOperatorByPageInCurrentOrg_result(
      com.froad.thrift.vo.BankOperatorPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankOperatorByPageInCurrentOrg_result(getBankOperatorByPageInCurrentOrg_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankOperatorPageVoRes(other.success);
      }
    }

    public getBankOperatorByPageInCurrentOrg_result deepCopy() {
      return new getBankOperatorByPageInCurrentOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankOperatorPageVoRes getSuccess() {
      return this.success;
    }

    public getBankOperatorByPageInCurrentOrg_result setSuccess(com.froad.thrift.vo.BankOperatorPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankOperatorPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankOperatorByPageInCurrentOrg_result)
        return this.equals((getBankOperatorByPageInCurrentOrg_result)that);
      return false;
    }

    public boolean equals(getBankOperatorByPageInCurrentOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankOperatorByPageInCurrentOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankOperatorByPageInCurrentOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_resultStandardSchemeFactory implements SchemeFactory {
      public getBankOperatorByPageInCurrentOrg_resultStandardScheme getScheme() {
        return new getBankOperatorByPageInCurrentOrg_resultStandardScheme();
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_resultStandardScheme extends StandardScheme<getBankOperatorByPageInCurrentOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankOperatorByPageInCurrentOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankOperatorPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankOperatorByPageInCurrentOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankOperatorByPageInCurrentOrg_resultTupleSchemeFactory implements SchemeFactory {
      public getBankOperatorByPageInCurrentOrg_resultTupleScheme getScheme() {
        return new getBankOperatorByPageInCurrentOrg_resultTupleScheme();
      }
    }

    private static class getBankOperatorByPageInCurrentOrg_resultTupleScheme extends TupleScheme<getBankOperatorByPageInCurrentOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPageInCurrentOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankOperatorByPageInCurrentOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankOperatorPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class logoutBankOperator_args implements org.apache.thrift.TBase<logoutBankOperator_args, logoutBankOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<logoutBankOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logoutBankOperator_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logoutBankOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logoutBankOperator_argsTupleSchemeFactory());
    }

    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logoutBankOperator_args.class, metaDataMap);
    }

    public logoutBankOperator_args() {
    }

    public logoutBankOperator_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutBankOperator_args(logoutBankOperator_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public logoutBankOperator_args deepCopy() {
      return new logoutBankOperator_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public logoutBankOperator_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutBankOperator_args)
        return this.equals((logoutBankOperator_args)that);
      return false;
    }

    public boolean equals(logoutBankOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(logoutBankOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logoutBankOperator_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logoutBankOperator_argsStandardSchemeFactory implements SchemeFactory {
      public logoutBankOperator_argsStandardScheme getScheme() {
        return new logoutBankOperator_argsStandardScheme();
      }
    }

    private static class logoutBankOperator_argsStandardScheme extends StandardScheme<logoutBankOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logoutBankOperator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logoutBankOperator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logoutBankOperator_argsTupleSchemeFactory implements SchemeFactory {
      public logoutBankOperator_argsTupleScheme getScheme() {
        return new logoutBankOperator_argsTupleScheme();
      }
    }

    private static class logoutBankOperator_argsTupleScheme extends TupleScheme<logoutBankOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logoutBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logoutBankOperator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class logoutBankOperator_result implements org.apache.thrift.TBase<logoutBankOperator_result, logoutBankOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<logoutBankOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logoutBankOperator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logoutBankOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logoutBankOperator_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logoutBankOperator_result.class, metaDataMap);
    }

    public logoutBankOperator_result() {
    }

    public logoutBankOperator_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutBankOperator_result(logoutBankOperator_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public logoutBankOperator_result deepCopy() {
      return new logoutBankOperator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public logoutBankOperator_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutBankOperator_result)
        return this.equals((logoutBankOperator_result)that);
      return false;
    }

    public boolean equals(logoutBankOperator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(logoutBankOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logoutBankOperator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logoutBankOperator_resultStandardSchemeFactory implements SchemeFactory {
      public logoutBankOperator_resultStandardScheme getScheme() {
        return new logoutBankOperator_resultStandardScheme();
      }
    }

    private static class logoutBankOperator_resultStandardScheme extends StandardScheme<logoutBankOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logoutBankOperator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logoutBankOperator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logoutBankOperator_resultTupleSchemeFactory implements SchemeFactory {
      public logoutBankOperator_resultTupleScheme getScheme() {
        return new logoutBankOperator_resultTupleScheme();
      }
    }

    private static class logoutBankOperator_resultTupleScheme extends TupleScheme<logoutBankOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logoutBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logoutBankOperator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
