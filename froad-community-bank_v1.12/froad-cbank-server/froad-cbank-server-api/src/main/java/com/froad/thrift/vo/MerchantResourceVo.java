/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户菜单资源
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantResourceVo implements org.apache.thrift.TBase<MerchantResourceVo, MerchantResourceVo._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantResourceVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantResourceVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnabled", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RIGHT_SN_FIELD_DESC = new org.apache.thrift.protocol.TField("rightSn", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isParent", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantResourceVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantResourceVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // optional
  /**
   * 客户端ID
   */
  public String clientId; // optional
  /**
   * 资源名称
   */
  public String name; // optional
  /**
   * 上级资源ID
   */
  public String icon; // optional
  /**
   * 资源URL
   */
  public String url; // optional
  /**
   * 类型
   */
  public String type; // optional
  /**
   * 上级资源ID
   */
  public long parentId; // optional
  /**
   * 树路径
   */
  public String treePath; // optional
  /**
   * 是否启用
   */
  public boolean isEnabled; // optional
  /**
   * 资源接口
   */
  public String api; // optional
  /**
   * 模块(元素)编号
   */
  public String sn; // optional
  /**
   * 权限编号
   */
  public String rightSn; // optional
  /**
   * 是否是上级
   */
  public boolean isParent; // optional
  /**
   * 排序
   */
  public int orderValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 资源名称
     */
    NAME((short)4, "name"),
    /**
     * 上级资源ID
     */
    ICON((short)5, "icon"),
    /**
     * 资源URL
     */
    URL((short)6, "url"),
    /**
     * 类型
     */
    TYPE((short)7, "type"),
    /**
     * 上级资源ID
     */
    PARENT_ID((short)8, "parentId"),
    /**
     * 树路径
     */
    TREE_PATH((short)9, "treePath"),
    /**
     * 是否启用
     */
    IS_ENABLED((short)10, "isEnabled"),
    /**
     * 资源接口
     */
    API((short)11, "api"),
    /**
     * 模块(元素)编号
     */
    SN((short)12, "sn"),
    /**
     * 权限编号
     */
    RIGHT_SN((short)13, "rightSn"),
    /**
     * 是否是上级
     */
    IS_PARENT((short)14, "isParent"),
    /**
     * 排序
     */
    ORDER_VALUE((short)15, "orderValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 4: // NAME
          return NAME;
        case 5: // ICON
          return ICON;
        case 6: // URL
          return URL;
        case 7: // TYPE
          return TYPE;
        case 8: // PARENT_ID
          return PARENT_ID;
        case 9: // TREE_PATH
          return TREE_PATH;
        case 10: // IS_ENABLED
          return IS_ENABLED;
        case 11: // API
          return API;
        case 12: // SN
          return SN;
        case 13: // RIGHT_SN
          return RIGHT_SN;
        case 14: // IS_PARENT
          return IS_PARENT;
        case 15: // ORDER_VALUE
          return ORDER_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENTID_ISSET_ID = 1;
  private static final int __ISENABLED_ISSET_ID = 2;
  private static final int __ISPARENT_ISSET_ID = 3;
  private static final int __ORDERVALUE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.NAME,_Fields.ICON,_Fields.URL,_Fields.TYPE,_Fields.PARENT_ID,_Fields.TREE_PATH,_Fields.IS_ENABLED,_Fields.API,_Fields.SN,_Fields.RIGHT_SN,_Fields.IS_PARENT,_Fields.ORDER_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_SN, new org.apache.thrift.meta_data.FieldMetaData("rightSn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PARENT, new org.apache.thrift.meta_data.FieldMetaData("isParent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantResourceVo.class, metaDataMap);
  }

  public MerchantResourceVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantResourceVo(MerchantResourceVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.parentId = other.parentId;
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    this.isEnabled = other.isEnabled;
    if (other.isSetApi()) {
      this.api = other.api;
    }
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    if (other.isSetRightSn()) {
      this.rightSn = other.rightSn;
    }
    this.isParent = other.isParent;
    this.orderValue = other.orderValue;
  }

  public MerchantResourceVo deepCopy() {
    return new MerchantResourceVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.name = null;
    this.icon = null;
    this.url = null;
    this.type = null;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.treePath = null;
    setIsEnabledIsSet(false);
    this.isEnabled = false;
    this.api = null;
    this.sn = null;
    this.rightSn = null;
    setIsParentIsSet(false);
    this.isParent = false;
    setOrderValueIsSet(false);
    this.orderValue = 0;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public MerchantResourceVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public MerchantResourceVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 资源名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 资源名称
   */
  public MerchantResourceVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 上级资源ID
   */
  public String getIcon() {
    return this.icon;
  }

  /**
   * 上级资源ID
   */
  public MerchantResourceVo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  /**
   * 资源URL
   */
  public String getUrl() {
    return this.url;
  }

  /**
   * 资源URL
   */
  public MerchantResourceVo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  /**
   * 类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 类型
   */
  public MerchantResourceVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 上级资源ID
   */
  public long getParentId() {
    return this.parentId;
  }

  /**
   * 上级资源ID
   */
  public MerchantResourceVo setParentId(long parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  /**
   * 树路径
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 树路径
   */
  public MerchantResourceVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 是否启用
   */
  public boolean isIsEnabled() {
    return this.isEnabled;
  }

  /**
   * 是否启用
   */
  public MerchantResourceVo setIsEnabled(boolean isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLED_ISSET_ID, value);
  }

  /**
   * 资源接口
   */
  public String getApi() {
    return this.api;
  }

  /**
   * 资源接口
   */
  public MerchantResourceVo setApi(String api) {
    this.api = api;
    return this;
  }

  public void unsetApi() {
    this.api = null;
  }

  /** Returns true if field api is set (has been assigned a value) and false otherwise */
  public boolean isSetApi() {
    return this.api != null;
  }

  public void setApiIsSet(boolean value) {
    if (!value) {
      this.api = null;
    }
  }

  /**
   * 模块(元素)编号
   */
  public String getSn() {
    return this.sn;
  }

  /**
   * 模块(元素)编号
   */
  public MerchantResourceVo setSn(String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  /**
   * 权限编号
   */
  public String getRightSn() {
    return this.rightSn;
  }

  /**
   * 权限编号
   */
  public MerchantResourceVo setRightSn(String rightSn) {
    this.rightSn = rightSn;
    return this;
  }

  public void unsetRightSn() {
    this.rightSn = null;
  }

  /** Returns true if field rightSn is set (has been assigned a value) and false otherwise */
  public boolean isSetRightSn() {
    return this.rightSn != null;
  }

  public void setRightSnIsSet(boolean value) {
    if (!value) {
      this.rightSn = null;
    }
  }

  /**
   * 是否是上级
   */
  public boolean isIsParent() {
    return this.isParent;
  }

  /**
   * 是否是上级
   */
  public MerchantResourceVo setIsParent(boolean isParent) {
    this.isParent = isParent;
    setIsParentIsSet(true);
    return this;
  }

  public void unsetIsParent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPARENT_ISSET_ID);
  }

  /** Returns true if field isParent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsParent() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPARENT_ISSET_ID);
  }

  public void setIsParentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPARENT_ISSET_ID, value);
  }

  /**
   * 排序
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * 排序
   */
  public MerchantResourceVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Long)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((Boolean)value);
      }
      break;

    case API:
      if (value == null) {
        unsetApi();
      } else {
        setApi((String)value);
      }
      break;

    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((String)value);
      }
      break;

    case RIGHT_SN:
      if (value == null) {
        unsetRightSn();
      } else {
        setRightSn((String)value);
      }
      break;

    case IS_PARENT:
      if (value == null) {
        unsetIsParent();
      } else {
        setIsParent((Boolean)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case NAME:
      return getName();

    case ICON:
      return getIcon();

    case URL:
      return getUrl();

    case TYPE:
      return getType();

    case PARENT_ID:
      return Long.valueOf(getParentId());

    case TREE_PATH:
      return getTreePath();

    case IS_ENABLED:
      return Boolean.valueOf(isIsEnabled());

    case API:
      return getApi();

    case SN:
      return getSn();

    case RIGHT_SN:
      return getRightSn();

    case IS_PARENT:
      return Boolean.valueOf(isIsParent());

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case NAME:
      return isSetName();
    case ICON:
      return isSetIcon();
    case URL:
      return isSetUrl();
    case TYPE:
      return isSetType();
    case PARENT_ID:
      return isSetParentId();
    case TREE_PATH:
      return isSetTreePath();
    case IS_ENABLED:
      return isSetIsEnabled();
    case API:
      return isSetApi();
    case SN:
      return isSetSn();
    case RIGHT_SN:
      return isSetRightSn();
    case IS_PARENT:
      return isSetIsParent();
    case ORDER_VALUE:
      return isSetOrderValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantResourceVo)
      return this.equals((MerchantResourceVo)that);
    return false;
  }

  public boolean equals(MerchantResourceVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_isEnabled = true && this.isSetIsEnabled();
    boolean that_present_isEnabled = true && that.isSetIsEnabled();
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_api = true && this.isSetApi();
    boolean that_present_api = true && that.isSetApi();
    if (this_present_api || that_present_api) {
      if (!(this_present_api && that_present_api))
        return false;
      if (!this.api.equals(that.api))
        return false;
    }

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_rightSn = true && this.isSetRightSn();
    boolean that_present_rightSn = true && that.isSetRightSn();
    if (this_present_rightSn || that_present_rightSn) {
      if (!(this_present_rightSn && that_present_rightSn))
        return false;
      if (!this.rightSn.equals(that.rightSn))
        return false;
    }

    boolean this_present_isParent = true && this.isSetIsParent();
    boolean that_present_isParent = true && that.isSetIsParent();
    if (this_present_isParent || that_present_isParent) {
      if (!(this_present_isParent && that_present_isParent))
        return false;
      if (this.isParent != that.isParent)
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_icon = true && (isSetIcon());
    list.add(present_icon);
    if (present_icon)
      list.add(icon);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_parentId = true && (isSetParentId());
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_isEnabled = true && (isSetIsEnabled());
    list.add(present_isEnabled);
    if (present_isEnabled)
      list.add(isEnabled);

    boolean present_api = true && (isSetApi());
    list.add(present_api);
    if (present_api)
      list.add(api);

    boolean present_sn = true && (isSetSn());
    list.add(present_sn);
    if (present_sn)
      list.add(sn);

    boolean present_rightSn = true && (isSetRightSn());
    list.add(present_rightSn);
    if (present_rightSn)
      list.add(rightSn);

    boolean present_isParent = true && (isSetIsParent());
    list.add(present_isParent);
    if (present_isParent)
      list.add(isParent);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantResourceVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnabled()).compareTo(other.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnabled, other.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightSn()).compareTo(other.isSetRightSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightSn, other.rightSn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsParent()).compareTo(other.isSetIsParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isParent, other.isParent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantResourceVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetIcon()) {
      if (!first) sb.append(", ");
      sb.append("icon:");
      if (this.icon == null) {
        sb.append("null");
      } else {
        sb.append(this.icon);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
    }
    if (isSetTreePath()) {
      if (!first) sb.append(", ");
      sb.append("treePath:");
      if (this.treePath == null) {
        sb.append("null");
      } else {
        sb.append(this.treePath);
      }
      first = false;
    }
    if (isSetIsEnabled()) {
      if (!first) sb.append(", ");
      sb.append("isEnabled:");
      sb.append(this.isEnabled);
      first = false;
    }
    if (isSetApi()) {
      if (!first) sb.append(", ");
      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
    }
    if (isSetSn()) {
      if (!first) sb.append(", ");
      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
    }
    if (isSetRightSn()) {
      if (!first) sb.append(", ");
      sb.append("rightSn:");
      if (this.rightSn == null) {
        sb.append("null");
      } else {
        sb.append(this.rightSn);
      }
      first = false;
    }
    if (isSetIsParent()) {
      if (!first) sb.append(", ");
      sb.append("isParent:");
      sb.append(this.isParent);
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantResourceVoStandardSchemeFactory implements SchemeFactory {
    public MerchantResourceVoStandardScheme getScheme() {
      return new MerchantResourceVoStandardScheme();
    }
  }

  private static class MerchantResourceVoStandardScheme extends StandardScheme<MerchantResourceVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantResourceVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnabled = iprot.readBool();
              struct.setIsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // API
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api = iprot.readString();
              struct.setApiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RIGHT_SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rightSn = iprot.readString();
              struct.setRightSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isParent = iprot.readBool();
              struct.setIsParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantResourceVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.icon != null) {
        if (struct.isSetIcon()) {
          oprot.writeFieldBegin(ICON_FIELD_DESC);
          oprot.writeString(struct.icon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentId()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
      }
      if (struct.treePath != null) {
        if (struct.isSetTreePath()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.treePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.isEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.api != null) {
        if (struct.isSetApi()) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sn != null) {
        if (struct.isSetSn()) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          oprot.writeString(struct.sn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rightSn != null) {
        if (struct.isSetRightSn()) {
          oprot.writeFieldBegin(RIGHT_SN_FIELD_DESC);
          oprot.writeString(struct.rightSn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsParent()) {
        oprot.writeFieldBegin(IS_PARENT_FIELD_DESC);
        oprot.writeBool(struct.isParent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantResourceVoTupleSchemeFactory implements SchemeFactory {
    public MerchantResourceVoTupleScheme getScheme() {
      return new MerchantResourceVoTupleScheme();
    }
  }

  private static class MerchantResourceVoTupleScheme extends TupleScheme<MerchantResourceVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetIcon()) {
        optionals.set(3);
      }
      if (struct.isSetUrl()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetParentId()) {
        optionals.set(6);
      }
      if (struct.isSetTreePath()) {
        optionals.set(7);
      }
      if (struct.isSetIsEnabled()) {
        optionals.set(8);
      }
      if (struct.isSetApi()) {
        optionals.set(9);
      }
      if (struct.isSetSn()) {
        optionals.set(10);
      }
      if (struct.isSetRightSn()) {
        optionals.set(11);
      }
      if (struct.isSetIsParent()) {
        optionals.set(12);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetParentId()) {
        oprot.writeI64(struct.parentId);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeBool(struct.isEnabled);
      }
      if (struct.isSetApi()) {
        oprot.writeString(struct.api);
      }
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetRightSn()) {
        oprot.writeString(struct.rightSn);
      }
      if (struct.isSetIsParent()) {
        oprot.writeBool(struct.isParent);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.parentId = iprot.readI64();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isEnabled = iprot.readBool();
        struct.setIsEnabledIsSet(true);
      }
      if (incoming.get(9)) {
        struct.api = iprot.readString();
        struct.setApiIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rightSn = iprot.readString();
        struct.setRightSnIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isParent = iprot.readBool();
        struct.setIsParentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
    }
  }

}

