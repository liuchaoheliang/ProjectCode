/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * HistoryInstanceVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class HistoryInstanceVo implements org.apache.thrift.TBase<HistoryInstanceVo, HistoryInstanceVo._Fields>, java.io.Serializable, Cloneable, Comparable<HistoryInstanceVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HistoryInstanceVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INSTANCE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceState", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_UPDATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdator", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HistoryInstanceVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HistoryInstanceVoTupleSchemeFactory());
  }

  public long id; // optional
  /**
   * id
   */
  public long createTime; // optional
  /**
   * createTime
   */
  public long updateTime; // optional
  /**
   * updateTime
   */
  public String clientId; // optional
  /**
   * clientId
   */
  public String instanceId; // optional
  /**
   * instanceId
   */
  public String processId; // optional
  /**
   * processId
   */
  public String instanceState; // optional
  /**
   * instanceState
   */
  public String creator; // optional
  /**
   * creator
   */
  public String lastUpdator; // optional
  /**
   * lastUpdator
   */
  public int orderValue; // optional
  /**
   * orderValue
   */
  public String orgCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * id
     */
    CREATE_TIME((short)2, "createTime"),
    /**
     * createTime
     */
    UPDATE_TIME((short)3, "updateTime"),
    /**
     * updateTime
     */
    CLIENT_ID((short)4, "clientId"),
    /**
     * clientId
     */
    INSTANCE_ID((short)5, "instanceId"),
    /**
     * instanceId
     */
    PROCESS_ID((short)6, "processId"),
    /**
     * processId
     */
    INSTANCE_STATE((short)7, "instanceState"),
    /**
     * instanceState
     */
    CREATOR((short)8, "creator"),
    /**
     * creator
     */
    LAST_UPDATOR((short)9, "lastUpdator"),
    /**
     * lastUpdator
     */
    ORDER_VALUE((short)10, "orderValue"),
    /**
     * orderValue
     */
    ORG_CODE((short)11, "orgCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // UPDATE_TIME
          return UPDATE_TIME;
        case 4: // CLIENT_ID
          return CLIENT_ID;
        case 5: // INSTANCE_ID
          return INSTANCE_ID;
        case 6: // PROCESS_ID
          return PROCESS_ID;
        case 7: // INSTANCE_STATE
          return INSTANCE_STATE;
        case 8: // CREATOR
          return CREATOR;
        case 9: // LAST_UPDATOR
          return LAST_UPDATOR;
        case 10: // ORDER_VALUE
          return ORDER_VALUE;
        case 11: // ORG_CODE
          return ORG_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __ORDERVALUE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.CLIENT_ID,_Fields.INSTANCE_ID,_Fields.PROCESS_ID,_Fields.INSTANCE_STATE,_Fields.CREATOR,_Fields.LAST_UPDATOR,_Fields.ORDER_VALUE,_Fields.ORG_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("processId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_STATE, new org.apache.thrift.meta_data.FieldMetaData("instanceState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATOR, new org.apache.thrift.meta_data.FieldMetaData("lastUpdator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HistoryInstanceVo.class, metaDataMap);
  }

  public HistoryInstanceVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HistoryInstanceVo(HistoryInstanceVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetProcessId()) {
      this.processId = other.processId;
    }
    if (other.isSetInstanceState()) {
      this.instanceState = other.instanceState;
    }
    if (other.isSetCreator()) {
      this.creator = other.creator;
    }
    if (other.isSetLastUpdator()) {
      this.lastUpdator = other.lastUpdator;
    }
    this.orderValue = other.orderValue;
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
  }

  public HistoryInstanceVo deepCopy() {
    return new HistoryInstanceVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.clientId = null;
    this.instanceId = null;
    this.processId = null;
    this.instanceState = null;
    this.creator = null;
    this.lastUpdator = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
    this.orgCode = null;
  }

  public long getId() {
    return this.id;
  }

  public HistoryInstanceVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * id
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * id
   */
  public HistoryInstanceVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * createTime
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * createTime
   */
  public HistoryInstanceVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * updateTime
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * updateTime
   */
  public HistoryInstanceVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * clientId
   */
  public String getInstanceId() {
    return this.instanceId;
  }

  /**
   * clientId
   */
  public HistoryInstanceVo setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  /**
   * instanceId
   */
  public String getProcessId() {
    return this.processId;
  }

  /**
   * instanceId
   */
  public HistoryInstanceVo setProcessId(String processId) {
    this.processId = processId;
    return this;
  }

  public void unsetProcessId() {
    this.processId = null;
  }

  /** Returns true if field processId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessId() {
    return this.processId != null;
  }

  public void setProcessIdIsSet(boolean value) {
    if (!value) {
      this.processId = null;
    }
  }

  /**
   * processId
   */
  public String getInstanceState() {
    return this.instanceState;
  }

  /**
   * processId
   */
  public HistoryInstanceVo setInstanceState(String instanceState) {
    this.instanceState = instanceState;
    return this;
  }

  public void unsetInstanceState() {
    this.instanceState = null;
  }

  /** Returns true if field instanceState is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceState() {
    return this.instanceState != null;
  }

  public void setInstanceStateIsSet(boolean value) {
    if (!value) {
      this.instanceState = null;
    }
  }

  /**
   * instanceState
   */
  public String getCreator() {
    return this.creator;
  }

  /**
   * instanceState
   */
  public HistoryInstanceVo setCreator(String creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  /**
   * creator
   */
  public String getLastUpdator() {
    return this.lastUpdator;
  }

  /**
   * creator
   */
  public HistoryInstanceVo setLastUpdator(String lastUpdator) {
    this.lastUpdator = lastUpdator;
    return this;
  }

  public void unsetLastUpdator() {
    this.lastUpdator = null;
  }

  /** Returns true if field lastUpdator is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdator() {
    return this.lastUpdator != null;
  }

  public void setLastUpdatorIsSet(boolean value) {
    if (!value) {
      this.lastUpdator = null;
    }
  }

  /**
   * lastUpdator
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * lastUpdator
   */
  public HistoryInstanceVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  /**
   * orderValue
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * orderValue
   */
  public HistoryInstanceVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case PROCESS_ID:
      if (value == null) {
        unsetProcessId();
      } else {
        setProcessId((String)value);
      }
      break;

    case INSTANCE_STATE:
      if (value == null) {
        unsetInstanceState();
      } else {
        setInstanceState((String)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((String)value);
      }
      break;

    case LAST_UPDATOR:
      if (value == null) {
        unsetLastUpdator();
      } else {
        setLastUpdator((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case CLIENT_ID:
      return getClientId();

    case INSTANCE_ID:
      return getInstanceId();

    case PROCESS_ID:
      return getProcessId();

    case INSTANCE_STATE:
      return getInstanceState();

    case CREATOR:
      return getCreator();

    case LAST_UPDATOR:
      return getLastUpdator();

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    case ORG_CODE:
      return getOrgCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CLIENT_ID:
      return isSetClientId();
    case INSTANCE_ID:
      return isSetInstanceId();
    case PROCESS_ID:
      return isSetProcessId();
    case INSTANCE_STATE:
      return isSetInstanceState();
    case CREATOR:
      return isSetCreator();
    case LAST_UPDATOR:
      return isSetLastUpdator();
    case ORDER_VALUE:
      return isSetOrderValue();
    case ORG_CODE:
      return isSetOrgCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HistoryInstanceVo)
      return this.equals((HistoryInstanceVo)that);
    return false;
  }

  public boolean equals(HistoryInstanceVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_processId = true && this.isSetProcessId();
    boolean that_present_processId = true && that.isSetProcessId();
    if (this_present_processId || that_present_processId) {
      if (!(this_present_processId && that_present_processId))
        return false;
      if (!this.processId.equals(that.processId))
        return false;
    }

    boolean this_present_instanceState = true && this.isSetInstanceState();
    boolean that_present_instanceState = true && that.isSetInstanceState();
    if (this_present_instanceState || that_present_instanceState) {
      if (!(this_present_instanceState && that_present_instanceState))
        return false;
      if (!this.instanceState.equals(that.instanceState))
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_lastUpdator = true && this.isSetLastUpdator();
    boolean that_present_lastUpdator = true && that.isSetLastUpdator();
    if (this_present_lastUpdator || that_present_lastUpdator) {
      if (!(this_present_lastUpdator && that_present_lastUpdator))
        return false;
      if (!this.lastUpdator.equals(that.lastUpdator))
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_instanceId = true && (isSetInstanceId());
    list.add(present_instanceId);
    if (present_instanceId)
      list.add(instanceId);

    boolean present_processId = true && (isSetProcessId());
    list.add(present_processId);
    if (present_processId)
      list.add(processId);

    boolean present_instanceState = true && (isSetInstanceState());
    list.add(present_instanceState);
    if (present_instanceState)
      list.add(instanceState);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_lastUpdator = true && (isSetLastUpdator());
    list.add(present_lastUpdator);
    if (present_lastUpdator)
      list.add(lastUpdator);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(HistoryInstanceVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessId()).compareTo(other.isSetProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processId, other.processId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceState()).compareTo(other.isSetInstanceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceState, other.instanceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdator()).compareTo(other.isSetLastUpdator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdator, other.lastUpdator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HistoryInstanceVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetProcessId()) {
      if (!first) sb.append(", ");
      sb.append("processId:");
      if (this.processId == null) {
        sb.append("null");
      } else {
        sb.append(this.processId);
      }
      first = false;
    }
    if (isSetInstanceState()) {
      if (!first) sb.append(", ");
      sb.append("instanceState:");
      if (this.instanceState == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceState);
      }
      first = false;
    }
    if (isSetCreator()) {
      if (!first) sb.append(", ");
      sb.append("creator:");
      if (this.creator == null) {
        sb.append("null");
      } else {
        sb.append(this.creator);
      }
      first = false;
    }
    if (isSetLastUpdator()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdator:");
      if (this.lastUpdator == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdator);
      }
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HistoryInstanceVoStandardSchemeFactory implements SchemeFactory {
    public HistoryInstanceVoStandardScheme getScheme() {
      return new HistoryInstanceVoStandardScheme();
    }
  }

  private static class HistoryInstanceVoStandardScheme extends StandardScheme<HistoryInstanceVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HistoryInstanceVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processId = iprot.readString();
              struct.setProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTANCE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceState = iprot.readString();
              struct.setInstanceStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creator = iprot.readString();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_UPDATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdator = iprot.readString();
              struct.setLastUpdatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HistoryInstanceVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processId != null) {
        if (struct.isSetProcessId()) {
          oprot.writeFieldBegin(PROCESS_ID_FIELD_DESC);
          oprot.writeString(struct.processId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceState != null) {
        if (struct.isSetInstanceState()) {
          oprot.writeFieldBegin(INSTANCE_STATE_FIELD_DESC);
          oprot.writeString(struct.instanceState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.creator != null) {
        if (struct.isSetCreator()) {
          oprot.writeFieldBegin(CREATOR_FIELD_DESC);
          oprot.writeString(struct.creator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastUpdator != null) {
        if (struct.isSetLastUpdator()) {
          oprot.writeFieldBegin(LAST_UPDATOR_FIELD_DESC);
          oprot.writeString(struct.lastUpdator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HistoryInstanceVoTupleSchemeFactory implements SchemeFactory {
    public HistoryInstanceVoTupleScheme getScheme() {
      return new HistoryInstanceVoTupleScheme();
    }
  }

  private static class HistoryInstanceVoTupleScheme extends TupleScheme<HistoryInstanceVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HistoryInstanceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(2);
      }
      if (struct.isSetClientId()) {
        optionals.set(3);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(4);
      }
      if (struct.isSetProcessId()) {
        optionals.set(5);
      }
      if (struct.isSetInstanceState()) {
        optionals.set(6);
      }
      if (struct.isSetCreator()) {
        optionals.set(7);
      }
      if (struct.isSetLastUpdator()) {
        optionals.set(8);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(9);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetProcessId()) {
        oprot.writeString(struct.processId);
      }
      if (struct.isSetInstanceState()) {
        oprot.writeString(struct.instanceState);
      }
      if (struct.isSetCreator()) {
        oprot.writeString(struct.creator);
      }
      if (struct.isSetLastUpdator()) {
        oprot.writeString(struct.lastUpdator);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HistoryInstanceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.processId = iprot.readString();
        struct.setProcessIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.instanceState = iprot.readString();
        struct.setInstanceStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.creator = iprot.readString();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastUpdator = iprot.readString();
        struct.setLastUpdatorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
    }
  }

}

