/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 代金券
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class CashVo implements org.apache.thrift.TBase<CashVo, CashVo._Fields>, java.io.Serializable, Cloneable, Comparable<CashVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CashVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CASH_CN_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCn", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CASH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USED_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("usedMoney", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnabled", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("isUsed", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CashVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CashVoTupleSchemeFactory());
  }

  public long id; // optional
  /**
   * 主键ID
   */
  public String cashCn; // optional
  /**
   * 代金券批次号
   */
  public String cashCode; // optional
  /**
   * 代金券ID
   */
  public int money; // optional
  /**
   * 面值
   */
  public int usedMoney; // optional
  /**
   * 已用金额
   */
  public boolean isEnabled; // optional
  /**
   * 是否启用
   */
  public boolean isUsed; // optional
  /**
   * 是否已经使用
   */
  public String orderId; // optional
  /**
   * 以下四项在使用后有
   */
  public String subOrderId; // optional
  /**
   * subOrderId
   */
  public String merchantId; // optional
  /**
   * merchantId
   */
  public String productId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 主键ID
     */
    CASH_CN((short)2, "cashCn"),
    /**
     * 代金券批次号
     */
    CASH_CODE((short)3, "cashCode"),
    /**
     * 代金券ID
     */
    MONEY((short)4, "money"),
    /**
     * 面值
     */
    USED_MONEY((short)5, "usedMoney"),
    /**
     * 已用金额
     */
    IS_ENABLED((short)6, "isEnabled"),
    /**
     * 是否启用
     */
    IS_USED((short)7, "isUsed"),
    /**
     * 是否已经使用
     */
    ORDER_ID((short)8, "orderId"),
    /**
     * 以下四项在使用后有
     */
    SUB_ORDER_ID((short)9, "subOrderId"),
    /**
     * subOrderId
     */
    MERCHANT_ID((short)10, "merchantId"),
    /**
     * merchantId
     */
    PRODUCT_ID((short)11, "productId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CASH_CN
          return CASH_CN;
        case 3: // CASH_CODE
          return CASH_CODE;
        case 4: // MONEY
          return MONEY;
        case 5: // USED_MONEY
          return USED_MONEY;
        case 6: // IS_ENABLED
          return IS_ENABLED;
        case 7: // IS_USED
          return IS_USED;
        case 8: // ORDER_ID
          return ORDER_ID;
        case 9: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 10: // MERCHANT_ID
          return MERCHANT_ID;
        case 11: // PRODUCT_ID
          return PRODUCT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private static final int __USEDMONEY_ISSET_ID = 2;
  private static final int __ISENABLED_ISSET_ID = 3;
  private static final int __ISUSED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CASH_CN,_Fields.CASH_CODE,_Fields.MONEY,_Fields.USED_MONEY,_Fields.IS_ENABLED,_Fields.IS_USED,_Fields.ORDER_ID,_Fields.SUB_ORDER_ID,_Fields.MERCHANT_ID,_Fields.PRODUCT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CASH_CN, new org.apache.thrift.meta_data.FieldMetaData("cashCn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_CODE, new org.apache.thrift.meta_data.FieldMetaData("cashCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USED_MONEY, new org.apache.thrift.meta_data.FieldMetaData("usedMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_USED, new org.apache.thrift.meta_data.FieldMetaData("isUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CashVo.class, metaDataMap);
  }

  public CashVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CashVo(CashVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCashCn()) {
      this.cashCn = other.cashCn;
    }
    if (other.isSetCashCode()) {
      this.cashCode = other.cashCode;
    }
    this.money = other.money;
    this.usedMoney = other.usedMoney;
    this.isEnabled = other.isEnabled;
    this.isUsed = other.isUsed;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
  }

  public CashVo deepCopy() {
    return new CashVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.cashCn = null;
    this.cashCode = null;
    setMoneyIsSet(false);
    this.money = 0;
    setUsedMoneyIsSet(false);
    this.usedMoney = 0;
    setIsEnabledIsSet(false);
    this.isEnabled = false;
    setIsUsedIsSet(false);
    this.isUsed = false;
    this.orderId = null;
    this.subOrderId = null;
    this.merchantId = null;
    this.productId = null;
  }

  public long getId() {
    return this.id;
  }

  public CashVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 主键ID
   */
  public String getCashCn() {
    return this.cashCn;
  }

  /**
   * 主键ID
   */
  public CashVo setCashCn(String cashCn) {
    this.cashCn = cashCn;
    return this;
  }

  public void unsetCashCn() {
    this.cashCn = null;
  }

  /** Returns true if field cashCn is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCn() {
    return this.cashCn != null;
  }

  public void setCashCnIsSet(boolean value) {
    if (!value) {
      this.cashCn = null;
    }
  }

  /**
   * 代金券批次号
   */
  public String getCashCode() {
    return this.cashCode;
  }

  /**
   * 代金券批次号
   */
  public CashVo setCashCode(String cashCode) {
    this.cashCode = cashCode;
    return this;
  }

  public void unsetCashCode() {
    this.cashCode = null;
  }

  /** Returns true if field cashCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCode() {
    return this.cashCode != null;
  }

  public void setCashCodeIsSet(boolean value) {
    if (!value) {
      this.cashCode = null;
    }
  }

  /**
   * 代金券ID
   */
  public int getMoney() {
    return this.money;
  }

  /**
   * 代金券ID
   */
  public CashVo setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  /**
   * 面值
   */
  public int getUsedMoney() {
    return this.usedMoney;
  }

  /**
   * 面值
   */
  public CashVo setUsedMoney(int usedMoney) {
    this.usedMoney = usedMoney;
    setUsedMoneyIsSet(true);
    return this;
  }

  public void unsetUsedMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDMONEY_ISSET_ID);
  }

  /** Returns true if field usedMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDMONEY_ISSET_ID);
  }

  public void setUsedMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDMONEY_ISSET_ID, value);
  }

  /**
   * 已用金额
   */
  public boolean isIsEnabled() {
    return this.isEnabled;
  }

  /**
   * 已用金额
   */
  public CashVo setIsEnabled(boolean isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLED_ISSET_ID, value);
  }

  /**
   * 是否启用
   */
  public boolean isIsUsed() {
    return this.isUsed;
  }

  /**
   * 是否启用
   */
  public CashVo setIsUsed(boolean isUsed) {
    this.isUsed = isUsed;
    setIsUsedIsSet(true);
    return this;
  }

  public void unsetIsUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSED_ISSET_ID);
  }

  /** Returns true if field isUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISUSED_ISSET_ID);
  }

  public void setIsUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSED_ISSET_ID, value);
  }

  /**
   * 是否已经使用
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 是否已经使用
   */
  public CashVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 以下四项在使用后有
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 以下四项在使用后有
   */
  public CashVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * subOrderId
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * subOrderId
   */
  public CashVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * merchantId
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * merchantId
   */
  public CashVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CASH_CN:
      if (value == null) {
        unsetCashCn();
      } else {
        setCashCn((String)value);
      }
      break;

    case CASH_CODE:
      if (value == null) {
        unsetCashCode();
      } else {
        setCashCode((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Integer)value);
      }
      break;

    case USED_MONEY:
      if (value == null) {
        unsetUsedMoney();
      } else {
        setUsedMoney((Integer)value);
      }
      break;

    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((Boolean)value);
      }
      break;

    case IS_USED:
      if (value == null) {
        unsetIsUsed();
      } else {
        setIsUsed((Boolean)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CASH_CN:
      return getCashCn();

    case CASH_CODE:
      return getCashCode();

    case MONEY:
      return Integer.valueOf(getMoney());

    case USED_MONEY:
      return Integer.valueOf(getUsedMoney());

    case IS_ENABLED:
      return Boolean.valueOf(isIsEnabled());

    case IS_USED:
      return Boolean.valueOf(isIsUsed());

    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case MERCHANT_ID:
      return getMerchantId();

    case PRODUCT_ID:
      return getProductId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CASH_CN:
      return isSetCashCn();
    case CASH_CODE:
      return isSetCashCode();
    case MONEY:
      return isSetMoney();
    case USED_MONEY:
      return isSetUsedMoney();
    case IS_ENABLED:
      return isSetIsEnabled();
    case IS_USED:
      return isSetIsUsed();
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case PRODUCT_ID:
      return isSetProductId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CashVo)
      return this.equals((CashVo)that);
    return false;
  }

  public boolean equals(CashVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cashCn = true && this.isSetCashCn();
    boolean that_present_cashCn = true && that.isSetCashCn();
    if (this_present_cashCn || that_present_cashCn) {
      if (!(this_present_cashCn && that_present_cashCn))
        return false;
      if (!this.cashCn.equals(that.cashCn))
        return false;
    }

    boolean this_present_cashCode = true && this.isSetCashCode();
    boolean that_present_cashCode = true && that.isSetCashCode();
    if (this_present_cashCode || that_present_cashCode) {
      if (!(this_present_cashCode && that_present_cashCode))
        return false;
      if (!this.cashCode.equals(that.cashCode))
        return false;
    }

    boolean this_present_money = true && this.isSetMoney();
    boolean that_present_money = true && that.isSetMoney();
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_usedMoney = true && this.isSetUsedMoney();
    boolean that_present_usedMoney = true && that.isSetUsedMoney();
    if (this_present_usedMoney || that_present_usedMoney) {
      if (!(this_present_usedMoney && that_present_usedMoney))
        return false;
      if (this.usedMoney != that.usedMoney)
        return false;
    }

    boolean this_present_isEnabled = true && this.isSetIsEnabled();
    boolean that_present_isEnabled = true && that.isSetIsEnabled();
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_isUsed = true && this.isSetIsUsed();
    boolean that_present_isUsed = true && that.isSetIsUsed();
    if (this_present_isUsed || that_present_isUsed) {
      if (!(this_present_isUsed && that_present_isUsed))
        return false;
      if (this.isUsed != that.isUsed)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_cashCn = true && (isSetCashCn());
    list.add(present_cashCn);
    if (present_cashCn)
      list.add(cashCn);

    boolean present_cashCode = true && (isSetCashCode());
    list.add(present_cashCode);
    if (present_cashCode)
      list.add(cashCode);

    boolean present_money = true && (isSetMoney());
    list.add(present_money);
    if (present_money)
      list.add(money);

    boolean present_usedMoney = true && (isSetUsedMoney());
    list.add(present_usedMoney);
    if (present_usedMoney)
      list.add(usedMoney);

    boolean present_isEnabled = true && (isSetIsEnabled());
    list.add(present_isEnabled);
    if (present_isEnabled)
      list.add(isEnabled);

    boolean present_isUsed = true && (isSetIsUsed());
    list.add(present_isUsed);
    if (present_isUsed)
      list.add(isUsed);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CashVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCn()).compareTo(other.isSetCashCn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCn, other.cashCn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCode()).compareTo(other.isSetCashCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCode, other.cashCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedMoney()).compareTo(other.isSetUsedMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedMoney, other.usedMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnabled()).compareTo(other.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnabled, other.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUsed()).compareTo(other.isSetIsUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUsed, other.isUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CashVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCashCn()) {
      if (!first) sb.append(", ");
      sb.append("cashCn:");
      if (this.cashCn == null) {
        sb.append("null");
      } else {
        sb.append(this.cashCn);
      }
      first = false;
    }
    if (isSetCashCode()) {
      if (!first) sb.append(", ");
      sb.append("cashCode:");
      if (this.cashCode == null) {
        sb.append("null");
      } else {
        sb.append(this.cashCode);
      }
      first = false;
    }
    if (isSetMoney()) {
      if (!first) sb.append(", ");
      sb.append("money:");
      sb.append(this.money);
      first = false;
    }
    if (isSetUsedMoney()) {
      if (!first) sb.append(", ");
      sb.append("usedMoney:");
      sb.append(this.usedMoney);
      first = false;
    }
    if (isSetIsEnabled()) {
      if (!first) sb.append(", ");
      sb.append("isEnabled:");
      sb.append(this.isEnabled);
      first = false;
    }
    if (isSetIsUsed()) {
      if (!first) sb.append(", ");
      sb.append("isUsed:");
      sb.append(this.isUsed);
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetSubOrderId()) {
      if (!first) sb.append(", ");
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
    }
    if (isSetMerchantId()) {
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
    }
    if (isSetProductId()) {
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CashVoStandardSchemeFactory implements SchemeFactory {
    public CashVoStandardScheme getScheme() {
      return new CashVoStandardScheme();
    }
  }

  private static class CashVoStandardScheme extends StandardScheme<CashVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CashVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASH_CN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashCn = iprot.readString();
              struct.setCashCnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CASH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashCode = iprot.readString();
              struct.setCashCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USED_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usedMoney = iprot.readI32();
              struct.setUsedMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnabled = iprot.readBool();
              struct.setIsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUsed = iprot.readBool();
              struct.setIsUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CashVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.cashCn != null) {
        if (struct.isSetCashCn()) {
          oprot.writeFieldBegin(CASH_CN_FIELD_DESC);
          oprot.writeString(struct.cashCn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cashCode != null) {
        if (struct.isSetCashCode()) {
          oprot.writeFieldBegin(CASH_CODE_FIELD_DESC);
          oprot.writeString(struct.cashCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMoney()) {
        oprot.writeFieldBegin(MONEY_FIELD_DESC);
        oprot.writeI32(struct.money);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsedMoney()) {
        oprot.writeFieldBegin(USED_MONEY_FIELD_DESC);
        oprot.writeI32(struct.usedMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.isEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsUsed()) {
        oprot.writeFieldBegin(IS_USED_FIELD_DESC);
        oprot.writeBool(struct.isUsed);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subOrderId != null) {
        if (struct.isSetSubOrderId()) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merchantId != null) {
        if (struct.isSetMerchantId()) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productId != null) {
        if (struct.isSetProductId()) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CashVoTupleSchemeFactory implements SchemeFactory {
    public CashVoTupleScheme getScheme() {
      return new CashVoTupleScheme();
    }
  }

  private static class CashVoTupleScheme extends TupleScheme<CashVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CashVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCashCn()) {
        optionals.set(1);
      }
      if (struct.isSetCashCode()) {
        optionals.set(2);
      }
      if (struct.isSetMoney()) {
        optionals.set(3);
      }
      if (struct.isSetUsedMoney()) {
        optionals.set(4);
      }
      if (struct.isSetIsEnabled()) {
        optionals.set(5);
      }
      if (struct.isSetIsUsed()) {
        optionals.set(6);
      }
      if (struct.isSetOrderId()) {
        optionals.set(7);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(8);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(9);
      }
      if (struct.isSetProductId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCashCn()) {
        oprot.writeString(struct.cashCn);
      }
      if (struct.isSetCashCode()) {
        oprot.writeString(struct.cashCode);
      }
      if (struct.isSetMoney()) {
        oprot.writeI32(struct.money);
      }
      if (struct.isSetUsedMoney()) {
        oprot.writeI32(struct.usedMoney);
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeBool(struct.isEnabled);
      }
      if (struct.isSetIsUsed()) {
        oprot.writeBool(struct.isUsed);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CashVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cashCn = iprot.readString();
        struct.setCashCnIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cashCode = iprot.readString();
        struct.setCashCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.money = iprot.readI32();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usedMoney = iprot.readI32();
        struct.setUsedMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isEnabled = iprot.readBool();
        struct.setIsEnabledIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isUsed = iprot.readBool();
        struct.setIsUsedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
    }
  }

}

