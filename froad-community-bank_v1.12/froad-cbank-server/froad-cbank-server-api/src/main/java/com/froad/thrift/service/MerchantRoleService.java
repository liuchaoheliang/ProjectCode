/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantRoleService {

  /**
   * MerchantRoleService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 MerchantRole
     * @param merchantRole
     * @return MerchantRoleAddVoRes
     * 
     * @param originVo
     * @param merchantRoleVo
     */
    public com.froad.thrift.vo.MerchantRoleAddVoRes addMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException;

    /**
     * 删除 MerchantRole
     * @param merchantRole
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantRoleVo
     */
    public com.froad.thrift.vo.ResultVo deleteMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException;

    /**
     * 修改 MerchantRole
     * @param merchantRole
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantRoleVo
     */
    public com.froad.thrift.vo.ResultVo updateMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantRole
     * @param merchantRole
     * @return List<MerchantRoleVo>
     * 
     * @param merchantRoleVo
     */
    public List<com.froad.thrift.vo.MerchantRoleVo> getMerchantRole(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 MerchantRole
     * @param merchantRole
     * @return List<MerchantRoleVo>
     * 
     * @param page
     * @param merchantRoleVo
     */
    public com.froad.thrift.vo.MerchantRolePageVoRes getMerchantRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantRole
     * @param clientId 客户端id
     * @param description Role_Administrators-超级管理员;Role_Outlet_Admin-门店管理员;Role_Outlet_Operator-门店操作员
     * 
     * @param clientId
     * @param description
     */
    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleByClientIdAndRoleDesc(String clientId, String description) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantRole(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantRoleByClientIdAndRoleDesc(String clientId, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantRoleAddVoRes addMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      send_addMerchantRole(originVo, merchantRoleVo);
      return recv_addMerchantRole();
    }

    public void send_addMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      addMerchantRole_args args = new addMerchantRole_args();
      args.setOriginVo(originVo);
      args.setMerchantRoleVo(merchantRoleVo);
      sendBase("addMerchantRole", args);
    }

    public com.froad.thrift.vo.MerchantRoleAddVoRes recv_addMerchantRole() throws org.apache.thrift.TException
    {
      addMerchantRole_result result = new addMerchantRole_result();
      receiveBase(result, "addMerchantRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantRole failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      send_deleteMerchantRole(originVo, merchantRoleVo);
      return recv_deleteMerchantRole();
    }

    public void send_deleteMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      deleteMerchantRole_args args = new deleteMerchantRole_args();
      args.setOriginVo(originVo);
      args.setMerchantRoleVo(merchantRoleVo);
      sendBase("deleteMerchantRole", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteMerchantRole() throws org.apache.thrift.TException
    {
      deleteMerchantRole_result result = new deleteMerchantRole_result();
      receiveBase(result, "deleteMerchantRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMerchantRole failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      send_updateMerchantRole(originVo, merchantRoleVo);
      return recv_updateMerchantRole();
    }

    public void send_updateMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      updateMerchantRole_args args = new updateMerchantRole_args();
      args.setOriginVo(originVo);
      args.setMerchantRoleVo(merchantRoleVo);
      sendBase("updateMerchantRole", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantRole() throws org.apache.thrift.TException
    {
      updateMerchantRole_result result = new updateMerchantRole_result();
      receiveBase(result, "updateMerchantRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantRole failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantRoleVo> getMerchantRole(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      send_getMerchantRole(merchantRoleVo);
      return recv_getMerchantRole();
    }

    public void send_getMerchantRole(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      getMerchantRole_args args = new getMerchantRole_args();
      args.setMerchantRoleVo(merchantRoleVo);
      sendBase("getMerchantRole", args);
    }

    public List<com.froad.thrift.vo.MerchantRoleVo> recv_getMerchantRole() throws org.apache.thrift.TException
    {
      getMerchantRole_result result = new getMerchantRole_result();
      receiveBase(result, "getMerchantRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantRole failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantRolePageVoRes getMerchantRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      send_getMerchantRoleByPage(page, merchantRoleVo);
      return recv_getMerchantRoleByPage();
    }

    public void send_getMerchantRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) throws org.apache.thrift.TException
    {
      getMerchantRoleByPage_args args = new getMerchantRoleByPage_args();
      args.setPage(page);
      args.setMerchantRoleVo(merchantRoleVo);
      sendBase("getMerchantRoleByPage", args);
    }

    public com.froad.thrift.vo.MerchantRolePageVoRes recv_getMerchantRoleByPage() throws org.apache.thrift.TException
    {
      getMerchantRoleByPage_result result = new getMerchantRoleByPage_result();
      receiveBase(result, "getMerchantRoleByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantRoleByPage failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleByClientIdAndRoleDesc(String clientId, String description) throws org.apache.thrift.TException
    {
      send_getMerchantRoleByClientIdAndRoleDesc(clientId, description);
      return recv_getMerchantRoleByClientIdAndRoleDesc();
    }

    public void send_getMerchantRoleByClientIdAndRoleDesc(String clientId, String description) throws org.apache.thrift.TException
    {
      getMerchantRoleByClientIdAndRoleDesc_args args = new getMerchantRoleByClientIdAndRoleDesc_args();
      args.setClientId(clientId);
      args.setDescription(description);
      sendBase("getMerchantRoleByClientIdAndRoleDesc", args);
    }

    public com.froad.thrift.vo.MerchantRoleVo recv_getMerchantRoleByClientIdAndRoleDesc() throws org.apache.thrift.TException
    {
      getMerchantRoleByClientIdAndRoleDesc_result result = new getMerchantRoleByClientIdAndRoleDesc_result();
      receiveBase(result, "getMerchantRoleByClientIdAndRoleDesc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantRoleByClientIdAndRoleDesc failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantRole_call method_call = new addMerchantRole_call(originVo, merchantRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantRoleVo merchantRoleVo;
      public addMerchantRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantRoleVo = merchantRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantRole_args args = new addMerchantRole_args();
        args.setOriginVo(originVo);
        args.setMerchantRoleVo(merchantRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantRoleAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantRole();
      }
    }

    public void deleteMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMerchantRole_call method_call = new deleteMerchantRole_call(originVo, merchantRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMerchantRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantRoleVo merchantRoleVo;
      public deleteMerchantRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantRoleVo = merchantRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMerchantRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMerchantRole_args args = new deleteMerchantRole_args();
        args.setOriginVo(originVo);
        args.setMerchantRoleVo(merchantRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMerchantRole();
      }
    }

    public void updateMerchantRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantRole_call method_call = new updateMerchantRole_call(originVo, merchantRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantRoleVo merchantRoleVo;
      public updateMerchantRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantRoleVo = merchantRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantRole_args args = new updateMerchantRole_args();
        args.setOriginVo(originVo);
        args.setMerchantRoleVo(merchantRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantRole();
      }
    }

    public void getMerchantRole(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantRole_call method_call = new getMerchantRole_call(merchantRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantRoleVo merchantRoleVo;
      public getMerchantRole_call(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantRoleVo = merchantRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantRole_args args = new getMerchantRole_args();
        args.setMerchantRoleVo(merchantRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantRoleVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantRole();
      }
    }

    public void getMerchantRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantRoleByPage_call method_call = new getMerchantRoleByPage_call(page, merchantRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantRoleByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantRoleVo merchantRoleVo;
      public getMerchantRoleByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantRoleVo merchantRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.merchantRoleVo = merchantRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantRoleByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantRoleByPage_args args = new getMerchantRoleByPage_args();
        args.setPage(page);
        args.setMerchantRoleVo(merchantRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantRolePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantRoleByPage();
      }
    }

    public void getMerchantRoleByClientIdAndRoleDesc(String clientId, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantRoleByClientIdAndRoleDesc_call method_call = new getMerchantRoleByClientIdAndRoleDesc_call(clientId, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantRoleByClientIdAndRoleDesc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String description;
      public getMerchantRoleByClientIdAndRoleDesc_call(String clientId, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantRoleByClientIdAndRoleDesc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantRoleByClientIdAndRoleDesc_args args = new getMerchantRoleByClientIdAndRoleDesc_args();
        args.setClientId(clientId);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantRoleVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantRoleByClientIdAndRoleDesc();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantRole", new addMerchantRole());
      processMap.put("deleteMerchantRole", new deleteMerchantRole());
      processMap.put("updateMerchantRole", new updateMerchantRole());
      processMap.put("getMerchantRole", new getMerchantRole());
      processMap.put("getMerchantRoleByPage", new getMerchantRoleByPage());
      processMap.put("getMerchantRoleByClientIdAndRoleDesc", new getMerchantRoleByClientIdAndRoleDesc());
      return processMap;
    }

    public static class addMerchantRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantRole_args> {
      public addMerchantRole() {
        super("addMerchantRole");
      }

      public addMerchantRole_args getEmptyArgsInstance() {
        return new addMerchantRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantRole_result getResult(I iface, addMerchantRole_args args) throws org.apache.thrift.TException {
        addMerchantRole_result result = new addMerchantRole_result();
        result.success = iface.addMerchantRole(args.originVo, args.merchantRoleVo);
        return result;
      }
    }

    public static class deleteMerchantRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMerchantRole_args> {
      public deleteMerchantRole() {
        super("deleteMerchantRole");
      }

      public deleteMerchantRole_args getEmptyArgsInstance() {
        return new deleteMerchantRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMerchantRole_result getResult(I iface, deleteMerchantRole_args args) throws org.apache.thrift.TException {
        deleteMerchantRole_result result = new deleteMerchantRole_result();
        result.success = iface.deleteMerchantRole(args.originVo, args.merchantRoleVo);
        return result;
      }
    }

    public static class updateMerchantRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantRole_args> {
      public updateMerchantRole() {
        super("updateMerchantRole");
      }

      public updateMerchantRole_args getEmptyArgsInstance() {
        return new updateMerchantRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantRole_result getResult(I iface, updateMerchantRole_args args) throws org.apache.thrift.TException {
        updateMerchantRole_result result = new updateMerchantRole_result();
        result.success = iface.updateMerchantRole(args.originVo, args.merchantRoleVo);
        return result;
      }
    }

    public static class getMerchantRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantRole_args> {
      public getMerchantRole() {
        super("getMerchantRole");
      }

      public getMerchantRole_args getEmptyArgsInstance() {
        return new getMerchantRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantRole_result getResult(I iface, getMerchantRole_args args) throws org.apache.thrift.TException {
        getMerchantRole_result result = new getMerchantRole_result();
        result.success = iface.getMerchantRole(args.merchantRoleVo);
        return result;
      }
    }

    public static class getMerchantRoleByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantRoleByPage_args> {
      public getMerchantRoleByPage() {
        super("getMerchantRoleByPage");
      }

      public getMerchantRoleByPage_args getEmptyArgsInstance() {
        return new getMerchantRoleByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantRoleByPage_result getResult(I iface, getMerchantRoleByPage_args args) throws org.apache.thrift.TException {
        getMerchantRoleByPage_result result = new getMerchantRoleByPage_result();
        result.success = iface.getMerchantRoleByPage(args.page, args.merchantRoleVo);
        return result;
      }
    }

    public static class getMerchantRoleByClientIdAndRoleDesc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantRoleByClientIdAndRoleDesc_args> {
      public getMerchantRoleByClientIdAndRoleDesc() {
        super("getMerchantRoleByClientIdAndRoleDesc");
      }

      public getMerchantRoleByClientIdAndRoleDesc_args getEmptyArgsInstance() {
        return new getMerchantRoleByClientIdAndRoleDesc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantRoleByClientIdAndRoleDesc_result getResult(I iface, getMerchantRoleByClientIdAndRoleDesc_args args) throws org.apache.thrift.TException {
        getMerchantRoleByClientIdAndRoleDesc_result result = new getMerchantRoleByClientIdAndRoleDesc_result();
        result.success = iface.getMerchantRoleByClientIdAndRoleDesc(args.clientId, args.description);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantRole", new addMerchantRole());
      processMap.put("deleteMerchantRole", new deleteMerchantRole());
      processMap.put("updateMerchantRole", new updateMerchantRole());
      processMap.put("getMerchantRole", new getMerchantRole());
      processMap.put("getMerchantRoleByPage", new getMerchantRoleByPage());
      processMap.put("getMerchantRoleByClientIdAndRoleDesc", new getMerchantRoleByClientIdAndRoleDesc());
      return processMap;
    }

    public static class addMerchantRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantRole_args, com.froad.thrift.vo.MerchantRoleAddVoRes> {
      public addMerchantRole() {
        super("addMerchantRole");
      }

      public addMerchantRole_args getEmptyArgsInstance() {
        return new addMerchantRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantRoleAddVoRes o) {
            addMerchantRole_result result = new addMerchantRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantRole_result result = new addMerchantRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleAddVoRes> resultHandler) throws TException {
        iface.addMerchantRole(args.originVo, args.merchantRoleVo,resultHandler);
      }
    }

    public static class deleteMerchantRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMerchantRole_args, com.froad.thrift.vo.ResultVo> {
      public deleteMerchantRole() {
        super("deleteMerchantRole");
      }

      public deleteMerchantRole_args getEmptyArgsInstance() {
        return new deleteMerchantRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteMerchantRole_result result = new deleteMerchantRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMerchantRole_result result = new deleteMerchantRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMerchantRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteMerchantRole(args.originVo, args.merchantRoleVo,resultHandler);
      }
    }

    public static class updateMerchantRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantRole_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantRole() {
        super("updateMerchantRole");
      }

      public updateMerchantRole_args getEmptyArgsInstance() {
        return new updateMerchantRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantRole_result result = new updateMerchantRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantRole_result result = new updateMerchantRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantRole(args.originVo, args.merchantRoleVo,resultHandler);
      }
    }

    public static class getMerchantRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantRole_args, List<com.froad.thrift.vo.MerchantRoleVo>> {
      public getMerchantRole() {
        super("getMerchantRole");
      }

      public getMerchantRole_args getEmptyArgsInstance() {
        return new getMerchantRole_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantRoleVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantRoleVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantRoleVo> o) {
            getMerchantRole_result result = new getMerchantRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantRole_result result = new getMerchantRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantRole_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantRoleVo>> resultHandler) throws TException {
        iface.getMerchantRole(args.merchantRoleVo,resultHandler);
      }
    }

    public static class getMerchantRoleByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantRoleByPage_args, com.froad.thrift.vo.MerchantRolePageVoRes> {
      public getMerchantRoleByPage() {
        super("getMerchantRoleByPage");
      }

      public getMerchantRoleByPage_args getEmptyArgsInstance() {
        return new getMerchantRoleByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantRolePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantRolePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantRolePageVoRes o) {
            getMerchantRoleByPage_result result = new getMerchantRoleByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantRoleByPage_result result = new getMerchantRoleByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantRoleByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantRolePageVoRes> resultHandler) throws TException {
        iface.getMerchantRoleByPage(args.page, args.merchantRoleVo,resultHandler);
      }
    }

    public static class getMerchantRoleByClientIdAndRoleDesc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantRoleByClientIdAndRoleDesc_args, com.froad.thrift.vo.MerchantRoleVo> {
      public getMerchantRoleByClientIdAndRoleDesc() {
        super("getMerchantRoleByClientIdAndRoleDesc");
      }

      public getMerchantRoleByClientIdAndRoleDesc_args getEmptyArgsInstance() {
        return new getMerchantRoleByClientIdAndRoleDesc_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleVo>() { 
          public void onComplete(com.froad.thrift.vo.MerchantRoleVo o) {
            getMerchantRoleByClientIdAndRoleDesc_result result = new getMerchantRoleByClientIdAndRoleDesc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantRoleByClientIdAndRoleDesc_result result = new getMerchantRoleByClientIdAndRoleDesc_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantRoleByClientIdAndRoleDesc_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantRoleVo> resultHandler) throws TException {
        iface.getMerchantRoleByClientIdAndRoleDesc(args.clientId, args.description,resultHandler);
      }
    }

  }

  public static class addMerchantRole_args implements org.apache.thrift.TBase<addMerchantRole_args, addMerchantRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantRoleVo merchantRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_ROLE_VO((short)2, "merchantRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_ROLE_VO
            return MERCHANT_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantRole_args.class, metaDataMap);
    }

    public addMerchantRole_args() {
    }

    public addMerchantRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantRoleVo merchantRoleVo)
    {
      this();
      this.originVo = originVo;
      this.merchantRoleVo = merchantRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantRole_args(addMerchantRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantRoleVo()) {
        this.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo(other.merchantRoleVo);
      }
    }

    public addMerchantRole_args deepCopy() {
      return new addMerchantRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantRoleVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleVo() {
      return this.merchantRoleVo;
    }

    public addMerchantRole_args setMerchantRoleVo(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) {
      this.merchantRoleVo = merchantRoleVo;
      return this;
    }

    public void unsetMerchantRoleVo() {
      this.merchantRoleVo = null;
    }

    /** Returns true if field merchantRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantRoleVo() {
      return this.merchantRoleVo != null;
    }

    public void setMerchantRoleVoIsSet(boolean value) {
      if (!value) {
        this.merchantRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_ROLE_VO:
        if (value == null) {
          unsetMerchantRoleVo();
        } else {
          setMerchantRoleVo((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_ROLE_VO:
        return getMerchantRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_ROLE_VO:
        return isSetMerchantRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantRole_args)
        return this.equals((addMerchantRole_args)that);
      return false;
    }

    public boolean equals(addMerchantRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantRoleVo = true && this.isSetMerchantRoleVo();
      boolean that_present_merchantRoleVo = true && that.isSetMerchantRoleVo();
      if (this_present_merchantRoleVo || that_present_merchantRoleVo) {
        if (!(this_present_merchantRoleVo && that_present_merchantRoleVo))
          return false;
        if (!this.merchantRoleVo.equals(that.merchantRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantRoleVo = true && (isSetMerchantRoleVo());
      list.add(present_merchantRoleVo);
      if (present_merchantRoleVo)
        list.add(merchantRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantRoleVo()).compareTo(other.isSetMerchantRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRoleVo, other.merchantRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantRoleVo:");
      if (this.merchantRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantRoleVo != null) {
        merchantRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantRole_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantRole_argsStandardScheme getScheme() {
        return new addMerchantRole_argsStandardScheme();
      }
    }

    private static class addMerchantRole_argsStandardScheme extends StandardScheme<addMerchantRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
                struct.merchantRoleVo.read(iprot);
                struct.setMerchantRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantRoleVo != null) {
          oprot.writeFieldBegin(MERCHANT_ROLE_VO_FIELD_DESC);
          struct.merchantRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantRole_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantRole_argsTupleScheme getScheme() {
        return new addMerchantRole_argsTupleScheme();
      }
    }

    private static class addMerchantRole_argsTupleScheme extends TupleScheme<addMerchantRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantRoleVo()) {
          struct.merchantRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
          struct.merchantRoleVo.read(iprot);
          struct.setMerchantRoleVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantRole_result implements org.apache.thrift.TBase<addMerchantRole_result, addMerchantRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantRoleAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantRole_result.class, metaDataMap);
    }

    public addMerchantRole_result() {
    }

    public addMerchantRole_result(
      com.froad.thrift.vo.MerchantRoleAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantRole_result(addMerchantRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantRoleAddVoRes(other.success);
      }
    }

    public addMerchantRole_result deepCopy() {
      return new addMerchantRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantRoleAddVoRes getSuccess() {
      return this.success;
    }

    public addMerchantRole_result setSuccess(com.froad.thrift.vo.MerchantRoleAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantRoleAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantRole_result)
        return this.equals((addMerchantRole_result)that);
      return false;
    }

    public boolean equals(addMerchantRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantRole_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantRole_resultStandardScheme getScheme() {
        return new addMerchantRole_resultStandardScheme();
      }
    }

    private static class addMerchantRole_resultStandardScheme extends StandardScheme<addMerchantRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantRoleAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantRole_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantRole_resultTupleScheme getScheme() {
        return new addMerchantRole_resultTupleScheme();
      }
    }

    private static class addMerchantRole_resultTupleScheme extends TupleScheme<addMerchantRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantRoleAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantRole_args implements org.apache.thrift.TBase<deleteMerchantRole_args, deleteMerchantRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantRoleVo merchantRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_ROLE_VO((short)2, "merchantRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_ROLE_VO
            return MERCHANT_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantRole_args.class, metaDataMap);
    }

    public deleteMerchantRole_args() {
    }

    public deleteMerchantRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantRoleVo merchantRoleVo)
    {
      this();
      this.originVo = originVo;
      this.merchantRoleVo = merchantRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantRole_args(deleteMerchantRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantRoleVo()) {
        this.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo(other.merchantRoleVo);
      }
    }

    public deleteMerchantRole_args deepCopy() {
      return new deleteMerchantRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantRoleVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteMerchantRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleVo() {
      return this.merchantRoleVo;
    }

    public deleteMerchantRole_args setMerchantRoleVo(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) {
      this.merchantRoleVo = merchantRoleVo;
      return this;
    }

    public void unsetMerchantRoleVo() {
      this.merchantRoleVo = null;
    }

    /** Returns true if field merchantRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantRoleVo() {
      return this.merchantRoleVo != null;
    }

    public void setMerchantRoleVoIsSet(boolean value) {
      if (!value) {
        this.merchantRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_ROLE_VO:
        if (value == null) {
          unsetMerchantRoleVo();
        } else {
          setMerchantRoleVo((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_ROLE_VO:
        return getMerchantRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_ROLE_VO:
        return isSetMerchantRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantRole_args)
        return this.equals((deleteMerchantRole_args)that);
      return false;
    }

    public boolean equals(deleteMerchantRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantRoleVo = true && this.isSetMerchantRoleVo();
      boolean that_present_merchantRoleVo = true && that.isSetMerchantRoleVo();
      if (this_present_merchantRoleVo || that_present_merchantRoleVo) {
        if (!(this_present_merchantRoleVo && that_present_merchantRoleVo))
          return false;
        if (!this.merchantRoleVo.equals(that.merchantRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantRoleVo = true && (isSetMerchantRoleVo());
      list.add(present_merchantRoleVo);
      if (present_merchantRoleVo)
        list.add(merchantRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantRoleVo()).compareTo(other.isSetMerchantRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRoleVo, other.merchantRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantRoleVo:");
      if (this.merchantRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantRoleVo != null) {
        merchantRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantRole_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantRole_argsStandardScheme getScheme() {
        return new deleteMerchantRole_argsStandardScheme();
      }
    }

    private static class deleteMerchantRole_argsStandardScheme extends StandardScheme<deleteMerchantRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
                struct.merchantRoleVo.read(iprot);
                struct.setMerchantRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantRoleVo != null) {
          oprot.writeFieldBegin(MERCHANT_ROLE_VO_FIELD_DESC);
          struct.merchantRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantRole_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantRole_argsTupleScheme getScheme() {
        return new deleteMerchantRole_argsTupleScheme();
      }
    }

    private static class deleteMerchantRole_argsTupleScheme extends TupleScheme<deleteMerchantRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantRoleVo()) {
          struct.merchantRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
          struct.merchantRoleVo.read(iprot);
          struct.setMerchantRoleVoIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantRole_result implements org.apache.thrift.TBase<deleteMerchantRole_result, deleteMerchantRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantRole_result.class, metaDataMap);
    }

    public deleteMerchantRole_result() {
    }

    public deleteMerchantRole_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantRole_result(deleteMerchantRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteMerchantRole_result deepCopy() {
      return new deleteMerchantRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteMerchantRole_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantRole_result)
        return this.equals((deleteMerchantRole_result)that);
      return false;
    }

    public boolean equals(deleteMerchantRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantRole_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantRole_resultStandardScheme getScheme() {
        return new deleteMerchantRole_resultStandardScheme();
      }
    }

    private static class deleteMerchantRole_resultStandardScheme extends StandardScheme<deleteMerchantRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantRole_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantRole_resultTupleScheme getScheme() {
        return new deleteMerchantRole_resultTupleScheme();
      }
    }

    private static class deleteMerchantRole_resultTupleScheme extends TupleScheme<deleteMerchantRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantRole_args implements org.apache.thrift.TBase<updateMerchantRole_args, updateMerchantRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantRoleVo merchantRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_ROLE_VO((short)2, "merchantRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_ROLE_VO
            return MERCHANT_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantRole_args.class, metaDataMap);
    }

    public updateMerchantRole_args() {
    }

    public updateMerchantRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantRoleVo merchantRoleVo)
    {
      this();
      this.originVo = originVo;
      this.merchantRoleVo = merchantRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantRole_args(updateMerchantRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantRoleVo()) {
        this.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo(other.merchantRoleVo);
      }
    }

    public updateMerchantRole_args deepCopy() {
      return new updateMerchantRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantRoleVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateMerchantRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleVo() {
      return this.merchantRoleVo;
    }

    public updateMerchantRole_args setMerchantRoleVo(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) {
      this.merchantRoleVo = merchantRoleVo;
      return this;
    }

    public void unsetMerchantRoleVo() {
      this.merchantRoleVo = null;
    }

    /** Returns true if field merchantRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantRoleVo() {
      return this.merchantRoleVo != null;
    }

    public void setMerchantRoleVoIsSet(boolean value) {
      if (!value) {
        this.merchantRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_ROLE_VO:
        if (value == null) {
          unsetMerchantRoleVo();
        } else {
          setMerchantRoleVo((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_ROLE_VO:
        return getMerchantRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_ROLE_VO:
        return isSetMerchantRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantRole_args)
        return this.equals((updateMerchantRole_args)that);
      return false;
    }

    public boolean equals(updateMerchantRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantRoleVo = true && this.isSetMerchantRoleVo();
      boolean that_present_merchantRoleVo = true && that.isSetMerchantRoleVo();
      if (this_present_merchantRoleVo || that_present_merchantRoleVo) {
        if (!(this_present_merchantRoleVo && that_present_merchantRoleVo))
          return false;
        if (!this.merchantRoleVo.equals(that.merchantRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantRoleVo = true && (isSetMerchantRoleVo());
      list.add(present_merchantRoleVo);
      if (present_merchantRoleVo)
        list.add(merchantRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantRoleVo()).compareTo(other.isSetMerchantRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRoleVo, other.merchantRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantRoleVo:");
      if (this.merchantRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantRoleVo != null) {
        merchantRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantRole_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantRole_argsStandardScheme getScheme() {
        return new updateMerchantRole_argsStandardScheme();
      }
    }

    private static class updateMerchantRole_argsStandardScheme extends StandardScheme<updateMerchantRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
                struct.merchantRoleVo.read(iprot);
                struct.setMerchantRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantRoleVo != null) {
          oprot.writeFieldBegin(MERCHANT_ROLE_VO_FIELD_DESC);
          struct.merchantRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantRole_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantRole_argsTupleScheme getScheme() {
        return new updateMerchantRole_argsTupleScheme();
      }
    }

    private static class updateMerchantRole_argsTupleScheme extends TupleScheme<updateMerchantRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantRoleVo()) {
          struct.merchantRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
          struct.merchantRoleVo.read(iprot);
          struct.setMerchantRoleVoIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantRole_result implements org.apache.thrift.TBase<updateMerchantRole_result, updateMerchantRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantRole_result.class, metaDataMap);
    }

    public updateMerchantRole_result() {
    }

    public updateMerchantRole_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantRole_result(updateMerchantRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantRole_result deepCopy() {
      return new updateMerchantRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantRole_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantRole_result)
        return this.equals((updateMerchantRole_result)that);
      return false;
    }

    public boolean equals(updateMerchantRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantRole_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantRole_resultStandardScheme getScheme() {
        return new updateMerchantRole_resultStandardScheme();
      }
    }

    private static class updateMerchantRole_resultStandardScheme extends StandardScheme<updateMerchantRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantRole_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantRole_resultTupleScheme getScheme() {
        return new updateMerchantRole_resultTupleScheme();
      }
    }

    private static class updateMerchantRole_resultTupleScheme extends TupleScheme<updateMerchantRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRole_args implements org.apache.thrift.TBase<getMerchantRole_args, getMerchantRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRole_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantRoleVo merchantRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ROLE_VO((short)1, "merchantRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ROLE_VO
            return MERCHANT_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRole_args.class, metaDataMap);
    }

    public getMerchantRole_args() {
    }

    public getMerchantRole_args(
      com.froad.thrift.vo.MerchantRoleVo merchantRoleVo)
    {
      this();
      this.merchantRoleVo = merchantRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRole_args(getMerchantRole_args other) {
      if (other.isSetMerchantRoleVo()) {
        this.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo(other.merchantRoleVo);
      }
    }

    public getMerchantRole_args deepCopy() {
      return new getMerchantRole_args(this);
    }

    @Override
    public void clear() {
      this.merchantRoleVo = null;
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleVo() {
      return this.merchantRoleVo;
    }

    public getMerchantRole_args setMerchantRoleVo(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) {
      this.merchantRoleVo = merchantRoleVo;
      return this;
    }

    public void unsetMerchantRoleVo() {
      this.merchantRoleVo = null;
    }

    /** Returns true if field merchantRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantRoleVo() {
      return this.merchantRoleVo != null;
    }

    public void setMerchantRoleVoIsSet(boolean value) {
      if (!value) {
        this.merchantRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ROLE_VO:
        if (value == null) {
          unsetMerchantRoleVo();
        } else {
          setMerchantRoleVo((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ROLE_VO:
        return getMerchantRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ROLE_VO:
        return isSetMerchantRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRole_args)
        return this.equals((getMerchantRole_args)that);
      return false;
    }

    public boolean equals(getMerchantRole_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantRoleVo = true && this.isSetMerchantRoleVo();
      boolean that_present_merchantRoleVo = true && that.isSetMerchantRoleVo();
      if (this_present_merchantRoleVo || that_present_merchantRoleVo) {
        if (!(this_present_merchantRoleVo && that_present_merchantRoleVo))
          return false;
        if (!this.merchantRoleVo.equals(that.merchantRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantRoleVo = true && (isSetMerchantRoleVo());
      list.add(present_merchantRoleVo);
      if (present_merchantRoleVo)
        list.add(merchantRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantRoleVo()).compareTo(other.isSetMerchantRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRoleVo, other.merchantRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRole_args(");
      boolean first = true;

      sb.append("merchantRoleVo:");
      if (this.merchantRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantRoleVo != null) {
        merchantRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRole_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantRole_argsStandardScheme getScheme() {
        return new getMerchantRole_argsStandardScheme();
      }
    }

    private static class getMerchantRole_argsStandardScheme extends StandardScheme<getMerchantRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
                struct.merchantRoleVo.read(iprot);
                struct.setMerchantRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantRoleVo != null) {
          oprot.writeFieldBegin(MERCHANT_ROLE_VO_FIELD_DESC);
          struct.merchantRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRole_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantRole_argsTupleScheme getScheme() {
        return new getMerchantRole_argsTupleScheme();
      }
    }

    private static class getMerchantRole_argsTupleScheme extends TupleScheme<getMerchantRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantRoleVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantRoleVo()) {
          struct.merchantRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
          struct.merchantRoleVo.read(iprot);
          struct.setMerchantRoleVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRole_result implements org.apache.thrift.TBase<getMerchantRole_result, getMerchantRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRole_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantRoleVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRole_result.class, metaDataMap);
    }

    public getMerchantRole_result() {
    }

    public getMerchantRole_result(
      List<com.froad.thrift.vo.MerchantRoleVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRole_result(getMerchantRole_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantRoleVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantRoleVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantRoleVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantRoleVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantRole_result deepCopy() {
      return new getMerchantRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantRoleVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantRoleVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantRoleVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantRoleVo> getSuccess() {
      return this.success;
    }

    public getMerchantRole_result setSuccess(List<com.froad.thrift.vo.MerchantRoleVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantRoleVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRole_result)
        return this.equals((getMerchantRole_result)that);
      return false;
    }

    public boolean equals(getMerchantRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRole_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantRole_resultStandardScheme getScheme() {
        return new getMerchantRole_resultStandardScheme();
      }
    }

    private static class getMerchantRole_resultStandardScheme extends StandardScheme<getMerchantRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantRoleVo>(_list0.size);
                  com.froad.thrift.vo.MerchantRoleVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.MerchantRoleVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantRoleVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRole_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantRole_resultTupleScheme getScheme() {
        return new getMerchantRole_resultTupleScheme();
      }
    }

    private static class getMerchantRole_resultTupleScheme extends TupleScheme<getMerchantRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantRoleVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantRoleVo>(_list5.size);
            com.froad.thrift.vo.MerchantRoleVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.MerchantRoleVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRoleByPage_args implements org.apache.thrift.TBase<getMerchantRoleByPage_args, getMerchantRoleByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRoleByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRoleByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRoleByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRoleByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantRoleVo merchantRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_ROLE_VO((short)2, "merchantRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_ROLE_VO
            return MERCHANT_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRoleByPage_args.class, metaDataMap);
    }

    public getMerchantRoleByPage_args() {
    }

    public getMerchantRoleByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantRoleVo merchantRoleVo)
    {
      this();
      this.page = page;
      this.merchantRoleVo = merchantRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRoleByPage_args(getMerchantRoleByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantRoleVo()) {
        this.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo(other.merchantRoleVo);
      }
    }

    public getMerchantRoleByPage_args deepCopy() {
      return new getMerchantRoleByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.merchantRoleVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantRoleByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantRoleVo getMerchantRoleVo() {
      return this.merchantRoleVo;
    }

    public getMerchantRoleByPage_args setMerchantRoleVo(com.froad.thrift.vo.MerchantRoleVo merchantRoleVo) {
      this.merchantRoleVo = merchantRoleVo;
      return this;
    }

    public void unsetMerchantRoleVo() {
      this.merchantRoleVo = null;
    }

    /** Returns true if field merchantRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantRoleVo() {
      return this.merchantRoleVo != null;
    }

    public void setMerchantRoleVoIsSet(boolean value) {
      if (!value) {
        this.merchantRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_ROLE_VO:
        if (value == null) {
          unsetMerchantRoleVo();
        } else {
          setMerchantRoleVo((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_ROLE_VO:
        return getMerchantRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_ROLE_VO:
        return isSetMerchantRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRoleByPage_args)
        return this.equals((getMerchantRoleByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantRoleByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_merchantRoleVo = true && this.isSetMerchantRoleVo();
      boolean that_present_merchantRoleVo = true && that.isSetMerchantRoleVo();
      if (this_present_merchantRoleVo || that_present_merchantRoleVo) {
        if (!(this_present_merchantRoleVo && that_present_merchantRoleVo))
          return false;
        if (!this.merchantRoleVo.equals(that.merchantRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_merchantRoleVo = true && (isSetMerchantRoleVo());
      list.add(present_merchantRoleVo);
      if (present_merchantRoleVo)
        list.add(merchantRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRoleByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantRoleVo()).compareTo(other.isSetMerchantRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRoleVo, other.merchantRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRoleByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantRoleVo:");
      if (this.merchantRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (merchantRoleVo != null) {
        merchantRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRoleByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantRoleByPage_argsStandardScheme getScheme() {
        return new getMerchantRoleByPage_argsStandardScheme();
      }
    }

    private static class getMerchantRoleByPage_argsStandardScheme extends StandardScheme<getMerchantRoleByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRoleByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
                struct.merchantRoleVo.read(iprot);
                struct.setMerchantRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRoleByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantRoleVo != null) {
          oprot.writeFieldBegin(MERCHANT_ROLE_VO_FIELD_DESC);
          struct.merchantRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRoleByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantRoleByPage_argsTupleScheme getScheme() {
        return new getMerchantRoleByPage_argsTupleScheme();
      }
    }

    private static class getMerchantRoleByPage_argsTupleScheme extends TupleScheme<getMerchantRoleByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantRoleVo()) {
          struct.merchantRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantRoleVo = new com.froad.thrift.vo.MerchantRoleVo();
          struct.merchantRoleVo.read(iprot);
          struct.setMerchantRoleVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRoleByPage_result implements org.apache.thrift.TBase<getMerchantRoleByPage_result, getMerchantRoleByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRoleByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRoleByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRoleByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRoleByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantRolePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRolePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRoleByPage_result.class, metaDataMap);
    }

    public getMerchantRoleByPage_result() {
    }

    public getMerchantRoleByPage_result(
      com.froad.thrift.vo.MerchantRolePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRoleByPage_result(getMerchantRoleByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantRolePageVoRes(other.success);
      }
    }

    public getMerchantRoleByPage_result deepCopy() {
      return new getMerchantRoleByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantRolePageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantRoleByPage_result setSuccess(com.froad.thrift.vo.MerchantRolePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantRolePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRoleByPage_result)
        return this.equals((getMerchantRoleByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantRoleByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRoleByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRoleByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRoleByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantRoleByPage_resultStandardScheme getScheme() {
        return new getMerchantRoleByPage_resultStandardScheme();
      }
    }

    private static class getMerchantRoleByPage_resultStandardScheme extends StandardScheme<getMerchantRoleByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRoleByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantRolePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRoleByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRoleByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantRoleByPage_resultTupleScheme getScheme() {
        return new getMerchantRoleByPage_resultTupleScheme();
      }
    }

    private static class getMerchantRoleByPage_resultTupleScheme extends TupleScheme<getMerchantRoleByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantRolePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRoleByClientIdAndRoleDesc_args implements org.apache.thrift.TBase<getMerchantRoleByClientIdAndRoleDesc_args, getMerchantRoleByClientIdAndRoleDesc_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRoleByClientIdAndRoleDesc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRoleByClientIdAndRoleDesc_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRoleByClientIdAndRoleDesc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRoleByClientIdAndRoleDesc_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      DESCRIPTION((short)2, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRoleByClientIdAndRoleDesc_args.class, metaDataMap);
    }

    public getMerchantRoleByClientIdAndRoleDesc_args() {
    }

    public getMerchantRoleByClientIdAndRoleDesc_args(
      String clientId,
      String description)
    {
      this();
      this.clientId = clientId;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRoleByClientIdAndRoleDesc_args(getMerchantRoleByClientIdAndRoleDesc_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public getMerchantRoleByClientIdAndRoleDesc_args deepCopy() {
      return new getMerchantRoleByClientIdAndRoleDesc_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.description = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getMerchantRoleByClientIdAndRoleDesc_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public getMerchantRoleByClientIdAndRoleDesc_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRoleByClientIdAndRoleDesc_args)
        return this.equals((getMerchantRoleByClientIdAndRoleDesc_args)that);
      return false;
    }

    public boolean equals(getMerchantRoleByClientIdAndRoleDesc_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRoleByClientIdAndRoleDesc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRoleByClientIdAndRoleDesc_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantRoleByClientIdAndRoleDesc_argsStandardScheme getScheme() {
        return new getMerchantRoleByClientIdAndRoleDesc_argsStandardScheme();
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_argsStandardScheme extends StandardScheme<getMerchantRoleByClientIdAndRoleDesc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRoleByClientIdAndRoleDesc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRoleByClientIdAndRoleDesc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRoleByClientIdAndRoleDesc_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantRoleByClientIdAndRoleDesc_argsTupleScheme getScheme() {
        return new getMerchantRoleByClientIdAndRoleDesc_argsTupleScheme();
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_argsTupleScheme extends TupleScheme<getMerchantRoleByClientIdAndRoleDesc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByClientIdAndRoleDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetDescription()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByClientIdAndRoleDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
      }
    }

  }

  public static class getMerchantRoleByClientIdAndRoleDesc_result implements org.apache.thrift.TBase<getMerchantRoleByClientIdAndRoleDesc_result, getMerchantRoleByClientIdAndRoleDesc_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantRoleByClientIdAndRoleDesc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantRoleByClientIdAndRoleDesc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantRoleByClientIdAndRoleDesc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantRoleByClientIdAndRoleDesc_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantRoleVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantRoleByClientIdAndRoleDesc_result.class, metaDataMap);
    }

    public getMerchantRoleByClientIdAndRoleDesc_result() {
    }

    public getMerchantRoleByClientIdAndRoleDesc_result(
      com.froad.thrift.vo.MerchantRoleVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantRoleByClientIdAndRoleDesc_result(getMerchantRoleByClientIdAndRoleDesc_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantRoleVo(other.success);
      }
    }

    public getMerchantRoleByClientIdAndRoleDesc_result deepCopy() {
      return new getMerchantRoleByClientIdAndRoleDesc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantRoleVo getSuccess() {
      return this.success;
    }

    public getMerchantRoleByClientIdAndRoleDesc_result setSuccess(com.froad.thrift.vo.MerchantRoleVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantRoleByClientIdAndRoleDesc_result)
        return this.equals((getMerchantRoleByClientIdAndRoleDesc_result)that);
      return false;
    }

    public boolean equals(getMerchantRoleByClientIdAndRoleDesc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantRoleByClientIdAndRoleDesc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantRoleByClientIdAndRoleDesc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantRoleByClientIdAndRoleDesc_resultStandardScheme getScheme() {
        return new getMerchantRoleByClientIdAndRoleDesc_resultStandardScheme();
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_resultStandardScheme extends StandardScheme<getMerchantRoleByClientIdAndRoleDesc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantRoleByClientIdAndRoleDesc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantRoleVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantRoleByClientIdAndRoleDesc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantRoleByClientIdAndRoleDesc_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantRoleByClientIdAndRoleDesc_resultTupleScheme getScheme() {
        return new getMerchantRoleByClientIdAndRoleDesc_resultTupleScheme();
      }
    }

    private static class getMerchantRoleByClientIdAndRoleDesc_resultTupleScheme extends TupleScheme<getMerchantRoleByClientIdAndRoleDesc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByClientIdAndRoleDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantRoleByClientIdAndRoleDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantRoleVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
