/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.coremodule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 任务列表返回信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class DefineTaskRespVo implements org.apache.thrift.TBase<DefineTaskRespVo, DefineTaskRespVo._Fields>, java.io.Serializable, Cloneable, Comparable<DefineTaskRespVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DefineTaskRespVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("commitTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMPLETE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("completeTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DefineTaskRespVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DefineTaskRespVoTupleSchemeFactory());
  }

  /**
   * 银行*
   */
  public String clientId; // optional
  /**
   * 登录人*
   */
  public long loginId; // optional
  /**
   * 提交时间*
   */
  public long commitTime; // optional
  /**
   * 任务完成时间*
   */
  public long completeTime; // optional
  /**
   * 状态*
   */
  public String status; // optional
  /**
   * 下载url*
   */
  public String url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 银行*
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 登录人*
     */
    LOGIN_ID((short)2, "loginId"),
    /**
     * 提交时间*
     */
    COMMIT_TIME((short)3, "commitTime"),
    /**
     * 任务完成时间*
     */
    COMPLETE_TIME((short)4, "completeTime"),
    /**
     * 状态*
     */
    STATUS((short)5, "status"),
    /**
     * 下载url*
     */
    URL((short)6, "url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // LOGIN_ID
          return LOGIN_ID;
        case 3: // COMMIT_TIME
          return COMMIT_TIME;
        case 4: // COMPLETE_TIME
          return COMPLETE_TIME;
        case 5: // STATUS
          return STATUS;
        case 6: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGINID_ISSET_ID = 0;
  private static final int __COMMITTIME_ISSET_ID = 1;
  private static final int __COMPLETETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLIENT_ID,_Fields.LOGIN_ID,_Fields.COMMIT_TIME,_Fields.COMPLETE_TIME,_Fields.STATUS,_Fields.URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("commitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLETE_TIME, new org.apache.thrift.meta_data.FieldMetaData("completeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DefineTaskRespVo.class, metaDataMap);
  }

  public DefineTaskRespVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DefineTaskRespVo(DefineTaskRespVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.loginId = other.loginId;
    this.commitTime = other.commitTime;
    this.completeTime = other.completeTime;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public DefineTaskRespVo deepCopy() {
    return new DefineTaskRespVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    setLoginIdIsSet(false);
    this.loginId = 0;
    setCommitTimeIsSet(false);
    this.commitTime = 0;
    setCompleteTimeIsSet(false);
    this.completeTime = 0;
    this.status = null;
    this.url = null;
  }

  /**
   * 银行*
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 银行*
   */
  public DefineTaskRespVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 登录人*
   */
  public long getLoginId() {
    return this.loginId;
  }

  /**
   * 登录人*
   */
  public DefineTaskRespVo setLoginId(long loginId) {
    this.loginId = loginId;
    setLoginIdIsSet(true);
    return this;
  }

  public void unsetLoginId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINID_ISSET_ID);
  }

  /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGINID_ISSET_ID);
  }

  public void setLoginIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINID_ISSET_ID, value);
  }

  /**
   * 提交时间*
   */
  public long getCommitTime() {
    return this.commitTime;
  }

  /**
   * 提交时间*
   */
  public DefineTaskRespVo setCommitTime(long commitTime) {
    this.commitTime = commitTime;
    setCommitTimeIsSet(true);
    return this;
  }

  public void unsetCommitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITTIME_ISSET_ID);
  }

  /** Returns true if field commitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITTIME_ISSET_ID);
  }

  public void setCommitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITTIME_ISSET_ID, value);
  }

  /**
   * 任务完成时间*
   */
  public long getCompleteTime() {
    return this.completeTime;
  }

  /**
   * 任务完成时间*
   */
  public DefineTaskRespVo setCompleteTime(long completeTime) {
    this.completeTime = completeTime;
    setCompleteTimeIsSet(true);
    return this;
  }

  public void unsetCompleteTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETETIME_ISSET_ID);
  }

  /** Returns true if field completeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETETIME_ISSET_ID);
  }

  public void setCompleteTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETETIME_ISSET_ID, value);
  }

  /**
   * 状态*
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 状态*
   */
  public DefineTaskRespVo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 下载url*
   */
  public String getUrl() {
    return this.url;
  }

  /**
   * 下载url*
   */
  public DefineTaskRespVo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginId();
      } else {
        setLoginId((Long)value);
      }
      break;

    case COMMIT_TIME:
      if (value == null) {
        unsetCommitTime();
      } else {
        setCommitTime((Long)value);
      }
      break;

    case COMPLETE_TIME:
      if (value == null) {
        unsetCompleteTime();
      } else {
        setCompleteTime((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case LOGIN_ID:
      return Long.valueOf(getLoginId());

    case COMMIT_TIME:
      return Long.valueOf(getCommitTime());

    case COMPLETE_TIME:
      return Long.valueOf(getCompleteTime());

    case STATUS:
      return getStatus();

    case URL:
      return getUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case LOGIN_ID:
      return isSetLoginId();
    case COMMIT_TIME:
      return isSetCommitTime();
    case COMPLETE_TIME:
      return isSetCompleteTime();
    case STATUS:
      return isSetStatus();
    case URL:
      return isSetUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DefineTaskRespVo)
      return this.equals((DefineTaskRespVo)that);
    return false;
  }

  public boolean equals(DefineTaskRespVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_loginId = true && this.isSetLoginId();
    boolean that_present_loginId = true && that.isSetLoginId();
    if (this_present_loginId || that_present_loginId) {
      if (!(this_present_loginId && that_present_loginId))
        return false;
      if (this.loginId != that.loginId)
        return false;
    }

    boolean this_present_commitTime = true && this.isSetCommitTime();
    boolean that_present_commitTime = true && that.isSetCommitTime();
    if (this_present_commitTime || that_present_commitTime) {
      if (!(this_present_commitTime && that_present_commitTime))
        return false;
      if (this.commitTime != that.commitTime)
        return false;
    }

    boolean this_present_completeTime = true && this.isSetCompleteTime();
    boolean that_present_completeTime = true && that.isSetCompleteTime();
    if (this_present_completeTime || that_present_completeTime) {
      if (!(this_present_completeTime && that_present_completeTime))
        return false;
      if (this.completeTime != that.completeTime)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_loginId = true && (isSetLoginId());
    list.add(present_loginId);
    if (present_loginId)
      list.add(loginId);

    boolean present_commitTime = true && (isSetCommitTime());
    list.add(present_commitTime);
    if (present_commitTime)
      list.add(commitTime);

    boolean present_completeTime = true && (isSetCompleteTime());
    list.add(present_completeTime);
    if (present_completeTime)
      list.add(completeTime);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    return list.hashCode();
  }

  @Override
  public int compareTo(DefineTaskRespVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitTime()).compareTo(other.isSetCommitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitTime, other.commitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteTime()).compareTo(other.isSetCompleteTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeTime, other.completeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DefineTaskRespVo(");
    boolean first = true;

    if (isSetClientId()) {
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetLoginId()) {
      if (!first) sb.append(", ");
      sb.append("loginId:");
      sb.append(this.loginId);
      first = false;
    }
    if (isSetCommitTime()) {
      if (!first) sb.append(", ");
      sb.append("commitTime:");
      sb.append(this.commitTime);
      first = false;
    }
    if (isSetCompleteTime()) {
      if (!first) sb.append(", ");
      sb.append("completeTime:");
      sb.append(this.completeTime);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DefineTaskRespVoStandardSchemeFactory implements SchemeFactory {
    public DefineTaskRespVoStandardScheme getScheme() {
      return new DefineTaskRespVoStandardScheme();
    }
  }

  private static class DefineTaskRespVoStandardScheme extends StandardScheme<DefineTaskRespVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DefineTaskRespVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loginId = iprot.readI64();
              struct.setLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commitTime = iprot.readI64();
              struct.setCommitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPLETE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completeTime = iprot.readI64();
              struct.setCompleteTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DefineTaskRespVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoginId()) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeI64(struct.loginId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommitTime()) {
        oprot.writeFieldBegin(COMMIT_TIME_FIELD_DESC);
        oprot.writeI64(struct.commitTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompleteTime()) {
        oprot.writeFieldBegin(COMPLETE_TIME_FIELD_DESC);
        oprot.writeI64(struct.completeTime);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DefineTaskRespVoTupleSchemeFactory implements SchemeFactory {
    public DefineTaskRespVoTupleScheme getScheme() {
      return new DefineTaskRespVoTupleScheme();
    }
  }

  private static class DefineTaskRespVoTupleScheme extends TupleScheme<DefineTaskRespVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DefineTaskRespVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginId()) {
        optionals.set(1);
      }
      if (struct.isSetCommitTime()) {
        optionals.set(2);
      }
      if (struct.isSetCompleteTime()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetLoginId()) {
        oprot.writeI64(struct.loginId);
      }
      if (struct.isSetCommitTime()) {
        oprot.writeI64(struct.commitTime);
      }
      if (struct.isSetCompleteTime()) {
        oprot.writeI64(struct.completeTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DefineTaskRespVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginId = iprot.readI64();
        struct.setLoginIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commitTime = iprot.readI64();
        struct.setCommitTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.completeTime = iprot.readI64();
        struct.setCompleteTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
    }
  }

}

