/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商品活动信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductActivitiesVo implements org.apache.thrift.TBase<ProductActivitiesVo, ProductActivitiesVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductActivitiesVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductActivitiesVo");

  private static final org.apache.thrift.protocol.TField ACTIVITIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activitiesId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITIES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("activitiesType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductActivitiesVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductActivitiesVoTupleSchemeFactory());
  }

  /**
   * 活动Id
   */
  public long activitiesId; // required
  /**
   * 活动类型:1-赠送积分
   */
  public String activitiesType; // required
  /**
   * 当活动类型为赠送积分时使用points字段
   */
  public double points; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动Id
     */
    ACTIVITIES_ID((short)1, "activitiesId"),
    /**
     * 活动类型:1-赠送积分
     */
    ACTIVITIES_TYPE((short)2, "activitiesType"),
    /**
     * 当活动类型为赠送积分时使用points字段
     */
    POINTS((short)3, "points");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITIES_ID
          return ACTIVITIES_ID;
        case 2: // ACTIVITIES_TYPE
          return ACTIVITIES_TYPE;
        case 3: // POINTS
          return POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITIESID_ISSET_ID = 0;
  private static final int __POINTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POINTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITIES_ID, new org.apache.thrift.meta_data.FieldMetaData("activitiesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVITIES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("activitiesType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductActivitiesVo.class, metaDataMap);
  }

  public ProductActivitiesVo() {
  }

  public ProductActivitiesVo(
    long activitiesId,
    String activitiesType)
  {
    this();
    this.activitiesId = activitiesId;
    setActivitiesIdIsSet(true);
    this.activitiesType = activitiesType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductActivitiesVo(ProductActivitiesVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activitiesId = other.activitiesId;
    if (other.isSetActivitiesType()) {
      this.activitiesType = other.activitiesType;
    }
    this.points = other.points;
  }

  public ProductActivitiesVo deepCopy() {
    return new ProductActivitiesVo(this);
  }

  @Override
  public void clear() {
    setActivitiesIdIsSet(false);
    this.activitiesId = 0;
    this.activitiesType = null;
    setPointsIsSet(false);
    this.points = 0.0;
  }

  /**
   * 活动Id
   */
  public long getActivitiesId() {
    return this.activitiesId;
  }

  /**
   * 活动Id
   */
  public ProductActivitiesVo setActivitiesId(long activitiesId) {
    this.activitiesId = activitiesId;
    setActivitiesIdIsSet(true);
    return this;
  }

  public void unsetActivitiesId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITIESID_ISSET_ID);
  }

  /** Returns true if field activitiesId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivitiesId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITIESID_ISSET_ID);
  }

  public void setActivitiesIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITIESID_ISSET_ID, value);
  }

  /**
   * 活动类型:1-赠送积分
   */
  public String getActivitiesType() {
    return this.activitiesType;
  }

  /**
   * 活动类型:1-赠送积分
   */
  public ProductActivitiesVo setActivitiesType(String activitiesType) {
    this.activitiesType = activitiesType;
    return this;
  }

  public void unsetActivitiesType() {
    this.activitiesType = null;
  }

  /** Returns true if field activitiesType is set (has been assigned a value) and false otherwise */
  public boolean isSetActivitiesType() {
    return this.activitiesType != null;
  }

  public void setActivitiesTypeIsSet(boolean value) {
    if (!value) {
      this.activitiesType = null;
    }
  }

  /**
   * 当活动类型为赠送积分时使用points字段
   */
  public double getPoints() {
    return this.points;
  }

  /**
   * 当活动类型为赠送积分时使用points字段
   */
  public ProductActivitiesVo setPoints(double points) {
    this.points = points;
    setPointsIsSet(true);
    return this;
  }

  public void unsetPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  public void setPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITIES_ID:
      if (value == null) {
        unsetActivitiesId();
      } else {
        setActivitiesId((Long)value);
      }
      break;

    case ACTIVITIES_TYPE:
      if (value == null) {
        unsetActivitiesType();
      } else {
        setActivitiesType((String)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITIES_ID:
      return Long.valueOf(getActivitiesId());

    case ACTIVITIES_TYPE:
      return getActivitiesType();

    case POINTS:
      return Double.valueOf(getPoints());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITIES_ID:
      return isSetActivitiesId();
    case ACTIVITIES_TYPE:
      return isSetActivitiesType();
    case POINTS:
      return isSetPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductActivitiesVo)
      return this.equals((ProductActivitiesVo)that);
    return false;
  }

  public boolean equals(ProductActivitiesVo that) {
    if (that == null)
      return false;

    boolean this_present_activitiesId = true;
    boolean that_present_activitiesId = true;
    if (this_present_activitiesId || that_present_activitiesId) {
      if (!(this_present_activitiesId && that_present_activitiesId))
        return false;
      if (this.activitiesId != that.activitiesId)
        return false;
    }

    boolean this_present_activitiesType = true && this.isSetActivitiesType();
    boolean that_present_activitiesType = true && that.isSetActivitiesType();
    if (this_present_activitiesType || that_present_activitiesType) {
      if (!(this_present_activitiesType && that_present_activitiesType))
        return false;
      if (!this.activitiesType.equals(that.activitiesType))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (this.points != that.points)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_activitiesId = true;
    list.add(present_activitiesId);
    if (present_activitiesId)
      list.add(activitiesId);

    boolean present_activitiesType = true && (isSetActivitiesType());
    list.add(present_activitiesType);
    if (present_activitiesType)
      list.add(activitiesType);

    boolean present_points = true && (isSetPoints());
    list.add(present_points);
    if (present_points)
      list.add(points);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductActivitiesVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActivitiesId()).compareTo(other.isSetActivitiesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivitiesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activitiesId, other.activitiesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivitiesType()).compareTo(other.isSetActivitiesType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivitiesType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activitiesType, other.activitiesType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductActivitiesVo(");
    boolean first = true;

    sb.append("activitiesId:");
    sb.append(this.activitiesId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activitiesType:");
    if (this.activitiesType == null) {
      sb.append("null");
    } else {
      sb.append(this.activitiesType);
    }
    first = false;
    if (isSetPoints()) {
      if (!first) sb.append(", ");
      sb.append("points:");
      sb.append(this.points);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductActivitiesVoStandardSchemeFactory implements SchemeFactory {
    public ProductActivitiesVoStandardScheme getScheme() {
      return new ProductActivitiesVoStandardScheme();
    }
  }

  private static class ProductActivitiesVoStandardScheme extends StandardScheme<ProductActivitiesVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductActivitiesVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITIES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activitiesId = iprot.readI64();
              struct.setActivitiesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITIES_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activitiesType = iprot.readString();
              struct.setActivitiesTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.points = iprot.readDouble();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductActivitiesVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITIES_ID_FIELD_DESC);
      oprot.writeI64(struct.activitiesId);
      oprot.writeFieldEnd();
      if (struct.activitiesType != null) {
        oprot.writeFieldBegin(ACTIVITIES_TYPE_FIELD_DESC);
        oprot.writeString(struct.activitiesType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoints()) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeDouble(struct.points);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductActivitiesVoTupleSchemeFactory implements SchemeFactory {
    public ProductActivitiesVoTupleScheme getScheme() {
      return new ProductActivitiesVoTupleScheme();
    }
  }

  private static class ProductActivitiesVoTupleScheme extends TupleScheme<ProductActivitiesVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductActivitiesVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivitiesId()) {
        optionals.set(0);
      }
      if (struct.isSetActivitiesType()) {
        optionals.set(1);
      }
      if (struct.isSetPoints()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetActivitiesId()) {
        oprot.writeI64(struct.activitiesId);
      }
      if (struct.isSetActivitiesType()) {
        oprot.writeString(struct.activitiesType);
      }
      if (struct.isSetPoints()) {
        oprot.writeDouble(struct.points);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductActivitiesVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.activitiesId = iprot.readI64();
        struct.setActivitiesIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activitiesType = iprot.readString();
        struct.setActivitiesTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.points = iprot.readDouble();
        struct.setPointsIsSet(true);
      }
    }
  }

}

