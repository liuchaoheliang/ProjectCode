/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class PaymentService {

  /**
   * service定义 : 支付模块service
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 订单支付接口
     * 
     * @param doPayOrdersVoReq
     */
    public com.froad.thrift.vo.payment.DoPayOrdersVoRes doPayOrders(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq) throws org.apache.thrift.TException;

    /**
     * 通知支付/结算结果接口
     * 
     * @param xmlString
     */
    public void noticePaymentResult(String xmlString) throws org.apache.thrift.TException;

    /**
     * 通知退款结果接口
     * 
     * @param xmlString
     */
    public void noticeRefundResult(String xmlString) throws org.apache.thrift.TException;

    /**
     * 主动确认支付结果(包含支付、退款、结算)定时任务接口
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo verifyPaymentResultForTask(String paymentId) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.payment.PaymentQueryPageVo queryPaymentForBoss(com.froad.thrift.vo.payment.PaymentQueryVo queryVo) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.payment.PaymentQueryPageVo queryPaymentForBossOfException(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.ResultVo verifyFoilCardNum(String mobileNum, String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void doPayOrders(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void noticePaymentResult(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void noticeRefundResult(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyPaymentResultForTask(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPaymentForBoss(com.froad.thrift.vo.payment.PaymentQueryVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPaymentForBossOfException(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyFoilCardNum(String mobileNum, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoRes doPayOrders(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq) throws org.apache.thrift.TException
    {
      send_doPayOrders(doPayOrdersVoReq);
      return recv_doPayOrders();
    }

    public void send_doPayOrders(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq) throws org.apache.thrift.TException
    {
      doPayOrders_args args = new doPayOrders_args();
      args.setDoPayOrdersVoReq(doPayOrdersVoReq);
      sendBase("doPayOrders", args);
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoRes recv_doPayOrders() throws org.apache.thrift.TException
    {
      doPayOrders_result result = new doPayOrders_result();
      receiveBase(result, "doPayOrders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doPayOrders failed: unknown result");
    }

    public void noticePaymentResult(String xmlString) throws org.apache.thrift.TException
    {
      send_noticePaymentResult(xmlString);
      recv_noticePaymentResult();
    }

    public void send_noticePaymentResult(String xmlString) throws org.apache.thrift.TException
    {
      noticePaymentResult_args args = new noticePaymentResult_args();
      args.setXmlString(xmlString);
      sendBase("noticePaymentResult", args);
    }

    public void recv_noticePaymentResult() throws org.apache.thrift.TException
    {
      noticePaymentResult_result result = new noticePaymentResult_result();
      receiveBase(result, "noticePaymentResult");
      return;
    }

    public void noticeRefundResult(String xmlString) throws org.apache.thrift.TException
    {
      send_noticeRefundResult(xmlString);
      recv_noticeRefundResult();
    }

    public void send_noticeRefundResult(String xmlString) throws org.apache.thrift.TException
    {
      noticeRefundResult_args args = new noticeRefundResult_args();
      args.setXmlString(xmlString);
      sendBase("noticeRefundResult", args);
    }

    public void recv_noticeRefundResult() throws org.apache.thrift.TException
    {
      noticeRefundResult_result result = new noticeRefundResult_result();
      receiveBase(result, "noticeRefundResult");
      return;
    }

    public com.froad.thrift.vo.ResultVo verifyPaymentResultForTask(String paymentId) throws org.apache.thrift.TException
    {
      send_verifyPaymentResultForTask(paymentId);
      return recv_verifyPaymentResultForTask();
    }

    public void send_verifyPaymentResultForTask(String paymentId) throws org.apache.thrift.TException
    {
      verifyPaymentResultForTask_args args = new verifyPaymentResultForTask_args();
      args.setPaymentId(paymentId);
      sendBase("verifyPaymentResultForTask", args);
    }

    public com.froad.thrift.vo.ResultVo recv_verifyPaymentResultForTask() throws org.apache.thrift.TException
    {
      verifyPaymentResultForTask_result result = new verifyPaymentResultForTask_result();
      receiveBase(result, "verifyPaymentResultForTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyPaymentResultForTask failed: unknown result");
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo queryPaymentForBoss(com.froad.thrift.vo.payment.PaymentQueryVo queryVo) throws org.apache.thrift.TException
    {
      send_queryPaymentForBoss(queryVo);
      return recv_queryPaymentForBoss();
    }

    public void send_queryPaymentForBoss(com.froad.thrift.vo.payment.PaymentQueryVo queryVo) throws org.apache.thrift.TException
    {
      queryPaymentForBoss_args args = new queryPaymentForBoss_args();
      args.setQueryVo(queryVo);
      sendBase("queryPaymentForBoss", args);
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo recv_queryPaymentForBoss() throws org.apache.thrift.TException
    {
      queryPaymentForBoss_result result = new queryPaymentForBoss_result();
      receiveBase(result, "queryPaymentForBoss");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPaymentForBoss failed: unknown result");
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo queryPaymentForBossOfException(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo) throws org.apache.thrift.TException
    {
      send_queryPaymentForBossOfException(queryVo);
      return recv_queryPaymentForBossOfException();
    }

    public void send_queryPaymentForBossOfException(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo) throws org.apache.thrift.TException
    {
      queryPaymentForBossOfException_args args = new queryPaymentForBossOfException_args();
      args.setQueryVo(queryVo);
      sendBase("queryPaymentForBossOfException", args);
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo recv_queryPaymentForBossOfException() throws org.apache.thrift.TException
    {
      queryPaymentForBossOfException_result result = new queryPaymentForBossOfException_result();
      receiveBase(result, "queryPaymentForBossOfException");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPaymentForBossOfException failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo verifyFoilCardNum(String mobileNum, String clientId) throws org.apache.thrift.TException
    {
      send_verifyFoilCardNum(mobileNum, clientId);
      return recv_verifyFoilCardNum();
    }

    public void send_verifyFoilCardNum(String mobileNum, String clientId) throws org.apache.thrift.TException
    {
      verifyFoilCardNum_args args = new verifyFoilCardNum_args();
      args.setMobileNum(mobileNum);
      args.setClientId(clientId);
      sendBase("verifyFoilCardNum", args);
    }

    public com.froad.thrift.vo.ResultVo recv_verifyFoilCardNum() throws org.apache.thrift.TException
    {
      verifyFoilCardNum_result result = new verifyFoilCardNum_result();
      receiveBase(result, "verifyFoilCardNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyFoilCardNum failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doPayOrders(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doPayOrders_call method_call = new doPayOrders_call(doPayOrdersVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doPayOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq;
      public doPayOrders_call(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doPayOrdersVoReq = doPayOrdersVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doPayOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doPayOrders_args args = new doPayOrders_args();
        args.setDoPayOrdersVoReq(doPayOrdersVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.payment.DoPayOrdersVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doPayOrders();
      }
    }

    public void noticePaymentResult(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      noticePaymentResult_call method_call = new noticePaymentResult_call(xmlString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class noticePaymentResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlString;
      public noticePaymentResult_call(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlString = xmlString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("noticePaymentResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        noticePaymentResult_args args = new noticePaymentResult_args();
        args.setXmlString(xmlString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_noticePaymentResult();
      }
    }

    public void noticeRefundResult(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      noticeRefundResult_call method_call = new noticeRefundResult_call(xmlString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class noticeRefundResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlString;
      public noticeRefundResult_call(String xmlString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlString = xmlString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("noticeRefundResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        noticeRefundResult_args args = new noticeRefundResult_args();
        args.setXmlString(xmlString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_noticeRefundResult();
      }
    }

    public void verifyPaymentResultForTask(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyPaymentResultForTask_call method_call = new verifyPaymentResultForTask_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyPaymentResultForTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public verifyPaymentResultForTask_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyPaymentResultForTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyPaymentResultForTask_args args = new verifyPaymentResultForTask_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyPaymentResultForTask();
      }
    }

    public void queryPaymentForBoss(com.froad.thrift.vo.payment.PaymentQueryVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPaymentForBoss_call method_call = new queryPaymentForBoss_call(queryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPaymentForBoss_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.payment.PaymentQueryVo queryVo;
      public queryPaymentForBoss_call(com.froad.thrift.vo.payment.PaymentQueryVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryVo = queryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPaymentForBoss", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPaymentForBoss_args args = new queryPaymentForBoss_args();
        args.setQueryVo(queryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.payment.PaymentQueryPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPaymentForBoss();
      }
    }

    public void queryPaymentForBossOfException(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPaymentForBossOfException_call method_call = new queryPaymentForBossOfException_call(queryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPaymentForBossOfException_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo;
      public queryPaymentForBossOfException_call(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryVo = queryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPaymentForBossOfException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPaymentForBossOfException_args args = new queryPaymentForBossOfException_args();
        args.setQueryVo(queryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.payment.PaymentQueryPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPaymentForBossOfException();
      }
    }

    public void verifyFoilCardNum(String mobileNum, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyFoilCardNum_call method_call = new verifyFoilCardNum_call(mobileNum, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyFoilCardNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobileNum;
      private String clientId;
      public verifyFoilCardNum_call(String mobileNum, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobileNum = mobileNum;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyFoilCardNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyFoilCardNum_args args = new verifyFoilCardNum_args();
        args.setMobileNum(mobileNum);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyFoilCardNum();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doPayOrders", new doPayOrders());
      processMap.put("noticePaymentResult", new noticePaymentResult());
      processMap.put("noticeRefundResult", new noticeRefundResult());
      processMap.put("verifyPaymentResultForTask", new verifyPaymentResultForTask());
      processMap.put("queryPaymentForBoss", new queryPaymentForBoss());
      processMap.put("queryPaymentForBossOfException", new queryPaymentForBossOfException());
      processMap.put("verifyFoilCardNum", new verifyFoilCardNum());
      return processMap;
    }

    public static class doPayOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doPayOrders_args> {
      public doPayOrders() {
        super("doPayOrders");
      }

      public doPayOrders_args getEmptyArgsInstance() {
        return new doPayOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doPayOrders_result getResult(I iface, doPayOrders_args args) throws org.apache.thrift.TException {
        doPayOrders_result result = new doPayOrders_result();
        result.success = iface.doPayOrders(args.doPayOrdersVoReq);
        return result;
      }
    }

    public static class noticePaymentResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, noticePaymentResult_args> {
      public noticePaymentResult() {
        super("noticePaymentResult");
      }

      public noticePaymentResult_args getEmptyArgsInstance() {
        return new noticePaymentResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public noticePaymentResult_result getResult(I iface, noticePaymentResult_args args) throws org.apache.thrift.TException {
        noticePaymentResult_result result = new noticePaymentResult_result();
        iface.noticePaymentResult(args.xmlString);
        return result;
      }
    }

    public static class noticeRefundResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, noticeRefundResult_args> {
      public noticeRefundResult() {
        super("noticeRefundResult");
      }

      public noticeRefundResult_args getEmptyArgsInstance() {
        return new noticeRefundResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public noticeRefundResult_result getResult(I iface, noticeRefundResult_args args) throws org.apache.thrift.TException {
        noticeRefundResult_result result = new noticeRefundResult_result();
        iface.noticeRefundResult(args.xmlString);
        return result;
      }
    }

    public static class verifyPaymentResultForTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyPaymentResultForTask_args> {
      public verifyPaymentResultForTask() {
        super("verifyPaymentResultForTask");
      }

      public verifyPaymentResultForTask_args getEmptyArgsInstance() {
        return new verifyPaymentResultForTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyPaymentResultForTask_result getResult(I iface, verifyPaymentResultForTask_args args) throws org.apache.thrift.TException {
        verifyPaymentResultForTask_result result = new verifyPaymentResultForTask_result();
        result.success = iface.verifyPaymentResultForTask(args.paymentId);
        return result;
      }
    }

    public static class queryPaymentForBoss<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPaymentForBoss_args> {
      public queryPaymentForBoss() {
        super("queryPaymentForBoss");
      }

      public queryPaymentForBoss_args getEmptyArgsInstance() {
        return new queryPaymentForBoss_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPaymentForBoss_result getResult(I iface, queryPaymentForBoss_args args) throws org.apache.thrift.TException {
        queryPaymentForBoss_result result = new queryPaymentForBoss_result();
        result.success = iface.queryPaymentForBoss(args.queryVo);
        return result;
      }
    }

    public static class queryPaymentForBossOfException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPaymentForBossOfException_args> {
      public queryPaymentForBossOfException() {
        super("queryPaymentForBossOfException");
      }

      public queryPaymentForBossOfException_args getEmptyArgsInstance() {
        return new queryPaymentForBossOfException_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPaymentForBossOfException_result getResult(I iface, queryPaymentForBossOfException_args args) throws org.apache.thrift.TException {
        queryPaymentForBossOfException_result result = new queryPaymentForBossOfException_result();
        result.success = iface.queryPaymentForBossOfException(args.queryVo);
        return result;
      }
    }

    public static class verifyFoilCardNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyFoilCardNum_args> {
      public verifyFoilCardNum() {
        super("verifyFoilCardNum");
      }

      public verifyFoilCardNum_args getEmptyArgsInstance() {
        return new verifyFoilCardNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyFoilCardNum_result getResult(I iface, verifyFoilCardNum_args args) throws org.apache.thrift.TException {
        verifyFoilCardNum_result result = new verifyFoilCardNum_result();
        result.success = iface.verifyFoilCardNum(args.mobileNum, args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doPayOrders", new doPayOrders());
      processMap.put("noticePaymentResult", new noticePaymentResult());
      processMap.put("noticeRefundResult", new noticeRefundResult());
      processMap.put("verifyPaymentResultForTask", new verifyPaymentResultForTask());
      processMap.put("queryPaymentForBoss", new queryPaymentForBoss());
      processMap.put("queryPaymentForBossOfException", new queryPaymentForBossOfException());
      processMap.put("verifyFoilCardNum", new verifyFoilCardNum());
      return processMap;
    }

    public static class doPayOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doPayOrders_args, com.froad.thrift.vo.payment.DoPayOrdersVoRes> {
      public doPayOrders() {
        super("doPayOrders");
      }

      public doPayOrders_args getEmptyArgsInstance() {
        return new doPayOrders_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.payment.DoPayOrdersVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.payment.DoPayOrdersVoRes>() { 
          public void onComplete(com.froad.thrift.vo.payment.DoPayOrdersVoRes o) {
            doPayOrders_result result = new doPayOrders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doPayOrders_result result = new doPayOrders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doPayOrders_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.payment.DoPayOrdersVoRes> resultHandler) throws TException {
        iface.doPayOrders(args.doPayOrdersVoReq,resultHandler);
      }
    }

    public static class noticePaymentResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, noticePaymentResult_args, Void> {
      public noticePaymentResult() {
        super("noticePaymentResult");
      }

      public noticePaymentResult_args getEmptyArgsInstance() {
        return new noticePaymentResult_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            noticePaymentResult_result result = new noticePaymentResult_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            noticePaymentResult_result result = new noticePaymentResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, noticePaymentResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.noticePaymentResult(args.xmlString,resultHandler);
      }
    }

    public static class noticeRefundResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, noticeRefundResult_args, Void> {
      public noticeRefundResult() {
        super("noticeRefundResult");
      }

      public noticeRefundResult_args getEmptyArgsInstance() {
        return new noticeRefundResult_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            noticeRefundResult_result result = new noticeRefundResult_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            noticeRefundResult_result result = new noticeRefundResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, noticeRefundResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.noticeRefundResult(args.xmlString,resultHandler);
      }
    }

    public static class verifyPaymentResultForTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyPaymentResultForTask_args, com.froad.thrift.vo.ResultVo> {
      public verifyPaymentResultForTask() {
        super("verifyPaymentResultForTask");
      }

      public verifyPaymentResultForTask_args getEmptyArgsInstance() {
        return new verifyPaymentResultForTask_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            verifyPaymentResultForTask_result result = new verifyPaymentResultForTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyPaymentResultForTask_result result = new verifyPaymentResultForTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyPaymentResultForTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.verifyPaymentResultForTask(args.paymentId,resultHandler);
      }
    }

    public static class queryPaymentForBoss<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPaymentForBoss_args, com.froad.thrift.vo.payment.PaymentQueryPageVo> {
      public queryPaymentForBoss() {
        super("queryPaymentForBoss");
      }

      public queryPaymentForBoss_args getEmptyArgsInstance() {
        return new queryPaymentForBoss_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo>() { 
          public void onComplete(com.froad.thrift.vo.payment.PaymentQueryPageVo o) {
            queryPaymentForBoss_result result = new queryPaymentForBoss_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPaymentForBoss_result result = new queryPaymentForBoss_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPaymentForBoss_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo> resultHandler) throws TException {
        iface.queryPaymentForBoss(args.queryVo,resultHandler);
      }
    }

    public static class queryPaymentForBossOfException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPaymentForBossOfException_args, com.froad.thrift.vo.payment.PaymentQueryPageVo> {
      public queryPaymentForBossOfException() {
        super("queryPaymentForBossOfException");
      }

      public queryPaymentForBossOfException_args getEmptyArgsInstance() {
        return new queryPaymentForBossOfException_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo>() { 
          public void onComplete(com.froad.thrift.vo.payment.PaymentQueryPageVo o) {
            queryPaymentForBossOfException_result result = new queryPaymentForBossOfException_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPaymentForBossOfException_result result = new queryPaymentForBossOfException_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPaymentForBossOfException_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.payment.PaymentQueryPageVo> resultHandler) throws TException {
        iface.queryPaymentForBossOfException(args.queryVo,resultHandler);
      }
    }

    public static class verifyFoilCardNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyFoilCardNum_args, com.froad.thrift.vo.ResultVo> {
      public verifyFoilCardNum() {
        super("verifyFoilCardNum");
      }

      public verifyFoilCardNum_args getEmptyArgsInstance() {
        return new verifyFoilCardNum_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            verifyFoilCardNum_result result = new verifyFoilCardNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyFoilCardNum_result result = new verifyFoilCardNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyFoilCardNum_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.verifyFoilCardNum(args.mobileNum, args.clientId,resultHandler);
      }
    }

  }

  public static class doPayOrders_args implements org.apache.thrift.TBase<doPayOrders_args, doPayOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<doPayOrders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doPayOrders_args");

    private static final org.apache.thrift.protocol.TField DO_PAY_ORDERS_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("doPayOrdersVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doPayOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doPayOrders_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DO_PAY_ORDERS_VO_REQ((short)1, "doPayOrdersVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DO_PAY_ORDERS_VO_REQ
            return DO_PAY_ORDERS_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DO_PAY_ORDERS_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("doPayOrdersVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.DoPayOrdersVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doPayOrders_args.class, metaDataMap);
    }

    public doPayOrders_args() {
    }

    public doPayOrders_args(
      com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq)
    {
      this();
      this.doPayOrdersVoReq = doPayOrdersVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doPayOrders_args(doPayOrders_args other) {
      if (other.isSetDoPayOrdersVoReq()) {
        this.doPayOrdersVoReq = new com.froad.thrift.vo.payment.DoPayOrdersVoReq(other.doPayOrdersVoReq);
      }
    }

    public doPayOrders_args deepCopy() {
      return new doPayOrders_args(this);
    }

    @Override
    public void clear() {
      this.doPayOrdersVoReq = null;
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoReq getDoPayOrdersVoReq() {
      return this.doPayOrdersVoReq;
    }

    public doPayOrders_args setDoPayOrdersVoReq(com.froad.thrift.vo.payment.DoPayOrdersVoReq doPayOrdersVoReq) {
      this.doPayOrdersVoReq = doPayOrdersVoReq;
      return this;
    }

    public void unsetDoPayOrdersVoReq() {
      this.doPayOrdersVoReq = null;
    }

    /** Returns true if field doPayOrdersVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetDoPayOrdersVoReq() {
      return this.doPayOrdersVoReq != null;
    }

    public void setDoPayOrdersVoReqIsSet(boolean value) {
      if (!value) {
        this.doPayOrdersVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DO_PAY_ORDERS_VO_REQ:
        if (value == null) {
          unsetDoPayOrdersVoReq();
        } else {
          setDoPayOrdersVoReq((com.froad.thrift.vo.payment.DoPayOrdersVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DO_PAY_ORDERS_VO_REQ:
        return getDoPayOrdersVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DO_PAY_ORDERS_VO_REQ:
        return isSetDoPayOrdersVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doPayOrders_args)
        return this.equals((doPayOrders_args)that);
      return false;
    }

    public boolean equals(doPayOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_doPayOrdersVoReq = true && this.isSetDoPayOrdersVoReq();
      boolean that_present_doPayOrdersVoReq = true && that.isSetDoPayOrdersVoReq();
      if (this_present_doPayOrdersVoReq || that_present_doPayOrdersVoReq) {
        if (!(this_present_doPayOrdersVoReq && that_present_doPayOrdersVoReq))
          return false;
        if (!this.doPayOrdersVoReq.equals(that.doPayOrdersVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_doPayOrdersVoReq = true && (isSetDoPayOrdersVoReq());
      list.add(present_doPayOrdersVoReq);
      if (present_doPayOrdersVoReq)
        list.add(doPayOrdersVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(doPayOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoPayOrdersVoReq()).compareTo(other.isSetDoPayOrdersVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoPayOrdersVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doPayOrdersVoReq, other.doPayOrdersVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doPayOrders_args(");
      boolean first = true;

      sb.append("doPayOrdersVoReq:");
      if (this.doPayOrdersVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.doPayOrdersVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (doPayOrdersVoReq != null) {
        doPayOrdersVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doPayOrders_argsStandardSchemeFactory implements SchemeFactory {
      public doPayOrders_argsStandardScheme getScheme() {
        return new doPayOrders_argsStandardScheme();
      }
    }

    private static class doPayOrders_argsStandardScheme extends StandardScheme<doPayOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doPayOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DO_PAY_ORDERS_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.doPayOrdersVoReq = new com.froad.thrift.vo.payment.DoPayOrdersVoReq();
                struct.doPayOrdersVoReq.read(iprot);
                struct.setDoPayOrdersVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doPayOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doPayOrdersVoReq != null) {
          oprot.writeFieldBegin(DO_PAY_ORDERS_VO_REQ_FIELD_DESC);
          struct.doPayOrdersVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doPayOrders_argsTupleSchemeFactory implements SchemeFactory {
      public doPayOrders_argsTupleScheme getScheme() {
        return new doPayOrders_argsTupleScheme();
      }
    }

    private static class doPayOrders_argsTupleScheme extends TupleScheme<doPayOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doPayOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoPayOrdersVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDoPayOrdersVoReq()) {
          struct.doPayOrdersVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doPayOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.doPayOrdersVoReq = new com.froad.thrift.vo.payment.DoPayOrdersVoReq();
          struct.doPayOrdersVoReq.read(iprot);
          struct.setDoPayOrdersVoReqIsSet(true);
        }
      }
    }

  }

  public static class doPayOrders_result implements org.apache.thrift.TBase<doPayOrders_result, doPayOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<doPayOrders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doPayOrders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doPayOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doPayOrders_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.DoPayOrdersVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doPayOrders_result.class, metaDataMap);
    }

    public doPayOrders_result() {
    }

    public doPayOrders_result(
      com.froad.thrift.vo.payment.DoPayOrdersVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doPayOrders_result(doPayOrders_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.payment.DoPayOrdersVoRes(other.success);
      }
    }

    public doPayOrders_result deepCopy() {
      return new doPayOrders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.payment.DoPayOrdersVoRes getSuccess() {
      return this.success;
    }

    public doPayOrders_result setSuccess(com.froad.thrift.vo.payment.DoPayOrdersVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.payment.DoPayOrdersVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doPayOrders_result)
        return this.equals((doPayOrders_result)that);
      return false;
    }

    public boolean equals(doPayOrders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doPayOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doPayOrders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doPayOrders_resultStandardSchemeFactory implements SchemeFactory {
      public doPayOrders_resultStandardScheme getScheme() {
        return new doPayOrders_resultStandardScheme();
      }
    }

    private static class doPayOrders_resultStandardScheme extends StandardScheme<doPayOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doPayOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.payment.DoPayOrdersVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doPayOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doPayOrders_resultTupleSchemeFactory implements SchemeFactory {
      public doPayOrders_resultTupleScheme getScheme() {
        return new doPayOrders_resultTupleScheme();
      }
    }

    private static class doPayOrders_resultTupleScheme extends TupleScheme<doPayOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doPayOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doPayOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.payment.DoPayOrdersVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class noticePaymentResult_args implements org.apache.thrift.TBase<noticePaymentResult_args, noticePaymentResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<noticePaymentResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("noticePaymentResult_args");

    private static final org.apache.thrift.protocol.TField XML_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new noticePaymentResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new noticePaymentResult_argsTupleSchemeFactory());
    }

    public String xmlString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_STRING((short)1, "xmlString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_STRING
            return XML_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_STRING, new org.apache.thrift.meta_data.FieldMetaData("xmlString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(noticePaymentResult_args.class, metaDataMap);
    }

    public noticePaymentResult_args() {
    }

    public noticePaymentResult_args(
      String xmlString)
    {
      this();
      this.xmlString = xmlString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noticePaymentResult_args(noticePaymentResult_args other) {
      if (other.isSetXmlString()) {
        this.xmlString = other.xmlString;
      }
    }

    public noticePaymentResult_args deepCopy() {
      return new noticePaymentResult_args(this);
    }

    @Override
    public void clear() {
      this.xmlString = null;
    }

    public String getXmlString() {
      return this.xmlString;
    }

    public noticePaymentResult_args setXmlString(String xmlString) {
      this.xmlString = xmlString;
      return this;
    }

    public void unsetXmlString() {
      this.xmlString = null;
    }

    /** Returns true if field xmlString is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlString() {
      return this.xmlString != null;
    }

    public void setXmlStringIsSet(boolean value) {
      if (!value) {
        this.xmlString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_STRING:
        if (value == null) {
          unsetXmlString();
        } else {
          setXmlString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_STRING:
        return getXmlString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_STRING:
        return isSetXmlString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noticePaymentResult_args)
        return this.equals((noticePaymentResult_args)that);
      return false;
    }

    public boolean equals(noticePaymentResult_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlString = true && this.isSetXmlString();
      boolean that_present_xmlString = true && that.isSetXmlString();
      if (this_present_xmlString || that_present_xmlString) {
        if (!(this_present_xmlString && that_present_xmlString))
          return false;
        if (!this.xmlString.equals(that.xmlString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_xmlString = true && (isSetXmlString());
      list.add(present_xmlString);
      if (present_xmlString)
        list.add(xmlString);

      return list.hashCode();
    }

    @Override
    public int compareTo(noticePaymentResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetXmlString()).compareTo(other.isSetXmlString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlString, other.xmlString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("noticePaymentResult_args(");
      boolean first = true;

      sb.append("xmlString:");
      if (this.xmlString == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class noticePaymentResult_argsStandardSchemeFactory implements SchemeFactory {
      public noticePaymentResult_argsStandardScheme getScheme() {
        return new noticePaymentResult_argsStandardScheme();
      }
    }

    private static class noticePaymentResult_argsStandardScheme extends StandardScheme<noticePaymentResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, noticePaymentResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlString = iprot.readString();
                struct.setXmlStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, noticePaymentResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlString != null) {
          oprot.writeFieldBegin(XML_STRING_FIELD_DESC);
          oprot.writeString(struct.xmlString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class noticePaymentResult_argsTupleSchemeFactory implements SchemeFactory {
      public noticePaymentResult_argsTupleScheme getScheme() {
        return new noticePaymentResult_argsTupleScheme();
      }
    }

    private static class noticePaymentResult_argsTupleScheme extends TupleScheme<noticePaymentResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, noticePaymentResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlString()) {
          oprot.writeString(struct.xmlString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, noticePaymentResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlString = iprot.readString();
          struct.setXmlStringIsSet(true);
        }
      }
    }

  }

  public static class noticePaymentResult_result implements org.apache.thrift.TBase<noticePaymentResult_result, noticePaymentResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<noticePaymentResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("noticePaymentResult_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new noticePaymentResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new noticePaymentResult_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(noticePaymentResult_result.class, metaDataMap);
    }

    public noticePaymentResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noticePaymentResult_result(noticePaymentResult_result other) {
    }

    public noticePaymentResult_result deepCopy() {
      return new noticePaymentResult_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noticePaymentResult_result)
        return this.equals((noticePaymentResult_result)that);
      return false;
    }

    public boolean equals(noticePaymentResult_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(noticePaymentResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("noticePaymentResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class noticePaymentResult_resultStandardSchemeFactory implements SchemeFactory {
      public noticePaymentResult_resultStandardScheme getScheme() {
        return new noticePaymentResult_resultStandardScheme();
      }
    }

    private static class noticePaymentResult_resultStandardScheme extends StandardScheme<noticePaymentResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, noticePaymentResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, noticePaymentResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class noticePaymentResult_resultTupleSchemeFactory implements SchemeFactory {
      public noticePaymentResult_resultTupleScheme getScheme() {
        return new noticePaymentResult_resultTupleScheme();
      }
    }

    private static class noticePaymentResult_resultTupleScheme extends TupleScheme<noticePaymentResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, noticePaymentResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, noticePaymentResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class noticeRefundResult_args implements org.apache.thrift.TBase<noticeRefundResult_args, noticeRefundResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<noticeRefundResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("noticeRefundResult_args");

    private static final org.apache.thrift.protocol.TField XML_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new noticeRefundResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new noticeRefundResult_argsTupleSchemeFactory());
    }

    public String xmlString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_STRING((short)1, "xmlString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_STRING
            return XML_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_STRING, new org.apache.thrift.meta_data.FieldMetaData("xmlString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(noticeRefundResult_args.class, metaDataMap);
    }

    public noticeRefundResult_args() {
    }

    public noticeRefundResult_args(
      String xmlString)
    {
      this();
      this.xmlString = xmlString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noticeRefundResult_args(noticeRefundResult_args other) {
      if (other.isSetXmlString()) {
        this.xmlString = other.xmlString;
      }
    }

    public noticeRefundResult_args deepCopy() {
      return new noticeRefundResult_args(this);
    }

    @Override
    public void clear() {
      this.xmlString = null;
    }

    public String getXmlString() {
      return this.xmlString;
    }

    public noticeRefundResult_args setXmlString(String xmlString) {
      this.xmlString = xmlString;
      return this;
    }

    public void unsetXmlString() {
      this.xmlString = null;
    }

    /** Returns true if field xmlString is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlString() {
      return this.xmlString != null;
    }

    public void setXmlStringIsSet(boolean value) {
      if (!value) {
        this.xmlString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_STRING:
        if (value == null) {
          unsetXmlString();
        } else {
          setXmlString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_STRING:
        return getXmlString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_STRING:
        return isSetXmlString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noticeRefundResult_args)
        return this.equals((noticeRefundResult_args)that);
      return false;
    }

    public boolean equals(noticeRefundResult_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlString = true && this.isSetXmlString();
      boolean that_present_xmlString = true && that.isSetXmlString();
      if (this_present_xmlString || that_present_xmlString) {
        if (!(this_present_xmlString && that_present_xmlString))
          return false;
        if (!this.xmlString.equals(that.xmlString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_xmlString = true && (isSetXmlString());
      list.add(present_xmlString);
      if (present_xmlString)
        list.add(xmlString);

      return list.hashCode();
    }

    @Override
    public int compareTo(noticeRefundResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetXmlString()).compareTo(other.isSetXmlString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlString, other.xmlString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("noticeRefundResult_args(");
      boolean first = true;

      sb.append("xmlString:");
      if (this.xmlString == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class noticeRefundResult_argsStandardSchemeFactory implements SchemeFactory {
      public noticeRefundResult_argsStandardScheme getScheme() {
        return new noticeRefundResult_argsStandardScheme();
      }
    }

    private static class noticeRefundResult_argsStandardScheme extends StandardScheme<noticeRefundResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, noticeRefundResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlString = iprot.readString();
                struct.setXmlStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, noticeRefundResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlString != null) {
          oprot.writeFieldBegin(XML_STRING_FIELD_DESC);
          oprot.writeString(struct.xmlString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class noticeRefundResult_argsTupleSchemeFactory implements SchemeFactory {
      public noticeRefundResult_argsTupleScheme getScheme() {
        return new noticeRefundResult_argsTupleScheme();
      }
    }

    private static class noticeRefundResult_argsTupleScheme extends TupleScheme<noticeRefundResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, noticeRefundResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlString()) {
          oprot.writeString(struct.xmlString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, noticeRefundResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlString = iprot.readString();
          struct.setXmlStringIsSet(true);
        }
      }
    }

  }

  public static class noticeRefundResult_result implements org.apache.thrift.TBase<noticeRefundResult_result, noticeRefundResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<noticeRefundResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("noticeRefundResult_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new noticeRefundResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new noticeRefundResult_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(noticeRefundResult_result.class, metaDataMap);
    }

    public noticeRefundResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noticeRefundResult_result(noticeRefundResult_result other) {
    }

    public noticeRefundResult_result deepCopy() {
      return new noticeRefundResult_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noticeRefundResult_result)
        return this.equals((noticeRefundResult_result)that);
      return false;
    }

    public boolean equals(noticeRefundResult_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(noticeRefundResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("noticeRefundResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class noticeRefundResult_resultStandardSchemeFactory implements SchemeFactory {
      public noticeRefundResult_resultStandardScheme getScheme() {
        return new noticeRefundResult_resultStandardScheme();
      }
    }

    private static class noticeRefundResult_resultStandardScheme extends StandardScheme<noticeRefundResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, noticeRefundResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, noticeRefundResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class noticeRefundResult_resultTupleSchemeFactory implements SchemeFactory {
      public noticeRefundResult_resultTupleScheme getScheme() {
        return new noticeRefundResult_resultTupleScheme();
      }
    }

    private static class noticeRefundResult_resultTupleScheme extends TupleScheme<noticeRefundResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, noticeRefundResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, noticeRefundResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class verifyPaymentResultForTask_args implements org.apache.thrift.TBase<verifyPaymentResultForTask_args, verifyPaymentResultForTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPaymentResultForTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPaymentResultForTask_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPaymentResultForTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPaymentResultForTask_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPaymentResultForTask_args.class, metaDataMap);
    }

    public verifyPaymentResultForTask_args() {
    }

    public verifyPaymentResultForTask_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPaymentResultForTask_args(verifyPaymentResultForTask_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public verifyPaymentResultForTask_args deepCopy() {
      return new verifyPaymentResultForTask_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public verifyPaymentResultForTask_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPaymentResultForTask_args)
        return this.equals((verifyPaymentResultForTask_args)that);
      return false;
    }

    public boolean equals(verifyPaymentResultForTask_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPaymentResultForTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPaymentResultForTask_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPaymentResultForTask_argsStandardSchemeFactory implements SchemeFactory {
      public verifyPaymentResultForTask_argsStandardScheme getScheme() {
        return new verifyPaymentResultForTask_argsStandardScheme();
      }
    }

    private static class verifyPaymentResultForTask_argsStandardScheme extends StandardScheme<verifyPaymentResultForTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPaymentResultForTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPaymentResultForTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPaymentResultForTask_argsTupleSchemeFactory implements SchemeFactory {
      public verifyPaymentResultForTask_argsTupleScheme getScheme() {
        return new verifyPaymentResultForTask_argsTupleScheme();
      }
    }

    private static class verifyPaymentResultForTask_argsTupleScheme extends TupleScheme<verifyPaymentResultForTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPaymentResultForTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPaymentResultForTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class verifyPaymentResultForTask_result implements org.apache.thrift.TBase<verifyPaymentResultForTask_result, verifyPaymentResultForTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPaymentResultForTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPaymentResultForTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPaymentResultForTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPaymentResultForTask_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPaymentResultForTask_result.class, metaDataMap);
    }

    public verifyPaymentResultForTask_result() {
    }

    public verifyPaymentResultForTask_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPaymentResultForTask_result(verifyPaymentResultForTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public verifyPaymentResultForTask_result deepCopy() {
      return new verifyPaymentResultForTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public verifyPaymentResultForTask_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPaymentResultForTask_result)
        return this.equals((verifyPaymentResultForTask_result)that);
      return false;
    }

    public boolean equals(verifyPaymentResultForTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPaymentResultForTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPaymentResultForTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPaymentResultForTask_resultStandardSchemeFactory implements SchemeFactory {
      public verifyPaymentResultForTask_resultStandardScheme getScheme() {
        return new verifyPaymentResultForTask_resultStandardScheme();
      }
    }

    private static class verifyPaymentResultForTask_resultStandardScheme extends StandardScheme<verifyPaymentResultForTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPaymentResultForTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPaymentResultForTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPaymentResultForTask_resultTupleSchemeFactory implements SchemeFactory {
      public verifyPaymentResultForTask_resultTupleScheme getScheme() {
        return new verifyPaymentResultForTask_resultTupleScheme();
      }
    }

    private static class verifyPaymentResultForTask_resultTupleScheme extends TupleScheme<verifyPaymentResultForTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPaymentResultForTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPaymentResultForTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPaymentForBoss_args implements org.apache.thrift.TBase<queryPaymentForBoss_args, queryPaymentForBoss_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPaymentForBoss_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPaymentForBoss_args");

    private static final org.apache.thrift.protocol.TField QUERY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("queryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPaymentForBoss_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPaymentForBoss_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.PaymentQueryVo queryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_VO((short)1, "queryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_VO
            return QUERY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_VO, new org.apache.thrift.meta_data.FieldMetaData("queryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.PaymentQueryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPaymentForBoss_args.class, metaDataMap);
    }

    public queryPaymentForBoss_args() {
    }

    public queryPaymentForBoss_args(
      com.froad.thrift.vo.payment.PaymentQueryVo queryVo)
    {
      this();
      this.queryVo = queryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPaymentForBoss_args(queryPaymentForBoss_args other) {
      if (other.isSetQueryVo()) {
        this.queryVo = new com.froad.thrift.vo.payment.PaymentQueryVo(other.queryVo);
      }
    }

    public queryPaymentForBoss_args deepCopy() {
      return new queryPaymentForBoss_args(this);
    }

    @Override
    public void clear() {
      this.queryVo = null;
    }

    public com.froad.thrift.vo.payment.PaymentQueryVo getQueryVo() {
      return this.queryVo;
    }

    public queryPaymentForBoss_args setQueryVo(com.froad.thrift.vo.payment.PaymentQueryVo queryVo) {
      this.queryVo = queryVo;
      return this;
    }

    public void unsetQueryVo() {
      this.queryVo = null;
    }

    /** Returns true if field queryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryVo() {
      return this.queryVo != null;
    }

    public void setQueryVoIsSet(boolean value) {
      if (!value) {
        this.queryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_VO:
        if (value == null) {
          unsetQueryVo();
        } else {
          setQueryVo((com.froad.thrift.vo.payment.PaymentQueryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_VO:
        return getQueryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_VO:
        return isSetQueryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPaymentForBoss_args)
        return this.equals((queryPaymentForBoss_args)that);
      return false;
    }

    public boolean equals(queryPaymentForBoss_args that) {
      if (that == null)
        return false;

      boolean this_present_queryVo = true && this.isSetQueryVo();
      boolean that_present_queryVo = true && that.isSetQueryVo();
      if (this_present_queryVo || that_present_queryVo) {
        if (!(this_present_queryVo && that_present_queryVo))
          return false;
        if (!this.queryVo.equals(that.queryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queryVo = true && (isSetQueryVo());
      list.add(present_queryVo);
      if (present_queryVo)
        list.add(queryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPaymentForBoss_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryVo()).compareTo(other.isSetQueryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryVo, other.queryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPaymentForBoss_args(");
      boolean first = true;

      sb.append("queryVo:");
      if (this.queryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.queryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (queryVo != null) {
        queryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPaymentForBoss_argsStandardSchemeFactory implements SchemeFactory {
      public queryPaymentForBoss_argsStandardScheme getScheme() {
        return new queryPaymentForBoss_argsStandardScheme();
      }
    }

    private static class queryPaymentForBoss_argsStandardScheme extends StandardScheme<queryPaymentForBoss_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPaymentForBoss_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryVo = new com.froad.thrift.vo.payment.PaymentQueryVo();
                struct.queryVo.read(iprot);
                struct.setQueryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPaymentForBoss_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryVo != null) {
          oprot.writeFieldBegin(QUERY_VO_FIELD_DESC);
          struct.queryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPaymentForBoss_argsTupleSchemeFactory implements SchemeFactory {
      public queryPaymentForBoss_argsTupleScheme getScheme() {
        return new queryPaymentForBoss_argsTupleScheme();
      }
    }

    private static class queryPaymentForBoss_argsTupleScheme extends TupleScheme<queryPaymentForBoss_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBoss_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueryVo()) {
          struct.queryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBoss_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queryVo = new com.froad.thrift.vo.payment.PaymentQueryVo();
          struct.queryVo.read(iprot);
          struct.setQueryVoIsSet(true);
        }
      }
    }

  }

  public static class queryPaymentForBoss_result implements org.apache.thrift.TBase<queryPaymentForBoss_result, queryPaymentForBoss_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPaymentForBoss_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPaymentForBoss_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPaymentForBoss_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPaymentForBoss_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.PaymentQueryPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPaymentForBoss_result.class, metaDataMap);
    }

    public queryPaymentForBoss_result() {
    }

    public queryPaymentForBoss_result(
      com.froad.thrift.vo.payment.PaymentQueryPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPaymentForBoss_result(queryPaymentForBoss_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo(other.success);
      }
    }

    public queryPaymentForBoss_result deepCopy() {
      return new queryPaymentForBoss_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo getSuccess() {
      return this.success;
    }

    public queryPaymentForBoss_result setSuccess(com.froad.thrift.vo.payment.PaymentQueryPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.payment.PaymentQueryPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPaymentForBoss_result)
        return this.equals((queryPaymentForBoss_result)that);
      return false;
    }

    public boolean equals(queryPaymentForBoss_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPaymentForBoss_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPaymentForBoss_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPaymentForBoss_resultStandardSchemeFactory implements SchemeFactory {
      public queryPaymentForBoss_resultStandardScheme getScheme() {
        return new queryPaymentForBoss_resultStandardScheme();
      }
    }

    private static class queryPaymentForBoss_resultStandardScheme extends StandardScheme<queryPaymentForBoss_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPaymentForBoss_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPaymentForBoss_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPaymentForBoss_resultTupleSchemeFactory implements SchemeFactory {
      public queryPaymentForBoss_resultTupleScheme getScheme() {
        return new queryPaymentForBoss_resultTupleScheme();
      }
    }

    private static class queryPaymentForBoss_resultTupleScheme extends TupleScheme<queryPaymentForBoss_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBoss_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBoss_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPaymentForBossOfException_args implements org.apache.thrift.TBase<queryPaymentForBossOfException_args, queryPaymentForBossOfException_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPaymentForBossOfException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPaymentForBossOfException_args");

    private static final org.apache.thrift.protocol.TField QUERY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("queryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPaymentForBossOfException_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPaymentForBossOfException_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_VO((short)1, "queryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_VO
            return QUERY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_VO, new org.apache.thrift.meta_data.FieldMetaData("queryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.PaymentQueryExcetionVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPaymentForBossOfException_args.class, metaDataMap);
    }

    public queryPaymentForBossOfException_args() {
    }

    public queryPaymentForBossOfException_args(
      com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo)
    {
      this();
      this.queryVo = queryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPaymentForBossOfException_args(queryPaymentForBossOfException_args other) {
      if (other.isSetQueryVo()) {
        this.queryVo = new com.froad.thrift.vo.payment.PaymentQueryExcetionVo(other.queryVo);
      }
    }

    public queryPaymentForBossOfException_args deepCopy() {
      return new queryPaymentForBossOfException_args(this);
    }

    @Override
    public void clear() {
      this.queryVo = null;
    }

    public com.froad.thrift.vo.payment.PaymentQueryExcetionVo getQueryVo() {
      return this.queryVo;
    }

    public queryPaymentForBossOfException_args setQueryVo(com.froad.thrift.vo.payment.PaymentQueryExcetionVo queryVo) {
      this.queryVo = queryVo;
      return this;
    }

    public void unsetQueryVo() {
      this.queryVo = null;
    }

    /** Returns true if field queryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryVo() {
      return this.queryVo != null;
    }

    public void setQueryVoIsSet(boolean value) {
      if (!value) {
        this.queryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_VO:
        if (value == null) {
          unsetQueryVo();
        } else {
          setQueryVo((com.froad.thrift.vo.payment.PaymentQueryExcetionVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_VO:
        return getQueryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_VO:
        return isSetQueryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPaymentForBossOfException_args)
        return this.equals((queryPaymentForBossOfException_args)that);
      return false;
    }

    public boolean equals(queryPaymentForBossOfException_args that) {
      if (that == null)
        return false;

      boolean this_present_queryVo = true && this.isSetQueryVo();
      boolean that_present_queryVo = true && that.isSetQueryVo();
      if (this_present_queryVo || that_present_queryVo) {
        if (!(this_present_queryVo && that_present_queryVo))
          return false;
        if (!this.queryVo.equals(that.queryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queryVo = true && (isSetQueryVo());
      list.add(present_queryVo);
      if (present_queryVo)
        list.add(queryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPaymentForBossOfException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryVo()).compareTo(other.isSetQueryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryVo, other.queryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPaymentForBossOfException_args(");
      boolean first = true;

      sb.append("queryVo:");
      if (this.queryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.queryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (queryVo != null) {
        queryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPaymentForBossOfException_argsStandardSchemeFactory implements SchemeFactory {
      public queryPaymentForBossOfException_argsStandardScheme getScheme() {
        return new queryPaymentForBossOfException_argsStandardScheme();
      }
    }

    private static class queryPaymentForBossOfException_argsStandardScheme extends StandardScheme<queryPaymentForBossOfException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPaymentForBossOfException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryVo = new com.froad.thrift.vo.payment.PaymentQueryExcetionVo();
                struct.queryVo.read(iprot);
                struct.setQueryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPaymentForBossOfException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryVo != null) {
          oprot.writeFieldBegin(QUERY_VO_FIELD_DESC);
          struct.queryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPaymentForBossOfException_argsTupleSchemeFactory implements SchemeFactory {
      public queryPaymentForBossOfException_argsTupleScheme getScheme() {
        return new queryPaymentForBossOfException_argsTupleScheme();
      }
    }

    private static class queryPaymentForBossOfException_argsTupleScheme extends TupleScheme<queryPaymentForBossOfException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBossOfException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueryVo()) {
          struct.queryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBossOfException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queryVo = new com.froad.thrift.vo.payment.PaymentQueryExcetionVo();
          struct.queryVo.read(iprot);
          struct.setQueryVoIsSet(true);
        }
      }
    }

  }

  public static class queryPaymentForBossOfException_result implements org.apache.thrift.TBase<queryPaymentForBossOfException_result, queryPaymentForBossOfException_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPaymentForBossOfException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPaymentForBossOfException_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPaymentForBossOfException_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPaymentForBossOfException_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.payment.PaymentQueryPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPaymentForBossOfException_result.class, metaDataMap);
    }

    public queryPaymentForBossOfException_result() {
    }

    public queryPaymentForBossOfException_result(
      com.froad.thrift.vo.payment.PaymentQueryPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPaymentForBossOfException_result(queryPaymentForBossOfException_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo(other.success);
      }
    }

    public queryPaymentForBossOfException_result deepCopy() {
      return new queryPaymentForBossOfException_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.payment.PaymentQueryPageVo getSuccess() {
      return this.success;
    }

    public queryPaymentForBossOfException_result setSuccess(com.froad.thrift.vo.payment.PaymentQueryPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.payment.PaymentQueryPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPaymentForBossOfException_result)
        return this.equals((queryPaymentForBossOfException_result)that);
      return false;
    }

    public boolean equals(queryPaymentForBossOfException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPaymentForBossOfException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPaymentForBossOfException_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPaymentForBossOfException_resultStandardSchemeFactory implements SchemeFactory {
      public queryPaymentForBossOfException_resultStandardScheme getScheme() {
        return new queryPaymentForBossOfException_resultStandardScheme();
      }
    }

    private static class queryPaymentForBossOfException_resultStandardScheme extends StandardScheme<queryPaymentForBossOfException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPaymentForBossOfException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPaymentForBossOfException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPaymentForBossOfException_resultTupleSchemeFactory implements SchemeFactory {
      public queryPaymentForBossOfException_resultTupleScheme getScheme() {
        return new queryPaymentForBossOfException_resultTupleScheme();
      }
    }

    private static class queryPaymentForBossOfException_resultTupleScheme extends TupleScheme<queryPaymentForBossOfException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBossOfException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPaymentForBossOfException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.payment.PaymentQueryPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyFoilCardNum_args implements org.apache.thrift.TBase<verifyFoilCardNum_args, verifyFoilCardNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyFoilCardNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyFoilCardNum_args");

    private static final org.apache.thrift.protocol.TField MOBILE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNum", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyFoilCardNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyFoilCardNum_argsTupleSchemeFactory());
    }

    public String mobileNum; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE_NUM((short)1, "mobileNum"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE_NUM
            return MOBILE_NUM;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE_NUM, new org.apache.thrift.meta_data.FieldMetaData("mobileNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyFoilCardNum_args.class, metaDataMap);
    }

    public verifyFoilCardNum_args() {
    }

    public verifyFoilCardNum_args(
      String mobileNum,
      String clientId)
    {
      this();
      this.mobileNum = mobileNum;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyFoilCardNum_args(verifyFoilCardNum_args other) {
      if (other.isSetMobileNum()) {
        this.mobileNum = other.mobileNum;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public verifyFoilCardNum_args deepCopy() {
      return new verifyFoilCardNum_args(this);
    }

    @Override
    public void clear() {
      this.mobileNum = null;
      this.clientId = null;
    }

    public String getMobileNum() {
      return this.mobileNum;
    }

    public verifyFoilCardNum_args setMobileNum(String mobileNum) {
      this.mobileNum = mobileNum;
      return this;
    }

    public void unsetMobileNum() {
      this.mobileNum = null;
    }

    /** Returns true if field mobileNum is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNum() {
      return this.mobileNum != null;
    }

    public void setMobileNumIsSet(boolean value) {
      if (!value) {
        this.mobileNum = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public verifyFoilCardNum_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE_NUM:
        if (value == null) {
          unsetMobileNum();
        } else {
          setMobileNum((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE_NUM:
        return getMobileNum();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE_NUM:
        return isSetMobileNum();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyFoilCardNum_args)
        return this.equals((verifyFoilCardNum_args)that);
      return false;
    }

    public boolean equals(verifyFoilCardNum_args that) {
      if (that == null)
        return false;

      boolean this_present_mobileNum = true && this.isSetMobileNum();
      boolean that_present_mobileNum = true && that.isSetMobileNum();
      if (this_present_mobileNum || that_present_mobileNum) {
        if (!(this_present_mobileNum && that_present_mobileNum))
          return false;
        if (!this.mobileNum.equals(that.mobileNum))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobileNum = true && (isSetMobileNum());
      list.add(present_mobileNum);
      if (present_mobileNum)
        list.add(mobileNum);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyFoilCardNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobileNum()).compareTo(other.isSetMobileNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNum, other.mobileNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyFoilCardNum_args(");
      boolean first = true;

      sb.append("mobileNum:");
      if (this.mobileNum == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyFoilCardNum_argsStandardSchemeFactory implements SchemeFactory {
      public verifyFoilCardNum_argsStandardScheme getScheme() {
        return new verifyFoilCardNum_argsStandardScheme();
      }
    }

    private static class verifyFoilCardNum_argsStandardScheme extends StandardScheme<verifyFoilCardNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyFoilCardNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNum = iprot.readString();
                struct.setMobileNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyFoilCardNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobileNum != null) {
          oprot.writeFieldBegin(MOBILE_NUM_FIELD_DESC);
          oprot.writeString(struct.mobileNum);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyFoilCardNum_argsTupleSchemeFactory implements SchemeFactory {
      public verifyFoilCardNum_argsTupleScheme getScheme() {
        return new verifyFoilCardNum_argsTupleScheme();
      }
    }

    private static class verifyFoilCardNum_argsTupleScheme extends TupleScheme<verifyFoilCardNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyFoilCardNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobileNum()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMobileNum()) {
          oprot.writeString(struct.mobileNum);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyFoilCardNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mobileNum = iprot.readString();
          struct.setMobileNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class verifyFoilCardNum_result implements org.apache.thrift.TBase<verifyFoilCardNum_result, verifyFoilCardNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyFoilCardNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyFoilCardNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyFoilCardNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyFoilCardNum_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyFoilCardNum_result.class, metaDataMap);
    }

    public verifyFoilCardNum_result() {
    }

    public verifyFoilCardNum_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyFoilCardNum_result(verifyFoilCardNum_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public verifyFoilCardNum_result deepCopy() {
      return new verifyFoilCardNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public verifyFoilCardNum_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyFoilCardNum_result)
        return this.equals((verifyFoilCardNum_result)that);
      return false;
    }

    public boolean equals(verifyFoilCardNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyFoilCardNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyFoilCardNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyFoilCardNum_resultStandardSchemeFactory implements SchemeFactory {
      public verifyFoilCardNum_resultStandardScheme getScheme() {
        return new verifyFoilCardNum_resultStandardScheme();
      }
    }

    private static class verifyFoilCardNum_resultStandardScheme extends StandardScheme<verifyFoilCardNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyFoilCardNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyFoilCardNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyFoilCardNum_resultTupleSchemeFactory implements SchemeFactory {
      public verifyFoilCardNum_resultTupleScheme getScheme() {
        return new verifyFoilCardNum_resultTupleScheme();
      }
    }

    private static class verifyFoilCardNum_resultTupleScheme extends TupleScheme<verifyFoilCardNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyFoilCardNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyFoilCardNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
