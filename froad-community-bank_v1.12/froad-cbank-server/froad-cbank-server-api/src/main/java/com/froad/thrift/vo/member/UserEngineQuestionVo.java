/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class UserEngineQuestionVo implements org.apache.thrift.TBase<UserEngineQuestionVo, UserEngineQuestionVo._Fields>, java.io.Serializable, Cloneable, Comparable<UserEngineQuestionVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserEngineQuestionVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionID", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("questionName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUESTION_DEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("questionDemo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("answer", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserEngineQuestionVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserEngineQuestionVoTupleSchemeFactory());
  }

  public long ID; // required
  public long questionID; // required
  public String questionName; // required
  public String questionDemo; // required
  public String type; // required
  public long memberCode; // required
  public String answer; // required
  public long state; // required
  public long createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    QUESTION_ID((short)2, "questionID"),
    QUESTION_NAME((short)3, "questionName"),
    QUESTION_DEMO((short)4, "questionDemo"),
    TYPE((short)5, "type"),
    MEMBER_CODE((short)6, "memberCode"),
    ANSWER((short)7, "answer"),
    STATE((short)8, "state"),
    CREATE_TIME((short)9, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // QUESTION_ID
          return QUESTION_ID;
        case 3: // QUESTION_NAME
          return QUESTION_NAME;
        case 4: // QUESTION_DEMO
          return QUESTION_DEMO;
        case 5: // TYPE
          return TYPE;
        case 6: // MEMBER_CODE
          return MEMBER_CODE;
        case 7: // ANSWER
          return ANSWER;
        case 8: // STATE
          return STATE;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __QUESTIONID_ISSET_ID = 1;
  private static final int __MEMBERCODE_ISSET_ID = 2;
  private static final int __STATE_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUESTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("questionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_DEMO, new org.apache.thrift.meta_data.FieldMetaData("questionDemo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserEngineQuestionVo.class, metaDataMap);
  }

  public UserEngineQuestionVo() {
  }

  public UserEngineQuestionVo(
    long ID,
    long questionID,
    String questionName,
    String questionDemo,
    String type,
    long memberCode,
    String answer,
    long state,
    long createTime)
  {
    this();
    this.ID = ID;
    setIDIsSet(true);
    this.questionID = questionID;
    setQuestionIDIsSet(true);
    this.questionName = questionName;
    this.questionDemo = questionDemo;
    this.type = type;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.answer = answer;
    this.state = state;
    setStateIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserEngineQuestionVo(UserEngineQuestionVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    this.questionID = other.questionID;
    if (other.isSetQuestionName()) {
      this.questionName = other.questionName;
    }
    if (other.isSetQuestionDemo()) {
      this.questionDemo = other.questionDemo;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.memberCode = other.memberCode;
    if (other.isSetAnswer()) {
      this.answer = other.answer;
    }
    this.state = other.state;
    this.createTime = other.createTime;
  }

  public UserEngineQuestionVo deepCopy() {
    return new UserEngineQuestionVo(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    setQuestionIDIsSet(false);
    this.questionID = 0;
    this.questionName = null;
    this.questionDemo = null;
    this.type = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.answer = null;
    setStateIsSet(false);
    this.state = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public long getID() {
    return this.ID;
  }

  public UserEngineQuestionVo setID(long ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getQuestionID() {
    return this.questionID;
  }

  public UserEngineQuestionVo setQuestionID(long questionID) {
    this.questionID = questionID;
    setQuestionIDIsSet(true);
    return this;
  }

  public void unsetQuestionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionID() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public String getQuestionName() {
    return this.questionName;
  }

  public UserEngineQuestionVo setQuestionName(String questionName) {
    this.questionName = questionName;
    return this;
  }

  public void unsetQuestionName() {
    this.questionName = null;
  }

  /** Returns true if field questionName is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionName() {
    return this.questionName != null;
  }

  public void setQuestionNameIsSet(boolean value) {
    if (!value) {
      this.questionName = null;
    }
  }

  public String getQuestionDemo() {
    return this.questionDemo;
  }

  public UserEngineQuestionVo setQuestionDemo(String questionDemo) {
    this.questionDemo = questionDemo;
    return this;
  }

  public void unsetQuestionDemo() {
    this.questionDemo = null;
  }

  /** Returns true if field questionDemo is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionDemo() {
    return this.questionDemo != null;
  }

  public void setQuestionDemoIsSet(boolean value) {
    if (!value) {
      this.questionDemo = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public UserEngineQuestionVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getMemberCode() {
    return this.memberCode;
  }

  public UserEngineQuestionVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  public String getAnswer() {
    return this.answer;
  }

  public UserEngineQuestionVo setAnswer(String answer) {
    this.answer = answer;
    return this;
  }

  public void unsetAnswer() {
    this.answer = null;
  }

  /** Returns true if field answer is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer() {
    return this.answer != null;
  }

  public void setAnswerIsSet(boolean value) {
    if (!value) {
      this.answer = null;
    }
  }

  public long getState() {
    return this.state;
  }

  public UserEngineQuestionVo setState(long state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public UserEngineQuestionVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((Long)value);
      }
      break;

    case QUESTION_ID:
      if (value == null) {
        unsetQuestionID();
      } else {
        setQuestionID((Long)value);
      }
      break;

    case QUESTION_NAME:
      if (value == null) {
        unsetQuestionName();
      } else {
        setQuestionName((String)value);
      }
      break;

    case QUESTION_DEMO:
      if (value == null) {
        unsetQuestionDemo();
      } else {
        setQuestionDemo((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case ANSWER:
      if (value == null) {
        unsetAnswer();
      } else {
        setAnswer((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getID());

    case QUESTION_ID:
      return Long.valueOf(getQuestionID());

    case QUESTION_NAME:
      return getQuestionName();

    case QUESTION_DEMO:
      return getQuestionDemo();

    case TYPE:
      return getType();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case ANSWER:
      return getAnswer();

    case STATE:
      return Long.valueOf(getState());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case QUESTION_ID:
      return isSetQuestionID();
    case QUESTION_NAME:
      return isSetQuestionName();
    case QUESTION_DEMO:
      return isSetQuestionDemo();
    case TYPE:
      return isSetType();
    case MEMBER_CODE:
      return isSetMemberCode();
    case ANSWER:
      return isSetAnswer();
    case STATE:
      return isSetState();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserEngineQuestionVo)
      return this.equals((UserEngineQuestionVo)that);
    return false;
  }

  public boolean equals(UserEngineQuestionVo that) {
    if (that == null)
      return false;

    boolean this_present_ID = true;
    boolean that_present_ID = true;
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_questionID = true;
    boolean that_present_questionID = true;
    if (this_present_questionID || that_present_questionID) {
      if (!(this_present_questionID && that_present_questionID))
        return false;
      if (this.questionID != that.questionID)
        return false;
    }

    boolean this_present_questionName = true && this.isSetQuestionName();
    boolean that_present_questionName = true && that.isSetQuestionName();
    if (this_present_questionName || that_present_questionName) {
      if (!(this_present_questionName && that_present_questionName))
        return false;
      if (!this.questionName.equals(that.questionName))
        return false;
    }

    boolean this_present_questionDemo = true && this.isSetQuestionDemo();
    boolean that_present_questionDemo = true && that.isSetQuestionDemo();
    if (this_present_questionDemo || that_present_questionDemo) {
      if (!(this_present_questionDemo && that_present_questionDemo))
        return false;
      if (!this.questionDemo.equals(that.questionDemo))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_answer = true && this.isSetAnswer();
    boolean that_present_answer = true && that.isSetAnswer();
    if (this_present_answer || that_present_answer) {
      if (!(this_present_answer && that_present_answer))
        return false;
      if (!this.answer.equals(that.answer))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID = true;
    list.add(present_ID);
    if (present_ID)
      list.add(ID);

    boolean present_questionID = true;
    list.add(present_questionID);
    if (present_questionID)
      list.add(questionID);

    boolean present_questionName = true && (isSetQuestionName());
    list.add(present_questionName);
    if (present_questionName)
      list.add(questionName);

    boolean present_questionDemo = true && (isSetQuestionDemo());
    list.add(present_questionDemo);
    if (present_questionDemo)
      list.add(questionDemo);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_answer = true && (isSetAnswer());
    list.add(present_answer);
    if (present_answer)
      list.add(answer);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserEngineQuestionVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionID()).compareTo(other.isSetQuestionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionID, other.questionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionName()).compareTo(other.isSetQuestionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionName, other.questionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionDemo()).compareTo(other.isSetQuestionDemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionDemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionDemo, other.questionDemo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserEngineQuestionVo(");
    boolean first = true;

    sb.append("ID:");
    sb.append(this.ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionID:");
    sb.append(this.questionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionName:");
    if (this.questionName == null) {
      sb.append("null");
    } else {
      sb.append(this.questionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionDemo:");
    if (this.questionDemo == null) {
      sb.append("null");
    } else {
      sb.append(this.questionDemo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer:");
    if (this.answer == null) {
      sb.append("null");
    } else {
      sb.append(this.answer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserEngineQuestionVoStandardSchemeFactory implements SchemeFactory {
    public UserEngineQuestionVoStandardScheme getScheme() {
      return new UserEngineQuestionVoStandardScheme();
    }
  }

  private static class UserEngineQuestionVoStandardScheme extends StandardScheme<UserEngineQuestionVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserEngineQuestionVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ID = iprot.readI64();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.questionID = iprot.readI64();
              struct.setQuestionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionName = iprot.readString();
              struct.setQuestionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUESTION_DEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionDemo = iprot.readString();
              struct.setQuestionDemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answer = iprot.readString();
              struct.setAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.state = iprot.readI64();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserEngineQuestionVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI64(struct.questionID);
      oprot.writeFieldEnd();
      if (struct.questionName != null) {
        oprot.writeFieldBegin(QUESTION_NAME_FIELD_DESC);
        oprot.writeString(struct.questionName);
        oprot.writeFieldEnd();
      }
      if (struct.questionDemo != null) {
        oprot.writeFieldBegin(QUESTION_DEMO_FIELD_DESC);
        oprot.writeString(struct.questionDemo);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.answer != null) {
        oprot.writeFieldBegin(ANSWER_FIELD_DESC);
        oprot.writeString(struct.answer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI64(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserEngineQuestionVoTupleSchemeFactory implements SchemeFactory {
    public UserEngineQuestionVoTupleScheme getScheme() {
      return new UserEngineQuestionVoTupleScheme();
    }
  }

  private static class UserEngineQuestionVoTupleScheme extends TupleScheme<UserEngineQuestionVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserEngineQuestionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetID()) {
        optionals.set(0);
      }
      if (struct.isSetQuestionID()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionName()) {
        optionals.set(2);
      }
      if (struct.isSetQuestionDemo()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(5);
      }
      if (struct.isSetAnswer()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetID()) {
        oprot.writeI64(struct.ID);
      }
      if (struct.isSetQuestionID()) {
        oprot.writeI64(struct.questionID);
      }
      if (struct.isSetQuestionName()) {
        oprot.writeString(struct.questionName);
      }
      if (struct.isSetQuestionDemo()) {
        oprot.writeString(struct.questionDemo);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetAnswer()) {
        oprot.writeString(struct.answer);
      }
      if (struct.isSetState()) {
        oprot.writeI64(struct.state);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserEngineQuestionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.ID = iprot.readI64();
        struct.setIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.questionID = iprot.readI64();
        struct.setQuestionIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.questionName = iprot.readString();
        struct.setQuestionNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.questionDemo = iprot.readString();
        struct.setQuestionDemoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.answer = iprot.readString();
        struct.setAnswerIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readI64();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

