/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 管理端商品详情信息Vo(银行管理端，商户管理端)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductDetailVo implements org.apache.thrift.TBase<ProductDetailVo, ProductDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductDetailVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_MARKETABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMarketable", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RACK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rackTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField MARKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("store", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SELL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sellCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CATEGORY_TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryTreePath", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CATEGORY_TREE_PATH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryTreePathName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimit", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField BRIEF_INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("briefIntroduction", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BUY_KNOW_FIELD_DESC = new org.apache.thrift.protocol.TField("buyKnow", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStateName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField STORE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("storeCount", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField EXPIRE_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireStartTime", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField EXPIRE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireEndTime", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField DOWN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("downTime", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTime", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField AUDIT_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("auditComment", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField IS_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeckill", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("vipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField CODE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("codeUrl", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField BUY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("buyLimit", org.apache.thrift.protocol.TType.STRUCT, (short)43);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductDetailVoTupleSchemeFactory());
  }

  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商品对应商户所属机构编号
   */
  public String orgCode; // required
  /**
   * 商品id即商品编号
   */
  public String productId; // required
  /**
   * 是否上架 0未上架,1已上架,2已下架
   */
  public String isMarketable; // required
  /**
   * 上架时间
   */
  public long rackTime; // required
  /**
   * createTime
   */
  public long createTime; // required
  /**
   * 商品类型 "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public String type; // required
  /**
   * 0送货上门,1网点自提,2配送或自提
   */
  public String deliveryOption; // required
  /**
   * 商品名
   */
  public String name; // required
  /**
   * 商品全名
   */
  public String fullName; // required
  /**
   * 销售价
   */
  public double price; // required
  /**
   * 成本价
   */
  public double cost; // required
  /**
   * 市场价
   */
  public double marketPrice; // required
  /**
   * 商品库存数量
   */
  public int store; // required
  /**
   * 销售数量
   */
  public int sellCount; // required
  /**
   * 商品分类id
   */
  public long productCategoryId; // required
  /**
   * 商品分类名称
   */
  public String productCategoryName; // required
  /**
   * 商品分类树路径 空格间隔
   */
  public String categoryTreePath; // required
  /**
   * 商品分类全名包括父类节点名
   */
  public String categoryTreePathName; // required
  /**
   * 是否限购
   */
  public boolean isLimit; // required
  /**
   * 评分
   */
  public int point; // required
  /**
   * 简介
   */
  public String briefIntroduction; // required
  /**
   * 介绍
   */
  public String introduction; // required
  /**
   * 商品须知
   */
  public String buyKnow; // required
  /**
   * 商品审核状态 ("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String auditState; // required
  /**
   * 商品审核状态对应的名称 ("审核中","审核通过","审核不通过","未提交","审核通过(更新中)","审核通过(更新审核未通过)")
   */
  public String auditStateName; // required
  /**
   * 用户收藏数
   */
  public int storeCount; // required
  /**
   * 销售期开始
   */
  public long startTime; // required
  /**
   * 销售期结束
   */
  public long endTime; // required
  /**
   * 运费
   */
  public double deliveryMoney; // required
  /**
   * 销售券有效起始日
   */
  public long expireStartTime; // required
  /**
   * 销售券有效结束日
   */
  public long expireEndTime; // required
  /**
   * 下架时间
   */
  public long downTime; // required
  /**
   * 审核时间
   */
  public long auditTime; // required
  /**
   * 审核备注
   */
  public String auditComment; // required
  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String isSeckill; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 机构名称
   */
  public String orgName; // required
  /**
   * VIP价
   */
  public double vipPrice; // required
  /**
   * 客户端名称
   */
  public String clientName; // required
  /**
   * 二维码地址
   */
  public String codeUrl; // required
  /**
   * 商品限购信息
   */
  public ProductBuyLimitVo buyLimit; // required
  /**
   * 商品图片列表
   */
  public List<ProductImageVo> images; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端id
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)2, "merchantId"),
    /**
     * 商品对应商户所属机构编号
     */
    ORG_CODE((short)3, "orgCode"),
    /**
     * 商品id即商品编号
     */
    PRODUCT_ID((short)4, "productId"),
    /**
     * 是否上架 0未上架,1已上架,2已下架
     */
    IS_MARKETABLE((short)5, "isMarketable"),
    /**
     * 上架时间
     */
    RACK_TIME((short)6, "rackTime"),
    /**
     * createTime
     */
    CREATE_TIME((short)7, "createTime"),
    /**
     * 商品类型 "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
     */
    TYPE((short)8, "type"),
    /**
     * 0送货上门,1网点自提,2配送或自提
     */
    DELIVERY_OPTION((short)9, "deliveryOption"),
    /**
     * 商品名
     */
    NAME((short)10, "name"),
    /**
     * 商品全名
     */
    FULL_NAME((short)11, "fullName"),
    /**
     * 销售价
     */
    PRICE((short)12, "price"),
    /**
     * 成本价
     */
    COST((short)13, "cost"),
    /**
     * 市场价
     */
    MARKET_PRICE((short)14, "marketPrice"),
    /**
     * 商品库存数量
     */
    STORE((short)15, "store"),
    /**
     * 销售数量
     */
    SELL_COUNT((short)16, "sellCount"),
    /**
     * 商品分类id
     */
    PRODUCT_CATEGORY_ID((short)17, "productCategoryId"),
    /**
     * 商品分类名称
     */
    PRODUCT_CATEGORY_NAME((short)18, "productCategoryName"),
    /**
     * 商品分类树路径 空格间隔
     */
    CATEGORY_TREE_PATH((short)19, "categoryTreePath"),
    /**
     * 商品分类全名包括父类节点名
     */
    CATEGORY_TREE_PATH_NAME((short)20, "categoryTreePathName"),
    /**
     * 是否限购
     */
    IS_LIMIT((short)21, "isLimit"),
    /**
     * 评分
     */
    POINT((short)22, "point"),
    /**
     * 简介
     */
    BRIEF_INTRODUCTION((short)23, "briefIntroduction"),
    /**
     * 介绍
     */
    INTRODUCTION((short)24, "introduction"),
    /**
     * 商品须知
     */
    BUY_KNOW((short)25, "buyKnow"),
    /**
     * 商品审核状态 ("0待审核",1审核通过,2审核不通过,3未提交)
     */
    AUDIT_STATE((short)26, "auditState"),
    /**
     * 商品审核状态对应的名称 ("审核中","审核通过","审核不通过","未提交","审核通过(更新中)","审核通过(更新审核未通过)")
     */
    AUDIT_STATE_NAME((short)27, "auditStateName"),
    /**
     * 用户收藏数
     */
    STORE_COUNT((short)28, "storeCount"),
    /**
     * 销售期开始
     */
    START_TIME((short)29, "startTime"),
    /**
     * 销售期结束
     */
    END_TIME((short)30, "endTime"),
    /**
     * 运费
     */
    DELIVERY_MONEY((short)31, "deliveryMoney"),
    /**
     * 销售券有效起始日
     */
    EXPIRE_START_TIME((short)32, "expireStartTime"),
    /**
     * 销售券有效结束日
     */
    EXPIRE_END_TIME((short)33, "expireEndTime"),
    /**
     * 下架时间
     */
    DOWN_TIME((short)34, "downTime"),
    /**
     * 审核时间
     */
    AUDIT_TIME((short)35, "auditTime"),
    /**
     * 审核备注
     */
    AUDIT_COMMENT((short)36, "auditComment"),
    /**
     * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
     */
    IS_SECKILL((short)37, "isSeckill"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)38, "merchantName"),
    /**
     * 机构名称
     */
    ORG_NAME((short)39, "orgName"),
    /**
     * VIP价
     */
    VIP_PRICE((short)40, "vipPrice"),
    /**
     * 客户端名称
     */
    CLIENT_NAME((short)41, "clientName"),
    /**
     * 二维码地址
     */
    CODE_URL((short)42, "codeUrl"),
    /**
     * 商品限购信息
     */
    BUY_LIMIT((short)43, "buyLimit"),
    /**
     * 商品图片列表
     */
    IMAGES((short)44, "images");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // ORG_CODE
          return ORG_CODE;
        case 4: // PRODUCT_ID
          return PRODUCT_ID;
        case 5: // IS_MARKETABLE
          return IS_MARKETABLE;
        case 6: // RACK_TIME
          return RACK_TIME;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // TYPE
          return TYPE;
        case 9: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 10: // NAME
          return NAME;
        case 11: // FULL_NAME
          return FULL_NAME;
        case 12: // PRICE
          return PRICE;
        case 13: // COST
          return COST;
        case 14: // MARKET_PRICE
          return MARKET_PRICE;
        case 15: // STORE
          return STORE;
        case 16: // SELL_COUNT
          return SELL_COUNT;
        case 17: // PRODUCT_CATEGORY_ID
          return PRODUCT_CATEGORY_ID;
        case 18: // PRODUCT_CATEGORY_NAME
          return PRODUCT_CATEGORY_NAME;
        case 19: // CATEGORY_TREE_PATH
          return CATEGORY_TREE_PATH;
        case 20: // CATEGORY_TREE_PATH_NAME
          return CATEGORY_TREE_PATH_NAME;
        case 21: // IS_LIMIT
          return IS_LIMIT;
        case 22: // POINT
          return POINT;
        case 23: // BRIEF_INTRODUCTION
          return BRIEF_INTRODUCTION;
        case 24: // INTRODUCTION
          return INTRODUCTION;
        case 25: // BUY_KNOW
          return BUY_KNOW;
        case 26: // AUDIT_STATE
          return AUDIT_STATE;
        case 27: // AUDIT_STATE_NAME
          return AUDIT_STATE_NAME;
        case 28: // STORE_COUNT
          return STORE_COUNT;
        case 29: // START_TIME
          return START_TIME;
        case 30: // END_TIME
          return END_TIME;
        case 31: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 32: // EXPIRE_START_TIME
          return EXPIRE_START_TIME;
        case 33: // EXPIRE_END_TIME
          return EXPIRE_END_TIME;
        case 34: // DOWN_TIME
          return DOWN_TIME;
        case 35: // AUDIT_TIME
          return AUDIT_TIME;
        case 36: // AUDIT_COMMENT
          return AUDIT_COMMENT;
        case 37: // IS_SECKILL
          return IS_SECKILL;
        case 38: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 39: // ORG_NAME
          return ORG_NAME;
        case 40: // VIP_PRICE
          return VIP_PRICE;
        case 41: // CLIENT_NAME
          return CLIENT_NAME;
        case 42: // CODE_URL
          return CODE_URL;
        case 43: // BUY_LIMIT
          return BUY_LIMIT;
        case 44: // IMAGES
          return IMAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RACKTIME_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __COST_ISSET_ID = 3;
  private static final int __MARKETPRICE_ISSET_ID = 4;
  private static final int __STORE_ISSET_ID = 5;
  private static final int __SELLCOUNT_ISSET_ID = 6;
  private static final int __PRODUCTCATEGORYID_ISSET_ID = 7;
  private static final int __ISLIMIT_ISSET_ID = 8;
  private static final int __POINT_ISSET_ID = 9;
  private static final int __STORECOUNT_ISSET_ID = 10;
  private static final int __STARTTIME_ISSET_ID = 11;
  private static final int __ENDTIME_ISSET_ID = 12;
  private static final int __DELIVERYMONEY_ISSET_ID = 13;
  private static final int __EXPIRESTARTTIME_ISSET_ID = 14;
  private static final int __EXPIREENDTIME_ISSET_ID = 15;
  private static final int __DOWNTIME_ISSET_ID = 16;
  private static final int __AUDITTIME_ISSET_ID = 17;
  private static final int __VIPPRICE_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MARKETABLE, new org.apache.thrift.meta_data.FieldMetaData("isMarketable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RACK_TIME, new org.apache.thrift.meta_data.FieldMetaData("rackTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("marketPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STORE, new org.apache.thrift.meta_data.FieldMetaData("store", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sellCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("productCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("productCategoryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("categoryTreePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_TREE_PATH_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryTreePathName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("isLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIEF_INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("briefIntroduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_KNOW, new org.apache.thrift.meta_data.FieldMetaData("buyKnow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("auditStateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("storeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPIRE_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOWN_TIME, new org.apache.thrift.meta_data.FieldMetaData("downTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("auditTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("auditComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("isSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("vipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE_URL, new org.apache.thrift.meta_data.FieldMetaData("codeUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("buyLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductBuyLimitVo.class)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductImageVo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductDetailVo.class, metaDataMap);
  }

  public ProductDetailVo() {
  }

  public ProductDetailVo(
    String clientId,
    String merchantId,
    String orgCode,
    String productId,
    String isMarketable,
    long rackTime,
    long createTime,
    String type,
    String deliveryOption,
    String name,
    String fullName,
    double price,
    double cost,
    double marketPrice,
    int store,
    int sellCount,
    long productCategoryId,
    String productCategoryName,
    String categoryTreePath,
    String categoryTreePathName,
    boolean isLimit,
    int point,
    String briefIntroduction,
    String introduction,
    String buyKnow,
    String auditState,
    String auditStateName,
    int storeCount,
    long startTime,
    long endTime,
    double deliveryMoney,
    long expireStartTime,
    long expireEndTime,
    long downTime,
    long auditTime,
    String auditComment,
    String isSeckill,
    String merchantName,
    String orgName,
    double vipPrice,
    String clientName,
    String codeUrl,
    ProductBuyLimitVo buyLimit,
    List<ProductImageVo> images)
  {
    this();
    this.clientId = clientId;
    this.merchantId = merchantId;
    this.orgCode = orgCode;
    this.productId = productId;
    this.isMarketable = isMarketable;
    this.rackTime = rackTime;
    setRackTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.type = type;
    this.deliveryOption = deliveryOption;
    this.name = name;
    this.fullName = fullName;
    this.price = price;
    setPriceIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    this.store = store;
    setStoreIsSet(true);
    this.sellCount = sellCount;
    setSellCountIsSet(true);
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    this.productCategoryName = productCategoryName;
    this.categoryTreePath = categoryTreePath;
    this.categoryTreePathName = categoryTreePathName;
    this.isLimit = isLimit;
    setIsLimitIsSet(true);
    this.point = point;
    setPointIsSet(true);
    this.briefIntroduction = briefIntroduction;
    this.introduction = introduction;
    this.buyKnow = buyKnow;
    this.auditState = auditState;
    this.auditStateName = auditStateName;
    this.storeCount = storeCount;
    setStoreCountIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    this.expireStartTime = expireStartTime;
    setExpireStartTimeIsSet(true);
    this.expireEndTime = expireEndTime;
    setExpireEndTimeIsSet(true);
    this.downTime = downTime;
    setDownTimeIsSet(true);
    this.auditTime = auditTime;
    setAuditTimeIsSet(true);
    this.auditComment = auditComment;
    this.isSeckill = isSeckill;
    this.merchantName = merchantName;
    this.orgName = orgName;
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
    this.clientName = clientName;
    this.codeUrl = codeUrl;
    this.buyLimit = buyLimit;
    this.images = images;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductDetailVo(ProductDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetIsMarketable()) {
      this.isMarketable = other.isMarketable;
    }
    this.rackTime = other.rackTime;
    this.createTime = other.createTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFullName()) {
      this.fullName = other.fullName;
    }
    this.price = other.price;
    this.cost = other.cost;
    this.marketPrice = other.marketPrice;
    this.store = other.store;
    this.sellCount = other.sellCount;
    this.productCategoryId = other.productCategoryId;
    if (other.isSetProductCategoryName()) {
      this.productCategoryName = other.productCategoryName;
    }
    if (other.isSetCategoryTreePath()) {
      this.categoryTreePath = other.categoryTreePath;
    }
    if (other.isSetCategoryTreePathName()) {
      this.categoryTreePathName = other.categoryTreePathName;
    }
    this.isLimit = other.isLimit;
    this.point = other.point;
    if (other.isSetBriefIntroduction()) {
      this.briefIntroduction = other.briefIntroduction;
    }
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    if (other.isSetBuyKnow()) {
      this.buyKnow = other.buyKnow;
    }
    if (other.isSetAuditState()) {
      this.auditState = other.auditState;
    }
    if (other.isSetAuditStateName()) {
      this.auditStateName = other.auditStateName;
    }
    this.storeCount = other.storeCount;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.deliveryMoney = other.deliveryMoney;
    this.expireStartTime = other.expireStartTime;
    this.expireEndTime = other.expireEndTime;
    this.downTime = other.downTime;
    this.auditTime = other.auditTime;
    if (other.isSetAuditComment()) {
      this.auditComment = other.auditComment;
    }
    if (other.isSetIsSeckill()) {
      this.isSeckill = other.isSeckill;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.vipPrice = other.vipPrice;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetCodeUrl()) {
      this.codeUrl = other.codeUrl;
    }
    if (other.isSetBuyLimit()) {
      this.buyLimit = new ProductBuyLimitVo(other.buyLimit);
    }
    if (other.isSetImages()) {
      List<ProductImageVo> __this__images = new ArrayList<ProductImageVo>(other.images.size());
      for (ProductImageVo other_element : other.images) {
        __this__images.add(new ProductImageVo(other_element));
      }
      this.images = __this__images;
    }
  }

  public ProductDetailVo deepCopy() {
    return new ProductDetailVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.merchantId = null;
    this.orgCode = null;
    this.productId = null;
    this.isMarketable = null;
    setRackTimeIsSet(false);
    this.rackTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.type = null;
    this.deliveryOption = null;
    this.name = null;
    this.fullName = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setCostIsSet(false);
    this.cost = 0.0;
    setMarketPriceIsSet(false);
    this.marketPrice = 0.0;
    setStoreIsSet(false);
    this.store = 0;
    setSellCountIsSet(false);
    this.sellCount = 0;
    setProductCategoryIdIsSet(false);
    this.productCategoryId = 0;
    this.productCategoryName = null;
    this.categoryTreePath = null;
    this.categoryTreePathName = null;
    setIsLimitIsSet(false);
    this.isLimit = false;
    setPointIsSet(false);
    this.point = 0;
    this.briefIntroduction = null;
    this.introduction = null;
    this.buyKnow = null;
    this.auditState = null;
    this.auditStateName = null;
    setStoreCountIsSet(false);
    this.storeCount = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    setExpireStartTimeIsSet(false);
    this.expireStartTime = 0;
    setExpireEndTimeIsSet(false);
    this.expireEndTime = 0;
    setDownTimeIsSet(false);
    this.downTime = 0;
    setAuditTimeIsSet(false);
    this.auditTime = 0;
    this.auditComment = null;
    this.isSeckill = null;
    this.merchantName = null;
    this.orgName = null;
    setVipPriceIsSet(false);
    this.vipPrice = 0.0;
    this.clientName = null;
    this.codeUrl = null;
    this.buyLimit = null;
    this.images = null;
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public ProductDetailVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public ProductDetailVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商品对应商户所属机构编号
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 商品对应商户所属机构编号
   */
  public ProductDetailVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 商品id即商品编号
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id即商品编号
   */
  public ProductDetailVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 是否上架 0未上架,1已上架,2已下架
   */
  public String getIsMarketable() {
    return this.isMarketable;
  }

  /**
   * 是否上架 0未上架,1已上架,2已下架
   */
  public ProductDetailVo setIsMarketable(String isMarketable) {
    this.isMarketable = isMarketable;
    return this;
  }

  public void unsetIsMarketable() {
    this.isMarketable = null;
  }

  /** Returns true if field isMarketable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMarketable() {
    return this.isMarketable != null;
  }

  public void setIsMarketableIsSet(boolean value) {
    if (!value) {
      this.isMarketable = null;
    }
  }

  /**
   * 上架时间
   */
  public long getRackTime() {
    return this.rackTime;
  }

  /**
   * 上架时间
   */
  public ProductDetailVo setRackTime(long rackTime) {
    this.rackTime = rackTime;
    setRackTimeIsSet(true);
    return this;
  }

  public void unsetRackTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RACKTIME_ISSET_ID);
  }

  /** Returns true if field rackTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRackTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RACKTIME_ISSET_ID);
  }

  public void setRackTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RACKTIME_ISSET_ID, value);
  }

  /**
   * createTime
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * createTime
   */
  public ProductDetailVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 商品类型 "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public String getType() {
    return this.type;
  }

  /**
   * 商品类型 "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品,"6":精品商城商品;
   */
  public ProductDetailVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 0送货上门,1网点自提,2配送或自提
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 0送货上门,1网点自提,2配送或自提
   */
  public ProductDetailVo setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 商品名
   */
  public String getName() {
    return this.name;
  }

  /**
   * 商品名
   */
  public ProductDetailVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 商品全名
   */
  public String getFullName() {
    return this.fullName;
  }

  /**
   * 商品全名
   */
  public ProductDetailVo setFullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  public void unsetFullName() {
    this.fullName = null;
  }

  /** Returns true if field fullName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullName() {
    return this.fullName != null;
  }

  public void setFullNameIsSet(boolean value) {
    if (!value) {
      this.fullName = null;
    }
  }

  /**
   * 销售价
   */
  public double getPrice() {
    return this.price;
  }

  /**
   * 销售价
   */
  public ProductDetailVo setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 成本价
   */
  public double getCost() {
    return this.cost;
  }

  /**
   * 成本价
   */
  public ProductDetailVo setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  /**
   * 市场价
   */
  public double getMarketPrice() {
    return this.marketPrice;
  }

  /**
   * 市场价
   */
  public ProductDetailVo setMarketPrice(double marketPrice) {
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    return this;
  }

  public void unsetMarketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  /** Returns true if field marketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  public void setMarketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPRICE_ISSET_ID, value);
  }

  /**
   * 商品库存数量
   */
  public int getStore() {
    return this.store;
  }

  /**
   * 商品库存数量
   */
  public ProductDetailVo setStore(int store) {
    this.store = store;
    setStoreIsSet(true);
    return this;
  }

  public void unsetStore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  /** Returns true if field store is set (has been assigned a value) and false otherwise */
  public boolean isSetStore() {
    return EncodingUtils.testBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  public void setStoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORE_ISSET_ID, value);
  }

  /**
   * 销售数量
   */
  public int getSellCount() {
    return this.sellCount;
  }

  /**
   * 销售数量
   */
  public ProductDetailVo setSellCount(int sellCount) {
    this.sellCount = sellCount;
    setSellCountIsSet(true);
    return this;
  }

  public void unsetSellCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLCOUNT_ISSET_ID);
  }

  /** Returns true if field sellCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSellCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLCOUNT_ISSET_ID);
  }

  public void setSellCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLCOUNT_ISSET_ID, value);
  }

  /**
   * 商品分类id
   */
  public long getProductCategoryId() {
    return this.productCategoryId;
  }

  /**
   * 商品分类id
   */
  public ProductDetailVo setProductCategoryId(long productCategoryId) {
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    return this;
  }

  public void unsetProductCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field productCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  public void setProductCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID, value);
  }

  /**
   * 商品分类名称
   */
  public String getProductCategoryName() {
    return this.productCategoryName;
  }

  /**
   * 商品分类名称
   */
  public ProductDetailVo setProductCategoryName(String productCategoryName) {
    this.productCategoryName = productCategoryName;
    return this;
  }

  public void unsetProductCategoryName() {
    this.productCategoryName = null;
  }

  /** Returns true if field productCategoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategoryName() {
    return this.productCategoryName != null;
  }

  public void setProductCategoryNameIsSet(boolean value) {
    if (!value) {
      this.productCategoryName = null;
    }
  }

  /**
   * 商品分类树路径 空格间隔
   */
  public String getCategoryTreePath() {
    return this.categoryTreePath;
  }

  /**
   * 商品分类树路径 空格间隔
   */
  public ProductDetailVo setCategoryTreePath(String categoryTreePath) {
    this.categoryTreePath = categoryTreePath;
    return this;
  }

  public void unsetCategoryTreePath() {
    this.categoryTreePath = null;
  }

  /** Returns true if field categoryTreePath is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryTreePath() {
    return this.categoryTreePath != null;
  }

  public void setCategoryTreePathIsSet(boolean value) {
    if (!value) {
      this.categoryTreePath = null;
    }
  }

  /**
   * 商品分类全名包括父类节点名
   */
  public String getCategoryTreePathName() {
    return this.categoryTreePathName;
  }

  /**
   * 商品分类全名包括父类节点名
   */
  public ProductDetailVo setCategoryTreePathName(String categoryTreePathName) {
    this.categoryTreePathName = categoryTreePathName;
    return this;
  }

  public void unsetCategoryTreePathName() {
    this.categoryTreePathName = null;
  }

  /** Returns true if field categoryTreePathName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryTreePathName() {
    return this.categoryTreePathName != null;
  }

  public void setCategoryTreePathNameIsSet(boolean value) {
    if (!value) {
      this.categoryTreePathName = null;
    }
  }

  /**
   * 是否限购
   */
  public boolean isIsLimit() {
    return this.isLimit;
  }

  /**
   * 是否限购
   */
  public ProductDetailVo setIsLimit(boolean isLimit) {
    this.isLimit = isLimit;
    setIsLimitIsSet(true);
    return this;
  }

  public void unsetIsLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  /** Returns true if field isLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  public void setIsLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMIT_ISSET_ID, value);
  }

  /**
   * 评分
   */
  public int getPoint() {
    return this.point;
  }

  /**
   * 评分
   */
  public ProductDetailVo setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  /**
   * 简介
   */
  public String getBriefIntroduction() {
    return this.briefIntroduction;
  }

  /**
   * 简介
   */
  public ProductDetailVo setBriefIntroduction(String briefIntroduction) {
    this.briefIntroduction = briefIntroduction;
    return this;
  }

  public void unsetBriefIntroduction() {
    this.briefIntroduction = null;
  }

  /** Returns true if field briefIntroduction is set (has been assigned a value) and false otherwise */
  public boolean isSetBriefIntroduction() {
    return this.briefIntroduction != null;
  }

  public void setBriefIntroductionIsSet(boolean value) {
    if (!value) {
      this.briefIntroduction = null;
    }
  }

  /**
   * 介绍
   */
  public String getIntroduction() {
    return this.introduction;
  }

  /**
   * 介绍
   */
  public ProductDetailVo setIntroduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  /**
   * 商品须知
   */
  public String getBuyKnow() {
    return this.buyKnow;
  }

  /**
   * 商品须知
   */
  public ProductDetailVo setBuyKnow(String buyKnow) {
    this.buyKnow = buyKnow;
    return this;
  }

  public void unsetBuyKnow() {
    this.buyKnow = null;
  }

  /** Returns true if field buyKnow is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyKnow() {
    return this.buyKnow != null;
  }

  public void setBuyKnowIsSet(boolean value) {
    if (!value) {
      this.buyKnow = null;
    }
  }

  /**
   * 商品审核状态 ("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public String getAuditState() {
    return this.auditState;
  }

  /**
   * 商品审核状态 ("0待审核",1审核通过,2审核不通过,3未提交)
   */
  public ProductDetailVo setAuditState(String auditState) {
    this.auditState = auditState;
    return this;
  }

  public void unsetAuditState() {
    this.auditState = null;
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return this.auditState != null;
  }

  public void setAuditStateIsSet(boolean value) {
    if (!value) {
      this.auditState = null;
    }
  }

  /**
   * 商品审核状态对应的名称 ("审核中","审核通过","审核不通过","未提交","审核通过(更新中)","审核通过(更新审核未通过)")
   */
  public String getAuditStateName() {
    return this.auditStateName;
  }

  /**
   * 商品审核状态对应的名称 ("审核中","审核通过","审核不通过","未提交","审核通过(更新中)","审核通过(更新审核未通过)")
   */
  public ProductDetailVo setAuditStateName(String auditStateName) {
    this.auditStateName = auditStateName;
    return this;
  }

  public void unsetAuditStateName() {
    this.auditStateName = null;
  }

  /** Returns true if field auditStateName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditStateName() {
    return this.auditStateName != null;
  }

  public void setAuditStateNameIsSet(boolean value) {
    if (!value) {
      this.auditStateName = null;
    }
  }

  /**
   * 用户收藏数
   */
  public int getStoreCount() {
    return this.storeCount;
  }

  /**
   * 用户收藏数
   */
  public ProductDetailVo setStoreCount(int storeCount) {
    this.storeCount = storeCount;
    setStoreCountIsSet(true);
    return this;
  }

  public void unsetStoreCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORECOUNT_ISSET_ID);
  }

  /** Returns true if field storeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreCount() {
    return EncodingUtils.testBit(__isset_bitfield, __STORECOUNT_ISSET_ID);
  }

  public void setStoreCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORECOUNT_ISSET_ID, value);
  }

  /**
   * 销售期开始
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 销售期开始
   */
  public ProductDetailVo setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 销售期结束
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 销售期结束
   */
  public ProductDetailVo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 运费
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费
   */
  public ProductDetailVo setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 销售券有效起始日
   */
  public long getExpireStartTime() {
    return this.expireStartTime;
  }

  /**
   * 销售券有效起始日
   */
  public ProductDetailVo setExpireStartTime(long expireStartTime) {
    this.expireStartTime = expireStartTime;
    setExpireStartTimeIsSet(true);
    return this;
  }

  public void unsetExpireStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  /** Returns true if field expireStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  public void setExpireStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID, value);
  }

  /**
   * 销售券有效结束日
   */
  public long getExpireEndTime() {
    return this.expireEndTime;
  }

  /**
   * 销售券有效结束日
   */
  public ProductDetailVo setExpireEndTime(long expireEndTime) {
    this.expireEndTime = expireEndTime;
    setExpireEndTimeIsSet(true);
    return this;
  }

  public void unsetExpireEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  /** Returns true if field expireEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  public void setExpireEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID, value);
  }

  /**
   * 下架时间
   */
  public long getDownTime() {
    return this.downTime;
  }

  /**
   * 下架时间
   */
  public ProductDetailVo setDownTime(long downTime) {
    this.downTime = downTime;
    setDownTimeIsSet(true);
    return this;
  }

  public void unsetDownTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNTIME_ISSET_ID);
  }

  /** Returns true if field downTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDownTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNTIME_ISSET_ID);
  }

  public void setDownTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNTIME_ISSET_ID, value);
  }

  /**
   * 审核时间
   */
  public long getAuditTime() {
    return this.auditTime;
  }

  /**
   * 审核时间
   */
  public ProductDetailVo setAuditTime(long auditTime) {
    this.auditTime = auditTime;
    setAuditTimeIsSet(true);
    return this;
  }

  public void unsetAuditTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITTIME_ISSET_ID);
  }

  /** Returns true if field auditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITTIME_ISSET_ID);
  }

  public void setAuditTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITTIME_ISSET_ID, value);
  }

  /**
   * 审核备注
   */
  public String getAuditComment() {
    return this.auditComment;
  }

  /**
   * 审核备注
   */
  public ProductDetailVo setAuditComment(String auditComment) {
    this.auditComment = auditComment;
    return this;
  }

  public void unsetAuditComment() {
    this.auditComment = null;
  }

  /** Returns true if field auditComment is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditComment() {
    return this.auditComment != null;
  }

  public void setAuditCommentIsSet(boolean value) {
    if (!value) {
      this.auditComment = null;
    }
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public String getIsSeckill() {
    return this.isSeckill;
  }

  /**
   * 是否秒杀 0非秒杀,1秒杀,2秒杀未上架
   */
  public ProductDetailVo setIsSeckill(String isSeckill) {
    this.isSeckill = isSeckill;
    return this;
  }

  public void unsetIsSeckill() {
    this.isSeckill = null;
  }

  /** Returns true if field isSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeckill() {
    return this.isSeckill != null;
  }

  public void setIsSeckillIsSet(boolean value) {
    if (!value) {
      this.isSeckill = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public ProductDetailVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 机构名称
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 机构名称
   */
  public ProductDetailVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * VIP价
   */
  public double getVipPrice() {
    return this.vipPrice;
  }

  /**
   * VIP价
   */
  public ProductDetailVo setVipPrice(double vipPrice) {
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
    return this;
  }

  public void unsetVipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  /** Returns true if field vipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  public void setVipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICE_ISSET_ID, value);
  }

  /**
   * 客户端名称
   */
  public String getClientName() {
    return this.clientName;
  }

  /**
   * 客户端名称
   */
  public ProductDetailVo setClientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 二维码地址
   */
  public String getCodeUrl() {
    return this.codeUrl;
  }

  /**
   * 二维码地址
   */
  public ProductDetailVo setCodeUrl(String codeUrl) {
    this.codeUrl = codeUrl;
    return this;
  }

  public void unsetCodeUrl() {
    this.codeUrl = null;
  }

  /** Returns true if field codeUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeUrl() {
    return this.codeUrl != null;
  }

  public void setCodeUrlIsSet(boolean value) {
    if (!value) {
      this.codeUrl = null;
    }
  }

  /**
   * 商品限购信息
   */
  public ProductBuyLimitVo getBuyLimit() {
    return this.buyLimit;
  }

  /**
   * 商品限购信息
   */
  public ProductDetailVo setBuyLimit(ProductBuyLimitVo buyLimit) {
    this.buyLimit = buyLimit;
    return this;
  }

  public void unsetBuyLimit() {
    this.buyLimit = null;
  }

  /** Returns true if field buyLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyLimit() {
    return this.buyLimit != null;
  }

  public void setBuyLimitIsSet(boolean value) {
    if (!value) {
      this.buyLimit = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<ProductImageVo> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(ProductImageVo elem) {
    if (this.images == null) {
      this.images = new ArrayList<ProductImageVo>();
    }
    this.images.add(elem);
  }

  /**
   * 商品图片列表
   */
  public List<ProductImageVo> getImages() {
    return this.images;
  }

  /**
   * 商品图片列表
   */
  public ProductDetailVo setImages(List<ProductImageVo> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case IS_MARKETABLE:
      if (value == null) {
        unsetIsMarketable();
      } else {
        setIsMarketable((String)value);
      }
      break;

    case RACK_TIME:
      if (value == null) {
        unsetRackTime();
      } else {
        setRackTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FULL_NAME:
      if (value == null) {
        unsetFullName();
      } else {
        setFullName((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((Double)value);
      }
      break;

    case MARKET_PRICE:
      if (value == null) {
        unsetMarketPrice();
      } else {
        setMarketPrice((Double)value);
      }
      break;

    case STORE:
      if (value == null) {
        unsetStore();
      } else {
        setStore((Integer)value);
      }
      break;

    case SELL_COUNT:
      if (value == null) {
        unsetSellCount();
      } else {
        setSellCount((Integer)value);
      }
      break;

    case PRODUCT_CATEGORY_ID:
      if (value == null) {
        unsetProductCategoryId();
      } else {
        setProductCategoryId((Long)value);
      }
      break;

    case PRODUCT_CATEGORY_NAME:
      if (value == null) {
        unsetProductCategoryName();
      } else {
        setProductCategoryName((String)value);
      }
      break;

    case CATEGORY_TREE_PATH:
      if (value == null) {
        unsetCategoryTreePath();
      } else {
        setCategoryTreePath((String)value);
      }
      break;

    case CATEGORY_TREE_PATH_NAME:
      if (value == null) {
        unsetCategoryTreePathName();
      } else {
        setCategoryTreePathName((String)value);
      }
      break;

    case IS_LIMIT:
      if (value == null) {
        unsetIsLimit();
      } else {
        setIsLimit((Boolean)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case BRIEF_INTRODUCTION:
      if (value == null) {
        unsetBriefIntroduction();
      } else {
        setBriefIntroduction((String)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case BUY_KNOW:
      if (value == null) {
        unsetBuyKnow();
      } else {
        setBuyKnow((String)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((String)value);
      }
      break;

    case AUDIT_STATE_NAME:
      if (value == null) {
        unsetAuditStateName();
      } else {
        setAuditStateName((String)value);
      }
      break;

    case STORE_COUNT:
      if (value == null) {
        unsetStoreCount();
      } else {
        setStoreCount((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case EXPIRE_START_TIME:
      if (value == null) {
        unsetExpireStartTime();
      } else {
        setExpireStartTime((Long)value);
      }
      break;

    case EXPIRE_END_TIME:
      if (value == null) {
        unsetExpireEndTime();
      } else {
        setExpireEndTime((Long)value);
      }
      break;

    case DOWN_TIME:
      if (value == null) {
        unsetDownTime();
      } else {
        setDownTime((Long)value);
      }
      break;

    case AUDIT_TIME:
      if (value == null) {
        unsetAuditTime();
      } else {
        setAuditTime((Long)value);
      }
      break;

    case AUDIT_COMMENT:
      if (value == null) {
        unsetAuditComment();
      } else {
        setAuditComment((String)value);
      }
      break;

    case IS_SECKILL:
      if (value == null) {
        unsetIsSeckill();
      } else {
        setIsSeckill((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case VIP_PRICE:
      if (value == null) {
        unsetVipPrice();
      } else {
        setVipPrice((Double)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((String)value);
      }
      break;

    case CODE_URL:
      if (value == null) {
        unsetCodeUrl();
      } else {
        setCodeUrl((String)value);
      }
      break;

    case BUY_LIMIT:
      if (value == null) {
        unsetBuyLimit();
      } else {
        setBuyLimit((ProductBuyLimitVo)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<ProductImageVo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MERCHANT_ID:
      return getMerchantId();

    case ORG_CODE:
      return getOrgCode();

    case PRODUCT_ID:
      return getProductId();

    case IS_MARKETABLE:
      return getIsMarketable();

    case RACK_TIME:
      return Long.valueOf(getRackTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case TYPE:
      return getType();

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case NAME:
      return getName();

    case FULL_NAME:
      return getFullName();

    case PRICE:
      return Double.valueOf(getPrice());

    case COST:
      return Double.valueOf(getCost());

    case MARKET_PRICE:
      return Double.valueOf(getMarketPrice());

    case STORE:
      return Integer.valueOf(getStore());

    case SELL_COUNT:
      return Integer.valueOf(getSellCount());

    case PRODUCT_CATEGORY_ID:
      return Long.valueOf(getProductCategoryId());

    case PRODUCT_CATEGORY_NAME:
      return getProductCategoryName();

    case CATEGORY_TREE_PATH:
      return getCategoryTreePath();

    case CATEGORY_TREE_PATH_NAME:
      return getCategoryTreePathName();

    case IS_LIMIT:
      return Boolean.valueOf(isIsLimit());

    case POINT:
      return Integer.valueOf(getPoint());

    case BRIEF_INTRODUCTION:
      return getBriefIntroduction();

    case INTRODUCTION:
      return getIntroduction();

    case BUY_KNOW:
      return getBuyKnow();

    case AUDIT_STATE:
      return getAuditState();

    case AUDIT_STATE_NAME:
      return getAuditStateName();

    case STORE_COUNT:
      return Integer.valueOf(getStoreCount());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case EXPIRE_START_TIME:
      return Long.valueOf(getExpireStartTime());

    case EXPIRE_END_TIME:
      return Long.valueOf(getExpireEndTime());

    case DOWN_TIME:
      return Long.valueOf(getDownTime());

    case AUDIT_TIME:
      return Long.valueOf(getAuditTime());

    case AUDIT_COMMENT:
      return getAuditComment();

    case IS_SECKILL:
      return getIsSeckill();

    case MERCHANT_NAME:
      return getMerchantName();

    case ORG_NAME:
      return getOrgName();

    case VIP_PRICE:
      return Double.valueOf(getVipPrice());

    case CLIENT_NAME:
      return getClientName();

    case CODE_URL:
      return getCodeUrl();

    case BUY_LIMIT:
      return getBuyLimit();

    case IMAGES:
      return getImages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case ORG_CODE:
      return isSetOrgCode();
    case PRODUCT_ID:
      return isSetProductId();
    case IS_MARKETABLE:
      return isSetIsMarketable();
    case RACK_TIME:
      return isSetRackTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case TYPE:
      return isSetType();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case NAME:
      return isSetName();
    case FULL_NAME:
      return isSetFullName();
    case PRICE:
      return isSetPrice();
    case COST:
      return isSetCost();
    case MARKET_PRICE:
      return isSetMarketPrice();
    case STORE:
      return isSetStore();
    case SELL_COUNT:
      return isSetSellCount();
    case PRODUCT_CATEGORY_ID:
      return isSetProductCategoryId();
    case PRODUCT_CATEGORY_NAME:
      return isSetProductCategoryName();
    case CATEGORY_TREE_PATH:
      return isSetCategoryTreePath();
    case CATEGORY_TREE_PATH_NAME:
      return isSetCategoryTreePathName();
    case IS_LIMIT:
      return isSetIsLimit();
    case POINT:
      return isSetPoint();
    case BRIEF_INTRODUCTION:
      return isSetBriefIntroduction();
    case INTRODUCTION:
      return isSetIntroduction();
    case BUY_KNOW:
      return isSetBuyKnow();
    case AUDIT_STATE:
      return isSetAuditState();
    case AUDIT_STATE_NAME:
      return isSetAuditStateName();
    case STORE_COUNT:
      return isSetStoreCount();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case EXPIRE_START_TIME:
      return isSetExpireStartTime();
    case EXPIRE_END_TIME:
      return isSetExpireEndTime();
    case DOWN_TIME:
      return isSetDownTime();
    case AUDIT_TIME:
      return isSetAuditTime();
    case AUDIT_COMMENT:
      return isSetAuditComment();
    case IS_SECKILL:
      return isSetIsSeckill();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case ORG_NAME:
      return isSetOrgName();
    case VIP_PRICE:
      return isSetVipPrice();
    case CLIENT_NAME:
      return isSetClientName();
    case CODE_URL:
      return isSetCodeUrl();
    case BUY_LIMIT:
      return isSetBuyLimit();
    case IMAGES:
      return isSetImages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductDetailVo)
      return this.equals((ProductDetailVo)that);
    return false;
  }

  public boolean equals(ProductDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_isMarketable = true && this.isSetIsMarketable();
    boolean that_present_isMarketable = true && that.isSetIsMarketable();
    if (this_present_isMarketable || that_present_isMarketable) {
      if (!(this_present_isMarketable && that_present_isMarketable))
        return false;
      if (!this.isMarketable.equals(that.isMarketable))
        return false;
    }

    boolean this_present_rackTime = true;
    boolean that_present_rackTime = true;
    if (this_present_rackTime || that_present_rackTime) {
      if (!(this_present_rackTime && that_present_rackTime))
        return false;
      if (this.rackTime != that.rackTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fullName = true && this.isSetFullName();
    boolean that_present_fullName = true && that.isSetFullName();
    if (this_present_fullName || that_present_fullName) {
      if (!(this_present_fullName && that_present_fullName))
        return false;
      if (!this.fullName.equals(that.fullName))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_marketPrice = true;
    boolean that_present_marketPrice = true;
    if (this_present_marketPrice || that_present_marketPrice) {
      if (!(this_present_marketPrice && that_present_marketPrice))
        return false;
      if (this.marketPrice != that.marketPrice)
        return false;
    }

    boolean this_present_store = true;
    boolean that_present_store = true;
    if (this_present_store || that_present_store) {
      if (!(this_present_store && that_present_store))
        return false;
      if (this.store != that.store)
        return false;
    }

    boolean this_present_sellCount = true;
    boolean that_present_sellCount = true;
    if (this_present_sellCount || that_present_sellCount) {
      if (!(this_present_sellCount && that_present_sellCount))
        return false;
      if (this.sellCount != that.sellCount)
        return false;
    }

    boolean this_present_productCategoryId = true;
    boolean that_present_productCategoryId = true;
    if (this_present_productCategoryId || that_present_productCategoryId) {
      if (!(this_present_productCategoryId && that_present_productCategoryId))
        return false;
      if (this.productCategoryId != that.productCategoryId)
        return false;
    }

    boolean this_present_productCategoryName = true && this.isSetProductCategoryName();
    boolean that_present_productCategoryName = true && that.isSetProductCategoryName();
    if (this_present_productCategoryName || that_present_productCategoryName) {
      if (!(this_present_productCategoryName && that_present_productCategoryName))
        return false;
      if (!this.productCategoryName.equals(that.productCategoryName))
        return false;
    }

    boolean this_present_categoryTreePath = true && this.isSetCategoryTreePath();
    boolean that_present_categoryTreePath = true && that.isSetCategoryTreePath();
    if (this_present_categoryTreePath || that_present_categoryTreePath) {
      if (!(this_present_categoryTreePath && that_present_categoryTreePath))
        return false;
      if (!this.categoryTreePath.equals(that.categoryTreePath))
        return false;
    }

    boolean this_present_categoryTreePathName = true && this.isSetCategoryTreePathName();
    boolean that_present_categoryTreePathName = true && that.isSetCategoryTreePathName();
    if (this_present_categoryTreePathName || that_present_categoryTreePathName) {
      if (!(this_present_categoryTreePathName && that_present_categoryTreePathName))
        return false;
      if (!this.categoryTreePathName.equals(that.categoryTreePathName))
        return false;
    }

    boolean this_present_isLimit = true;
    boolean that_present_isLimit = true;
    if (this_present_isLimit || that_present_isLimit) {
      if (!(this_present_isLimit && that_present_isLimit))
        return false;
      if (this.isLimit != that.isLimit)
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_briefIntroduction = true && this.isSetBriefIntroduction();
    boolean that_present_briefIntroduction = true && that.isSetBriefIntroduction();
    if (this_present_briefIntroduction || that_present_briefIntroduction) {
      if (!(this_present_briefIntroduction && that_present_briefIntroduction))
        return false;
      if (!this.briefIntroduction.equals(that.briefIntroduction))
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_buyKnow = true && this.isSetBuyKnow();
    boolean that_present_buyKnow = true && that.isSetBuyKnow();
    if (this_present_buyKnow || that_present_buyKnow) {
      if (!(this_present_buyKnow && that_present_buyKnow))
        return false;
      if (!this.buyKnow.equals(that.buyKnow))
        return false;
    }

    boolean this_present_auditState = true && this.isSetAuditState();
    boolean that_present_auditState = true && that.isSetAuditState();
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (!this.auditState.equals(that.auditState))
        return false;
    }

    boolean this_present_auditStateName = true && this.isSetAuditStateName();
    boolean that_present_auditStateName = true && that.isSetAuditStateName();
    if (this_present_auditStateName || that_present_auditStateName) {
      if (!(this_present_auditStateName && that_present_auditStateName))
        return false;
      if (!this.auditStateName.equals(that.auditStateName))
        return false;
    }

    boolean this_present_storeCount = true;
    boolean that_present_storeCount = true;
    if (this_present_storeCount || that_present_storeCount) {
      if (!(this_present_storeCount && that_present_storeCount))
        return false;
      if (this.storeCount != that.storeCount)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_expireStartTime = true;
    boolean that_present_expireStartTime = true;
    if (this_present_expireStartTime || that_present_expireStartTime) {
      if (!(this_present_expireStartTime && that_present_expireStartTime))
        return false;
      if (this.expireStartTime != that.expireStartTime)
        return false;
    }

    boolean this_present_expireEndTime = true;
    boolean that_present_expireEndTime = true;
    if (this_present_expireEndTime || that_present_expireEndTime) {
      if (!(this_present_expireEndTime && that_present_expireEndTime))
        return false;
      if (this.expireEndTime != that.expireEndTime)
        return false;
    }

    boolean this_present_downTime = true;
    boolean that_present_downTime = true;
    if (this_present_downTime || that_present_downTime) {
      if (!(this_present_downTime && that_present_downTime))
        return false;
      if (this.downTime != that.downTime)
        return false;
    }

    boolean this_present_auditTime = true;
    boolean that_present_auditTime = true;
    if (this_present_auditTime || that_present_auditTime) {
      if (!(this_present_auditTime && that_present_auditTime))
        return false;
      if (this.auditTime != that.auditTime)
        return false;
    }

    boolean this_present_auditComment = true && this.isSetAuditComment();
    boolean that_present_auditComment = true && that.isSetAuditComment();
    if (this_present_auditComment || that_present_auditComment) {
      if (!(this_present_auditComment && that_present_auditComment))
        return false;
      if (!this.auditComment.equals(that.auditComment))
        return false;
    }

    boolean this_present_isSeckill = true && this.isSetIsSeckill();
    boolean that_present_isSeckill = true && that.isSetIsSeckill();
    if (this_present_isSeckill || that_present_isSeckill) {
      if (!(this_present_isSeckill && that_present_isSeckill))
        return false;
      if (!this.isSeckill.equals(that.isSeckill))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_vipPrice = true;
    boolean that_present_vipPrice = true;
    if (this_present_vipPrice || that_present_vipPrice) {
      if (!(this_present_vipPrice && that_present_vipPrice))
        return false;
      if (this.vipPrice != that.vipPrice)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_codeUrl = true && this.isSetCodeUrl();
    boolean that_present_codeUrl = true && that.isSetCodeUrl();
    if (this_present_codeUrl || that_present_codeUrl) {
      if (!(this_present_codeUrl && that_present_codeUrl))
        return false;
      if (!this.codeUrl.equals(that.codeUrl))
        return false;
    }

    boolean this_present_buyLimit = true && this.isSetBuyLimit();
    boolean that_present_buyLimit = true && that.isSetBuyLimit();
    if (this_present_buyLimit || that_present_buyLimit) {
      if (!(this_present_buyLimit && that_present_buyLimit))
        return false;
      if (!this.buyLimit.equals(that.buyLimit))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_isMarketable = true && (isSetIsMarketable());
    list.add(present_isMarketable);
    if (present_isMarketable)
      list.add(isMarketable);

    boolean present_rackTime = true;
    list.add(present_rackTime);
    if (present_rackTime)
      list.add(rackTime);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_fullName = true && (isSetFullName());
    list.add(present_fullName);
    if (present_fullName)
      list.add(fullName);

    boolean present_price = true;
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_cost = true;
    list.add(present_cost);
    if (present_cost)
      list.add(cost);

    boolean present_marketPrice = true;
    list.add(present_marketPrice);
    if (present_marketPrice)
      list.add(marketPrice);

    boolean present_store = true;
    list.add(present_store);
    if (present_store)
      list.add(store);

    boolean present_sellCount = true;
    list.add(present_sellCount);
    if (present_sellCount)
      list.add(sellCount);

    boolean present_productCategoryId = true;
    list.add(present_productCategoryId);
    if (present_productCategoryId)
      list.add(productCategoryId);

    boolean present_productCategoryName = true && (isSetProductCategoryName());
    list.add(present_productCategoryName);
    if (present_productCategoryName)
      list.add(productCategoryName);

    boolean present_categoryTreePath = true && (isSetCategoryTreePath());
    list.add(present_categoryTreePath);
    if (present_categoryTreePath)
      list.add(categoryTreePath);

    boolean present_categoryTreePathName = true && (isSetCategoryTreePathName());
    list.add(present_categoryTreePathName);
    if (present_categoryTreePathName)
      list.add(categoryTreePathName);

    boolean present_isLimit = true;
    list.add(present_isLimit);
    if (present_isLimit)
      list.add(isLimit);

    boolean present_point = true;
    list.add(present_point);
    if (present_point)
      list.add(point);

    boolean present_briefIntroduction = true && (isSetBriefIntroduction());
    list.add(present_briefIntroduction);
    if (present_briefIntroduction)
      list.add(briefIntroduction);

    boolean present_introduction = true && (isSetIntroduction());
    list.add(present_introduction);
    if (present_introduction)
      list.add(introduction);

    boolean present_buyKnow = true && (isSetBuyKnow());
    list.add(present_buyKnow);
    if (present_buyKnow)
      list.add(buyKnow);

    boolean present_auditState = true && (isSetAuditState());
    list.add(present_auditState);
    if (present_auditState)
      list.add(auditState);

    boolean present_auditStateName = true && (isSetAuditStateName());
    list.add(present_auditStateName);
    if (present_auditStateName)
      list.add(auditStateName);

    boolean present_storeCount = true;
    list.add(present_storeCount);
    if (present_storeCount)
      list.add(storeCount);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_expireStartTime = true;
    list.add(present_expireStartTime);
    if (present_expireStartTime)
      list.add(expireStartTime);

    boolean present_expireEndTime = true;
    list.add(present_expireEndTime);
    if (present_expireEndTime)
      list.add(expireEndTime);

    boolean present_downTime = true;
    list.add(present_downTime);
    if (present_downTime)
      list.add(downTime);

    boolean present_auditTime = true;
    list.add(present_auditTime);
    if (present_auditTime)
      list.add(auditTime);

    boolean present_auditComment = true && (isSetAuditComment());
    list.add(present_auditComment);
    if (present_auditComment)
      list.add(auditComment);

    boolean present_isSeckill = true && (isSetIsSeckill());
    list.add(present_isSeckill);
    if (present_isSeckill)
      list.add(isSeckill);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_vipPrice = true;
    list.add(present_vipPrice);
    if (present_vipPrice)
      list.add(vipPrice);

    boolean present_clientName = true && (isSetClientName());
    list.add(present_clientName);
    if (present_clientName)
      list.add(clientName);

    boolean present_codeUrl = true && (isSetCodeUrl());
    list.add(present_codeUrl);
    if (present_codeUrl)
      list.add(codeUrl);

    boolean present_buyLimit = true && (isSetBuyLimit());
    list.add(present_buyLimit);
    if (present_buyLimit)
      list.add(buyLimit);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMarketable()).compareTo(other.isSetIsMarketable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMarketable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMarketable, other.isMarketable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRackTime()).compareTo(other.isSetRackTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rackTime, other.rackTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullName()).compareTo(other.isSetFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullName, other.fullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketPrice()).compareTo(other.isSetMarketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketPrice, other.marketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore()).compareTo(other.isSetStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.store, other.store);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellCount()).compareTo(other.isSetSellCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellCount, other.sellCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategoryId()).compareTo(other.isSetProductCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryId, other.productCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategoryName()).compareTo(other.isSetProductCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryName, other.productCategoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryTreePath()).compareTo(other.isSetCategoryTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryTreePath, other.categoryTreePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryTreePathName()).compareTo(other.isSetCategoryTreePathName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryTreePathName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryTreePathName, other.categoryTreePathName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimit()).compareTo(other.isSetIsLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimit, other.isLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBriefIntroduction()).compareTo(other.isSetBriefIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBriefIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.briefIntroduction, other.briefIntroduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(other.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, other.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyKnow()).compareTo(other.isSetBuyKnow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyKnow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyKnow, other.buyKnow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditStateName()).compareTo(other.isSetAuditStateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditStateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStateName, other.auditStateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreCount()).compareTo(other.isSetStoreCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeCount, other.storeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireStartTime()).compareTo(other.isSetExpireStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireStartTime, other.expireStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireEndTime()).compareTo(other.isSetExpireEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireEndTime, other.expireEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownTime()).compareTo(other.isSetDownTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downTime, other.downTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditTime()).compareTo(other.isSetAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTime, other.auditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditComment()).compareTo(other.isSetAuditComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditComment, other.auditComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeckill()).compareTo(other.isSetIsSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeckill, other.isSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPrice()).compareTo(other.isSetVipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPrice, other.vipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodeUrl()).compareTo(other.isSetCodeUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeUrl, other.codeUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyLimit()).compareTo(other.isSetBuyLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyLimit, other.buyLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductDetailVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMarketable:");
    if (this.isMarketable == null) {
      sb.append("null");
    } else {
      sb.append(this.isMarketable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rackTime:");
    sb.append(this.rackTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullName:");
    if (this.fullName == null) {
      sb.append("null");
    } else {
      sb.append(this.fullName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketPrice:");
    sb.append(this.marketPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("store:");
    sb.append(this.store);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellCount:");
    sb.append(this.sellCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategoryId:");
    sb.append(this.productCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategoryName:");
    if (this.productCategoryName == null) {
      sb.append("null");
    } else {
      sb.append(this.productCategoryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryTreePath:");
    if (this.categoryTreePath == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryTreePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryTreePathName:");
    if (this.categoryTreePathName == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryTreePathName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLimit:");
    sb.append(this.isLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    if (!first) sb.append(", ");
    sb.append("briefIntroduction:");
    if (this.briefIntroduction == null) {
      sb.append("null");
    } else {
      sb.append(this.briefIntroduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduction:");
    if (this.introduction == null) {
      sb.append("null");
    } else {
      sb.append(this.introduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyKnow:");
    if (this.buyKnow == null) {
      sb.append("null");
    } else {
      sb.append(this.buyKnow);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditState:");
    if (this.auditState == null) {
      sb.append("null");
    } else {
      sb.append(this.auditState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditStateName:");
    if (this.auditStateName == null) {
      sb.append("null");
    } else {
      sb.append(this.auditStateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeCount:");
    sb.append(this.storeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireStartTime:");
    sb.append(this.expireStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireEndTime:");
    sb.append(this.expireEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downTime:");
    sb.append(this.downTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditTime:");
    sb.append(this.auditTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditComment:");
    if (this.auditComment == null) {
      sb.append("null");
    } else {
      sb.append(this.auditComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeckill:");
    if (this.isSeckill == null) {
      sb.append("null");
    } else {
      sb.append(this.isSeckill);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipPrice:");
    sb.append(this.vipPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("codeUrl:");
    if (this.codeUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.codeUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyLimit:");
    if (this.buyLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.buyLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (buyLimit != null) {
      buyLimit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductDetailVoStandardSchemeFactory implements SchemeFactory {
    public ProductDetailVoStandardScheme getScheme() {
      return new ProductDetailVoStandardScheme();
    }
  }

  private static class ProductDetailVoStandardScheme extends StandardScheme<ProductDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_MARKETABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMarketable = iprot.readString();
              struct.setIsMarketableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RACK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rackTime = iprot.readI64();
              struct.setRackTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullName = iprot.readString();
              struct.setFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MARKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marketPrice = iprot.readDouble();
              struct.setMarketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.store = iprot.readI32();
              struct.setStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SELL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellCount = iprot.readI32();
              struct.setSellCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.productCategoryId = iprot.readI64();
              struct.setProductCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PRODUCT_CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCategoryName = iprot.readString();
              struct.setProductCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CATEGORY_TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryTreePath = iprot.readString();
              struct.setCategoryTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CATEGORY_TREE_PATH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryTreePathName = iprot.readString();
              struct.setCategoryTreePathNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimit = iprot.readBool();
              struct.setIsLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BRIEF_INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.briefIntroduction = iprot.readString();
              struct.setBriefIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduction = iprot.readString();
              struct.setIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BUY_KNOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyKnow = iprot.readString();
              struct.setBuyKnowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditState = iprot.readString();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // AUDIT_STATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditStateName = iprot.readString();
              struct.setAuditStateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // STORE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storeCount = iprot.readI32();
              struct.setStoreCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // EXPIRE_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireStartTime = iprot.readI64();
              struct.setExpireStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // EXPIRE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireEndTime = iprot.readI64();
              struct.setExpireEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DOWN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.downTime = iprot.readI64();
              struct.setDownTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditTime = iprot.readI64();
              struct.setAuditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // AUDIT_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditComment = iprot.readString();
              struct.setAuditCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // IS_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isSeckill = iprot.readString();
              struct.setIsSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // VIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipPrice = iprot.readDouble();
              struct.setVipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CODE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codeUrl = iprot.readString();
              struct.setCodeUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // BUY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buyLimit = new ProductBuyLimitVo();
              struct.buyLimit.read(iprot);
              struct.setBuyLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.images = new ArrayList<ProductImageVo>(_list256.size);
                ProductImageVo _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = new ProductImageVo();
                  _elem257.read(iprot);
                  struct.images.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.isMarketable != null) {
        oprot.writeFieldBegin(IS_MARKETABLE_FIELD_DESC);
        oprot.writeString(struct.isMarketable);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RACK_TIME_FIELD_DESC);
      oprot.writeI64(struct.rackTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.fullName != null) {
        oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
        oprot.writeString(struct.fullName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARKET_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.marketPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORE_FIELD_DESC);
      oprot.writeI32(struct.store);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.sellCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.productCategoryId);
      oprot.writeFieldEnd();
      if (struct.productCategoryName != null) {
        oprot.writeFieldBegin(PRODUCT_CATEGORY_NAME_FIELD_DESC);
        oprot.writeString(struct.productCategoryName);
        oprot.writeFieldEnd();
      }
      if (struct.categoryTreePath != null) {
        oprot.writeFieldBegin(CATEGORY_TREE_PATH_FIELD_DESC);
        oprot.writeString(struct.categoryTreePath);
        oprot.writeFieldEnd();
      }
      if (struct.categoryTreePathName != null) {
        oprot.writeFieldBegin(CATEGORY_TREE_PATH_NAME_FIELD_DESC);
        oprot.writeString(struct.categoryTreePathName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LIMIT_FIELD_DESC);
      oprot.writeBool(struct.isLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeI32(struct.point);
      oprot.writeFieldEnd();
      if (struct.briefIntroduction != null) {
        oprot.writeFieldBegin(BRIEF_INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.briefIntroduction);
        oprot.writeFieldEnd();
      }
      if (struct.introduction != null) {
        oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.introduction);
        oprot.writeFieldEnd();
      }
      if (struct.buyKnow != null) {
        oprot.writeFieldBegin(BUY_KNOW_FIELD_DESC);
        oprot.writeString(struct.buyKnow);
        oprot.writeFieldEnd();
      }
      if (struct.auditState != null) {
        oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
        oprot.writeString(struct.auditState);
        oprot.writeFieldEnd();
      }
      if (struct.auditStateName != null) {
        oprot.writeFieldBegin(AUDIT_STATE_NAME_FIELD_DESC);
        oprot.writeString(struct.auditStateName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STORE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.storeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWN_TIME_FIELD_DESC);
      oprot.writeI64(struct.downTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.auditTime);
      oprot.writeFieldEnd();
      if (struct.auditComment != null) {
        oprot.writeFieldBegin(AUDIT_COMMENT_FIELD_DESC);
        oprot.writeString(struct.auditComment);
        oprot.writeFieldEnd();
      }
      if (struct.isSeckill != null) {
        oprot.writeFieldBegin(IS_SECKILL_FIELD_DESC);
        oprot.writeString(struct.isSeckill);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.vipPrice);
      oprot.writeFieldEnd();
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.codeUrl != null) {
        oprot.writeFieldBegin(CODE_URL_FIELD_DESC);
        oprot.writeString(struct.codeUrl);
        oprot.writeFieldEnd();
      }
      if (struct.buyLimit != null) {
        oprot.writeFieldBegin(BUY_LIMIT_FIELD_DESC);
        struct.buyLimit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
          for (ProductImageVo _iter259 : struct.images)
          {
            _iter259.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductDetailVoTupleSchemeFactory implements SchemeFactory {
    public ProductDetailVoTupleScheme getScheme() {
      return new ProductDetailVoTupleScheme();
    }
  }

  private static class ProductDetailVoTupleScheme extends TupleScheme<ProductDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(2);
      }
      if (struct.isSetProductId()) {
        optionals.set(3);
      }
      if (struct.isSetIsMarketable()) {
        optionals.set(4);
      }
      if (struct.isSetRackTime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetType()) {
        optionals.set(7);
      }
      if (struct.isSetDeliveryOption()) {
        optionals.set(8);
      }
      if (struct.isSetName()) {
        optionals.set(9);
      }
      if (struct.isSetFullName()) {
        optionals.set(10);
      }
      if (struct.isSetPrice()) {
        optionals.set(11);
      }
      if (struct.isSetCost()) {
        optionals.set(12);
      }
      if (struct.isSetMarketPrice()) {
        optionals.set(13);
      }
      if (struct.isSetStore()) {
        optionals.set(14);
      }
      if (struct.isSetSellCount()) {
        optionals.set(15);
      }
      if (struct.isSetProductCategoryId()) {
        optionals.set(16);
      }
      if (struct.isSetProductCategoryName()) {
        optionals.set(17);
      }
      if (struct.isSetCategoryTreePath()) {
        optionals.set(18);
      }
      if (struct.isSetCategoryTreePathName()) {
        optionals.set(19);
      }
      if (struct.isSetIsLimit()) {
        optionals.set(20);
      }
      if (struct.isSetPoint()) {
        optionals.set(21);
      }
      if (struct.isSetBriefIntroduction()) {
        optionals.set(22);
      }
      if (struct.isSetIntroduction()) {
        optionals.set(23);
      }
      if (struct.isSetBuyKnow()) {
        optionals.set(24);
      }
      if (struct.isSetAuditState()) {
        optionals.set(25);
      }
      if (struct.isSetAuditStateName()) {
        optionals.set(26);
      }
      if (struct.isSetStoreCount()) {
        optionals.set(27);
      }
      if (struct.isSetStartTime()) {
        optionals.set(28);
      }
      if (struct.isSetEndTime()) {
        optionals.set(29);
      }
      if (struct.isSetDeliveryMoney()) {
        optionals.set(30);
      }
      if (struct.isSetExpireStartTime()) {
        optionals.set(31);
      }
      if (struct.isSetExpireEndTime()) {
        optionals.set(32);
      }
      if (struct.isSetDownTime()) {
        optionals.set(33);
      }
      if (struct.isSetAuditTime()) {
        optionals.set(34);
      }
      if (struct.isSetAuditComment()) {
        optionals.set(35);
      }
      if (struct.isSetIsSeckill()) {
        optionals.set(36);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(37);
      }
      if (struct.isSetOrgName()) {
        optionals.set(38);
      }
      if (struct.isSetVipPrice()) {
        optionals.set(39);
      }
      if (struct.isSetClientName()) {
        optionals.set(40);
      }
      if (struct.isSetCodeUrl()) {
        optionals.set(41);
      }
      if (struct.isSetBuyLimit()) {
        optionals.set(42);
      }
      if (struct.isSetImages()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetIsMarketable()) {
        oprot.writeString(struct.isMarketable);
      }
      if (struct.isSetRackTime()) {
        oprot.writeI64(struct.rackTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDeliveryOption()) {
        oprot.writeString(struct.deliveryOption);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFullName()) {
        oprot.writeString(struct.fullName);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeDouble(struct.marketPrice);
      }
      if (struct.isSetStore()) {
        oprot.writeI32(struct.store);
      }
      if (struct.isSetSellCount()) {
        oprot.writeI32(struct.sellCount);
      }
      if (struct.isSetProductCategoryId()) {
        oprot.writeI64(struct.productCategoryId);
      }
      if (struct.isSetProductCategoryName()) {
        oprot.writeString(struct.productCategoryName);
      }
      if (struct.isSetCategoryTreePath()) {
        oprot.writeString(struct.categoryTreePath);
      }
      if (struct.isSetCategoryTreePathName()) {
        oprot.writeString(struct.categoryTreePathName);
      }
      if (struct.isSetIsLimit()) {
        oprot.writeBool(struct.isLimit);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetBriefIntroduction()) {
        oprot.writeString(struct.briefIntroduction);
      }
      if (struct.isSetIntroduction()) {
        oprot.writeString(struct.introduction);
      }
      if (struct.isSetBuyKnow()) {
        oprot.writeString(struct.buyKnow);
      }
      if (struct.isSetAuditState()) {
        oprot.writeString(struct.auditState);
      }
      if (struct.isSetAuditStateName()) {
        oprot.writeString(struct.auditStateName);
      }
      if (struct.isSetStoreCount()) {
        oprot.writeI32(struct.storeCount);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetDeliveryMoney()) {
        oprot.writeDouble(struct.deliveryMoney);
      }
      if (struct.isSetExpireStartTime()) {
        oprot.writeI64(struct.expireStartTime);
      }
      if (struct.isSetExpireEndTime()) {
        oprot.writeI64(struct.expireEndTime);
      }
      if (struct.isSetDownTime()) {
        oprot.writeI64(struct.downTime);
      }
      if (struct.isSetAuditTime()) {
        oprot.writeI64(struct.auditTime);
      }
      if (struct.isSetAuditComment()) {
        oprot.writeString(struct.auditComment);
      }
      if (struct.isSetIsSeckill()) {
        oprot.writeString(struct.isSeckill);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetVipPrice()) {
        oprot.writeDouble(struct.vipPrice);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetCodeUrl()) {
        oprot.writeString(struct.codeUrl);
      }
      if (struct.isSetBuyLimit()) {
        struct.buyLimit.write(oprot);
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (ProductImageVo _iter260 : struct.images)
          {
            _iter260.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isMarketable = iprot.readString();
        struct.setIsMarketableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rackTime = iprot.readI64();
        struct.setRackTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deliveryOption = iprot.readString();
        struct.setDeliveryOptionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fullName = iprot.readString();
        struct.setFullNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
      if (incoming.get(13)) {
        struct.marketPrice = iprot.readDouble();
        struct.setMarketPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.store = iprot.readI32();
        struct.setStoreIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sellCount = iprot.readI32();
        struct.setSellCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productCategoryId = iprot.readI64();
        struct.setProductCategoryIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.productCategoryName = iprot.readString();
        struct.setProductCategoryNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.categoryTreePath = iprot.readString();
        struct.setCategoryTreePathIsSet(true);
      }
      if (incoming.get(19)) {
        struct.categoryTreePathName = iprot.readString();
        struct.setCategoryTreePathNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isLimit = iprot.readBool();
        struct.setIsLimitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(22)) {
        struct.briefIntroduction = iprot.readString();
        struct.setBriefIntroductionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.introduction = iprot.readString();
        struct.setIntroductionIsSet(true);
      }
      if (incoming.get(24)) {
        struct.buyKnow = iprot.readString();
        struct.setBuyKnowIsSet(true);
      }
      if (incoming.get(25)) {
        struct.auditState = iprot.readString();
        struct.setAuditStateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.auditStateName = iprot.readString();
        struct.setAuditStateNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.storeCount = iprot.readI32();
        struct.setStoreCountIsSet(true);
      }
      if (incoming.get(28)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.deliveryMoney = iprot.readDouble();
        struct.setDeliveryMoneyIsSet(true);
      }
      if (incoming.get(31)) {
        struct.expireStartTime = iprot.readI64();
        struct.setExpireStartTimeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.expireEndTime = iprot.readI64();
        struct.setExpireEndTimeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.downTime = iprot.readI64();
        struct.setDownTimeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.auditTime = iprot.readI64();
        struct.setAuditTimeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.auditComment = iprot.readString();
        struct.setAuditCommentIsSet(true);
      }
      if (incoming.get(36)) {
        struct.isSeckill = iprot.readString();
        struct.setIsSeckillIsSet(true);
      }
      if (incoming.get(37)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.vipPrice = iprot.readDouble();
        struct.setVipPriceIsSet(true);
      }
      if (incoming.get(40)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(41)) {
        struct.codeUrl = iprot.readString();
        struct.setCodeUrlIsSet(true);
      }
      if (incoming.get(42)) {
        struct.buyLimit = new ProductBuyLimitVo();
        struct.buyLimit.read(iprot);
        struct.setBuyLimitIsSet(true);
      }
      if (incoming.get(43)) {
        {
          org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.images = new ArrayList<ProductImageVo>(_list261.size);
          ProductImageVo _elem262;
          for (int _i263 = 0; _i263 < _list261.size; ++_i263)
          {
            _elem262 = new ProductImageVo();
            _elem262.read(iprot);
            struct.images.add(_elem262);
          }
        }
        struct.setImagesIsSet(true);
      }
    }
  }

}

