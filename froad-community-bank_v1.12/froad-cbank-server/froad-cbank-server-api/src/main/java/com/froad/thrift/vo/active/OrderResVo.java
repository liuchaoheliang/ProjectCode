/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 订单响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OrderResVo implements org.apache.thrift.TBase<OrderResVo, OrderResVo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderResVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderResVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField GENERAL_SINGLE_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("generalSingleCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField GENERAL_AT_LAST_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("generalAtLastCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VIP_SINGLE_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipSingleCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VIP_AT_LAST_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipAtLastCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderResVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderResVoTupleSchemeFactory());
  }

  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 活动名称
   */
  public String activeName; // required
  /**
   * 活动类型
   */
  public String activeType; // required
  /**
   * 满减金额
   */
  public double cutMoney; // required
  /**
   * 普通单个满减金额
   */
  public double generalSingleCutMoney; // required
  /**
   * 普通最后一个满减金额
   */
  public double generalAtLastCutMoney; // required
  /**
   * VIP单个满减金额
   */
  public double vipSingleCutMoney; // required
  /**
   * VIP最后一个满减金额
   */
  public double vipAtLastCutMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品id
     */
    PRODUCT_ID((short)1, "productId"),
    /**
     * 活动id
     */
    ACTIVE_ID((short)2, "activeId"),
    /**
     * 活动名称
     */
    ACTIVE_NAME((short)3, "activeName"),
    /**
     * 活动类型
     */
    ACTIVE_TYPE((short)4, "activeType"),
    /**
     * 满减金额
     */
    CUT_MONEY((short)5, "cutMoney"),
    /**
     * 普通单个满减金额
     */
    GENERAL_SINGLE_CUT_MONEY((short)6, "generalSingleCutMoney"),
    /**
     * 普通最后一个满减金额
     */
    GENERAL_AT_LAST_CUT_MONEY((short)7, "generalAtLastCutMoney"),
    /**
     * VIP单个满减金额
     */
    VIP_SINGLE_CUT_MONEY((short)8, "vipSingleCutMoney"),
    /**
     * VIP最后一个满减金额
     */
    VIP_AT_LAST_CUT_MONEY((short)9, "vipAtLastCutMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // ACTIVE_ID
          return ACTIVE_ID;
        case 3: // ACTIVE_NAME
          return ACTIVE_NAME;
        case 4: // ACTIVE_TYPE
          return ACTIVE_TYPE;
        case 5: // CUT_MONEY
          return CUT_MONEY;
        case 6: // GENERAL_SINGLE_CUT_MONEY
          return GENERAL_SINGLE_CUT_MONEY;
        case 7: // GENERAL_AT_LAST_CUT_MONEY
          return GENERAL_AT_LAST_CUT_MONEY;
        case 8: // VIP_SINGLE_CUT_MONEY
          return VIP_SINGLE_CUT_MONEY;
        case 9: // VIP_AT_LAST_CUT_MONEY
          return VIP_AT_LAST_CUT_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUTMONEY_ISSET_ID = 0;
  private static final int __GENERALSINGLECUTMONEY_ISSET_ID = 1;
  private static final int __GENERALATLASTCUTMONEY_ISSET_ID = 2;
  private static final int __VIPSINGLECUTMONEY_ISSET_ID = 3;
  private static final int __VIPATLASTCUTMONEY_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("activeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("activeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GENERAL_SINGLE_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("generalSingleCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GENERAL_AT_LAST_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("generalAtLastCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_SINGLE_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipSingleCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIP_AT_LAST_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vipAtLastCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderResVo.class, metaDataMap);
  }

  public OrderResVo() {
  }

  public OrderResVo(
    String productId,
    String activeId,
    String activeName,
    String activeType,
    double cutMoney,
    double generalSingleCutMoney,
    double generalAtLastCutMoney,
    double vipSingleCutMoney,
    double vipAtLastCutMoney)
  {
    this();
    this.productId = productId;
    this.activeId = activeId;
    this.activeName = activeName;
    this.activeType = activeType;
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    this.generalSingleCutMoney = generalSingleCutMoney;
    setGeneralSingleCutMoneyIsSet(true);
    this.generalAtLastCutMoney = generalAtLastCutMoney;
    setGeneralAtLastCutMoneyIsSet(true);
    this.vipSingleCutMoney = vipSingleCutMoney;
    setVipSingleCutMoneyIsSet(true);
    this.vipAtLastCutMoney = vipAtLastCutMoney;
    setVipAtLastCutMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderResVo(OrderResVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetActiveName()) {
      this.activeName = other.activeName;
    }
    if (other.isSetActiveType()) {
      this.activeType = other.activeType;
    }
    this.cutMoney = other.cutMoney;
    this.generalSingleCutMoney = other.generalSingleCutMoney;
    this.generalAtLastCutMoney = other.generalAtLastCutMoney;
    this.vipSingleCutMoney = other.vipSingleCutMoney;
    this.vipAtLastCutMoney = other.vipAtLastCutMoney;
  }

  public OrderResVo deepCopy() {
    return new OrderResVo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.activeId = null;
    this.activeName = null;
    this.activeType = null;
    setCutMoneyIsSet(false);
    this.cutMoney = 0.0;
    setGeneralSingleCutMoneyIsSet(false);
    this.generalSingleCutMoney = 0.0;
    setGeneralAtLastCutMoneyIsSet(false);
    this.generalAtLastCutMoney = 0.0;
    setVipSingleCutMoneyIsSet(false);
    this.vipSingleCutMoney = 0.0;
    setVipAtLastCutMoneyIsSet(false);
    this.vipAtLastCutMoney = 0.0;
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public OrderResVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public OrderResVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 活动名称
   */
  public String getActiveName() {
    return this.activeName;
  }

  /**
   * 活动名称
   */
  public OrderResVo setActiveName(String activeName) {
    this.activeName = activeName;
    return this;
  }

  public void unsetActiveName() {
    this.activeName = null;
  }

  /** Returns true if field activeName is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveName() {
    return this.activeName != null;
  }

  public void setActiveNameIsSet(boolean value) {
    if (!value) {
      this.activeName = null;
    }
  }

  /**
   * 活动类型
   */
  public String getActiveType() {
    return this.activeType;
  }

  /**
   * 活动类型
   */
  public OrderResVo setActiveType(String activeType) {
    this.activeType = activeType;
    return this;
  }

  public void unsetActiveType() {
    this.activeType = null;
  }

  /** Returns true if field activeType is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveType() {
    return this.activeType != null;
  }

  public void setActiveTypeIsSet(boolean value) {
    if (!value) {
      this.activeType = null;
    }
  }

  /**
   * 满减金额
   */
  public double getCutMoney() {
    return this.cutMoney;
  }

  /**
   * 满减金额
   */
  public OrderResVo setCutMoney(double cutMoney) {
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    return this;
  }

  public void unsetCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  /** Returns true if field cutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  public void setCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTMONEY_ISSET_ID, value);
  }

  /**
   * 普通单个满减金额
   */
  public double getGeneralSingleCutMoney() {
    return this.generalSingleCutMoney;
  }

  /**
   * 普通单个满减金额
   */
  public OrderResVo setGeneralSingleCutMoney(double generalSingleCutMoney) {
    this.generalSingleCutMoney = generalSingleCutMoney;
    setGeneralSingleCutMoneyIsSet(true);
    return this;
  }

  public void unsetGeneralSingleCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENERALSINGLECUTMONEY_ISSET_ID);
  }

  /** Returns true if field generalSingleCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneralSingleCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GENERALSINGLECUTMONEY_ISSET_ID);
  }

  public void setGeneralSingleCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENERALSINGLECUTMONEY_ISSET_ID, value);
  }

  /**
   * 普通最后一个满减金额
   */
  public double getGeneralAtLastCutMoney() {
    return this.generalAtLastCutMoney;
  }

  /**
   * 普通最后一个满减金额
   */
  public OrderResVo setGeneralAtLastCutMoney(double generalAtLastCutMoney) {
    this.generalAtLastCutMoney = generalAtLastCutMoney;
    setGeneralAtLastCutMoneyIsSet(true);
    return this;
  }

  public void unsetGeneralAtLastCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENERALATLASTCUTMONEY_ISSET_ID);
  }

  /** Returns true if field generalAtLastCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneralAtLastCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GENERALATLASTCUTMONEY_ISSET_ID);
  }

  public void setGeneralAtLastCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENERALATLASTCUTMONEY_ISSET_ID, value);
  }

  /**
   * VIP单个满减金额
   */
  public double getVipSingleCutMoney() {
    return this.vipSingleCutMoney;
  }

  /**
   * VIP单个满减金额
   */
  public OrderResVo setVipSingleCutMoney(double vipSingleCutMoney) {
    this.vipSingleCutMoney = vipSingleCutMoney;
    setVipSingleCutMoneyIsSet(true);
    return this;
  }

  public void unsetVipSingleCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPSINGLECUTMONEY_ISSET_ID);
  }

  /** Returns true if field vipSingleCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipSingleCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPSINGLECUTMONEY_ISSET_ID);
  }

  public void setVipSingleCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPSINGLECUTMONEY_ISSET_ID, value);
  }

  /**
   * VIP最后一个满减金额
   */
  public double getVipAtLastCutMoney() {
    return this.vipAtLastCutMoney;
  }

  /**
   * VIP最后一个满减金额
   */
  public OrderResVo setVipAtLastCutMoney(double vipAtLastCutMoney) {
    this.vipAtLastCutMoney = vipAtLastCutMoney;
    setVipAtLastCutMoneyIsSet(true);
    return this;
  }

  public void unsetVipAtLastCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPATLASTCUTMONEY_ISSET_ID);
  }

  /** Returns true if field vipAtLastCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVipAtLastCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPATLASTCUTMONEY_ISSET_ID);
  }

  public void setVipAtLastCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPATLASTCUTMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case ACTIVE_NAME:
      if (value == null) {
        unsetActiveName();
      } else {
        setActiveName((String)value);
      }
      break;

    case ACTIVE_TYPE:
      if (value == null) {
        unsetActiveType();
      } else {
        setActiveType((String)value);
      }
      break;

    case CUT_MONEY:
      if (value == null) {
        unsetCutMoney();
      } else {
        setCutMoney((Double)value);
      }
      break;

    case GENERAL_SINGLE_CUT_MONEY:
      if (value == null) {
        unsetGeneralSingleCutMoney();
      } else {
        setGeneralSingleCutMoney((Double)value);
      }
      break;

    case GENERAL_AT_LAST_CUT_MONEY:
      if (value == null) {
        unsetGeneralAtLastCutMoney();
      } else {
        setGeneralAtLastCutMoney((Double)value);
      }
      break;

    case VIP_SINGLE_CUT_MONEY:
      if (value == null) {
        unsetVipSingleCutMoney();
      } else {
        setVipSingleCutMoney((Double)value);
      }
      break;

    case VIP_AT_LAST_CUT_MONEY:
      if (value == null) {
        unsetVipAtLastCutMoney();
      } else {
        setVipAtLastCutMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case ACTIVE_ID:
      return getActiveId();

    case ACTIVE_NAME:
      return getActiveName();

    case ACTIVE_TYPE:
      return getActiveType();

    case CUT_MONEY:
      return Double.valueOf(getCutMoney());

    case GENERAL_SINGLE_CUT_MONEY:
      return Double.valueOf(getGeneralSingleCutMoney());

    case GENERAL_AT_LAST_CUT_MONEY:
      return Double.valueOf(getGeneralAtLastCutMoney());

    case VIP_SINGLE_CUT_MONEY:
      return Double.valueOf(getVipSingleCutMoney());

    case VIP_AT_LAST_CUT_MONEY:
      return Double.valueOf(getVipAtLastCutMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case ACTIVE_ID:
      return isSetActiveId();
    case ACTIVE_NAME:
      return isSetActiveName();
    case ACTIVE_TYPE:
      return isSetActiveType();
    case CUT_MONEY:
      return isSetCutMoney();
    case GENERAL_SINGLE_CUT_MONEY:
      return isSetGeneralSingleCutMoney();
    case GENERAL_AT_LAST_CUT_MONEY:
      return isSetGeneralAtLastCutMoney();
    case VIP_SINGLE_CUT_MONEY:
      return isSetVipSingleCutMoney();
    case VIP_AT_LAST_CUT_MONEY:
      return isSetVipAtLastCutMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderResVo)
      return this.equals((OrderResVo)that);
    return false;
  }

  public boolean equals(OrderResVo that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_activeName = true && this.isSetActiveName();
    boolean that_present_activeName = true && that.isSetActiveName();
    if (this_present_activeName || that_present_activeName) {
      if (!(this_present_activeName && that_present_activeName))
        return false;
      if (!this.activeName.equals(that.activeName))
        return false;
    }

    boolean this_present_activeType = true && this.isSetActiveType();
    boolean that_present_activeType = true && that.isSetActiveType();
    if (this_present_activeType || that_present_activeType) {
      if (!(this_present_activeType && that_present_activeType))
        return false;
      if (!this.activeType.equals(that.activeType))
        return false;
    }

    boolean this_present_cutMoney = true;
    boolean that_present_cutMoney = true;
    if (this_present_cutMoney || that_present_cutMoney) {
      if (!(this_present_cutMoney && that_present_cutMoney))
        return false;
      if (this.cutMoney != that.cutMoney)
        return false;
    }

    boolean this_present_generalSingleCutMoney = true;
    boolean that_present_generalSingleCutMoney = true;
    if (this_present_generalSingleCutMoney || that_present_generalSingleCutMoney) {
      if (!(this_present_generalSingleCutMoney && that_present_generalSingleCutMoney))
        return false;
      if (this.generalSingleCutMoney != that.generalSingleCutMoney)
        return false;
    }

    boolean this_present_generalAtLastCutMoney = true;
    boolean that_present_generalAtLastCutMoney = true;
    if (this_present_generalAtLastCutMoney || that_present_generalAtLastCutMoney) {
      if (!(this_present_generalAtLastCutMoney && that_present_generalAtLastCutMoney))
        return false;
      if (this.generalAtLastCutMoney != that.generalAtLastCutMoney)
        return false;
    }

    boolean this_present_vipSingleCutMoney = true;
    boolean that_present_vipSingleCutMoney = true;
    if (this_present_vipSingleCutMoney || that_present_vipSingleCutMoney) {
      if (!(this_present_vipSingleCutMoney && that_present_vipSingleCutMoney))
        return false;
      if (this.vipSingleCutMoney != that.vipSingleCutMoney)
        return false;
    }

    boolean this_present_vipAtLastCutMoney = true;
    boolean that_present_vipAtLastCutMoney = true;
    if (this_present_vipAtLastCutMoney || that_present_vipAtLastCutMoney) {
      if (!(this_present_vipAtLastCutMoney && that_present_vipAtLastCutMoney))
        return false;
      if (this.vipAtLastCutMoney != that.vipAtLastCutMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_activeName = true && (isSetActiveName());
    list.add(present_activeName);
    if (present_activeName)
      list.add(activeName);

    boolean present_activeType = true && (isSetActiveType());
    list.add(present_activeType);
    if (present_activeType)
      list.add(activeType);

    boolean present_cutMoney = true;
    list.add(present_cutMoney);
    if (present_cutMoney)
      list.add(cutMoney);

    boolean present_generalSingleCutMoney = true;
    list.add(present_generalSingleCutMoney);
    if (present_generalSingleCutMoney)
      list.add(generalSingleCutMoney);

    boolean present_generalAtLastCutMoney = true;
    list.add(present_generalAtLastCutMoney);
    if (present_generalAtLastCutMoney)
      list.add(generalAtLastCutMoney);

    boolean present_vipSingleCutMoney = true;
    list.add(present_vipSingleCutMoney);
    if (present_vipSingleCutMoney)
      list.add(vipSingleCutMoney);

    boolean present_vipAtLastCutMoney = true;
    list.add(present_vipAtLastCutMoney);
    if (present_vipAtLastCutMoney)
      list.add(vipAtLastCutMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderResVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveName()).compareTo(other.isSetActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeName, other.activeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveType()).compareTo(other.isSetActiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeType, other.activeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutMoney()).compareTo(other.isSetCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutMoney, other.cutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeneralSingleCutMoney()).compareTo(other.isSetGeneralSingleCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneralSingleCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalSingleCutMoney, other.generalSingleCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeneralAtLastCutMoney()).compareTo(other.isSetGeneralAtLastCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneralAtLastCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalAtLastCutMoney, other.generalAtLastCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipSingleCutMoney()).compareTo(other.isSetVipSingleCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipSingleCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipSingleCutMoney, other.vipSingleCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipAtLastCutMoney()).compareTo(other.isSetVipAtLastCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipAtLastCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipAtLastCutMoney, other.vipAtLastCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderResVo(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeName:");
    if (this.activeName == null) {
      sb.append("null");
    } else {
      sb.append(this.activeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeType:");
    if (this.activeType == null) {
      sb.append("null");
    } else {
      sb.append(this.activeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutMoney:");
    sb.append(this.cutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("generalSingleCutMoney:");
    sb.append(this.generalSingleCutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("generalAtLastCutMoney:");
    sb.append(this.generalAtLastCutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipSingleCutMoney:");
    sb.append(this.vipSingleCutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipAtLastCutMoney:");
    sb.append(this.vipAtLastCutMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderResVoStandardSchemeFactory implements SchemeFactory {
    public OrderResVoStandardScheme getScheme() {
      return new OrderResVoStandardScheme();
    }
  }

  private static class OrderResVoStandardScheme extends StandardScheme<OrderResVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderResVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeName = iprot.readString();
              struct.setActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeType = iprot.readString();
              struct.setActiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cutMoney = iprot.readDouble();
              struct.setCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GENERAL_SINGLE_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.generalSingleCutMoney = iprot.readDouble();
              struct.setGeneralSingleCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GENERAL_AT_LAST_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.generalAtLastCutMoney = iprot.readDouble();
              struct.setGeneralAtLastCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIP_SINGLE_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipSingleCutMoney = iprot.readDouble();
              struct.setVipSingleCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIP_AT_LAST_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipAtLastCutMoney = iprot.readDouble();
              struct.setVipAtLastCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderResVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.activeName != null) {
        oprot.writeFieldBegin(ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.activeName);
        oprot.writeFieldEnd();
      }
      if (struct.activeType != null) {
        oprot.writeFieldBegin(ACTIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.activeType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.cutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENERAL_SINGLE_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.generalSingleCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENERAL_AT_LAST_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.generalAtLastCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_SINGLE_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipSingleCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_AT_LAST_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vipAtLastCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderResVoTupleSchemeFactory implements SchemeFactory {
    public OrderResVoTupleScheme getScheme() {
      return new OrderResVoTupleScheme();
    }
  }

  private static class OrderResVoTupleScheme extends TupleScheme<OrderResVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderResVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetActiveId()) {
        optionals.set(1);
      }
      if (struct.isSetActiveName()) {
        optionals.set(2);
      }
      if (struct.isSetActiveType()) {
        optionals.set(3);
      }
      if (struct.isSetCutMoney()) {
        optionals.set(4);
      }
      if (struct.isSetGeneralSingleCutMoney()) {
        optionals.set(5);
      }
      if (struct.isSetGeneralAtLastCutMoney()) {
        optionals.set(6);
      }
      if (struct.isSetVipSingleCutMoney()) {
        optionals.set(7);
      }
      if (struct.isSetVipAtLastCutMoney()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetActiveName()) {
        oprot.writeString(struct.activeName);
      }
      if (struct.isSetActiveType()) {
        oprot.writeString(struct.activeType);
      }
      if (struct.isSetCutMoney()) {
        oprot.writeDouble(struct.cutMoney);
      }
      if (struct.isSetGeneralSingleCutMoney()) {
        oprot.writeDouble(struct.generalSingleCutMoney);
      }
      if (struct.isSetGeneralAtLastCutMoney()) {
        oprot.writeDouble(struct.generalAtLastCutMoney);
      }
      if (struct.isSetVipSingleCutMoney()) {
        oprot.writeDouble(struct.vipSingleCutMoney);
      }
      if (struct.isSetVipAtLastCutMoney()) {
        oprot.writeDouble(struct.vipAtLastCutMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderResVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeName = iprot.readString();
        struct.setActiveNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activeType = iprot.readString();
        struct.setActiveTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cutMoney = iprot.readDouble();
        struct.setCutMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.generalSingleCutMoney = iprot.readDouble();
        struct.setGeneralSingleCutMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.generalAtLastCutMoney = iprot.readDouble();
        struct.setGeneralAtLastCutMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vipSingleCutMoney = iprot.readDouble();
        struct.setVipSingleCutMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vipAtLastCutMoney = iprot.readDouble();
        struct.setVipAtLastCutMoneyIsSet(true);
      }
    }
  }

}

