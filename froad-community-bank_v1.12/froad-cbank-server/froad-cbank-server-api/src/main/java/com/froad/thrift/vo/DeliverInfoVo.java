/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 提货信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class DeliverInfoVo implements org.apache.thrift.TBase<DeliverInfoVo, DeliverInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<DeliverInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeliverInfoVo");

  private static final org.apache.thrift.protocol.TField DELIVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("consignee", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("isDefault", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TREE_PATH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("treePathName", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeliverInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeliverInfoVoTupleSchemeFactory());
  }

  /**
   * 提货信息编号
   */
  public String deliveryId; // optional
  /**
   * 提货人
   */
  public String consignee; // optional
  /**
   * 提货电话
   */
  public String phone; // optional
  /**
   * 是否为默认,0:否 1:是
   */
  public String isDefault; // optional
  /**
   * 地区Id
   */
  public long areaId; // optional
  /**
   * 树路径
   */
  public String treePath; // optional
  /**
   * 树路径名称
   */
  public String treePathName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 提货信息编号
     */
    DELIVERY_ID((short)1, "deliveryId"),
    /**
     * 提货人
     */
    CONSIGNEE((short)2, "consignee"),
    /**
     * 提货电话
     */
    PHONE((short)3, "phone"),
    /**
     * 是否为默认,0:否 1:是
     */
    IS_DEFAULT((short)4, "isDefault"),
    /**
     * 地区Id
     */
    AREA_ID((short)5, "areaId"),
    /**
     * 树路径
     */
    TREE_PATH((short)6, "treePath"),
    /**
     * 树路径名称
     */
    TREE_PATH_NAME((short)7, "treePathName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DELIVERY_ID
          return DELIVERY_ID;
        case 2: // CONSIGNEE
          return CONSIGNEE;
        case 3: // PHONE
          return PHONE;
        case 4: // IS_DEFAULT
          return IS_DEFAULT;
        case 5: // AREA_ID
          return AREA_ID;
        case 6: // TREE_PATH
          return TREE_PATH;
        case 7: // TREE_PATH_NAME
          return TREE_PATH_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AREAID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DELIVERY_ID,_Fields.CONSIGNEE,_Fields.PHONE,_Fields.IS_DEFAULT,_Fields.AREA_ID,_Fields.TREE_PATH,_Fields.TREE_PATH_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DELIVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSIGNEE, new org.apache.thrift.meta_data.FieldMetaData("consignee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("isDefault", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PATH_NAME, new org.apache.thrift.meta_data.FieldMetaData("treePathName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeliverInfoVo.class, metaDataMap);
  }

  public DeliverInfoVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeliverInfoVo(DeliverInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeliveryId()) {
      this.deliveryId = other.deliveryId;
    }
    if (other.isSetConsignee()) {
      this.consignee = other.consignee;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetIsDefault()) {
      this.isDefault = other.isDefault;
    }
    this.areaId = other.areaId;
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    if (other.isSetTreePathName()) {
      this.treePathName = other.treePathName;
    }
  }

  public DeliverInfoVo deepCopy() {
    return new DeliverInfoVo(this);
  }

  @Override
  public void clear() {
    this.deliveryId = null;
    this.consignee = null;
    this.phone = null;
    this.isDefault = null;
    setAreaIdIsSet(false);
    this.areaId = 0;
    this.treePath = null;
    this.treePathName = null;
  }

  /**
   * 提货信息编号
   */
  public String getDeliveryId() {
    return this.deliveryId;
  }

  /**
   * 提货信息编号
   */
  public DeliverInfoVo setDeliveryId(String deliveryId) {
    this.deliveryId = deliveryId;
    return this;
  }

  public void unsetDeliveryId() {
    this.deliveryId = null;
  }

  /** Returns true if field deliveryId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryId() {
    return this.deliveryId != null;
  }

  public void setDeliveryIdIsSet(boolean value) {
    if (!value) {
      this.deliveryId = null;
    }
  }

  /**
   * 提货人
   */
  public String getConsignee() {
    return this.consignee;
  }

  /**
   * 提货人
   */
  public DeliverInfoVo setConsignee(String consignee) {
    this.consignee = consignee;
    return this;
  }

  public void unsetConsignee() {
    this.consignee = null;
  }

  /** Returns true if field consignee is set (has been assigned a value) and false otherwise */
  public boolean isSetConsignee() {
    return this.consignee != null;
  }

  public void setConsigneeIsSet(boolean value) {
    if (!value) {
      this.consignee = null;
    }
  }

  /**
   * 提货电话
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 提货电话
   */
  public DeliverInfoVo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 是否为默认,0:否 1:是
   */
  public String getIsDefault() {
    return this.isDefault;
  }

  /**
   * 是否为默认,0:否 1:是
   */
  public DeliverInfoVo setIsDefault(String isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  public void unsetIsDefault() {
    this.isDefault = null;
  }

  /** Returns true if field isDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDefault() {
    return this.isDefault != null;
  }

  public void setIsDefaultIsSet(boolean value) {
    if (!value) {
      this.isDefault = null;
    }
  }

  /**
   * 地区Id
   */
  public long getAreaId() {
    return this.areaId;
  }

  /**
   * 地区Id
   */
  public DeliverInfoVo setAreaId(long areaId) {
    this.areaId = areaId;
    setAreaIdIsSet(true);
    return this;
  }

  public void unsetAreaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return EncodingUtils.testBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  public void setAreaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREAID_ISSET_ID, value);
  }

  /**
   * 树路径
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 树路径
   */
  public DeliverInfoVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 树路径名称
   */
  public String getTreePathName() {
    return this.treePathName;
  }

  /**
   * 树路径名称
   */
  public DeliverInfoVo setTreePathName(String treePathName) {
    this.treePathName = treePathName;
    return this;
  }

  public void unsetTreePathName() {
    this.treePathName = null;
  }

  /** Returns true if field treePathName is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePathName() {
    return this.treePathName != null;
  }

  public void setTreePathNameIsSet(boolean value) {
    if (!value) {
      this.treePathName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DELIVERY_ID:
      if (value == null) {
        unsetDeliveryId();
      } else {
        setDeliveryId((String)value);
      }
      break;

    case CONSIGNEE:
      if (value == null) {
        unsetConsignee();
      } else {
        setConsignee((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case IS_DEFAULT:
      if (value == null) {
        unsetIsDefault();
      } else {
        setIsDefault((String)value);
      }
      break;

    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((Long)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case TREE_PATH_NAME:
      if (value == null) {
        unsetTreePathName();
      } else {
        setTreePathName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DELIVERY_ID:
      return getDeliveryId();

    case CONSIGNEE:
      return getConsignee();

    case PHONE:
      return getPhone();

    case IS_DEFAULT:
      return getIsDefault();

    case AREA_ID:
      return Long.valueOf(getAreaId());

    case TREE_PATH:
      return getTreePath();

    case TREE_PATH_NAME:
      return getTreePathName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DELIVERY_ID:
      return isSetDeliveryId();
    case CONSIGNEE:
      return isSetConsignee();
    case PHONE:
      return isSetPhone();
    case IS_DEFAULT:
      return isSetIsDefault();
    case AREA_ID:
      return isSetAreaId();
    case TREE_PATH:
      return isSetTreePath();
    case TREE_PATH_NAME:
      return isSetTreePathName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeliverInfoVo)
      return this.equals((DeliverInfoVo)that);
    return false;
  }

  public boolean equals(DeliverInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_deliveryId = true && this.isSetDeliveryId();
    boolean that_present_deliveryId = true && that.isSetDeliveryId();
    if (this_present_deliveryId || that_present_deliveryId) {
      if (!(this_present_deliveryId && that_present_deliveryId))
        return false;
      if (!this.deliveryId.equals(that.deliveryId))
        return false;
    }

    boolean this_present_consignee = true && this.isSetConsignee();
    boolean that_present_consignee = true && that.isSetConsignee();
    if (this_present_consignee || that_present_consignee) {
      if (!(this_present_consignee && that_present_consignee))
        return false;
      if (!this.consignee.equals(that.consignee))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_isDefault = true && this.isSetIsDefault();
    boolean that_present_isDefault = true && that.isSetIsDefault();
    if (this_present_isDefault || that_present_isDefault) {
      if (!(this_present_isDefault && that_present_isDefault))
        return false;
      if (!this.isDefault.equals(that.isDefault))
        return false;
    }

    boolean this_present_areaId = true && this.isSetAreaId();
    boolean that_present_areaId = true && that.isSetAreaId();
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (this.areaId != that.areaId)
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_treePathName = true && this.isSetTreePathName();
    boolean that_present_treePathName = true && that.isSetTreePathName();
    if (this_present_treePathName || that_present_treePathName) {
      if (!(this_present_treePathName && that_present_treePathName))
        return false;
      if (!this.treePathName.equals(that.treePathName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deliveryId = true && (isSetDeliveryId());
    list.add(present_deliveryId);
    if (present_deliveryId)
      list.add(deliveryId);

    boolean present_consignee = true && (isSetConsignee());
    list.add(present_consignee);
    if (present_consignee)
      list.add(consignee);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_isDefault = true && (isSetIsDefault());
    list.add(present_isDefault);
    if (present_isDefault)
      list.add(isDefault);

    boolean present_areaId = true && (isSetAreaId());
    list.add(present_areaId);
    if (present_areaId)
      list.add(areaId);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_treePathName = true && (isSetTreePathName());
    list.add(present_treePathName);
    if (present_treePathName)
      list.add(treePathName);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeliverInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeliveryId()).compareTo(other.isSetDeliveryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryId, other.deliveryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsignee()).compareTo(other.isSetConsignee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsignee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consignee, other.consignee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDefault()).compareTo(other.isSetIsDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDefault, other.isDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePathName()).compareTo(other.isSetTreePathName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePathName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePathName, other.treePathName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeliverInfoVo(");
    boolean first = true;

    if (isSetDeliveryId()) {
      sb.append("deliveryId:");
      if (this.deliveryId == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryId);
      }
      first = false;
    }
    if (isSetConsignee()) {
      if (!first) sb.append(", ");
      sb.append("consignee:");
      if (this.consignee == null) {
        sb.append("null");
      } else {
        sb.append(this.consignee);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetIsDefault()) {
      if (!first) sb.append(", ");
      sb.append("isDefault:");
      if (this.isDefault == null) {
        sb.append("null");
      } else {
        sb.append(this.isDefault);
      }
      first = false;
    }
    if (isSetAreaId()) {
      if (!first) sb.append(", ");
      sb.append("areaId:");
      sb.append(this.areaId);
      first = false;
    }
    if (isSetTreePath()) {
      if (!first) sb.append(", ");
      sb.append("treePath:");
      if (this.treePath == null) {
        sb.append("null");
      } else {
        sb.append(this.treePath);
      }
      first = false;
    }
    if (isSetTreePathName()) {
      if (!first) sb.append(", ");
      sb.append("treePathName:");
      if (this.treePathName == null) {
        sb.append("null");
      } else {
        sb.append(this.treePathName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeliverInfoVoStandardSchemeFactory implements SchemeFactory {
    public DeliverInfoVoStandardScheme getScheme() {
      return new DeliverInfoVoStandardScheme();
    }
  }

  private static class DeliverInfoVoStandardScheme extends StandardScheme<DeliverInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeliverInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DELIVERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryId = iprot.readString();
              struct.setDeliveryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONSIGNEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consignee = iprot.readString();
              struct.setConsigneeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isDefault = iprot.readString();
              struct.setIsDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.areaId = iprot.readI64();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TREE_PATH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePathName = iprot.readString();
              struct.setTreePathNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeliverInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deliveryId != null) {
        if (struct.isSetDeliveryId()) {
          oprot.writeFieldBegin(DELIVERY_ID_FIELD_DESC);
          oprot.writeString(struct.deliveryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.consignee != null) {
        if (struct.isSetConsignee()) {
          oprot.writeFieldBegin(CONSIGNEE_FIELD_DESC);
          oprot.writeString(struct.consignee);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isDefault != null) {
        if (struct.isSetIsDefault()) {
          oprot.writeFieldBegin(IS_DEFAULT_FIELD_DESC);
          oprot.writeString(struct.isDefault);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAreaId()) {
        oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
        oprot.writeI64(struct.areaId);
        oprot.writeFieldEnd();
      }
      if (struct.treePath != null) {
        if (struct.isSetTreePath()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.treePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treePathName != null) {
        if (struct.isSetTreePathName()) {
          oprot.writeFieldBegin(TREE_PATH_NAME_FIELD_DESC);
          oprot.writeString(struct.treePathName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeliverInfoVoTupleSchemeFactory implements SchemeFactory {
    public DeliverInfoVoTupleScheme getScheme() {
      return new DeliverInfoVoTupleScheme();
    }
  }

  private static class DeliverInfoVoTupleScheme extends TupleScheme<DeliverInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeliverInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeliveryId()) {
        optionals.set(0);
      }
      if (struct.isSetConsignee()) {
        optionals.set(1);
      }
      if (struct.isSetPhone()) {
        optionals.set(2);
      }
      if (struct.isSetIsDefault()) {
        optionals.set(3);
      }
      if (struct.isSetAreaId()) {
        optionals.set(4);
      }
      if (struct.isSetTreePath()) {
        optionals.set(5);
      }
      if (struct.isSetTreePathName()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDeliveryId()) {
        oprot.writeString(struct.deliveryId);
      }
      if (struct.isSetConsignee()) {
        oprot.writeString(struct.consignee);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetIsDefault()) {
        oprot.writeString(struct.isDefault);
      }
      if (struct.isSetAreaId()) {
        oprot.writeI64(struct.areaId);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetTreePathName()) {
        oprot.writeString(struct.treePathName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeliverInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.deliveryId = iprot.readString();
        struct.setDeliveryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.consignee = iprot.readString();
        struct.setConsigneeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDefault = iprot.readString();
        struct.setIsDefaultIsSet(true);
      }
      if (incoming.get(4)) {
        struct.areaId = iprot.readI64();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(6)) {
        struct.treePathName = iprot.readString();
        struct.setTreePathNameIsSet(true);
      }
    }
  }

}

