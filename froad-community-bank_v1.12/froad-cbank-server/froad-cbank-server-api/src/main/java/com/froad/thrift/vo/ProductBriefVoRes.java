/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * H5用户搜索商品用到
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductBriefVoRes implements org.apache.thrift.TBase<ProductBriefVoRes, ProductBriefVoRes._Fields>, java.io.Serializable, Cloneable, Comparable<ProductBriefVoRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductBriefVoRes");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MARKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SELL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sellCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField BRIEF_INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("briefIntroduction", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SMALL_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("smallImgUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeckill", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("store", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField IS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("isStart", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField IS_END_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnd", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField SERVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTime", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField SEC_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("secStore", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SEC_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("secStartTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField SEC_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("secEndTime", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField IS_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("isPoint", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField IS_VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("isVip", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("vipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductBriefVoResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductBriefVoResTupleSchemeFactory());
  }

  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 商品类型
   */
  public String type; // required
  /**
   * 商品名
   */
  public String name; // required
  /**
   * 商品全名
   */
  public String fullName; // required
  /**
   * 销售价
   */
  public double price; // required
  /**
   * 市场价
   */
  public double marketPrice; // required
  /**
   * 销售数量
   */
  public int sellCount; // required
  /**
   * 销售有效期开始
   */
  public long startTime; // required
  /**
   * 销售有效期结束
   */
  public long endTime; // required
  /**
   * 简介
   */
  public String briefIntroduction; // required
  /**
   * 小图片地址
   */
  public String smallImgUrl; // required
  /**
   * 是否秒杀0非秒杀,1秒杀,2秒杀未上架
   */
  public String isSeckill; // required
  /**
   * 商品库存数量
   */
  public int store; // required
  /**
   * 是否开始
   */
  public boolean isStart; // required
  /**
   * 是否结束
   */
  public boolean isEnd; // required
  /**
   * 服务器时间
   */
  public long serverTime; // required
  /**
   * 商品秒杀库存数量
   */
  public int secStore; // required
  /**
   * 秒杀开始时间
   */
  public long secStartTime; // required
  /**
   * 秒杀结束时间
   */
  public long secEndTime; // required
  /**
   * 是否参与送积分活动
   */
  public boolean isPoint; // required
  /**
   * 是否参与VIP规则活动
   */
  public boolean isVip; // required
  /**
   * VIP价
   */
  public double vipPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端id
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)2, "merchantId"),
    /**
     * 商品id
     */
    PRODUCT_ID((short)3, "productId"),
    /**
     * 商品类型
     */
    TYPE((short)4, "type"),
    /**
     * 商品名
     */
    NAME((short)5, "name"),
    /**
     * 商品全名
     */
    FULL_NAME((short)6, "fullName"),
    /**
     * 销售价
     */
    PRICE((short)7, "price"),
    /**
     * 市场价
     */
    MARKET_PRICE((short)8, "marketPrice"),
    /**
     * 销售数量
     */
    SELL_COUNT((short)9, "sellCount"),
    /**
     * 销售有效期开始
     */
    START_TIME((short)10, "startTime"),
    /**
     * 销售有效期结束
     */
    END_TIME((short)11, "endTime"),
    /**
     * 简介
     */
    BRIEF_INTRODUCTION((short)12, "briefIntroduction"),
    /**
     * 小图片地址
     */
    SMALL_IMG_URL((short)13, "smallImgUrl"),
    /**
     * 是否秒杀0非秒杀,1秒杀,2秒杀未上架
     */
    IS_SECKILL((short)14, "isSeckill"),
    /**
     * 商品库存数量
     */
    STORE((short)15, "store"),
    /**
     * 是否开始
     */
    IS_START((short)16, "isStart"),
    /**
     * 是否结束
     */
    IS_END((short)17, "isEnd"),
    /**
     * 服务器时间
     */
    SERVER_TIME((short)18, "serverTime"),
    /**
     * 商品秒杀库存数量
     */
    SEC_STORE((short)19, "secStore"),
    /**
     * 秒杀开始时间
     */
    SEC_START_TIME((short)20, "secStartTime"),
    /**
     * 秒杀结束时间
     */
    SEC_END_TIME((short)21, "secEndTime"),
    /**
     * 是否参与送积分活动
     */
    IS_POINT((short)22, "isPoint"),
    /**
     * 是否参与VIP规则活动
     */
    IS_VIP((short)23, "isVip"),
    /**
     * VIP价
     */
    VIP_PRICE((short)24, "vipPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // PRODUCT_ID
          return PRODUCT_ID;
        case 4: // TYPE
          return TYPE;
        case 5: // NAME
          return NAME;
        case 6: // FULL_NAME
          return FULL_NAME;
        case 7: // PRICE
          return PRICE;
        case 8: // MARKET_PRICE
          return MARKET_PRICE;
        case 9: // SELL_COUNT
          return SELL_COUNT;
        case 10: // START_TIME
          return START_TIME;
        case 11: // END_TIME
          return END_TIME;
        case 12: // BRIEF_INTRODUCTION
          return BRIEF_INTRODUCTION;
        case 13: // SMALL_IMG_URL
          return SMALL_IMG_URL;
        case 14: // IS_SECKILL
          return IS_SECKILL;
        case 15: // STORE
          return STORE;
        case 16: // IS_START
          return IS_START;
        case 17: // IS_END
          return IS_END;
        case 18: // SERVER_TIME
          return SERVER_TIME;
        case 19: // SEC_STORE
          return SEC_STORE;
        case 20: // SEC_START_TIME
          return SEC_START_TIME;
        case 21: // SEC_END_TIME
          return SEC_END_TIME;
        case 22: // IS_POINT
          return IS_POINT;
        case 23: // IS_VIP
          return IS_VIP;
        case 24: // VIP_PRICE
          return VIP_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __MARKETPRICE_ISSET_ID = 1;
  private static final int __SELLCOUNT_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __ENDTIME_ISSET_ID = 4;
  private static final int __STORE_ISSET_ID = 5;
  private static final int __ISSTART_ISSET_ID = 6;
  private static final int __ISEND_ISSET_ID = 7;
  private static final int __SERVERTIME_ISSET_ID = 8;
  private static final int __SECSTORE_ISSET_ID = 9;
  private static final int __SECSTARTTIME_ISSET_ID = 10;
  private static final int __SECENDTIME_ISSET_ID = 11;
  private static final int __ISPOINT_ISSET_ID = 12;
  private static final int __ISVIP_ISSET_ID = 13;
  private static final int __VIPPRICE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("marketPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sellCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BRIEF_INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("briefIntroduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMALL_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("smallImgUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("isSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE, new org.apache.thrift.meta_data.FieldMetaData("store", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_START, new org.apache.thrift.meta_data.FieldMetaData("isStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_END, new org.apache.thrift.meta_data.FieldMetaData("isEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER_TIME, new org.apache.thrift.meta_data.FieldMetaData("serverTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEC_STORE, new org.apache.thrift.meta_data.FieldMetaData("secStore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEC_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("secStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEC_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("secEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_POINT, new org.apache.thrift.meta_data.FieldMetaData("isPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_VIP, new org.apache.thrift.meta_data.FieldMetaData("isVip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("vipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductBriefVoRes.class, metaDataMap);
  }

  public ProductBriefVoRes() {
  }

  public ProductBriefVoRes(
    String clientId,
    String merchantId,
    String productId,
    String type,
    String name,
    String fullName,
    double price,
    double marketPrice,
    int sellCount,
    long startTime,
    long endTime,
    String briefIntroduction,
    String smallImgUrl,
    String isSeckill,
    int store,
    boolean isStart,
    boolean isEnd,
    long serverTime,
    int secStore,
    long secStartTime,
    long secEndTime,
    boolean isPoint,
    boolean isVip,
    double vipPrice)
  {
    this();
    this.clientId = clientId;
    this.merchantId = merchantId;
    this.productId = productId;
    this.type = type;
    this.name = name;
    this.fullName = fullName;
    this.price = price;
    setPriceIsSet(true);
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    this.sellCount = sellCount;
    setSellCountIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.briefIntroduction = briefIntroduction;
    this.smallImgUrl = smallImgUrl;
    this.isSeckill = isSeckill;
    this.store = store;
    setStoreIsSet(true);
    this.isStart = isStart;
    setIsStartIsSet(true);
    this.isEnd = isEnd;
    setIsEndIsSet(true);
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
    this.secStore = secStore;
    setSecStoreIsSet(true);
    this.secStartTime = secStartTime;
    setSecStartTimeIsSet(true);
    this.secEndTime = secEndTime;
    setSecEndTimeIsSet(true);
    this.isPoint = isPoint;
    setIsPointIsSet(true);
    this.isVip = isVip;
    setIsVipIsSet(true);
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductBriefVoRes(ProductBriefVoRes other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFullName()) {
      this.fullName = other.fullName;
    }
    this.price = other.price;
    this.marketPrice = other.marketPrice;
    this.sellCount = other.sellCount;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetBriefIntroduction()) {
      this.briefIntroduction = other.briefIntroduction;
    }
    if (other.isSetSmallImgUrl()) {
      this.smallImgUrl = other.smallImgUrl;
    }
    if (other.isSetIsSeckill()) {
      this.isSeckill = other.isSeckill;
    }
    this.store = other.store;
    this.isStart = other.isStart;
    this.isEnd = other.isEnd;
    this.serverTime = other.serverTime;
    this.secStore = other.secStore;
    this.secStartTime = other.secStartTime;
    this.secEndTime = other.secEndTime;
    this.isPoint = other.isPoint;
    this.isVip = other.isVip;
    this.vipPrice = other.vipPrice;
  }

  public ProductBriefVoRes deepCopy() {
    return new ProductBriefVoRes(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.merchantId = null;
    this.productId = null;
    this.type = null;
    this.name = null;
    this.fullName = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setMarketPriceIsSet(false);
    this.marketPrice = 0.0;
    setSellCountIsSet(false);
    this.sellCount = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.briefIntroduction = null;
    this.smallImgUrl = null;
    this.isSeckill = null;
    setStoreIsSet(false);
    this.store = 0;
    setIsStartIsSet(false);
    this.isStart = false;
    setIsEndIsSet(false);
    this.isEnd = false;
    setServerTimeIsSet(false);
    this.serverTime = 0;
    setSecStoreIsSet(false);
    this.secStore = 0;
    setSecStartTimeIsSet(false);
    this.secStartTime = 0;
    setSecEndTimeIsSet(false);
    this.secEndTime = 0;
    setIsPointIsSet(false);
    this.isPoint = false;
    setIsVipIsSet(false);
    this.isVip = false;
    setVipPriceIsSet(false);
    this.vipPrice = 0.0;
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public ProductBriefVoRes setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public ProductBriefVoRes setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public ProductBriefVoRes setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 商品类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 商品类型
   */
  public ProductBriefVoRes setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 商品名
   */
  public String getName() {
    return this.name;
  }

  /**
   * 商品名
   */
  public ProductBriefVoRes setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 商品全名
   */
  public String getFullName() {
    return this.fullName;
  }

  /**
   * 商品全名
   */
  public ProductBriefVoRes setFullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  public void unsetFullName() {
    this.fullName = null;
  }

  /** Returns true if field fullName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullName() {
    return this.fullName != null;
  }

  public void setFullNameIsSet(boolean value) {
    if (!value) {
      this.fullName = null;
    }
  }

  /**
   * 销售价
   */
  public double getPrice() {
    return this.price;
  }

  /**
   * 销售价
   */
  public ProductBriefVoRes setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 市场价
   */
  public double getMarketPrice() {
    return this.marketPrice;
  }

  /**
   * 市场价
   */
  public ProductBriefVoRes setMarketPrice(double marketPrice) {
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    return this;
  }

  public void unsetMarketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  /** Returns true if field marketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  public void setMarketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPRICE_ISSET_ID, value);
  }

  /**
   * 销售数量
   */
  public int getSellCount() {
    return this.sellCount;
  }

  /**
   * 销售数量
   */
  public ProductBriefVoRes setSellCount(int sellCount) {
    this.sellCount = sellCount;
    setSellCountIsSet(true);
    return this;
  }

  public void unsetSellCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLCOUNT_ISSET_ID);
  }

  /** Returns true if field sellCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSellCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLCOUNT_ISSET_ID);
  }

  public void setSellCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLCOUNT_ISSET_ID, value);
  }

  /**
   * 销售有效期开始
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 销售有效期开始
   */
  public ProductBriefVoRes setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 销售有效期结束
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 销售有效期结束
   */
  public ProductBriefVoRes setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 简介
   */
  public String getBriefIntroduction() {
    return this.briefIntroduction;
  }

  /**
   * 简介
   */
  public ProductBriefVoRes setBriefIntroduction(String briefIntroduction) {
    this.briefIntroduction = briefIntroduction;
    return this;
  }

  public void unsetBriefIntroduction() {
    this.briefIntroduction = null;
  }

  /** Returns true if field briefIntroduction is set (has been assigned a value) and false otherwise */
  public boolean isSetBriefIntroduction() {
    return this.briefIntroduction != null;
  }

  public void setBriefIntroductionIsSet(boolean value) {
    if (!value) {
      this.briefIntroduction = null;
    }
  }

  /**
   * 小图片地址
   */
  public String getSmallImgUrl() {
    return this.smallImgUrl;
  }

  /**
   * 小图片地址
   */
  public ProductBriefVoRes setSmallImgUrl(String smallImgUrl) {
    this.smallImgUrl = smallImgUrl;
    return this;
  }

  public void unsetSmallImgUrl() {
    this.smallImgUrl = null;
  }

  /** Returns true if field smallImgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallImgUrl() {
    return this.smallImgUrl != null;
  }

  public void setSmallImgUrlIsSet(boolean value) {
    if (!value) {
      this.smallImgUrl = null;
    }
  }

  /**
   * 是否秒杀0非秒杀,1秒杀,2秒杀未上架
   */
  public String getIsSeckill() {
    return this.isSeckill;
  }

  /**
   * 是否秒杀0非秒杀,1秒杀,2秒杀未上架
   */
  public ProductBriefVoRes setIsSeckill(String isSeckill) {
    this.isSeckill = isSeckill;
    return this;
  }

  public void unsetIsSeckill() {
    this.isSeckill = null;
  }

  /** Returns true if field isSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeckill() {
    return this.isSeckill != null;
  }

  public void setIsSeckillIsSet(boolean value) {
    if (!value) {
      this.isSeckill = null;
    }
  }

  /**
   * 商品库存数量
   */
  public int getStore() {
    return this.store;
  }

  /**
   * 商品库存数量
   */
  public ProductBriefVoRes setStore(int store) {
    this.store = store;
    setStoreIsSet(true);
    return this;
  }

  public void unsetStore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  /** Returns true if field store is set (has been assigned a value) and false otherwise */
  public boolean isSetStore() {
    return EncodingUtils.testBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  public void setStoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORE_ISSET_ID, value);
  }

  /**
   * 是否开始
   */
  public boolean isIsStart() {
    return this.isStart;
  }

  /**
   * 是否开始
   */
  public ProductBriefVoRes setIsStart(boolean isStart) {
    this.isStart = isStart;
    setIsStartIsSet(true);
    return this;
  }

  public void unsetIsStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  /** Returns true if field isStart is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStart() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSTART_ISSET_ID);
  }

  public void setIsStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSTART_ISSET_ID, value);
  }

  /**
   * 是否结束
   */
  public boolean isIsEnd() {
    return this.isEnd;
  }

  /**
   * 是否结束
   */
  public ProductBriefVoRes setIsEnd(boolean isEnd) {
    this.isEnd = isEnd;
    setIsEndIsSet(true);
    return this;
  }

  public void unsetIsEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEND_ISSET_ID);
  }

  /** Returns true if field isEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEND_ISSET_ID);
  }

  public void setIsEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEND_ISSET_ID, value);
  }

  /**
   * 服务器时间
   */
  public long getServerTime() {
    return this.serverTime;
  }

  /**
   * 服务器时间
   */
  public ProductBriefVoRes setServerTime(long serverTime) {
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
    return this;
  }

  public void unsetServerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERTIME_ISSET_ID);
  }

  /** Returns true if field serverTime is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERTIME_ISSET_ID);
  }

  public void setServerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERTIME_ISSET_ID, value);
  }

  /**
   * 商品秒杀库存数量
   */
  public int getSecStore() {
    return this.secStore;
  }

  /**
   * 商品秒杀库存数量
   */
  public ProductBriefVoRes setSecStore(int secStore) {
    this.secStore = secStore;
    setSecStoreIsSet(true);
    return this;
  }

  public void unsetSecStore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECSTORE_ISSET_ID);
  }

  /** Returns true if field secStore is set (has been assigned a value) and false otherwise */
  public boolean isSetSecStore() {
    return EncodingUtils.testBit(__isset_bitfield, __SECSTORE_ISSET_ID);
  }

  public void setSecStoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECSTORE_ISSET_ID, value);
  }

  /**
   * 秒杀开始时间
   */
  public long getSecStartTime() {
    return this.secStartTime;
  }

  /**
   * 秒杀开始时间
   */
  public ProductBriefVoRes setSecStartTime(long secStartTime) {
    this.secStartTime = secStartTime;
    setSecStartTimeIsSet(true);
    return this;
  }

  public void unsetSecStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECSTARTTIME_ISSET_ID);
  }

  /** Returns true if field secStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSecStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SECSTARTTIME_ISSET_ID);
  }

  public void setSecStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECSTARTTIME_ISSET_ID, value);
  }

  /**
   * 秒杀结束时间
   */
  public long getSecEndTime() {
    return this.secEndTime;
  }

  /**
   * 秒杀结束时间
   */
  public ProductBriefVoRes setSecEndTime(long secEndTime) {
    this.secEndTime = secEndTime;
    setSecEndTimeIsSet(true);
    return this;
  }

  public void unsetSecEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECENDTIME_ISSET_ID);
  }

  /** Returns true if field secEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSecEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SECENDTIME_ISSET_ID);
  }

  public void setSecEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECENDTIME_ISSET_ID, value);
  }

  /**
   * 是否参与送积分活动
   */
  public boolean isIsPoint() {
    return this.isPoint;
  }

  /**
   * 是否参与送积分活动
   */
  public ProductBriefVoRes setIsPoint(boolean isPoint) {
    this.isPoint = isPoint;
    setIsPointIsSet(true);
    return this;
  }

  public void unsetIsPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPOINT_ISSET_ID);
  }

  /** Returns true if field isPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPOINT_ISSET_ID);
  }

  public void setIsPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPOINT_ISSET_ID, value);
  }

  /**
   * 是否参与VIP规则活动
   */
  public boolean isIsVip() {
    return this.isVip;
  }

  /**
   * 是否参与VIP规则活动
   */
  public ProductBriefVoRes setIsVip(boolean isVip) {
    this.isVip = isVip;
    setIsVipIsSet(true);
    return this;
  }

  public void unsetIsVip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVIP_ISSET_ID);
  }

  /** Returns true if field isVip is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVip() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVIP_ISSET_ID);
  }

  public void setIsVipIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVIP_ISSET_ID, value);
  }

  /**
   * VIP价
   */
  public double getVipPrice() {
    return this.vipPrice;
  }

  /**
   * VIP价
   */
  public ProductBriefVoRes setVipPrice(double vipPrice) {
    this.vipPrice = vipPrice;
    setVipPriceIsSet(true);
    return this;
  }

  public void unsetVipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  /** Returns true if field vipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICE_ISSET_ID);
  }

  public void setVipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FULL_NAME:
      if (value == null) {
        unsetFullName();
      } else {
        setFullName((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case MARKET_PRICE:
      if (value == null) {
        unsetMarketPrice();
      } else {
        setMarketPrice((Double)value);
      }
      break;

    case SELL_COUNT:
      if (value == null) {
        unsetSellCount();
      } else {
        setSellCount((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case BRIEF_INTRODUCTION:
      if (value == null) {
        unsetBriefIntroduction();
      } else {
        setBriefIntroduction((String)value);
      }
      break;

    case SMALL_IMG_URL:
      if (value == null) {
        unsetSmallImgUrl();
      } else {
        setSmallImgUrl((String)value);
      }
      break;

    case IS_SECKILL:
      if (value == null) {
        unsetIsSeckill();
      } else {
        setIsSeckill((String)value);
      }
      break;

    case STORE:
      if (value == null) {
        unsetStore();
      } else {
        setStore((Integer)value);
      }
      break;

    case IS_START:
      if (value == null) {
        unsetIsStart();
      } else {
        setIsStart((Boolean)value);
      }
      break;

    case IS_END:
      if (value == null) {
        unsetIsEnd();
      } else {
        setIsEnd((Boolean)value);
      }
      break;

    case SERVER_TIME:
      if (value == null) {
        unsetServerTime();
      } else {
        setServerTime((Long)value);
      }
      break;

    case SEC_STORE:
      if (value == null) {
        unsetSecStore();
      } else {
        setSecStore((Integer)value);
      }
      break;

    case SEC_START_TIME:
      if (value == null) {
        unsetSecStartTime();
      } else {
        setSecStartTime((Long)value);
      }
      break;

    case SEC_END_TIME:
      if (value == null) {
        unsetSecEndTime();
      } else {
        setSecEndTime((Long)value);
      }
      break;

    case IS_POINT:
      if (value == null) {
        unsetIsPoint();
      } else {
        setIsPoint((Boolean)value);
      }
      break;

    case IS_VIP:
      if (value == null) {
        unsetIsVip();
      } else {
        setIsVip((Boolean)value);
      }
      break;

    case VIP_PRICE:
      if (value == null) {
        unsetVipPrice();
      } else {
        setVipPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MERCHANT_ID:
      return getMerchantId();

    case PRODUCT_ID:
      return getProductId();

    case TYPE:
      return getType();

    case NAME:
      return getName();

    case FULL_NAME:
      return getFullName();

    case PRICE:
      return Double.valueOf(getPrice());

    case MARKET_PRICE:
      return Double.valueOf(getMarketPrice());

    case SELL_COUNT:
      return Integer.valueOf(getSellCount());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case BRIEF_INTRODUCTION:
      return getBriefIntroduction();

    case SMALL_IMG_URL:
      return getSmallImgUrl();

    case IS_SECKILL:
      return getIsSeckill();

    case STORE:
      return Integer.valueOf(getStore());

    case IS_START:
      return Boolean.valueOf(isIsStart());

    case IS_END:
      return Boolean.valueOf(isIsEnd());

    case SERVER_TIME:
      return Long.valueOf(getServerTime());

    case SEC_STORE:
      return Integer.valueOf(getSecStore());

    case SEC_START_TIME:
      return Long.valueOf(getSecStartTime());

    case SEC_END_TIME:
      return Long.valueOf(getSecEndTime());

    case IS_POINT:
      return Boolean.valueOf(isIsPoint());

    case IS_VIP:
      return Boolean.valueOf(isIsVip());

    case VIP_PRICE:
      return Double.valueOf(getVipPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case PRODUCT_ID:
      return isSetProductId();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case FULL_NAME:
      return isSetFullName();
    case PRICE:
      return isSetPrice();
    case MARKET_PRICE:
      return isSetMarketPrice();
    case SELL_COUNT:
      return isSetSellCount();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case BRIEF_INTRODUCTION:
      return isSetBriefIntroduction();
    case SMALL_IMG_URL:
      return isSetSmallImgUrl();
    case IS_SECKILL:
      return isSetIsSeckill();
    case STORE:
      return isSetStore();
    case IS_START:
      return isSetIsStart();
    case IS_END:
      return isSetIsEnd();
    case SERVER_TIME:
      return isSetServerTime();
    case SEC_STORE:
      return isSetSecStore();
    case SEC_START_TIME:
      return isSetSecStartTime();
    case SEC_END_TIME:
      return isSetSecEndTime();
    case IS_POINT:
      return isSetIsPoint();
    case IS_VIP:
      return isSetIsVip();
    case VIP_PRICE:
      return isSetVipPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductBriefVoRes)
      return this.equals((ProductBriefVoRes)that);
    return false;
  }

  public boolean equals(ProductBriefVoRes that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fullName = true && this.isSetFullName();
    boolean that_present_fullName = true && that.isSetFullName();
    if (this_present_fullName || that_present_fullName) {
      if (!(this_present_fullName && that_present_fullName))
        return false;
      if (!this.fullName.equals(that.fullName))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_marketPrice = true;
    boolean that_present_marketPrice = true;
    if (this_present_marketPrice || that_present_marketPrice) {
      if (!(this_present_marketPrice && that_present_marketPrice))
        return false;
      if (this.marketPrice != that.marketPrice)
        return false;
    }

    boolean this_present_sellCount = true;
    boolean that_present_sellCount = true;
    if (this_present_sellCount || that_present_sellCount) {
      if (!(this_present_sellCount && that_present_sellCount))
        return false;
      if (this.sellCount != that.sellCount)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_briefIntroduction = true && this.isSetBriefIntroduction();
    boolean that_present_briefIntroduction = true && that.isSetBriefIntroduction();
    if (this_present_briefIntroduction || that_present_briefIntroduction) {
      if (!(this_present_briefIntroduction && that_present_briefIntroduction))
        return false;
      if (!this.briefIntroduction.equals(that.briefIntroduction))
        return false;
    }

    boolean this_present_smallImgUrl = true && this.isSetSmallImgUrl();
    boolean that_present_smallImgUrl = true && that.isSetSmallImgUrl();
    if (this_present_smallImgUrl || that_present_smallImgUrl) {
      if (!(this_present_smallImgUrl && that_present_smallImgUrl))
        return false;
      if (!this.smallImgUrl.equals(that.smallImgUrl))
        return false;
    }

    boolean this_present_isSeckill = true && this.isSetIsSeckill();
    boolean that_present_isSeckill = true && that.isSetIsSeckill();
    if (this_present_isSeckill || that_present_isSeckill) {
      if (!(this_present_isSeckill && that_present_isSeckill))
        return false;
      if (!this.isSeckill.equals(that.isSeckill))
        return false;
    }

    boolean this_present_store = true;
    boolean that_present_store = true;
    if (this_present_store || that_present_store) {
      if (!(this_present_store && that_present_store))
        return false;
      if (this.store != that.store)
        return false;
    }

    boolean this_present_isStart = true;
    boolean that_present_isStart = true;
    if (this_present_isStart || that_present_isStart) {
      if (!(this_present_isStart && that_present_isStart))
        return false;
      if (this.isStart != that.isStart)
        return false;
    }

    boolean this_present_isEnd = true;
    boolean that_present_isEnd = true;
    if (this_present_isEnd || that_present_isEnd) {
      if (!(this_present_isEnd && that_present_isEnd))
        return false;
      if (this.isEnd != that.isEnd)
        return false;
    }

    boolean this_present_serverTime = true;
    boolean that_present_serverTime = true;
    if (this_present_serverTime || that_present_serverTime) {
      if (!(this_present_serverTime && that_present_serverTime))
        return false;
      if (this.serverTime != that.serverTime)
        return false;
    }

    boolean this_present_secStore = true;
    boolean that_present_secStore = true;
    if (this_present_secStore || that_present_secStore) {
      if (!(this_present_secStore && that_present_secStore))
        return false;
      if (this.secStore != that.secStore)
        return false;
    }

    boolean this_present_secStartTime = true;
    boolean that_present_secStartTime = true;
    if (this_present_secStartTime || that_present_secStartTime) {
      if (!(this_present_secStartTime && that_present_secStartTime))
        return false;
      if (this.secStartTime != that.secStartTime)
        return false;
    }

    boolean this_present_secEndTime = true;
    boolean that_present_secEndTime = true;
    if (this_present_secEndTime || that_present_secEndTime) {
      if (!(this_present_secEndTime && that_present_secEndTime))
        return false;
      if (this.secEndTime != that.secEndTime)
        return false;
    }

    boolean this_present_isPoint = true;
    boolean that_present_isPoint = true;
    if (this_present_isPoint || that_present_isPoint) {
      if (!(this_present_isPoint && that_present_isPoint))
        return false;
      if (this.isPoint != that.isPoint)
        return false;
    }

    boolean this_present_isVip = true;
    boolean that_present_isVip = true;
    if (this_present_isVip || that_present_isVip) {
      if (!(this_present_isVip && that_present_isVip))
        return false;
      if (this.isVip != that.isVip)
        return false;
    }

    boolean this_present_vipPrice = true;
    boolean that_present_vipPrice = true;
    if (this_present_vipPrice || that_present_vipPrice) {
      if (!(this_present_vipPrice && that_present_vipPrice))
        return false;
      if (this.vipPrice != that.vipPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_fullName = true && (isSetFullName());
    list.add(present_fullName);
    if (present_fullName)
      list.add(fullName);

    boolean present_price = true;
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_marketPrice = true;
    list.add(present_marketPrice);
    if (present_marketPrice)
      list.add(marketPrice);

    boolean present_sellCount = true;
    list.add(present_sellCount);
    if (present_sellCount)
      list.add(sellCount);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_briefIntroduction = true && (isSetBriefIntroduction());
    list.add(present_briefIntroduction);
    if (present_briefIntroduction)
      list.add(briefIntroduction);

    boolean present_smallImgUrl = true && (isSetSmallImgUrl());
    list.add(present_smallImgUrl);
    if (present_smallImgUrl)
      list.add(smallImgUrl);

    boolean present_isSeckill = true && (isSetIsSeckill());
    list.add(present_isSeckill);
    if (present_isSeckill)
      list.add(isSeckill);

    boolean present_store = true;
    list.add(present_store);
    if (present_store)
      list.add(store);

    boolean present_isStart = true;
    list.add(present_isStart);
    if (present_isStart)
      list.add(isStart);

    boolean present_isEnd = true;
    list.add(present_isEnd);
    if (present_isEnd)
      list.add(isEnd);

    boolean present_serverTime = true;
    list.add(present_serverTime);
    if (present_serverTime)
      list.add(serverTime);

    boolean present_secStore = true;
    list.add(present_secStore);
    if (present_secStore)
      list.add(secStore);

    boolean present_secStartTime = true;
    list.add(present_secStartTime);
    if (present_secStartTime)
      list.add(secStartTime);

    boolean present_secEndTime = true;
    list.add(present_secEndTime);
    if (present_secEndTime)
      list.add(secEndTime);

    boolean present_isPoint = true;
    list.add(present_isPoint);
    if (present_isPoint)
      list.add(isPoint);

    boolean present_isVip = true;
    list.add(present_isVip);
    if (present_isVip)
      list.add(isVip);

    boolean present_vipPrice = true;
    list.add(present_vipPrice);
    if (present_vipPrice)
      list.add(vipPrice);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductBriefVoRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullName()).compareTo(other.isSetFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullName, other.fullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketPrice()).compareTo(other.isSetMarketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketPrice, other.marketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellCount()).compareTo(other.isSetSellCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellCount, other.sellCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBriefIntroduction()).compareTo(other.isSetBriefIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBriefIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.briefIntroduction, other.briefIntroduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallImgUrl()).compareTo(other.isSetSmallImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallImgUrl, other.smallImgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeckill()).compareTo(other.isSetIsSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeckill, other.isSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore()).compareTo(other.isSetStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.store, other.store);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStart()).compareTo(other.isSetIsStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStart, other.isStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnd()).compareTo(other.isSetIsEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnd, other.isEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerTime()).compareTo(other.isSetServerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTime, other.serverTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecStore()).compareTo(other.isSetSecStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secStore, other.secStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecStartTime()).compareTo(other.isSetSecStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secStartTime, other.secStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecEndTime()).compareTo(other.isSetSecEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secEndTime, other.secEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPoint()).compareTo(other.isSetIsPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPoint, other.isPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVip()).compareTo(other.isSetIsVip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVip, other.isVip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPrice()).compareTo(other.isSetVipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPrice, other.vipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductBriefVoRes(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullName:");
    if (this.fullName == null) {
      sb.append("null");
    } else {
      sb.append(this.fullName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketPrice:");
    sb.append(this.marketPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellCount:");
    sb.append(this.sellCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("briefIntroduction:");
    if (this.briefIntroduction == null) {
      sb.append("null");
    } else {
      sb.append(this.briefIntroduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smallImgUrl:");
    if (this.smallImgUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.smallImgUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeckill:");
    if (this.isSeckill == null) {
      sb.append("null");
    } else {
      sb.append(this.isSeckill);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("store:");
    sb.append(this.store);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isStart:");
    sb.append(this.isStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnd:");
    sb.append(this.isEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverTime:");
    sb.append(this.serverTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secStore:");
    sb.append(this.secStore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secStartTime:");
    sb.append(this.secStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secEndTime:");
    sb.append(this.secEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPoint:");
    sb.append(this.isPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVip:");
    sb.append(this.isVip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipPrice:");
    sb.append(this.vipPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductBriefVoResStandardSchemeFactory implements SchemeFactory {
    public ProductBriefVoResStandardScheme getScheme() {
      return new ProductBriefVoResStandardScheme();
    }
  }

  private static class ProductBriefVoResStandardScheme extends StandardScheme<ProductBriefVoRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductBriefVoRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullName = iprot.readString();
              struct.setFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MARKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marketPrice = iprot.readDouble();
              struct.setMarketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SELL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellCount = iprot.readI32();
              struct.setSellCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BRIEF_INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.briefIntroduction = iprot.readString();
              struct.setBriefIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SMALL_IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smallImgUrl = iprot.readString();
              struct.setSmallImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isSeckill = iprot.readString();
              struct.setIsSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.store = iprot.readI32();
              struct.setStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_START
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStart = iprot.readBool();
              struct.setIsStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnd = iprot.readBool();
              struct.setIsEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SERVER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverTime = iprot.readI64();
              struct.setServerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SEC_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secStore = iprot.readI32();
              struct.setSecStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SEC_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.secStartTime = iprot.readI64();
              struct.setSecStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SEC_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.secEndTime = iprot.readI64();
              struct.setSecEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPoint = iprot.readBool();
              struct.setIsPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isVip = iprot.readBool();
              struct.setIsVipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vipPrice = iprot.readDouble();
              struct.setVipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductBriefVoRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.fullName != null) {
        oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
        oprot.writeString(struct.fullName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARKET_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.marketPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.sellCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.briefIntroduction != null) {
        oprot.writeFieldBegin(BRIEF_INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.briefIntroduction);
        oprot.writeFieldEnd();
      }
      if (struct.smallImgUrl != null) {
        oprot.writeFieldBegin(SMALL_IMG_URL_FIELD_DESC);
        oprot.writeString(struct.smallImgUrl);
        oprot.writeFieldEnd();
      }
      if (struct.isSeckill != null) {
        oprot.writeFieldBegin(IS_SECKILL_FIELD_DESC);
        oprot.writeString(struct.isSeckill);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STORE_FIELD_DESC);
      oprot.writeI32(struct.store);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_START_FIELD_DESC);
      oprot.writeBool(struct.isStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_END_FIELD_DESC);
      oprot.writeBool(struct.isEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_TIME_FIELD_DESC);
      oprot.writeI64(struct.serverTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEC_STORE_FIELD_DESC);
      oprot.writeI32(struct.secStore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEC_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.secStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEC_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.secEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_POINT_FIELD_DESC);
      oprot.writeBool(struct.isPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VIP_FIELD_DESC);
      oprot.writeBool(struct.isVip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.vipPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductBriefVoResTupleSchemeFactory implements SchemeFactory {
    public ProductBriefVoResTupleScheme getScheme() {
      return new ProductBriefVoResTupleScheme();
    }
  }

  private static class ProductBriefVoResTupleScheme extends TupleScheme<ProductBriefVoRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductBriefVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetProductId()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetFullName()) {
        optionals.set(5);
      }
      if (struct.isSetPrice()) {
        optionals.set(6);
      }
      if (struct.isSetMarketPrice()) {
        optionals.set(7);
      }
      if (struct.isSetSellCount()) {
        optionals.set(8);
      }
      if (struct.isSetStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetBriefIntroduction()) {
        optionals.set(11);
      }
      if (struct.isSetSmallImgUrl()) {
        optionals.set(12);
      }
      if (struct.isSetIsSeckill()) {
        optionals.set(13);
      }
      if (struct.isSetStore()) {
        optionals.set(14);
      }
      if (struct.isSetIsStart()) {
        optionals.set(15);
      }
      if (struct.isSetIsEnd()) {
        optionals.set(16);
      }
      if (struct.isSetServerTime()) {
        optionals.set(17);
      }
      if (struct.isSetSecStore()) {
        optionals.set(18);
      }
      if (struct.isSetSecStartTime()) {
        optionals.set(19);
      }
      if (struct.isSetSecEndTime()) {
        optionals.set(20);
      }
      if (struct.isSetIsPoint()) {
        optionals.set(21);
      }
      if (struct.isSetIsVip()) {
        optionals.set(22);
      }
      if (struct.isSetVipPrice()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFullName()) {
        oprot.writeString(struct.fullName);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeDouble(struct.marketPrice);
      }
      if (struct.isSetSellCount()) {
        oprot.writeI32(struct.sellCount);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetBriefIntroduction()) {
        oprot.writeString(struct.briefIntroduction);
      }
      if (struct.isSetSmallImgUrl()) {
        oprot.writeString(struct.smallImgUrl);
      }
      if (struct.isSetIsSeckill()) {
        oprot.writeString(struct.isSeckill);
      }
      if (struct.isSetStore()) {
        oprot.writeI32(struct.store);
      }
      if (struct.isSetIsStart()) {
        oprot.writeBool(struct.isStart);
      }
      if (struct.isSetIsEnd()) {
        oprot.writeBool(struct.isEnd);
      }
      if (struct.isSetServerTime()) {
        oprot.writeI64(struct.serverTime);
      }
      if (struct.isSetSecStore()) {
        oprot.writeI32(struct.secStore);
      }
      if (struct.isSetSecStartTime()) {
        oprot.writeI64(struct.secStartTime);
      }
      if (struct.isSetSecEndTime()) {
        oprot.writeI64(struct.secEndTime);
      }
      if (struct.isSetIsPoint()) {
        oprot.writeBool(struct.isPoint);
      }
      if (struct.isSetIsVip()) {
        oprot.writeBool(struct.isVip);
      }
      if (struct.isSetVipPrice()) {
        oprot.writeDouble(struct.vipPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductBriefVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fullName = iprot.readString();
        struct.setFullNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.marketPrice = iprot.readDouble();
        struct.setMarketPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sellCount = iprot.readI32();
        struct.setSellCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.briefIntroduction = iprot.readString();
        struct.setBriefIntroductionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.smallImgUrl = iprot.readString();
        struct.setSmallImgUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isSeckill = iprot.readString();
        struct.setIsSeckillIsSet(true);
      }
      if (incoming.get(14)) {
        struct.store = iprot.readI32();
        struct.setStoreIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isStart = iprot.readBool();
        struct.setIsStartIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isEnd = iprot.readBool();
        struct.setIsEndIsSet(true);
      }
      if (incoming.get(17)) {
        struct.serverTime = iprot.readI64();
        struct.setServerTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.secStore = iprot.readI32();
        struct.setSecStoreIsSet(true);
      }
      if (incoming.get(19)) {
        struct.secStartTime = iprot.readI64();
        struct.setSecStartTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.secEndTime = iprot.readI64();
        struct.setSecEndTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isPoint = iprot.readBool();
        struct.setIsPointIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isVip = iprot.readBool();
        struct.setIsVipIsSet(true);
      }
      if (incoming.get(23)) {
        struct.vipPrice = iprot.readDouble();
        struct.setVipPriceIsSet(true);
      }
    }
  }

}

