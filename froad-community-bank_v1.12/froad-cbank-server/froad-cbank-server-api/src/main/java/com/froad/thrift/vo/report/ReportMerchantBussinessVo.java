/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户业务统计信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportMerchantBussinessVo implements org.apache.thrift.TBase<ReportMerchantBussinessVo, ReportMerchantBussinessVo._Fields>, java.io.Serializable, Cloneable, Comparable<ReportMerchantBussinessVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportMerchantBussinessVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FACE_ADD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceAddCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FACE_CANCEL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceCancelCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FACE_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceTotalCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SPECIAL_ADD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("specialAddCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SPECIAL_CANCEL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("specialCancelCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SPECIAL_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("specialTotalCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GROUP_ADD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAddCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField GROUP_CANCEL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupCancelCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField GROUP_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTotalCount", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportMerchantBussinessVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportMerchantBussinessVoTupleSchemeFactory());
  }

  /**
   * 客户端号 *
   */
  public String clientId; // required
  /**
   * 机构号 *
   */
  public String orgCode; // required
  /**
   * 机构名称 *
   */
  public String orgName; // required
  /**
   * 面对面商户新增数 *
   */
  public int faceAddCount; // required
  /**
   * 面对面商户注销数 *
   */
  public int faceCancelCount; // required
  /**
   * 面对面商户结余数 *
   */
  public int faceTotalCount; // required
  /**
   * 名优特惠新增数 *
   */
  public int specialAddCount; // required
  /**
   * 名优特惠注销数 *
   */
  public int specialCancelCount; // required
  /**
   * 名优特惠结余数 *
   */
  public int specialTotalCount; // required
  /**
   * 团购商户新增数 *
   */
  public int groupAddCount; // required
  /**
   * 团购商户注销数 *
   */
  public int groupCancelCount; // required
  /**
   * 团购商户结余数 *
   */
  public int groupTotalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端号 *
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 机构号 *
     */
    ORG_CODE((short)2, "orgCode"),
    /**
     * 机构名称 *
     */
    ORG_NAME((short)3, "orgName"),
    /**
     * 面对面商户新增数 *
     */
    FACE_ADD_COUNT((short)4, "faceAddCount"),
    /**
     * 面对面商户注销数 *
     */
    FACE_CANCEL_COUNT((short)5, "faceCancelCount"),
    /**
     * 面对面商户结余数 *
     */
    FACE_TOTAL_COUNT((short)6, "faceTotalCount"),
    /**
     * 名优特惠新增数 *
     */
    SPECIAL_ADD_COUNT((short)7, "specialAddCount"),
    /**
     * 名优特惠注销数 *
     */
    SPECIAL_CANCEL_COUNT((short)8, "specialCancelCount"),
    /**
     * 名优特惠结余数 *
     */
    SPECIAL_TOTAL_COUNT((short)9, "specialTotalCount"),
    /**
     * 团购商户新增数 *
     */
    GROUP_ADD_COUNT((short)10, "groupAddCount"),
    /**
     * 团购商户注销数 *
     */
    GROUP_CANCEL_COUNT((short)11, "groupCancelCount"),
    /**
     * 团购商户结余数 *
     */
    GROUP_TOTAL_COUNT((short)12, "groupTotalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // ORG_CODE
          return ORG_CODE;
        case 3: // ORG_NAME
          return ORG_NAME;
        case 4: // FACE_ADD_COUNT
          return FACE_ADD_COUNT;
        case 5: // FACE_CANCEL_COUNT
          return FACE_CANCEL_COUNT;
        case 6: // FACE_TOTAL_COUNT
          return FACE_TOTAL_COUNT;
        case 7: // SPECIAL_ADD_COUNT
          return SPECIAL_ADD_COUNT;
        case 8: // SPECIAL_CANCEL_COUNT
          return SPECIAL_CANCEL_COUNT;
        case 9: // SPECIAL_TOTAL_COUNT
          return SPECIAL_TOTAL_COUNT;
        case 10: // GROUP_ADD_COUNT
          return GROUP_ADD_COUNT;
        case 11: // GROUP_CANCEL_COUNT
          return GROUP_CANCEL_COUNT;
        case 12: // GROUP_TOTAL_COUNT
          return GROUP_TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FACEADDCOUNT_ISSET_ID = 0;
  private static final int __FACECANCELCOUNT_ISSET_ID = 1;
  private static final int __FACETOTALCOUNT_ISSET_ID = 2;
  private static final int __SPECIALADDCOUNT_ISSET_ID = 3;
  private static final int __SPECIALCANCELCOUNT_ISSET_ID = 4;
  private static final int __SPECIALTOTALCOUNT_ISSET_ID = 5;
  private static final int __GROUPADDCOUNT_ISSET_ID = 6;
  private static final int __GROUPCANCELCOUNT_ISSET_ID = 7;
  private static final int __GROUPTOTALCOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_ADD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("faceAddCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_CANCEL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("faceCancelCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("faceTotalCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_ADD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("specialAddCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_CANCEL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("specialCancelCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("specialTotalCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ADD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupAddCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_CANCEL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupCancelCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupTotalCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportMerchantBussinessVo.class, metaDataMap);
  }

  public ReportMerchantBussinessVo() {
  }

  public ReportMerchantBussinessVo(
    String clientId,
    String orgCode,
    String orgName,
    int faceAddCount,
    int faceCancelCount,
    int faceTotalCount,
    int specialAddCount,
    int specialCancelCount,
    int specialTotalCount,
    int groupAddCount,
    int groupCancelCount,
    int groupTotalCount)
  {
    this();
    this.clientId = clientId;
    this.orgCode = orgCode;
    this.orgName = orgName;
    this.faceAddCount = faceAddCount;
    setFaceAddCountIsSet(true);
    this.faceCancelCount = faceCancelCount;
    setFaceCancelCountIsSet(true);
    this.faceTotalCount = faceTotalCount;
    setFaceTotalCountIsSet(true);
    this.specialAddCount = specialAddCount;
    setSpecialAddCountIsSet(true);
    this.specialCancelCount = specialCancelCount;
    setSpecialCancelCountIsSet(true);
    this.specialTotalCount = specialTotalCount;
    setSpecialTotalCountIsSet(true);
    this.groupAddCount = groupAddCount;
    setGroupAddCountIsSet(true);
    this.groupCancelCount = groupCancelCount;
    setGroupCancelCountIsSet(true);
    this.groupTotalCount = groupTotalCount;
    setGroupTotalCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportMerchantBussinessVo(ReportMerchantBussinessVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.faceAddCount = other.faceAddCount;
    this.faceCancelCount = other.faceCancelCount;
    this.faceTotalCount = other.faceTotalCount;
    this.specialAddCount = other.specialAddCount;
    this.specialCancelCount = other.specialCancelCount;
    this.specialTotalCount = other.specialTotalCount;
    this.groupAddCount = other.groupAddCount;
    this.groupCancelCount = other.groupCancelCount;
    this.groupTotalCount = other.groupTotalCount;
  }

  public ReportMerchantBussinessVo deepCopy() {
    return new ReportMerchantBussinessVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.orgCode = null;
    this.orgName = null;
    setFaceAddCountIsSet(false);
    this.faceAddCount = 0;
    setFaceCancelCountIsSet(false);
    this.faceCancelCount = 0;
    setFaceTotalCountIsSet(false);
    this.faceTotalCount = 0;
    setSpecialAddCountIsSet(false);
    this.specialAddCount = 0;
    setSpecialCancelCountIsSet(false);
    this.specialCancelCount = 0;
    setSpecialTotalCountIsSet(false);
    this.specialTotalCount = 0;
    setGroupAddCountIsSet(false);
    this.groupAddCount = 0;
    setGroupCancelCountIsSet(false);
    this.groupCancelCount = 0;
    setGroupTotalCountIsSet(false);
    this.groupTotalCount = 0;
  }

  /**
   * 客户端号 *
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端号 *
   */
  public ReportMerchantBussinessVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 机构号 *
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号 *
   */
  public ReportMerchantBussinessVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 机构名称 *
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 机构名称 *
   */
  public ReportMerchantBussinessVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 面对面商户新增数 *
   */
  public int getFaceAddCount() {
    return this.faceAddCount;
  }

  /**
   * 面对面商户新增数 *
   */
  public ReportMerchantBussinessVo setFaceAddCount(int faceAddCount) {
    this.faceAddCount = faceAddCount;
    setFaceAddCountIsSet(true);
    return this;
  }

  public void unsetFaceAddCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEADDCOUNT_ISSET_ID);
  }

  /** Returns true if field faceAddCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceAddCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACEADDCOUNT_ISSET_ID);
  }

  public void setFaceAddCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEADDCOUNT_ISSET_ID, value);
  }

  /**
   * 面对面商户注销数 *
   */
  public int getFaceCancelCount() {
    return this.faceCancelCount;
  }

  /**
   * 面对面商户注销数 *
   */
  public ReportMerchantBussinessVo setFaceCancelCount(int faceCancelCount) {
    this.faceCancelCount = faceCancelCount;
    setFaceCancelCountIsSet(true);
    return this;
  }

  public void unsetFaceCancelCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACECANCELCOUNT_ISSET_ID);
  }

  /** Returns true if field faceCancelCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceCancelCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACECANCELCOUNT_ISSET_ID);
  }

  public void setFaceCancelCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACECANCELCOUNT_ISSET_ID, value);
  }

  /**
   * 面对面商户结余数 *
   */
  public int getFaceTotalCount() {
    return this.faceTotalCount;
  }

  /**
   * 面对面商户结余数 *
   */
  public ReportMerchantBussinessVo setFaceTotalCount(int faceTotalCount) {
    this.faceTotalCount = faceTotalCount;
    setFaceTotalCountIsSet(true);
    return this;
  }

  public void unsetFaceTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field faceTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACETOTALCOUNT_ISSET_ID);
  }

  public void setFaceTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 名优特惠新增数 *
   */
  public int getSpecialAddCount() {
    return this.specialAddCount;
  }

  /**
   * 名优特惠新增数 *
   */
  public ReportMerchantBussinessVo setSpecialAddCount(int specialAddCount) {
    this.specialAddCount = specialAddCount;
    setSpecialAddCountIsSet(true);
    return this;
  }

  public void unsetSpecialAddCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALADDCOUNT_ISSET_ID);
  }

  /** Returns true if field specialAddCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialAddCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALADDCOUNT_ISSET_ID);
  }

  public void setSpecialAddCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALADDCOUNT_ISSET_ID, value);
  }

  /**
   * 名优特惠注销数 *
   */
  public int getSpecialCancelCount() {
    return this.specialCancelCount;
  }

  /**
   * 名优特惠注销数 *
   */
  public ReportMerchantBussinessVo setSpecialCancelCount(int specialCancelCount) {
    this.specialCancelCount = specialCancelCount;
    setSpecialCancelCountIsSet(true);
    return this;
  }

  public void unsetSpecialCancelCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALCANCELCOUNT_ISSET_ID);
  }

  /** Returns true if field specialCancelCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialCancelCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALCANCELCOUNT_ISSET_ID);
  }

  public void setSpecialCancelCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALCANCELCOUNT_ISSET_ID, value);
  }

  /**
   * 名优特惠结余数 *
   */
  public int getSpecialTotalCount() {
    return this.specialTotalCount;
  }

  /**
   * 名优特惠结余数 *
   */
  public ReportMerchantBussinessVo setSpecialTotalCount(int specialTotalCount) {
    this.specialTotalCount = specialTotalCount;
    setSpecialTotalCountIsSet(true);
    return this;
  }

  public void unsetSpecialTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field specialTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTOTALCOUNT_ISSET_ID);
  }

  public void setSpecialTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 团购商户新增数 *
   */
  public int getGroupAddCount() {
    return this.groupAddCount;
  }

  /**
   * 团购商户新增数 *
   */
  public ReportMerchantBussinessVo setGroupAddCount(int groupAddCount) {
    this.groupAddCount = groupAddCount;
    setGroupAddCountIsSet(true);
    return this;
  }

  public void unsetGroupAddCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPADDCOUNT_ISSET_ID);
  }

  /** Returns true if field groupAddCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupAddCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPADDCOUNT_ISSET_ID);
  }

  public void setGroupAddCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPADDCOUNT_ISSET_ID, value);
  }

  /**
   * 团购商户注销数 *
   */
  public int getGroupCancelCount() {
    return this.groupCancelCount;
  }

  /**
   * 团购商户注销数 *
   */
  public ReportMerchantBussinessVo setGroupCancelCount(int groupCancelCount) {
    this.groupCancelCount = groupCancelCount;
    setGroupCancelCountIsSet(true);
    return this;
  }

  public void unsetGroupCancelCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPCANCELCOUNT_ISSET_ID);
  }

  /** Returns true if field groupCancelCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupCancelCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPCANCELCOUNT_ISSET_ID);
  }

  public void setGroupCancelCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPCANCELCOUNT_ISSET_ID, value);
  }

  /**
   * 团购商户结余数 *
   */
  public int getGroupTotalCount() {
    return this.groupTotalCount;
  }

  /**
   * 团购商户结余数 *
   */
  public ReportMerchantBussinessVo setGroupTotalCount(int groupTotalCount) {
    this.groupTotalCount = groupTotalCount;
    setGroupTotalCountIsSet(true);
    return this;
  }

  public void unsetGroupTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field groupTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPTOTALCOUNT_ISSET_ID);
  }

  public void setGroupTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPTOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case FACE_ADD_COUNT:
      if (value == null) {
        unsetFaceAddCount();
      } else {
        setFaceAddCount((Integer)value);
      }
      break;

    case FACE_CANCEL_COUNT:
      if (value == null) {
        unsetFaceCancelCount();
      } else {
        setFaceCancelCount((Integer)value);
      }
      break;

    case FACE_TOTAL_COUNT:
      if (value == null) {
        unsetFaceTotalCount();
      } else {
        setFaceTotalCount((Integer)value);
      }
      break;

    case SPECIAL_ADD_COUNT:
      if (value == null) {
        unsetSpecialAddCount();
      } else {
        setSpecialAddCount((Integer)value);
      }
      break;

    case SPECIAL_CANCEL_COUNT:
      if (value == null) {
        unsetSpecialCancelCount();
      } else {
        setSpecialCancelCount((Integer)value);
      }
      break;

    case SPECIAL_TOTAL_COUNT:
      if (value == null) {
        unsetSpecialTotalCount();
      } else {
        setSpecialTotalCount((Integer)value);
      }
      break;

    case GROUP_ADD_COUNT:
      if (value == null) {
        unsetGroupAddCount();
      } else {
        setGroupAddCount((Integer)value);
      }
      break;

    case GROUP_CANCEL_COUNT:
      if (value == null) {
        unsetGroupCancelCount();
      } else {
        setGroupCancelCount((Integer)value);
      }
      break;

    case GROUP_TOTAL_COUNT:
      if (value == null) {
        unsetGroupTotalCount();
      } else {
        setGroupTotalCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case ORG_CODE:
      return getOrgCode();

    case ORG_NAME:
      return getOrgName();

    case FACE_ADD_COUNT:
      return Integer.valueOf(getFaceAddCount());

    case FACE_CANCEL_COUNT:
      return Integer.valueOf(getFaceCancelCount());

    case FACE_TOTAL_COUNT:
      return Integer.valueOf(getFaceTotalCount());

    case SPECIAL_ADD_COUNT:
      return Integer.valueOf(getSpecialAddCount());

    case SPECIAL_CANCEL_COUNT:
      return Integer.valueOf(getSpecialCancelCount());

    case SPECIAL_TOTAL_COUNT:
      return Integer.valueOf(getSpecialTotalCount());

    case GROUP_ADD_COUNT:
      return Integer.valueOf(getGroupAddCount());

    case GROUP_CANCEL_COUNT:
      return Integer.valueOf(getGroupCancelCount());

    case GROUP_TOTAL_COUNT:
      return Integer.valueOf(getGroupTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_NAME:
      return isSetOrgName();
    case FACE_ADD_COUNT:
      return isSetFaceAddCount();
    case FACE_CANCEL_COUNT:
      return isSetFaceCancelCount();
    case FACE_TOTAL_COUNT:
      return isSetFaceTotalCount();
    case SPECIAL_ADD_COUNT:
      return isSetSpecialAddCount();
    case SPECIAL_CANCEL_COUNT:
      return isSetSpecialCancelCount();
    case SPECIAL_TOTAL_COUNT:
      return isSetSpecialTotalCount();
    case GROUP_ADD_COUNT:
      return isSetGroupAddCount();
    case GROUP_CANCEL_COUNT:
      return isSetGroupCancelCount();
    case GROUP_TOTAL_COUNT:
      return isSetGroupTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportMerchantBussinessVo)
      return this.equals((ReportMerchantBussinessVo)that);
    return false;
  }

  public boolean equals(ReportMerchantBussinessVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_faceAddCount = true;
    boolean that_present_faceAddCount = true;
    if (this_present_faceAddCount || that_present_faceAddCount) {
      if (!(this_present_faceAddCount && that_present_faceAddCount))
        return false;
      if (this.faceAddCount != that.faceAddCount)
        return false;
    }

    boolean this_present_faceCancelCount = true;
    boolean that_present_faceCancelCount = true;
    if (this_present_faceCancelCount || that_present_faceCancelCount) {
      if (!(this_present_faceCancelCount && that_present_faceCancelCount))
        return false;
      if (this.faceCancelCount != that.faceCancelCount)
        return false;
    }

    boolean this_present_faceTotalCount = true;
    boolean that_present_faceTotalCount = true;
    if (this_present_faceTotalCount || that_present_faceTotalCount) {
      if (!(this_present_faceTotalCount && that_present_faceTotalCount))
        return false;
      if (this.faceTotalCount != that.faceTotalCount)
        return false;
    }

    boolean this_present_specialAddCount = true;
    boolean that_present_specialAddCount = true;
    if (this_present_specialAddCount || that_present_specialAddCount) {
      if (!(this_present_specialAddCount && that_present_specialAddCount))
        return false;
      if (this.specialAddCount != that.specialAddCount)
        return false;
    }

    boolean this_present_specialCancelCount = true;
    boolean that_present_specialCancelCount = true;
    if (this_present_specialCancelCount || that_present_specialCancelCount) {
      if (!(this_present_specialCancelCount && that_present_specialCancelCount))
        return false;
      if (this.specialCancelCount != that.specialCancelCount)
        return false;
    }

    boolean this_present_specialTotalCount = true;
    boolean that_present_specialTotalCount = true;
    if (this_present_specialTotalCount || that_present_specialTotalCount) {
      if (!(this_present_specialTotalCount && that_present_specialTotalCount))
        return false;
      if (this.specialTotalCount != that.specialTotalCount)
        return false;
    }

    boolean this_present_groupAddCount = true;
    boolean that_present_groupAddCount = true;
    if (this_present_groupAddCount || that_present_groupAddCount) {
      if (!(this_present_groupAddCount && that_present_groupAddCount))
        return false;
      if (this.groupAddCount != that.groupAddCount)
        return false;
    }

    boolean this_present_groupCancelCount = true;
    boolean that_present_groupCancelCount = true;
    if (this_present_groupCancelCount || that_present_groupCancelCount) {
      if (!(this_present_groupCancelCount && that_present_groupCancelCount))
        return false;
      if (this.groupCancelCount != that.groupCancelCount)
        return false;
    }

    boolean this_present_groupTotalCount = true;
    boolean that_present_groupTotalCount = true;
    if (this_present_groupTotalCount || that_present_groupTotalCount) {
      if (!(this_present_groupTotalCount && that_present_groupTotalCount))
        return false;
      if (this.groupTotalCount != that.groupTotalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_faceAddCount = true;
    list.add(present_faceAddCount);
    if (present_faceAddCount)
      list.add(faceAddCount);

    boolean present_faceCancelCount = true;
    list.add(present_faceCancelCount);
    if (present_faceCancelCount)
      list.add(faceCancelCount);

    boolean present_faceTotalCount = true;
    list.add(present_faceTotalCount);
    if (present_faceTotalCount)
      list.add(faceTotalCount);

    boolean present_specialAddCount = true;
    list.add(present_specialAddCount);
    if (present_specialAddCount)
      list.add(specialAddCount);

    boolean present_specialCancelCount = true;
    list.add(present_specialCancelCount);
    if (present_specialCancelCount)
      list.add(specialCancelCount);

    boolean present_specialTotalCount = true;
    list.add(present_specialTotalCount);
    if (present_specialTotalCount)
      list.add(specialTotalCount);

    boolean present_groupAddCount = true;
    list.add(present_groupAddCount);
    if (present_groupAddCount)
      list.add(groupAddCount);

    boolean present_groupCancelCount = true;
    list.add(present_groupCancelCount);
    if (present_groupCancelCount)
      list.add(groupCancelCount);

    boolean present_groupTotalCount = true;
    list.add(present_groupTotalCount);
    if (present_groupTotalCount)
      list.add(groupTotalCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportMerchantBussinessVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceAddCount()).compareTo(other.isSetFaceAddCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceAddCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceAddCount, other.faceAddCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceCancelCount()).compareTo(other.isSetFaceCancelCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceCancelCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceCancelCount, other.faceCancelCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceTotalCount()).compareTo(other.isSetFaceTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceTotalCount, other.faceTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialAddCount()).compareTo(other.isSetSpecialAddCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialAddCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialAddCount, other.specialAddCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialCancelCount()).compareTo(other.isSetSpecialCancelCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialCancelCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialCancelCount, other.specialCancelCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialTotalCount()).compareTo(other.isSetSpecialTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialTotalCount, other.specialTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupAddCount()).compareTo(other.isSetGroupAddCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupAddCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAddCount, other.groupAddCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupCancelCount()).compareTo(other.isSetGroupCancelCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupCancelCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupCancelCount, other.groupCancelCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTotalCount()).compareTo(other.isSetGroupTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTotalCount, other.groupTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportMerchantBussinessVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceAddCount:");
    sb.append(this.faceAddCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceCancelCount:");
    sb.append(this.faceCancelCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceTotalCount:");
    sb.append(this.faceTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialAddCount:");
    sb.append(this.specialAddCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialCancelCount:");
    sb.append(this.specialCancelCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialTotalCount:");
    sb.append(this.specialTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupAddCount:");
    sb.append(this.groupAddCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupCancelCount:");
    sb.append(this.groupCancelCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupTotalCount:");
    sb.append(this.groupTotalCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clientId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not present! Struct: " + toString());
    }
    if (orgCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgCode' was not present! Struct: " + toString());
    }
    if (orgName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'faceAddCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'faceCancelCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'faceTotalCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'specialAddCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'specialCancelCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'specialTotalCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'groupAddCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'groupCancelCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'groupTotalCount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportMerchantBussinessVoStandardSchemeFactory implements SchemeFactory {
    public ReportMerchantBussinessVoStandardScheme getScheme() {
      return new ReportMerchantBussinessVoStandardScheme();
    }
  }

  private static class ReportMerchantBussinessVoStandardScheme extends StandardScheme<ReportMerchantBussinessVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportMerchantBussinessVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACE_ADD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceAddCount = iprot.readI32();
              struct.setFaceAddCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACE_CANCEL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceCancelCount = iprot.readI32();
              struct.setFaceCancelCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FACE_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceTotalCount = iprot.readI32();
              struct.setFaceTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPECIAL_ADD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialAddCount = iprot.readI32();
              struct.setSpecialAddCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPECIAL_CANCEL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialCancelCount = iprot.readI32();
              struct.setSpecialCancelCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SPECIAL_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialTotalCount = iprot.readI32();
              struct.setSpecialTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GROUP_ADD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupAddCount = iprot.readI32();
              struct.setGroupAddCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUP_CANCEL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupCancelCount = iprot.readI32();
              struct.setGroupCancelCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GROUP_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupTotalCount = iprot.readI32();
              struct.setGroupTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFaceAddCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'faceAddCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFaceCancelCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'faceCancelCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFaceTotalCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'faceTotalCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpecialAddCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specialAddCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpecialCancelCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specialCancelCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpecialTotalCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specialTotalCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGroupAddCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupAddCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGroupCancelCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupCancelCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGroupTotalCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupTotalCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportMerchantBussinessVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACE_ADD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.faceAddCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_CANCEL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.faceCancelCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.faceTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_ADD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.specialAddCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_CANCEL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.specialCancelCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.specialTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ADD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.groupAddCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_CANCEL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.groupCancelCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.groupTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportMerchantBussinessVoTupleSchemeFactory implements SchemeFactory {
    public ReportMerchantBussinessVoTupleScheme getScheme() {
      return new ReportMerchantBussinessVoTupleScheme();
    }
  }

  private static class ReportMerchantBussinessVoTupleScheme extends TupleScheme<ReportMerchantBussinessVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportMerchantBussinessVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientId);
      oprot.writeString(struct.orgCode);
      oprot.writeString(struct.orgName);
      oprot.writeI32(struct.faceAddCount);
      oprot.writeI32(struct.faceCancelCount);
      oprot.writeI32(struct.faceTotalCount);
      oprot.writeI32(struct.specialAddCount);
      oprot.writeI32(struct.specialCancelCount);
      oprot.writeI32(struct.specialTotalCount);
      oprot.writeI32(struct.groupAddCount);
      oprot.writeI32(struct.groupCancelCount);
      oprot.writeI32(struct.groupTotalCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportMerchantBussinessVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientId = iprot.readString();
      struct.setClientIdIsSet(true);
      struct.orgCode = iprot.readString();
      struct.setOrgCodeIsSet(true);
      struct.orgName = iprot.readString();
      struct.setOrgNameIsSet(true);
      struct.faceAddCount = iprot.readI32();
      struct.setFaceAddCountIsSet(true);
      struct.faceCancelCount = iprot.readI32();
      struct.setFaceCancelCountIsSet(true);
      struct.faceTotalCount = iprot.readI32();
      struct.setFaceTotalCountIsSet(true);
      struct.specialAddCount = iprot.readI32();
      struct.setSpecialAddCountIsSet(true);
      struct.specialCancelCount = iprot.readI32();
      struct.setSpecialCancelCountIsSet(true);
      struct.specialTotalCount = iprot.readI32();
      struct.setSpecialTotalCountIsSet(true);
      struct.groupAddCount = iprot.readI32();
      struct.setGroupAddCountIsSet(true);
      struct.groupCancelCount = iprot.readI32();
      struct.setGroupCancelCountIsSet(true);
      struct.groupTotalCount = iprot.readI32();
      struct.setGroupTotalCountIsSet(true);
    }
  }

}

