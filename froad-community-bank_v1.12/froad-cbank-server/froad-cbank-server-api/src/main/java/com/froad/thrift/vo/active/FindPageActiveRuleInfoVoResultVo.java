/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 查询 营销活动规则信息 ActiveRuleInfoVo 分页 结果
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FindPageActiveRuleInfoVoResultVo implements org.apache.thrift.TBase<FindPageActiveRuleInfoVoResultVo, FindPageActiveRuleInfoVoResultVo._Fields>, java.io.Serializable, Cloneable, Comparable<FindPageActiveRuleInfoVoResultVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindPageActiveRuleInfoVoResultVo");

  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_PAGE_VO_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoPageVoRes", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FindPageActiveRuleInfoVoResultVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FindPageActiveRuleInfoVoResultVoTupleSchemeFactory());
  }

  /**
   * ResultVo 结果
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required
  /**
   * 分页结果
   */
  public ActiveRuleInfoPageVoRes activeRuleInfoPageVoRes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * ResultVo 结果
     */
    RESULT_VO((short)1, "resultVo"),
    /**
     * 分页结果
     */
    ACTIVE_RULE_INFO_PAGE_VO_RES((short)2, "activeRuleInfoPageVoRes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_VO
          return RESULT_VO;
        case 2: // ACTIVE_RULE_INFO_PAGE_VO_RES
          return ACTIVE_RULE_INFO_PAGE_VO_RES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.ACTIVE_RULE_INFO_PAGE_VO_RES, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoPageVoRes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActiveRuleInfoPageVoRes.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindPageActiveRuleInfoVoResultVo.class, metaDataMap);
  }

  public FindPageActiveRuleInfoVoResultVo() {
  }

  public FindPageActiveRuleInfoVoResultVo(
    com.froad.thrift.vo.ResultVo resultVo,
    ActiveRuleInfoPageVoRes activeRuleInfoPageVoRes)
  {
    this();
    this.resultVo = resultVo;
    this.activeRuleInfoPageVoRes = activeRuleInfoPageVoRes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindPageActiveRuleInfoVoResultVo(FindPageActiveRuleInfoVoResultVo other) {
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    if (other.isSetActiveRuleInfoPageVoRes()) {
      this.activeRuleInfoPageVoRes = new ActiveRuleInfoPageVoRes(other.activeRuleInfoPageVoRes);
    }
  }

  public FindPageActiveRuleInfoVoResultVo deepCopy() {
    return new FindPageActiveRuleInfoVoResultVo(this);
  }

  @Override
  public void clear() {
    this.resultVo = null;
    this.activeRuleInfoPageVoRes = null;
  }

  /**
   * ResultVo 结果
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * ResultVo 结果
   */
  public FindPageActiveRuleInfoVoResultVo setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  /**
   * 分页结果
   */
  public ActiveRuleInfoPageVoRes getActiveRuleInfoPageVoRes() {
    return this.activeRuleInfoPageVoRes;
  }

  /**
   * 分页结果
   */
  public FindPageActiveRuleInfoVoResultVo setActiveRuleInfoPageVoRes(ActiveRuleInfoPageVoRes activeRuleInfoPageVoRes) {
    this.activeRuleInfoPageVoRes = activeRuleInfoPageVoRes;
    return this;
  }

  public void unsetActiveRuleInfoPageVoRes() {
    this.activeRuleInfoPageVoRes = null;
  }

  /** Returns true if field activeRuleInfoPageVoRes is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveRuleInfoPageVoRes() {
    return this.activeRuleInfoPageVoRes != null;
  }

  public void setActiveRuleInfoPageVoResIsSet(boolean value) {
    if (!value) {
      this.activeRuleInfoPageVoRes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case ACTIVE_RULE_INFO_PAGE_VO_RES:
      if (value == null) {
        unsetActiveRuleInfoPageVoRes();
      } else {
        setActiveRuleInfoPageVoRes((ActiveRuleInfoPageVoRes)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_VO:
      return getResultVo();

    case ACTIVE_RULE_INFO_PAGE_VO_RES:
      return getActiveRuleInfoPageVoRes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_VO:
      return isSetResultVo();
    case ACTIVE_RULE_INFO_PAGE_VO_RES:
      return isSetActiveRuleInfoPageVoRes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindPageActiveRuleInfoVoResultVo)
      return this.equals((FindPageActiveRuleInfoVoResultVo)that);
    return false;
  }

  public boolean equals(FindPageActiveRuleInfoVoResultVo that) {
    if (that == null)
      return false;

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_activeRuleInfoPageVoRes = true && this.isSetActiveRuleInfoPageVoRes();
    boolean that_present_activeRuleInfoPageVoRes = true && that.isSetActiveRuleInfoPageVoRes();
    if (this_present_activeRuleInfoPageVoRes || that_present_activeRuleInfoPageVoRes) {
      if (!(this_present_activeRuleInfoPageVoRes && that_present_activeRuleInfoPageVoRes))
        return false;
      if (!this.activeRuleInfoPageVoRes.equals(that.activeRuleInfoPageVoRes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_activeRuleInfoPageVoRes = true && (isSetActiveRuleInfoPageVoRes());
    list.add(present_activeRuleInfoPageVoRes);
    if (present_activeRuleInfoPageVoRes)
      list.add(activeRuleInfoPageVoRes);

    return list.hashCode();
  }

  @Override
  public int compareTo(FindPageActiveRuleInfoVoResultVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveRuleInfoPageVoRes()).compareTo(other.isSetActiveRuleInfoPageVoRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveRuleInfoPageVoRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoPageVoRes, other.activeRuleInfoPageVoRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FindPageActiveRuleInfoVoResultVo(");
    boolean first = true;

    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeRuleInfoPageVoRes:");
    if (this.activeRuleInfoPageVoRes == null) {
      sb.append("null");
    } else {
      sb.append(this.activeRuleInfoPageVoRes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
    if (activeRuleInfoPageVoRes != null) {
      activeRuleInfoPageVoRes.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FindPageActiveRuleInfoVoResultVoStandardSchemeFactory implements SchemeFactory {
    public FindPageActiveRuleInfoVoResultVoStandardScheme getScheme() {
      return new FindPageActiveRuleInfoVoResultVoStandardScheme();
    }
  }

  private static class FindPageActiveRuleInfoVoResultVoStandardScheme extends StandardScheme<FindPageActiveRuleInfoVoResultVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FindPageActiveRuleInfoVoResultVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_RULE_INFO_PAGE_VO_RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activeRuleInfoPageVoRes = new ActiveRuleInfoPageVoRes();
              struct.activeRuleInfoPageVoRes.read(iprot);
              struct.setActiveRuleInfoPageVoResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FindPageActiveRuleInfoVoResultVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.activeRuleInfoPageVoRes != null) {
        oprot.writeFieldBegin(ACTIVE_RULE_INFO_PAGE_VO_RES_FIELD_DESC);
        struct.activeRuleInfoPageVoRes.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FindPageActiveRuleInfoVoResultVoTupleSchemeFactory implements SchemeFactory {
    public FindPageActiveRuleInfoVoResultVoTupleScheme getScheme() {
      return new FindPageActiveRuleInfoVoResultVoTupleScheme();
    }
  }

  private static class FindPageActiveRuleInfoVoResultVoTupleScheme extends TupleScheme<FindPageActiveRuleInfoVoResultVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FindPageActiveRuleInfoVoResultVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultVo()) {
        optionals.set(0);
      }
      if (struct.isSetActiveRuleInfoPageVoRes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetActiveRuleInfoPageVoRes()) {
        struct.activeRuleInfoPageVoRes.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FindPageActiveRuleInfoVoResultVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activeRuleInfoPageVoRes = new ActiveRuleInfoPageVoRes();
        struct.activeRuleInfoPageVoRes.read(iprot);
        struct.setActiveRuleInfoPageVoResIsSet(true);
      }
    }
  }

}

