/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 支持参与的促销活动
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveSustainRelationVo implements org.apache.thrift.TBase<ActiveSustainRelationVo, ActiveSustainRelationVo._Fields>, java.io.Serializable, Cloneable, Comparable<ActiveSustainRelationVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveSustainRelationVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUSTAIN_ACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sustainActiveType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUSTAIN_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sustainActiveId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SUSTAIN_ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sustainActiveName", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveSustainRelationVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveSustainRelationVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 更新时间
   */
  public long updateTime; // required
  /**
   * 活动ID
   */
  public String activeId; // required
  /**
   * 活动名称
   */
  public String activeName; // required
  /**
   * 支持活动类型
   */
  public String sustainActiveType; // required
  /**
   * 支持活动ID
   */
  public String sustainActiveId; // required
  /**
   * 支持活动名称 *
   */
  public String sustainActiveName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)3, "createTime"),
    /**
     * 更新时间
     */
    UPDATE_TIME((short)4, "updateTime"),
    /**
     * 活动ID
     */
    ACTIVE_ID((short)5, "activeId"),
    /**
     * 活动名称
     */
    ACTIVE_NAME((short)6, "activeName"),
    /**
     * 支持活动类型
     */
    SUSTAIN_ACTIVE_TYPE((short)7, "sustainActiveType"),
    /**
     * 支持活动ID
     */
    SUSTAIN_ACTIVE_ID((short)8, "sustainActiveId"),
    /**
     * 支持活动名称 *
     */
    SUSTAIN_ACTIVE_NAME((short)9, "sustainActiveName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // UPDATE_TIME
          return UPDATE_TIME;
        case 5: // ACTIVE_ID
          return ACTIVE_ID;
        case 6: // ACTIVE_NAME
          return ACTIVE_NAME;
        case 7: // SUSTAIN_ACTIVE_TYPE
          return SUSTAIN_ACTIVE_TYPE;
        case 8: // SUSTAIN_ACTIVE_ID
          return SUSTAIN_ACTIVE_ID;
        case 9: // SUSTAIN_ACTIVE_NAME
          return SUSTAIN_ACTIVE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("activeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUSTAIN_ACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sustainActiveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUSTAIN_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("sustainActiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUSTAIN_ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sustainActiveName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveSustainRelationVo.class, metaDataMap);
  }

  public ActiveSustainRelationVo() {
  }

  public ActiveSustainRelationVo(
    long id,
    String clientId,
    long createTime,
    long updateTime,
    String activeId,
    String activeName,
    String sustainActiveType,
    String sustainActiveId,
    String sustainActiveName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.activeId = activeId;
    this.activeName = activeName;
    this.sustainActiveType = sustainActiveType;
    this.sustainActiveId = sustainActiveId;
    this.sustainActiveName = sustainActiveName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveSustainRelationVo(ActiveSustainRelationVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetActiveName()) {
      this.activeName = other.activeName;
    }
    if (other.isSetSustainActiveType()) {
      this.sustainActiveType = other.sustainActiveType;
    }
    if (other.isSetSustainActiveId()) {
      this.sustainActiveId = other.sustainActiveId;
    }
    if (other.isSetSustainActiveName()) {
      this.sustainActiveName = other.sustainActiveName;
    }
  }

  public ActiveSustainRelationVo deepCopy() {
    return new ActiveSustainRelationVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.activeId = null;
    this.activeName = null;
    this.sustainActiveType = null;
    this.sustainActiveId = null;
    this.sustainActiveName = null;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public ActiveSustainRelationVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public ActiveSustainRelationVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public ActiveSustainRelationVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 更新时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 更新时间
   */
  public ActiveSustainRelationVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 活动ID
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动ID
   */
  public ActiveSustainRelationVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 活动名称
   */
  public String getActiveName() {
    return this.activeName;
  }

  /**
   * 活动名称
   */
  public ActiveSustainRelationVo setActiveName(String activeName) {
    this.activeName = activeName;
    return this;
  }

  public void unsetActiveName() {
    this.activeName = null;
  }

  /** Returns true if field activeName is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveName() {
    return this.activeName != null;
  }

  public void setActiveNameIsSet(boolean value) {
    if (!value) {
      this.activeName = null;
    }
  }

  /**
   * 支持活动类型
   */
  public String getSustainActiveType() {
    return this.sustainActiveType;
  }

  /**
   * 支持活动类型
   */
  public ActiveSustainRelationVo setSustainActiveType(String sustainActiveType) {
    this.sustainActiveType = sustainActiveType;
    return this;
  }

  public void unsetSustainActiveType() {
    this.sustainActiveType = null;
  }

  /** Returns true if field sustainActiveType is set (has been assigned a value) and false otherwise */
  public boolean isSetSustainActiveType() {
    return this.sustainActiveType != null;
  }

  public void setSustainActiveTypeIsSet(boolean value) {
    if (!value) {
      this.sustainActiveType = null;
    }
  }

  /**
   * 支持活动ID
   */
  public String getSustainActiveId() {
    return this.sustainActiveId;
  }

  /**
   * 支持活动ID
   */
  public ActiveSustainRelationVo setSustainActiveId(String sustainActiveId) {
    this.sustainActiveId = sustainActiveId;
    return this;
  }

  public void unsetSustainActiveId() {
    this.sustainActiveId = null;
  }

  /** Returns true if field sustainActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetSustainActiveId() {
    return this.sustainActiveId != null;
  }

  public void setSustainActiveIdIsSet(boolean value) {
    if (!value) {
      this.sustainActiveId = null;
    }
  }

  /**
   * 支持活动名称 *
   */
  public String getSustainActiveName() {
    return this.sustainActiveName;
  }

  /**
   * 支持活动名称 *
   */
  public ActiveSustainRelationVo setSustainActiveName(String sustainActiveName) {
    this.sustainActiveName = sustainActiveName;
    return this;
  }

  public void unsetSustainActiveName() {
    this.sustainActiveName = null;
  }

  /** Returns true if field sustainActiveName is set (has been assigned a value) and false otherwise */
  public boolean isSetSustainActiveName() {
    return this.sustainActiveName != null;
  }

  public void setSustainActiveNameIsSet(boolean value) {
    if (!value) {
      this.sustainActiveName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case ACTIVE_NAME:
      if (value == null) {
        unsetActiveName();
      } else {
        setActiveName((String)value);
      }
      break;

    case SUSTAIN_ACTIVE_TYPE:
      if (value == null) {
        unsetSustainActiveType();
      } else {
        setSustainActiveType((String)value);
      }
      break;

    case SUSTAIN_ACTIVE_ID:
      if (value == null) {
        unsetSustainActiveId();
      } else {
        setSustainActiveId((String)value);
      }
      break;

    case SUSTAIN_ACTIVE_NAME:
      if (value == null) {
        unsetSustainActiveName();
      } else {
        setSustainActiveName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ACTIVE_ID:
      return getActiveId();

    case ACTIVE_NAME:
      return getActiveName();

    case SUSTAIN_ACTIVE_TYPE:
      return getSustainActiveType();

    case SUSTAIN_ACTIVE_ID:
      return getSustainActiveId();

    case SUSTAIN_ACTIVE_NAME:
      return getSustainActiveName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ACTIVE_ID:
      return isSetActiveId();
    case ACTIVE_NAME:
      return isSetActiveName();
    case SUSTAIN_ACTIVE_TYPE:
      return isSetSustainActiveType();
    case SUSTAIN_ACTIVE_ID:
      return isSetSustainActiveId();
    case SUSTAIN_ACTIVE_NAME:
      return isSetSustainActiveName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveSustainRelationVo)
      return this.equals((ActiveSustainRelationVo)that);
    return false;
  }

  public boolean equals(ActiveSustainRelationVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_activeName = true && this.isSetActiveName();
    boolean that_present_activeName = true && that.isSetActiveName();
    if (this_present_activeName || that_present_activeName) {
      if (!(this_present_activeName && that_present_activeName))
        return false;
      if (!this.activeName.equals(that.activeName))
        return false;
    }

    boolean this_present_sustainActiveType = true && this.isSetSustainActiveType();
    boolean that_present_sustainActiveType = true && that.isSetSustainActiveType();
    if (this_present_sustainActiveType || that_present_sustainActiveType) {
      if (!(this_present_sustainActiveType && that_present_sustainActiveType))
        return false;
      if (!this.sustainActiveType.equals(that.sustainActiveType))
        return false;
    }

    boolean this_present_sustainActiveId = true && this.isSetSustainActiveId();
    boolean that_present_sustainActiveId = true && that.isSetSustainActiveId();
    if (this_present_sustainActiveId || that_present_sustainActiveId) {
      if (!(this_present_sustainActiveId && that_present_sustainActiveId))
        return false;
      if (!this.sustainActiveId.equals(that.sustainActiveId))
        return false;
    }

    boolean this_present_sustainActiveName = true && this.isSetSustainActiveName();
    boolean that_present_sustainActiveName = true && that.isSetSustainActiveName();
    if (this_present_sustainActiveName || that_present_sustainActiveName) {
      if (!(this_present_sustainActiveName && that_present_sustainActiveName))
        return false;
      if (!this.sustainActiveName.equals(that.sustainActiveName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_activeName = true && (isSetActiveName());
    list.add(present_activeName);
    if (present_activeName)
      list.add(activeName);

    boolean present_sustainActiveType = true && (isSetSustainActiveType());
    list.add(present_sustainActiveType);
    if (present_sustainActiveType)
      list.add(sustainActiveType);

    boolean present_sustainActiveId = true && (isSetSustainActiveId());
    list.add(present_sustainActiveId);
    if (present_sustainActiveId)
      list.add(sustainActiveId);

    boolean present_sustainActiveName = true && (isSetSustainActiveName());
    list.add(present_sustainActiveName);
    if (present_sustainActiveName)
      list.add(sustainActiveName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ActiveSustainRelationVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveName()).compareTo(other.isSetActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeName, other.activeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSustainActiveType()).compareTo(other.isSetSustainActiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSustainActiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sustainActiveType, other.sustainActiveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSustainActiveId()).compareTo(other.isSetSustainActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSustainActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sustainActiveId, other.sustainActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSustainActiveName()).compareTo(other.isSetSustainActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSustainActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sustainActiveName, other.sustainActiveName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveSustainRelationVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeName:");
    if (this.activeName == null) {
      sb.append("null");
    } else {
      sb.append(this.activeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sustainActiveType:");
    if (this.sustainActiveType == null) {
      sb.append("null");
    } else {
      sb.append(this.sustainActiveType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sustainActiveId:");
    if (this.sustainActiveId == null) {
      sb.append("null");
    } else {
      sb.append(this.sustainActiveId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sustainActiveName:");
    if (this.sustainActiveName == null) {
      sb.append("null");
    } else {
      sb.append(this.sustainActiveName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveSustainRelationVoStandardSchemeFactory implements SchemeFactory {
    public ActiveSustainRelationVoStandardScheme getScheme() {
      return new ActiveSustainRelationVoStandardScheme();
    }
  }

  private static class ActiveSustainRelationVoStandardScheme extends StandardScheme<ActiveSustainRelationVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveSustainRelationVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeName = iprot.readString();
              struct.setActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUSTAIN_ACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sustainActiveType = iprot.readString();
              struct.setSustainActiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUSTAIN_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sustainActiveId = iprot.readString();
              struct.setSustainActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUSTAIN_ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sustainActiveName = iprot.readString();
              struct.setSustainActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveSustainRelationVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.activeName != null) {
        oprot.writeFieldBegin(ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.activeName);
        oprot.writeFieldEnd();
      }
      if (struct.sustainActiveType != null) {
        oprot.writeFieldBegin(SUSTAIN_ACTIVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.sustainActiveType);
        oprot.writeFieldEnd();
      }
      if (struct.sustainActiveId != null) {
        oprot.writeFieldBegin(SUSTAIN_ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.sustainActiveId);
        oprot.writeFieldEnd();
      }
      if (struct.sustainActiveName != null) {
        oprot.writeFieldBegin(SUSTAIN_ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.sustainActiveName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveSustainRelationVoTupleSchemeFactory implements SchemeFactory {
    public ActiveSustainRelationVoTupleScheme getScheme() {
      return new ActiveSustainRelationVoTupleScheme();
    }
  }

  private static class ActiveSustainRelationVoTupleScheme extends TupleScheme<ActiveSustainRelationVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveSustainRelationVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(3);
      }
      if (struct.isSetActiveId()) {
        optionals.set(4);
      }
      if (struct.isSetActiveName()) {
        optionals.set(5);
      }
      if (struct.isSetSustainActiveType()) {
        optionals.set(6);
      }
      if (struct.isSetSustainActiveId()) {
        optionals.set(7);
      }
      if (struct.isSetSustainActiveName()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetActiveName()) {
        oprot.writeString(struct.activeName);
      }
      if (struct.isSetSustainActiveType()) {
        oprot.writeString(struct.sustainActiveType);
      }
      if (struct.isSetSustainActiveId()) {
        oprot.writeString(struct.sustainActiveId);
      }
      if (struct.isSetSustainActiveName()) {
        oprot.writeString(struct.sustainActiveName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveSustainRelationVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.activeName = iprot.readString();
        struct.setActiveNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sustainActiveType = iprot.readString();
        struct.setSustainActiveTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sustainActiveId = iprot.readString();
        struct.setSustainActiveIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sustainActiveName = iprot.readString();
        struct.setSustainActiveNameIsSet(true);
      }
    }
  }

}

