/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ClientPaymentChannelService {

  /**
   * 客户端支付渠道服务接口
   * ClientPaymentChannelService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 ClientPaymentChannel
     * @param clientPaymentChannel
     * @return long    返回PaymentChannelId(异常及错误返回-1)
     * 
     * @param originVo
     * @param clientPaymentChannelVo
     */
    public com.froad.thrift.vo.ClientPaymentChannelAddVoRes addClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException;

    /**
     * 删除 ClientPaymentChannel
     * @param clientPaymentChannel
     * @return boolean   操作是否成功
     * 
     * @param originVo
     * @param clientPaymentChannelVo
     */
    public com.froad.thrift.vo.ResultVo deleteClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException;

    /**
     * 修改 ClientPaymentChannel
     * @param clientPaymentChannel
     * @return boolean    操作是否成功
     * 
     * @param originVo
     * @param clientPaymentChannelVo
     */
    public com.froad.thrift.vo.ResultVo updateClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException;

    /**
     * 根据id查询 ClientPaymentChannel
     * @param clientId 客户端id
     * @param paymentChannelId 支付渠道id
     * @return ClientPaymentChannelVo
     * 
     * @param clientId
     * @param paymentChannelId
     */
    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelById(String clientId, String paymentChannelId) throws org.apache.thrift.TException;

    /**
     * 根据clientId查询 该客户端下支持的支付渠道
     * @param clientId 客户端id
     * @param paymentChannelId 支付渠道id
     * @return ClientPaymentChannelVo
     * 
     * @param clientId
     */
    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getClientPaymentChannelByClientId(String clientId) throws org.apache.thrift.TException;

    /**
     * 查询 ClientPaymentChannel
     * @param clientPaymentChannel
     * @return List<ClientPaymentChannelVo>
     * 
     * @param clientPaymentChannelVo
     */
    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getClientPaymentChannel(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ClientPaymentChannel
     * @param clientPaymentChannel
     * @return ClientPaymentChannelPageVoRes
     * 
     * @param page
     * @param clientPaymentChannelVo
     */
    public com.froad.thrift.vo.ClientPaymentChannelPageVoRes getClientPaymentChannelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientPaymentChannelById(String clientId, String paymentChannelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientPaymentChannelByClientId(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientPaymentChannel(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientPaymentChannelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.ClientPaymentChannelAddVoRes addClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      send_addClientPaymentChannel(originVo, clientPaymentChannelVo);
      return recv_addClientPaymentChannel();
    }

    public void send_addClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      addClientPaymentChannel_args args = new addClientPaymentChannel_args();
      args.setOriginVo(originVo);
      args.setClientPaymentChannelVo(clientPaymentChannelVo);
      sendBase("addClientPaymentChannel", args);
    }

    public com.froad.thrift.vo.ClientPaymentChannelAddVoRes recv_addClientPaymentChannel() throws org.apache.thrift.TException
    {
      addClientPaymentChannel_result result = new addClientPaymentChannel_result();
      receiveBase(result, "addClientPaymentChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addClientPaymentChannel failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      send_deleteClientPaymentChannel(originVo, clientPaymentChannelVo);
      return recv_deleteClientPaymentChannel();
    }

    public void send_deleteClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      deleteClientPaymentChannel_args args = new deleteClientPaymentChannel_args();
      args.setOriginVo(originVo);
      args.setClientPaymentChannelVo(clientPaymentChannelVo);
      sendBase("deleteClientPaymentChannel", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteClientPaymentChannel() throws org.apache.thrift.TException
    {
      deleteClientPaymentChannel_result result = new deleteClientPaymentChannel_result();
      receiveBase(result, "deleteClientPaymentChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteClientPaymentChannel failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      send_updateClientPaymentChannel(originVo, clientPaymentChannelVo);
      return recv_updateClientPaymentChannel();
    }

    public void send_updateClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      updateClientPaymentChannel_args args = new updateClientPaymentChannel_args();
      args.setOriginVo(originVo);
      args.setClientPaymentChannelVo(clientPaymentChannelVo);
      sendBase("updateClientPaymentChannel", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateClientPaymentChannel() throws org.apache.thrift.TException
    {
      updateClientPaymentChannel_result result = new updateClientPaymentChannel_result();
      receiveBase(result, "updateClientPaymentChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateClientPaymentChannel failed: unknown result");
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelById(String clientId, String paymentChannelId) throws org.apache.thrift.TException
    {
      send_getClientPaymentChannelById(clientId, paymentChannelId);
      return recv_getClientPaymentChannelById();
    }

    public void send_getClientPaymentChannelById(String clientId, String paymentChannelId) throws org.apache.thrift.TException
    {
      getClientPaymentChannelById_args args = new getClientPaymentChannelById_args();
      args.setClientId(clientId);
      args.setPaymentChannelId(paymentChannelId);
      sendBase("getClientPaymentChannelById", args);
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo recv_getClientPaymentChannelById() throws org.apache.thrift.TException
    {
      getClientPaymentChannelById_result result = new getClientPaymentChannelById_result();
      receiveBase(result, "getClientPaymentChannelById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientPaymentChannelById failed: unknown result");
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getClientPaymentChannelByClientId(String clientId) throws org.apache.thrift.TException
    {
      send_getClientPaymentChannelByClientId(clientId);
      return recv_getClientPaymentChannelByClientId();
    }

    public void send_getClientPaymentChannelByClientId(String clientId) throws org.apache.thrift.TException
    {
      getClientPaymentChannelByClientId_args args = new getClientPaymentChannelByClientId_args();
      args.setClientId(clientId);
      sendBase("getClientPaymentChannelByClientId", args);
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> recv_getClientPaymentChannelByClientId() throws org.apache.thrift.TException
    {
      getClientPaymentChannelByClientId_result result = new getClientPaymentChannelByClientId_result();
      receiveBase(result, "getClientPaymentChannelByClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientPaymentChannelByClientId failed: unknown result");
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getClientPaymentChannel(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      send_getClientPaymentChannel(clientPaymentChannelVo);
      return recv_getClientPaymentChannel();
    }

    public void send_getClientPaymentChannel(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      getClientPaymentChannel_args args = new getClientPaymentChannel_args();
      args.setClientPaymentChannelVo(clientPaymentChannelVo);
      sendBase("getClientPaymentChannel", args);
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> recv_getClientPaymentChannel() throws org.apache.thrift.TException
    {
      getClientPaymentChannel_result result = new getClientPaymentChannel_result();
      receiveBase(result, "getClientPaymentChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientPaymentChannel failed: unknown result");
    }

    public com.froad.thrift.vo.ClientPaymentChannelPageVoRes getClientPaymentChannelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      send_getClientPaymentChannelByPage(page, clientPaymentChannelVo);
      return recv_getClientPaymentChannelByPage();
    }

    public void send_getClientPaymentChannelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) throws org.apache.thrift.TException
    {
      getClientPaymentChannelByPage_args args = new getClientPaymentChannelByPage_args();
      args.setPage(page);
      args.setClientPaymentChannelVo(clientPaymentChannelVo);
      sendBase("getClientPaymentChannelByPage", args);
    }

    public com.froad.thrift.vo.ClientPaymentChannelPageVoRes recv_getClientPaymentChannelByPage() throws org.apache.thrift.TException
    {
      getClientPaymentChannelByPage_result result = new getClientPaymentChannelByPage_result();
      receiveBase(result, "getClientPaymentChannelByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientPaymentChannelByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addClientPaymentChannel_call method_call = new addClientPaymentChannel_call(originVo, clientPaymentChannelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addClientPaymentChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo;
      public addClientPaymentChannel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientPaymentChannelVo = clientPaymentChannelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addClientPaymentChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addClientPaymentChannel_args args = new addClientPaymentChannel_args();
        args.setOriginVo(originVo);
        args.setClientPaymentChannelVo(clientPaymentChannelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ClientPaymentChannelAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addClientPaymentChannel();
      }
    }

    public void deleteClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteClientPaymentChannel_call method_call = new deleteClientPaymentChannel_call(originVo, clientPaymentChannelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteClientPaymentChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo;
      public deleteClientPaymentChannel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientPaymentChannelVo = clientPaymentChannelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteClientPaymentChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteClientPaymentChannel_args args = new deleteClientPaymentChannel_args();
        args.setOriginVo(originVo);
        args.setClientPaymentChannelVo(clientPaymentChannelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteClientPaymentChannel();
      }
    }

    public void updateClientPaymentChannel(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateClientPaymentChannel_call method_call = new updateClientPaymentChannel_call(originVo, clientPaymentChannelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateClientPaymentChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo;
      public updateClientPaymentChannel_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientPaymentChannelVo = clientPaymentChannelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateClientPaymentChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateClientPaymentChannel_args args = new updateClientPaymentChannel_args();
        args.setOriginVo(originVo);
        args.setClientPaymentChannelVo(clientPaymentChannelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateClientPaymentChannel();
      }
    }

    public void getClientPaymentChannelById(String clientId, String paymentChannelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientPaymentChannelById_call method_call = new getClientPaymentChannelById_call(clientId, paymentChannelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientPaymentChannelById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String paymentChannelId;
      public getClientPaymentChannelById_call(String clientId, String paymentChannelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.paymentChannelId = paymentChannelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientPaymentChannelById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientPaymentChannelById_args args = new getClientPaymentChannelById_args();
        args.setClientId(clientId);
        args.setPaymentChannelId(paymentChannelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ClientPaymentChannelVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientPaymentChannelById();
      }
    }

    public void getClientPaymentChannelByClientId(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientPaymentChannelByClientId_call method_call = new getClientPaymentChannelByClientId_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientPaymentChannelByClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public getClientPaymentChannelByClientId_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientPaymentChannelByClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientPaymentChannelByClientId_args args = new getClientPaymentChannelByClientId_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ClientPaymentChannelVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientPaymentChannelByClientId();
      }
    }

    public void getClientPaymentChannel(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientPaymentChannel_call method_call = new getClientPaymentChannel_call(clientPaymentChannelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientPaymentChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo;
      public getClientPaymentChannel_call(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientPaymentChannelVo = clientPaymentChannelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientPaymentChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientPaymentChannel_args args = new getClientPaymentChannel_args();
        args.setClientPaymentChannelVo(clientPaymentChannelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ClientPaymentChannelVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientPaymentChannel();
      }
    }

    public void getClientPaymentChannelByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientPaymentChannelByPage_call method_call = new getClientPaymentChannelByPage_call(page, clientPaymentChannelVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientPaymentChannelByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo;
      public getClientPaymentChannelByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.clientPaymentChannelVo = clientPaymentChannelVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientPaymentChannelByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientPaymentChannelByPage_args args = new getClientPaymentChannelByPage_args();
        args.setPage(page);
        args.setClientPaymentChannelVo(clientPaymentChannelVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ClientPaymentChannelPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientPaymentChannelByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addClientPaymentChannel", new addClientPaymentChannel());
      processMap.put("deleteClientPaymentChannel", new deleteClientPaymentChannel());
      processMap.put("updateClientPaymentChannel", new updateClientPaymentChannel());
      processMap.put("getClientPaymentChannelById", new getClientPaymentChannelById());
      processMap.put("getClientPaymentChannelByClientId", new getClientPaymentChannelByClientId());
      processMap.put("getClientPaymentChannel", new getClientPaymentChannel());
      processMap.put("getClientPaymentChannelByPage", new getClientPaymentChannelByPage());
      return processMap;
    }

    public static class addClientPaymentChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addClientPaymentChannel_args> {
      public addClientPaymentChannel() {
        super("addClientPaymentChannel");
      }

      public addClientPaymentChannel_args getEmptyArgsInstance() {
        return new addClientPaymentChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addClientPaymentChannel_result getResult(I iface, addClientPaymentChannel_args args) throws org.apache.thrift.TException {
        addClientPaymentChannel_result result = new addClientPaymentChannel_result();
        result.success = iface.addClientPaymentChannel(args.originVo, args.clientPaymentChannelVo);
        return result;
      }
    }

    public static class deleteClientPaymentChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteClientPaymentChannel_args> {
      public deleteClientPaymentChannel() {
        super("deleteClientPaymentChannel");
      }

      public deleteClientPaymentChannel_args getEmptyArgsInstance() {
        return new deleteClientPaymentChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteClientPaymentChannel_result getResult(I iface, deleteClientPaymentChannel_args args) throws org.apache.thrift.TException {
        deleteClientPaymentChannel_result result = new deleteClientPaymentChannel_result();
        result.success = iface.deleteClientPaymentChannel(args.originVo, args.clientPaymentChannelVo);
        return result;
      }
    }

    public static class updateClientPaymentChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateClientPaymentChannel_args> {
      public updateClientPaymentChannel() {
        super("updateClientPaymentChannel");
      }

      public updateClientPaymentChannel_args getEmptyArgsInstance() {
        return new updateClientPaymentChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateClientPaymentChannel_result getResult(I iface, updateClientPaymentChannel_args args) throws org.apache.thrift.TException {
        updateClientPaymentChannel_result result = new updateClientPaymentChannel_result();
        result.success = iface.updateClientPaymentChannel(args.originVo, args.clientPaymentChannelVo);
        return result;
      }
    }

    public static class getClientPaymentChannelById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientPaymentChannelById_args> {
      public getClientPaymentChannelById() {
        super("getClientPaymentChannelById");
      }

      public getClientPaymentChannelById_args getEmptyArgsInstance() {
        return new getClientPaymentChannelById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientPaymentChannelById_result getResult(I iface, getClientPaymentChannelById_args args) throws org.apache.thrift.TException {
        getClientPaymentChannelById_result result = new getClientPaymentChannelById_result();
        result.success = iface.getClientPaymentChannelById(args.clientId, args.paymentChannelId);
        return result;
      }
    }

    public static class getClientPaymentChannelByClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientPaymentChannelByClientId_args> {
      public getClientPaymentChannelByClientId() {
        super("getClientPaymentChannelByClientId");
      }

      public getClientPaymentChannelByClientId_args getEmptyArgsInstance() {
        return new getClientPaymentChannelByClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientPaymentChannelByClientId_result getResult(I iface, getClientPaymentChannelByClientId_args args) throws org.apache.thrift.TException {
        getClientPaymentChannelByClientId_result result = new getClientPaymentChannelByClientId_result();
        result.success = iface.getClientPaymentChannelByClientId(args.clientId);
        return result;
      }
    }

    public static class getClientPaymentChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientPaymentChannel_args> {
      public getClientPaymentChannel() {
        super("getClientPaymentChannel");
      }

      public getClientPaymentChannel_args getEmptyArgsInstance() {
        return new getClientPaymentChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientPaymentChannel_result getResult(I iface, getClientPaymentChannel_args args) throws org.apache.thrift.TException {
        getClientPaymentChannel_result result = new getClientPaymentChannel_result();
        result.success = iface.getClientPaymentChannel(args.clientPaymentChannelVo);
        return result;
      }
    }

    public static class getClientPaymentChannelByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientPaymentChannelByPage_args> {
      public getClientPaymentChannelByPage() {
        super("getClientPaymentChannelByPage");
      }

      public getClientPaymentChannelByPage_args getEmptyArgsInstance() {
        return new getClientPaymentChannelByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientPaymentChannelByPage_result getResult(I iface, getClientPaymentChannelByPage_args args) throws org.apache.thrift.TException {
        getClientPaymentChannelByPage_result result = new getClientPaymentChannelByPage_result();
        result.success = iface.getClientPaymentChannelByPage(args.page, args.clientPaymentChannelVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addClientPaymentChannel", new addClientPaymentChannel());
      processMap.put("deleteClientPaymentChannel", new deleteClientPaymentChannel());
      processMap.put("updateClientPaymentChannel", new updateClientPaymentChannel());
      processMap.put("getClientPaymentChannelById", new getClientPaymentChannelById());
      processMap.put("getClientPaymentChannelByClientId", new getClientPaymentChannelByClientId());
      processMap.put("getClientPaymentChannel", new getClientPaymentChannel());
      processMap.put("getClientPaymentChannelByPage", new getClientPaymentChannelByPage());
      return processMap;
    }

    public static class addClientPaymentChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addClientPaymentChannel_args, com.froad.thrift.vo.ClientPaymentChannelAddVoRes> {
      public addClientPaymentChannel() {
        super("addClientPaymentChannel");
      }

      public addClientPaymentChannel_args getEmptyArgsInstance() {
        return new addClientPaymentChannel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ClientPaymentChannelAddVoRes o) {
            addClientPaymentChannel_result result = new addClientPaymentChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addClientPaymentChannel_result result = new addClientPaymentChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addClientPaymentChannel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelAddVoRes> resultHandler) throws TException {
        iface.addClientPaymentChannel(args.originVo, args.clientPaymentChannelVo,resultHandler);
      }
    }

    public static class deleteClientPaymentChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteClientPaymentChannel_args, com.froad.thrift.vo.ResultVo> {
      public deleteClientPaymentChannel() {
        super("deleteClientPaymentChannel");
      }

      public deleteClientPaymentChannel_args getEmptyArgsInstance() {
        return new deleteClientPaymentChannel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteClientPaymentChannel_result result = new deleteClientPaymentChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteClientPaymentChannel_result result = new deleteClientPaymentChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteClientPaymentChannel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteClientPaymentChannel(args.originVo, args.clientPaymentChannelVo,resultHandler);
      }
    }

    public static class updateClientPaymentChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateClientPaymentChannel_args, com.froad.thrift.vo.ResultVo> {
      public updateClientPaymentChannel() {
        super("updateClientPaymentChannel");
      }

      public updateClientPaymentChannel_args getEmptyArgsInstance() {
        return new updateClientPaymentChannel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateClientPaymentChannel_result result = new updateClientPaymentChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateClientPaymentChannel_result result = new updateClientPaymentChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateClientPaymentChannel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateClientPaymentChannel(args.originVo, args.clientPaymentChannelVo,resultHandler);
      }
    }

    public static class getClientPaymentChannelById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientPaymentChannelById_args, com.froad.thrift.vo.ClientPaymentChannelVo> {
      public getClientPaymentChannelById() {
        super("getClientPaymentChannelById");
      }

      public getClientPaymentChannelById_args getEmptyArgsInstance() {
        return new getClientPaymentChannelById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelVo>() { 
          public void onComplete(com.froad.thrift.vo.ClientPaymentChannelVo o) {
            getClientPaymentChannelById_result result = new getClientPaymentChannelById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientPaymentChannelById_result result = new getClientPaymentChannelById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientPaymentChannelById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelVo> resultHandler) throws TException {
        iface.getClientPaymentChannelById(args.clientId, args.paymentChannelId,resultHandler);
      }
    }

    public static class getClientPaymentChannelByClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientPaymentChannelByClientId_args, List<com.froad.thrift.vo.ClientPaymentChannelVo>> {
      public getClientPaymentChannelByClientId() {
        super("getClientPaymentChannelByClientId");
      }

      public getClientPaymentChannelByClientId_args getEmptyArgsInstance() {
        return new getClientPaymentChannelByClientId_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ClientPaymentChannelVo> o) {
            getClientPaymentChannelByClientId_result result = new getClientPaymentChannelByClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientPaymentChannelByClientId_result result = new getClientPaymentChannelByClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientPaymentChannelByClientId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>> resultHandler) throws TException {
        iface.getClientPaymentChannelByClientId(args.clientId,resultHandler);
      }
    }

    public static class getClientPaymentChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientPaymentChannel_args, List<com.froad.thrift.vo.ClientPaymentChannelVo>> {
      public getClientPaymentChannel() {
        super("getClientPaymentChannel");
      }

      public getClientPaymentChannel_args getEmptyArgsInstance() {
        return new getClientPaymentChannel_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ClientPaymentChannelVo> o) {
            getClientPaymentChannel_result result = new getClientPaymentChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientPaymentChannel_result result = new getClientPaymentChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientPaymentChannel_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ClientPaymentChannelVo>> resultHandler) throws TException {
        iface.getClientPaymentChannel(args.clientPaymentChannelVo,resultHandler);
      }
    }

    public static class getClientPaymentChannelByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientPaymentChannelByPage_args, com.froad.thrift.vo.ClientPaymentChannelPageVoRes> {
      public getClientPaymentChannelByPage() {
        super("getClientPaymentChannelByPage");
      }

      public getClientPaymentChannelByPage_args getEmptyArgsInstance() {
        return new getClientPaymentChannelByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ClientPaymentChannelPageVoRes o) {
            getClientPaymentChannelByPage_result result = new getClientPaymentChannelByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientPaymentChannelByPage_result result = new getClientPaymentChannelByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientPaymentChannelByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ClientPaymentChannelPageVoRes> resultHandler) throws TException {
        iface.getClientPaymentChannelByPage(args.page, args.clientPaymentChannelVo,resultHandler);
      }
    }

  }

  public static class addClientPaymentChannel_args implements org.apache.thrift.TBase<addClientPaymentChannel_args, addClientPaymentChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<addClientPaymentChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addClientPaymentChannel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPaymentChannelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addClientPaymentChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addClientPaymentChannel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_PAYMENT_CHANNEL_VO((short)2, "clientPaymentChannelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_PAYMENT_CHANNEL_VO
            return CLIENT_PAYMENT_CHANNEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_PAYMENT_CHANNEL_VO, new org.apache.thrift.meta_data.FieldMetaData("clientPaymentChannelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addClientPaymentChannel_args.class, metaDataMap);
    }

    public addClientPaymentChannel_args() {
    }

    public addClientPaymentChannel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo)
    {
      this();
      this.originVo = originVo;
      this.clientPaymentChannelVo = clientPaymentChannelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addClientPaymentChannel_args(addClientPaymentChannel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientPaymentChannelVo()) {
        this.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo(other.clientPaymentChannelVo);
      }
    }

    public addClientPaymentChannel_args deepCopy() {
      return new addClientPaymentChannel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientPaymentChannelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addClientPaymentChannel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelVo() {
      return this.clientPaymentChannelVo;
    }

    public addClientPaymentChannel_args setClientPaymentChannelVo(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) {
      this.clientPaymentChannelVo = clientPaymentChannelVo;
      return this;
    }

    public void unsetClientPaymentChannelVo() {
      this.clientPaymentChannelVo = null;
    }

    /** Returns true if field clientPaymentChannelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPaymentChannelVo() {
      return this.clientPaymentChannelVo != null;
    }

    public void setClientPaymentChannelVoIsSet(boolean value) {
      if (!value) {
        this.clientPaymentChannelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_PAYMENT_CHANNEL_VO:
        if (value == null) {
          unsetClientPaymentChannelVo();
        } else {
          setClientPaymentChannelVo((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_PAYMENT_CHANNEL_VO:
        return getClientPaymentChannelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_PAYMENT_CHANNEL_VO:
        return isSetClientPaymentChannelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addClientPaymentChannel_args)
        return this.equals((addClientPaymentChannel_args)that);
      return false;
    }

    public boolean equals(addClientPaymentChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientPaymentChannelVo = true && this.isSetClientPaymentChannelVo();
      boolean that_present_clientPaymentChannelVo = true && that.isSetClientPaymentChannelVo();
      if (this_present_clientPaymentChannelVo || that_present_clientPaymentChannelVo) {
        if (!(this_present_clientPaymentChannelVo && that_present_clientPaymentChannelVo))
          return false;
        if (!this.clientPaymentChannelVo.equals(that.clientPaymentChannelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientPaymentChannelVo = true && (isSetClientPaymentChannelVo());
      list.add(present_clientPaymentChannelVo);
      if (present_clientPaymentChannelVo)
        list.add(clientPaymentChannelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addClientPaymentChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientPaymentChannelVo()).compareTo(other.isSetClientPaymentChannelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPaymentChannelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPaymentChannelVo, other.clientPaymentChannelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addClientPaymentChannel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientPaymentChannelVo:");
      if (this.clientPaymentChannelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPaymentChannelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientPaymentChannelVo != null) {
        clientPaymentChannelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addClientPaymentChannel_argsStandardSchemeFactory implements SchemeFactory {
      public addClientPaymentChannel_argsStandardScheme getScheme() {
        return new addClientPaymentChannel_argsStandardScheme();
      }
    }

    private static class addClientPaymentChannel_argsStandardScheme extends StandardScheme<addClientPaymentChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_PAYMENT_CHANNEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.clientPaymentChannelVo.read(iprot);
                struct.setClientPaymentChannelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientPaymentChannelVo != null) {
          oprot.writeFieldBegin(CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC);
          struct.clientPaymentChannelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addClientPaymentChannel_argsTupleSchemeFactory implements SchemeFactory {
      public addClientPaymentChannel_argsTupleScheme getScheme() {
        return new addClientPaymentChannel_argsTupleScheme();
      }
    }

    private static class addClientPaymentChannel_argsTupleScheme extends TupleScheme<addClientPaymentChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          struct.clientPaymentChannelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.clientPaymentChannelVo.read(iprot);
          struct.setClientPaymentChannelVoIsSet(true);
        }
      }
    }

  }

  public static class addClientPaymentChannel_result implements org.apache.thrift.TBase<addClientPaymentChannel_result, addClientPaymentChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<addClientPaymentChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addClientPaymentChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addClientPaymentChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addClientPaymentChannel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientPaymentChannelAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addClientPaymentChannel_result.class, metaDataMap);
    }

    public addClientPaymentChannel_result() {
    }

    public addClientPaymentChannel_result(
      com.froad.thrift.vo.ClientPaymentChannelAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addClientPaymentChannel_result(addClientPaymentChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ClientPaymentChannelAddVoRes(other.success);
      }
    }

    public addClientPaymentChannel_result deepCopy() {
      return new addClientPaymentChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ClientPaymentChannelAddVoRes getSuccess() {
      return this.success;
    }

    public addClientPaymentChannel_result setSuccess(com.froad.thrift.vo.ClientPaymentChannelAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ClientPaymentChannelAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addClientPaymentChannel_result)
        return this.equals((addClientPaymentChannel_result)that);
      return false;
    }

    public boolean equals(addClientPaymentChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addClientPaymentChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addClientPaymentChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addClientPaymentChannel_resultStandardSchemeFactory implements SchemeFactory {
      public addClientPaymentChannel_resultStandardScheme getScheme() {
        return new addClientPaymentChannel_resultStandardScheme();
      }
    }

    private static class addClientPaymentChannel_resultStandardScheme extends StandardScheme<addClientPaymentChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ClientPaymentChannelAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addClientPaymentChannel_resultTupleSchemeFactory implements SchemeFactory {
      public addClientPaymentChannel_resultTupleScheme getScheme() {
        return new addClientPaymentChannel_resultTupleScheme();
      }
    }

    private static class addClientPaymentChannel_resultTupleScheme extends TupleScheme<addClientPaymentChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ClientPaymentChannelAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteClientPaymentChannel_args implements org.apache.thrift.TBase<deleteClientPaymentChannel_args, deleteClientPaymentChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClientPaymentChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClientPaymentChannel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPaymentChannelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteClientPaymentChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteClientPaymentChannel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_PAYMENT_CHANNEL_VO((short)2, "clientPaymentChannelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_PAYMENT_CHANNEL_VO
            return CLIENT_PAYMENT_CHANNEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_PAYMENT_CHANNEL_VO, new org.apache.thrift.meta_data.FieldMetaData("clientPaymentChannelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClientPaymentChannel_args.class, metaDataMap);
    }

    public deleteClientPaymentChannel_args() {
    }

    public deleteClientPaymentChannel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo)
    {
      this();
      this.originVo = originVo;
      this.clientPaymentChannelVo = clientPaymentChannelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClientPaymentChannel_args(deleteClientPaymentChannel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientPaymentChannelVo()) {
        this.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo(other.clientPaymentChannelVo);
      }
    }

    public deleteClientPaymentChannel_args deepCopy() {
      return new deleteClientPaymentChannel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientPaymentChannelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteClientPaymentChannel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelVo() {
      return this.clientPaymentChannelVo;
    }

    public deleteClientPaymentChannel_args setClientPaymentChannelVo(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) {
      this.clientPaymentChannelVo = clientPaymentChannelVo;
      return this;
    }

    public void unsetClientPaymentChannelVo() {
      this.clientPaymentChannelVo = null;
    }

    /** Returns true if field clientPaymentChannelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPaymentChannelVo() {
      return this.clientPaymentChannelVo != null;
    }

    public void setClientPaymentChannelVoIsSet(boolean value) {
      if (!value) {
        this.clientPaymentChannelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_PAYMENT_CHANNEL_VO:
        if (value == null) {
          unsetClientPaymentChannelVo();
        } else {
          setClientPaymentChannelVo((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_PAYMENT_CHANNEL_VO:
        return getClientPaymentChannelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_PAYMENT_CHANNEL_VO:
        return isSetClientPaymentChannelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClientPaymentChannel_args)
        return this.equals((deleteClientPaymentChannel_args)that);
      return false;
    }

    public boolean equals(deleteClientPaymentChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientPaymentChannelVo = true && this.isSetClientPaymentChannelVo();
      boolean that_present_clientPaymentChannelVo = true && that.isSetClientPaymentChannelVo();
      if (this_present_clientPaymentChannelVo || that_present_clientPaymentChannelVo) {
        if (!(this_present_clientPaymentChannelVo && that_present_clientPaymentChannelVo))
          return false;
        if (!this.clientPaymentChannelVo.equals(that.clientPaymentChannelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientPaymentChannelVo = true && (isSetClientPaymentChannelVo());
      list.add(present_clientPaymentChannelVo);
      if (present_clientPaymentChannelVo)
        list.add(clientPaymentChannelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteClientPaymentChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientPaymentChannelVo()).compareTo(other.isSetClientPaymentChannelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPaymentChannelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPaymentChannelVo, other.clientPaymentChannelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteClientPaymentChannel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientPaymentChannelVo:");
      if (this.clientPaymentChannelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPaymentChannelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientPaymentChannelVo != null) {
        clientPaymentChannelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClientPaymentChannel_argsStandardSchemeFactory implements SchemeFactory {
      public deleteClientPaymentChannel_argsStandardScheme getScheme() {
        return new deleteClientPaymentChannel_argsStandardScheme();
      }
    }

    private static class deleteClientPaymentChannel_argsStandardScheme extends StandardScheme<deleteClientPaymentChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_PAYMENT_CHANNEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.clientPaymentChannelVo.read(iprot);
                struct.setClientPaymentChannelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientPaymentChannelVo != null) {
          oprot.writeFieldBegin(CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC);
          struct.clientPaymentChannelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClientPaymentChannel_argsTupleSchemeFactory implements SchemeFactory {
      public deleteClientPaymentChannel_argsTupleScheme getScheme() {
        return new deleteClientPaymentChannel_argsTupleScheme();
      }
    }

    private static class deleteClientPaymentChannel_argsTupleScheme extends TupleScheme<deleteClientPaymentChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          struct.clientPaymentChannelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.clientPaymentChannelVo.read(iprot);
          struct.setClientPaymentChannelVoIsSet(true);
        }
      }
    }

  }

  public static class deleteClientPaymentChannel_result implements org.apache.thrift.TBase<deleteClientPaymentChannel_result, deleteClientPaymentChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClientPaymentChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClientPaymentChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteClientPaymentChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteClientPaymentChannel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClientPaymentChannel_result.class, metaDataMap);
    }

    public deleteClientPaymentChannel_result() {
    }

    public deleteClientPaymentChannel_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClientPaymentChannel_result(deleteClientPaymentChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteClientPaymentChannel_result deepCopy() {
      return new deleteClientPaymentChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteClientPaymentChannel_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClientPaymentChannel_result)
        return this.equals((deleteClientPaymentChannel_result)that);
      return false;
    }

    public boolean equals(deleteClientPaymentChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteClientPaymentChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteClientPaymentChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClientPaymentChannel_resultStandardSchemeFactory implements SchemeFactory {
      public deleteClientPaymentChannel_resultStandardScheme getScheme() {
        return new deleteClientPaymentChannel_resultStandardScheme();
      }
    }

    private static class deleteClientPaymentChannel_resultStandardScheme extends StandardScheme<deleteClientPaymentChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClientPaymentChannel_resultTupleSchemeFactory implements SchemeFactory {
      public deleteClientPaymentChannel_resultTupleScheme getScheme() {
        return new deleteClientPaymentChannel_resultTupleScheme();
      }
    }

    private static class deleteClientPaymentChannel_resultTupleScheme extends TupleScheme<deleteClientPaymentChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateClientPaymentChannel_args implements org.apache.thrift.TBase<updateClientPaymentChannel_args, updateClientPaymentChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateClientPaymentChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClientPaymentChannel_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPaymentChannelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClientPaymentChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClientPaymentChannel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_PAYMENT_CHANNEL_VO((short)2, "clientPaymentChannelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_PAYMENT_CHANNEL_VO
            return CLIENT_PAYMENT_CHANNEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_PAYMENT_CHANNEL_VO, new org.apache.thrift.meta_data.FieldMetaData("clientPaymentChannelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClientPaymentChannel_args.class, metaDataMap);
    }

    public updateClientPaymentChannel_args() {
    }

    public updateClientPaymentChannel_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo)
    {
      this();
      this.originVo = originVo;
      this.clientPaymentChannelVo = clientPaymentChannelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClientPaymentChannel_args(updateClientPaymentChannel_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientPaymentChannelVo()) {
        this.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo(other.clientPaymentChannelVo);
      }
    }

    public updateClientPaymentChannel_args deepCopy() {
      return new updateClientPaymentChannel_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientPaymentChannelVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateClientPaymentChannel_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelVo() {
      return this.clientPaymentChannelVo;
    }

    public updateClientPaymentChannel_args setClientPaymentChannelVo(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) {
      this.clientPaymentChannelVo = clientPaymentChannelVo;
      return this;
    }

    public void unsetClientPaymentChannelVo() {
      this.clientPaymentChannelVo = null;
    }

    /** Returns true if field clientPaymentChannelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPaymentChannelVo() {
      return this.clientPaymentChannelVo != null;
    }

    public void setClientPaymentChannelVoIsSet(boolean value) {
      if (!value) {
        this.clientPaymentChannelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_PAYMENT_CHANNEL_VO:
        if (value == null) {
          unsetClientPaymentChannelVo();
        } else {
          setClientPaymentChannelVo((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_PAYMENT_CHANNEL_VO:
        return getClientPaymentChannelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_PAYMENT_CHANNEL_VO:
        return isSetClientPaymentChannelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClientPaymentChannel_args)
        return this.equals((updateClientPaymentChannel_args)that);
      return false;
    }

    public boolean equals(updateClientPaymentChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientPaymentChannelVo = true && this.isSetClientPaymentChannelVo();
      boolean that_present_clientPaymentChannelVo = true && that.isSetClientPaymentChannelVo();
      if (this_present_clientPaymentChannelVo || that_present_clientPaymentChannelVo) {
        if (!(this_present_clientPaymentChannelVo && that_present_clientPaymentChannelVo))
          return false;
        if (!this.clientPaymentChannelVo.equals(that.clientPaymentChannelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientPaymentChannelVo = true && (isSetClientPaymentChannelVo());
      list.add(present_clientPaymentChannelVo);
      if (present_clientPaymentChannelVo)
        list.add(clientPaymentChannelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClientPaymentChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientPaymentChannelVo()).compareTo(other.isSetClientPaymentChannelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPaymentChannelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPaymentChannelVo, other.clientPaymentChannelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClientPaymentChannel_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientPaymentChannelVo:");
      if (this.clientPaymentChannelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPaymentChannelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientPaymentChannelVo != null) {
        clientPaymentChannelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClientPaymentChannel_argsStandardSchemeFactory implements SchemeFactory {
      public updateClientPaymentChannel_argsStandardScheme getScheme() {
        return new updateClientPaymentChannel_argsStandardScheme();
      }
    }

    private static class updateClientPaymentChannel_argsStandardScheme extends StandardScheme<updateClientPaymentChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_PAYMENT_CHANNEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.clientPaymentChannelVo.read(iprot);
                struct.setClientPaymentChannelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientPaymentChannelVo != null) {
          oprot.writeFieldBegin(CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC);
          struct.clientPaymentChannelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClientPaymentChannel_argsTupleSchemeFactory implements SchemeFactory {
      public updateClientPaymentChannel_argsTupleScheme getScheme() {
        return new updateClientPaymentChannel_argsTupleScheme();
      }
    }

    private static class updateClientPaymentChannel_argsTupleScheme extends TupleScheme<updateClientPaymentChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          struct.clientPaymentChannelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.clientPaymentChannelVo.read(iprot);
          struct.setClientPaymentChannelVoIsSet(true);
        }
      }
    }

  }

  public static class updateClientPaymentChannel_result implements org.apache.thrift.TBase<updateClientPaymentChannel_result, updateClientPaymentChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateClientPaymentChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClientPaymentChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClientPaymentChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClientPaymentChannel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClientPaymentChannel_result.class, metaDataMap);
    }

    public updateClientPaymentChannel_result() {
    }

    public updateClientPaymentChannel_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClientPaymentChannel_result(updateClientPaymentChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateClientPaymentChannel_result deepCopy() {
      return new updateClientPaymentChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateClientPaymentChannel_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClientPaymentChannel_result)
        return this.equals((updateClientPaymentChannel_result)that);
      return false;
    }

    public boolean equals(updateClientPaymentChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClientPaymentChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClientPaymentChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClientPaymentChannel_resultStandardSchemeFactory implements SchemeFactory {
      public updateClientPaymentChannel_resultStandardScheme getScheme() {
        return new updateClientPaymentChannel_resultStandardScheme();
      }
    }

    private static class updateClientPaymentChannel_resultStandardScheme extends StandardScheme<updateClientPaymentChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClientPaymentChannel_resultTupleSchemeFactory implements SchemeFactory {
      public updateClientPaymentChannel_resultTupleScheme getScheme() {
        return new updateClientPaymentChannel_resultTupleScheme();
      }
    }

    private static class updateClientPaymentChannel_resultTupleScheme extends TupleScheme<updateClientPaymentChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelById_args implements org.apache.thrift.TBase<getClientPaymentChannelById_args, getClientPaymentChannelById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentChannelId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String paymentChannelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PAYMENT_CHANNEL_ID((short)2, "paymentChannelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PAYMENT_CHANNEL_ID
            return PAYMENT_CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentChannelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelById_args.class, metaDataMap);
    }

    public getClientPaymentChannelById_args() {
    }

    public getClientPaymentChannelById_args(
      String clientId,
      String paymentChannelId)
    {
      this();
      this.clientId = clientId;
      this.paymentChannelId = paymentChannelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelById_args(getClientPaymentChannelById_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetPaymentChannelId()) {
        this.paymentChannelId = other.paymentChannelId;
      }
    }

    public getClientPaymentChannelById_args deepCopy() {
      return new getClientPaymentChannelById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.paymentChannelId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getClientPaymentChannelById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getPaymentChannelId() {
      return this.paymentChannelId;
    }

    public getClientPaymentChannelById_args setPaymentChannelId(String paymentChannelId) {
      this.paymentChannelId = paymentChannelId;
      return this;
    }

    public void unsetPaymentChannelId() {
      this.paymentChannelId = null;
    }

    /** Returns true if field paymentChannelId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentChannelId() {
      return this.paymentChannelId != null;
    }

    public void setPaymentChannelIdIsSet(boolean value) {
      if (!value) {
        this.paymentChannelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PAYMENT_CHANNEL_ID:
        if (value == null) {
          unsetPaymentChannelId();
        } else {
          setPaymentChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PAYMENT_CHANNEL_ID:
        return getPaymentChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PAYMENT_CHANNEL_ID:
        return isSetPaymentChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelById_args)
        return this.equals((getClientPaymentChannelById_args)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_paymentChannelId = true && this.isSetPaymentChannelId();
      boolean that_present_paymentChannelId = true && that.isSetPaymentChannelId();
      if (this_present_paymentChannelId || that_present_paymentChannelId) {
        if (!(this_present_paymentChannelId && that_present_paymentChannelId))
          return false;
        if (!this.paymentChannelId.equals(that.paymentChannelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_paymentChannelId = true && (isSetPaymentChannelId());
      list.add(present_paymentChannelId);
      if (present_paymentChannelId)
        list.add(paymentChannelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentChannelId()).compareTo(other.isSetPaymentChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentChannelId, other.paymentChannelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentChannelId:");
      if (this.paymentChannelId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentChannelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelById_argsStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelById_argsStandardScheme getScheme() {
        return new getClientPaymentChannelById_argsStandardScheme();
      }
    }

    private static class getClientPaymentChannelById_argsStandardScheme extends StandardScheme<getClientPaymentChannelById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentChannelId = iprot.readString();
                struct.setPaymentChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.paymentChannelId != null) {
          oprot.writeFieldBegin(PAYMENT_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.paymentChannelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelById_argsTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelById_argsTupleScheme getScheme() {
        return new getClientPaymentChannelById_argsTupleScheme();
      }
    }

    private static class getClientPaymentChannelById_argsTupleScheme extends TupleScheme<getClientPaymentChannelById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentChannelId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetPaymentChannelId()) {
          oprot.writeString(struct.paymentChannelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentChannelId = iprot.readString();
          struct.setPaymentChannelIdIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelById_result implements org.apache.thrift.TBase<getClientPaymentChannelById_result, getClientPaymentChannelById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelById_result.class, metaDataMap);
    }

    public getClientPaymentChannelById_result() {
    }

    public getClientPaymentChannelById_result(
      com.froad.thrift.vo.ClientPaymentChannelVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelById_result(getClientPaymentChannelById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ClientPaymentChannelVo(other.success);
      }
    }

    public getClientPaymentChannelById_result deepCopy() {
      return new getClientPaymentChannelById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getSuccess() {
      return this.success;
    }

    public getClientPaymentChannelById_result setSuccess(com.froad.thrift.vo.ClientPaymentChannelVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelById_result)
        return this.equals((getClientPaymentChannelById_result)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelById_resultStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelById_resultStandardScheme getScheme() {
        return new getClientPaymentChannelById_resultStandardScheme();
      }
    }

    private static class getClientPaymentChannelById_resultStandardScheme extends StandardScheme<getClientPaymentChannelById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelById_resultTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelById_resultTupleScheme getScheme() {
        return new getClientPaymentChannelById_resultTupleScheme();
      }
    }

    private static class getClientPaymentChannelById_resultTupleScheme extends TupleScheme<getClientPaymentChannelById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelByClientId_args implements org.apache.thrift.TBase<getClientPaymentChannelByClientId_args, getClientPaymentChannelByClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelByClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelByClientId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelByClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelByClientId_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelByClientId_args.class, metaDataMap);
    }

    public getClientPaymentChannelByClientId_args() {
    }

    public getClientPaymentChannelByClientId_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelByClientId_args(getClientPaymentChannelByClientId_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getClientPaymentChannelByClientId_args deepCopy() {
      return new getClientPaymentChannelByClientId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getClientPaymentChannelByClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelByClientId_args)
        return this.equals((getClientPaymentChannelByClientId_args)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelByClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelByClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelByClientId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelByClientId_argsStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByClientId_argsStandardScheme getScheme() {
        return new getClientPaymentChannelByClientId_argsStandardScheme();
      }
    }

    private static class getClientPaymentChannelByClientId_argsStandardScheme extends StandardScheme<getClientPaymentChannelByClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelByClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelByClientId_argsTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByClientId_argsTupleScheme getScheme() {
        return new getClientPaymentChannelByClientId_argsTupleScheme();
      }
    }

    private static class getClientPaymentChannelByClientId_argsTupleScheme extends TupleScheme<getClientPaymentChannelByClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelByClientId_result implements org.apache.thrift.TBase<getClientPaymentChannelByClientId_result, getClientPaymentChannelByClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelByClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelByClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelByClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelByClientId_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelByClientId_result.class, metaDataMap);
    }

    public getClientPaymentChannelByClientId_result() {
    }

    public getClientPaymentChannelByClientId_result(
      List<com.froad.thrift.vo.ClientPaymentChannelVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelByClientId_result(getClientPaymentChannelByClientId_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ClientPaymentChannelVo> __this__success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(other.success.size());
        for (com.froad.thrift.vo.ClientPaymentChannelVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ClientPaymentChannelVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getClientPaymentChannelByClientId_result deepCopy() {
      return new getClientPaymentChannelByClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ClientPaymentChannelVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ClientPaymentChannelVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getSuccess() {
      return this.success;
    }

    public getClientPaymentChannelByClientId_result setSuccess(List<com.froad.thrift.vo.ClientPaymentChannelVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ClientPaymentChannelVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelByClientId_result)
        return this.equals((getClientPaymentChannelByClientId_result)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelByClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelByClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelByClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelByClientId_resultStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByClientId_resultStandardScheme getScheme() {
        return new getClientPaymentChannelByClientId_resultStandardScheme();
      }
    }

    private static class getClientPaymentChannelByClientId_resultStandardScheme extends StandardScheme<getClientPaymentChannelByClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(_list120.size);
                  com.froad.thrift.vo.ClientPaymentChannelVo _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.froad.thrift.vo.ClientPaymentChannelVo();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelByClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ClientPaymentChannelVo _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelByClientId_resultTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByClientId_resultTupleScheme getScheme() {
        return new getClientPaymentChannelByClientId_resultTupleScheme();
      }
    }

    private static class getClientPaymentChannelByClientId_resultTupleScheme extends TupleScheme<getClientPaymentChannelByClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ClientPaymentChannelVo _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(_list125.size);
            com.froad.thrift.vo.ClientPaymentChannelVo _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.froad.thrift.vo.ClientPaymentChannelVo();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannel_args implements org.apache.thrift.TBase<getClientPaymentChannel_args, getClientPaymentChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannel_args");

    private static final org.apache.thrift.protocol.TField CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPaymentChannelVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannel_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_PAYMENT_CHANNEL_VO((short)1, "clientPaymentChannelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_PAYMENT_CHANNEL_VO
            return CLIENT_PAYMENT_CHANNEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_PAYMENT_CHANNEL_VO, new org.apache.thrift.meta_data.FieldMetaData("clientPaymentChannelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannel_args.class, metaDataMap);
    }

    public getClientPaymentChannel_args() {
    }

    public getClientPaymentChannel_args(
      com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo)
    {
      this();
      this.clientPaymentChannelVo = clientPaymentChannelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannel_args(getClientPaymentChannel_args other) {
      if (other.isSetClientPaymentChannelVo()) {
        this.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo(other.clientPaymentChannelVo);
      }
    }

    public getClientPaymentChannel_args deepCopy() {
      return new getClientPaymentChannel_args(this);
    }

    @Override
    public void clear() {
      this.clientPaymentChannelVo = null;
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelVo() {
      return this.clientPaymentChannelVo;
    }

    public getClientPaymentChannel_args setClientPaymentChannelVo(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) {
      this.clientPaymentChannelVo = clientPaymentChannelVo;
      return this;
    }

    public void unsetClientPaymentChannelVo() {
      this.clientPaymentChannelVo = null;
    }

    /** Returns true if field clientPaymentChannelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPaymentChannelVo() {
      return this.clientPaymentChannelVo != null;
    }

    public void setClientPaymentChannelVoIsSet(boolean value) {
      if (!value) {
        this.clientPaymentChannelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_PAYMENT_CHANNEL_VO:
        if (value == null) {
          unsetClientPaymentChannelVo();
        } else {
          setClientPaymentChannelVo((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_PAYMENT_CHANNEL_VO:
        return getClientPaymentChannelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_PAYMENT_CHANNEL_VO:
        return isSetClientPaymentChannelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannel_args)
        return this.equals((getClientPaymentChannel_args)that);
      return false;
    }

    public boolean equals(getClientPaymentChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_clientPaymentChannelVo = true && this.isSetClientPaymentChannelVo();
      boolean that_present_clientPaymentChannelVo = true && that.isSetClientPaymentChannelVo();
      if (this_present_clientPaymentChannelVo || that_present_clientPaymentChannelVo) {
        if (!(this_present_clientPaymentChannelVo && that_present_clientPaymentChannelVo))
          return false;
        if (!this.clientPaymentChannelVo.equals(that.clientPaymentChannelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientPaymentChannelVo = true && (isSetClientPaymentChannelVo());
      list.add(present_clientPaymentChannelVo);
      if (present_clientPaymentChannelVo)
        list.add(clientPaymentChannelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientPaymentChannelVo()).compareTo(other.isSetClientPaymentChannelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPaymentChannelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPaymentChannelVo, other.clientPaymentChannelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannel_args(");
      boolean first = true;

      sb.append("clientPaymentChannelVo:");
      if (this.clientPaymentChannelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPaymentChannelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clientPaymentChannelVo != null) {
        clientPaymentChannelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannel_argsStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannel_argsStandardScheme getScheme() {
        return new getClientPaymentChannel_argsStandardScheme();
      }
    }

    private static class getClientPaymentChannel_argsStandardScheme extends StandardScheme<getClientPaymentChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_PAYMENT_CHANNEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.clientPaymentChannelVo.read(iprot);
                struct.setClientPaymentChannelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientPaymentChannelVo != null) {
          oprot.writeFieldBegin(CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC);
          struct.clientPaymentChannelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannel_argsTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannel_argsTupleScheme getScheme() {
        return new getClientPaymentChannel_argsTupleScheme();
      }
    }

    private static class getClientPaymentChannel_argsTupleScheme extends TupleScheme<getClientPaymentChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientPaymentChannelVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientPaymentChannelVo()) {
          struct.clientPaymentChannelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.clientPaymentChannelVo.read(iprot);
          struct.setClientPaymentChannelVoIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannel_result implements org.apache.thrift.TBase<getClientPaymentChannel_result, getClientPaymentChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannel_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannel_result.class, metaDataMap);
    }

    public getClientPaymentChannel_result() {
    }

    public getClientPaymentChannel_result(
      List<com.froad.thrift.vo.ClientPaymentChannelVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannel_result(getClientPaymentChannel_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ClientPaymentChannelVo> __this__success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(other.success.size());
        for (com.froad.thrift.vo.ClientPaymentChannelVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ClientPaymentChannelVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getClientPaymentChannel_result deepCopy() {
      return new getClientPaymentChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ClientPaymentChannelVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ClientPaymentChannelVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ClientPaymentChannelVo> getSuccess() {
      return this.success;
    }

    public getClientPaymentChannel_result setSuccess(List<com.froad.thrift.vo.ClientPaymentChannelVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ClientPaymentChannelVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannel_result)
        return this.equals((getClientPaymentChannel_result)that);
      return false;
    }

    public boolean equals(getClientPaymentChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannel_resultStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannel_resultStandardScheme getScheme() {
        return new getClientPaymentChannel_resultStandardScheme();
      }
    }

    private static class getClientPaymentChannel_resultStandardScheme extends StandardScheme<getClientPaymentChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(_list128.size);
                  com.froad.thrift.vo.ClientPaymentChannelVo _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.froad.thrift.vo.ClientPaymentChannelVo();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ClientPaymentChannelVo _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannel_resultTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannel_resultTupleScheme getScheme() {
        return new getClientPaymentChannel_resultTupleScheme();
      }
    }

    private static class getClientPaymentChannel_resultTupleScheme extends TupleScheme<getClientPaymentChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ClientPaymentChannelVo _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ClientPaymentChannelVo>(_list133.size);
            com.froad.thrift.vo.ClientPaymentChannelVo _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.froad.thrift.vo.ClientPaymentChannelVo();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelByPage_args implements org.apache.thrift.TBase<getClientPaymentChannelByPage_args, getClientPaymentChannelByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPaymentChannelVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CLIENT_PAYMENT_CHANNEL_VO((short)2, "clientPaymentChannelVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CLIENT_PAYMENT_CHANNEL_VO
            return CLIENT_PAYMENT_CHANNEL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.CLIENT_PAYMENT_CHANNEL_VO, new org.apache.thrift.meta_data.FieldMetaData("clientPaymentChannelVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelByPage_args.class, metaDataMap);
    }

    public getClientPaymentChannelByPage_args() {
    }

    public getClientPaymentChannelByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo)
    {
      this();
      this.page = page;
      this.clientPaymentChannelVo = clientPaymentChannelVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelByPage_args(getClientPaymentChannelByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetClientPaymentChannelVo()) {
        this.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo(other.clientPaymentChannelVo);
      }
    }

    public getClientPaymentChannelByPage_args deepCopy() {
      return new getClientPaymentChannelByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.clientPaymentChannelVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getClientPaymentChannelByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.ClientPaymentChannelVo getClientPaymentChannelVo() {
      return this.clientPaymentChannelVo;
    }

    public getClientPaymentChannelByPage_args setClientPaymentChannelVo(com.froad.thrift.vo.ClientPaymentChannelVo clientPaymentChannelVo) {
      this.clientPaymentChannelVo = clientPaymentChannelVo;
      return this;
    }

    public void unsetClientPaymentChannelVo() {
      this.clientPaymentChannelVo = null;
    }

    /** Returns true if field clientPaymentChannelVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPaymentChannelVo() {
      return this.clientPaymentChannelVo != null;
    }

    public void setClientPaymentChannelVoIsSet(boolean value) {
      if (!value) {
        this.clientPaymentChannelVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case CLIENT_PAYMENT_CHANNEL_VO:
        if (value == null) {
          unsetClientPaymentChannelVo();
        } else {
          setClientPaymentChannelVo((com.froad.thrift.vo.ClientPaymentChannelVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CLIENT_PAYMENT_CHANNEL_VO:
        return getClientPaymentChannelVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CLIENT_PAYMENT_CHANNEL_VO:
        return isSetClientPaymentChannelVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelByPage_args)
        return this.equals((getClientPaymentChannelByPage_args)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_clientPaymentChannelVo = true && this.isSetClientPaymentChannelVo();
      boolean that_present_clientPaymentChannelVo = true && that.isSetClientPaymentChannelVo();
      if (this_present_clientPaymentChannelVo || that_present_clientPaymentChannelVo) {
        if (!(this_present_clientPaymentChannelVo && that_present_clientPaymentChannelVo))
          return false;
        if (!this.clientPaymentChannelVo.equals(that.clientPaymentChannelVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_clientPaymentChannelVo = true && (isSetClientPaymentChannelVo());
      list.add(present_clientPaymentChannelVo);
      if (present_clientPaymentChannelVo)
        list.add(clientPaymentChannelVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientPaymentChannelVo()).compareTo(other.isSetClientPaymentChannelVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPaymentChannelVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPaymentChannelVo, other.clientPaymentChannelVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientPaymentChannelVo:");
      if (this.clientPaymentChannelVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPaymentChannelVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (clientPaymentChannelVo != null) {
        clientPaymentChannelVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByPage_argsStandardScheme getScheme() {
        return new getClientPaymentChannelByPage_argsStandardScheme();
      }
    }

    private static class getClientPaymentChannelByPage_argsStandardScheme extends StandardScheme<getClientPaymentChannelByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_PAYMENT_CHANNEL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
                struct.clientPaymentChannelVo.read(iprot);
                struct.setClientPaymentChannelVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientPaymentChannelVo != null) {
          oprot.writeFieldBegin(CLIENT_PAYMENT_CHANNEL_VO_FIELD_DESC);
          struct.clientPaymentChannelVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByPage_argsTupleScheme getScheme() {
        return new getClientPaymentChannelByPage_argsTupleScheme();
      }
    }

    private static class getClientPaymentChannelByPage_argsTupleScheme extends TupleScheme<getClientPaymentChannelByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetClientPaymentChannelVo()) {
          struct.clientPaymentChannelVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientPaymentChannelVo = new com.froad.thrift.vo.ClientPaymentChannelVo();
          struct.clientPaymentChannelVo.read(iprot);
          struct.setClientPaymentChannelVoIsSet(true);
        }
      }
    }

  }

  public static class getClientPaymentChannelByPage_result implements org.apache.thrift.TBase<getClientPaymentChannelByPage_result, getClientPaymentChannelByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientPaymentChannelByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientPaymentChannelByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientPaymentChannelByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientPaymentChannelByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientPaymentChannelPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientPaymentChannelPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientPaymentChannelByPage_result.class, metaDataMap);
    }

    public getClientPaymentChannelByPage_result() {
    }

    public getClientPaymentChannelByPage_result(
      com.froad.thrift.vo.ClientPaymentChannelPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientPaymentChannelByPage_result(getClientPaymentChannelByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ClientPaymentChannelPageVoRes(other.success);
      }
    }

    public getClientPaymentChannelByPage_result deepCopy() {
      return new getClientPaymentChannelByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ClientPaymentChannelPageVoRes getSuccess() {
      return this.success;
    }

    public getClientPaymentChannelByPage_result setSuccess(com.froad.thrift.vo.ClientPaymentChannelPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ClientPaymentChannelPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientPaymentChannelByPage_result)
        return this.equals((getClientPaymentChannelByPage_result)that);
      return false;
    }

    public boolean equals(getClientPaymentChannelByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientPaymentChannelByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientPaymentChannelByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientPaymentChannelByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByPage_resultStandardScheme getScheme() {
        return new getClientPaymentChannelByPage_resultStandardScheme();
      }
    }

    private static class getClientPaymentChannelByPage_resultStandardScheme extends StandardScheme<getClientPaymentChannelByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientPaymentChannelByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ClientPaymentChannelPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientPaymentChannelByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientPaymentChannelByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getClientPaymentChannelByPage_resultTupleScheme getScheme() {
        return new getClientPaymentChannelByPage_resultTupleScheme();
      }
    }

    private static class getClientPaymentChannelByPage_resultTupleScheme extends TupleScheme<getClientPaymentChannelByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientPaymentChannelByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ClientPaymentChannelPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
