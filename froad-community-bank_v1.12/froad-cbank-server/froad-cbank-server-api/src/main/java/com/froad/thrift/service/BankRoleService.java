/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankRoleService {

  /**
   * 银行角色服务接口
   * BankRoleService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 BankRole
     * @param bankRole 角色对象
     * @param resourceIds 资源id集合
     * @return long    主键ID(异常及错误返回-1)
     * 
     * @param originVo
     * @param bankRoleVo
     * @param resourceIds
     */
    public com.froad.thrift.vo.CommonAddVoRes addBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException;

    /**
     * 删除 BankRole
     * @param bankRole 角色对象
     * @return boolean
     * 
     * @param originVo
     * @param bankRoleVo
     */
    public com.froad.thrift.vo.ResultVo deleteBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException;

    /**
     * 修改 BankRole
     * @param bankRole
     * @param resourceIds 资源id集合
     * @return boolean
     * 
     * @param originVo
     * @param bankRoleVo
     * @param resourceIds
     */
    public com.froad.thrift.vo.ResultVo updateBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException;

    /**
     * 查询 BankRole(查询当前机构及当前机构下属所有角色)
     * @param bankRole
     * @return List<BankRoleVo>
     * 
     * @param bankRoleVo
     */
    public List<com.froad.thrift.vo.BankRoleVo> getBankRole(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException;

    /**
     * 查询 BankRole(只查询当前机构下的，不查下属机构对应的角色)
     * @param bankRole
     * @return List<BankRoleVo>
     * 
     * @param bankRoleVo
     */
    public List<com.froad.thrift.vo.BankRoleVo> getBankRoleInCurrentOrg(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BankRole
     * @param bankRole
     * @return BankRolePageVoRes
     * 
     * @param page
     * @param bankRoleVo
     */
    public com.froad.thrift.vo.BankRolePageVoRes getBankRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankRole(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankRoleInCurrentOrg(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      send_addBankRole(originVo, bankRoleVo, resourceIds);
      return recv_addBankRole();
    }

    public void send_addBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      addBankRole_args args = new addBankRole_args();
      args.setOriginVo(originVo);
      args.setBankRoleVo(bankRoleVo);
      args.setResourceIds(resourceIds);
      sendBase("addBankRole", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addBankRole() throws org.apache.thrift.TException
    {
      addBankRole_result result = new addBankRole_result();
      receiveBase(result, "addBankRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBankRole failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      send_deleteBankRole(originVo, bankRoleVo);
      return recv_deleteBankRole();
    }

    public void send_deleteBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      deleteBankRole_args args = new deleteBankRole_args();
      args.setOriginVo(originVo);
      args.setBankRoleVo(bankRoleVo);
      sendBase("deleteBankRole", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteBankRole() throws org.apache.thrift.TException
    {
      deleteBankRole_result result = new deleteBankRole_result();
      receiveBase(result, "deleteBankRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBankRole failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      send_updateBankRole(originVo, bankRoleVo, resourceIds);
      return recv_updateBankRole();
    }

    public void send_updateBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      updateBankRole_args args = new updateBankRole_args();
      args.setOriginVo(originVo);
      args.setBankRoleVo(bankRoleVo);
      args.setResourceIds(resourceIds);
      sendBase("updateBankRole", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateBankRole() throws org.apache.thrift.TException
    {
      updateBankRole_result result = new updateBankRole_result();
      receiveBase(result, "updateBankRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBankRole failed: unknown result");
    }

    public List<com.froad.thrift.vo.BankRoleVo> getBankRole(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      send_getBankRole(bankRoleVo);
      return recv_getBankRole();
    }

    public void send_getBankRole(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      getBankRole_args args = new getBankRole_args();
      args.setBankRoleVo(bankRoleVo);
      sendBase("getBankRole", args);
    }

    public List<com.froad.thrift.vo.BankRoleVo> recv_getBankRole() throws org.apache.thrift.TException
    {
      getBankRole_result result = new getBankRole_result();
      receiveBase(result, "getBankRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankRole failed: unknown result");
    }

    public List<com.froad.thrift.vo.BankRoleVo> getBankRoleInCurrentOrg(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      send_getBankRoleInCurrentOrg(bankRoleVo);
      return recv_getBankRoleInCurrentOrg();
    }

    public void send_getBankRoleInCurrentOrg(com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      getBankRoleInCurrentOrg_args args = new getBankRoleInCurrentOrg_args();
      args.setBankRoleVo(bankRoleVo);
      sendBase("getBankRoleInCurrentOrg", args);
    }

    public List<com.froad.thrift.vo.BankRoleVo> recv_getBankRoleInCurrentOrg() throws org.apache.thrift.TException
    {
      getBankRoleInCurrentOrg_result result = new getBankRoleInCurrentOrg_result();
      receiveBase(result, "getBankRoleInCurrentOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankRoleInCurrentOrg failed: unknown result");
    }

    public com.froad.thrift.vo.BankRolePageVoRes getBankRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      send_getBankRoleByPage(page, bankRoleVo);
      return recv_getBankRoleByPage();
    }

    public void send_getBankRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo) throws org.apache.thrift.TException
    {
      getBankRoleByPage_args args = new getBankRoleByPage_args();
      args.setPage(page);
      args.setBankRoleVo(bankRoleVo);
      sendBase("getBankRoleByPage", args);
    }

    public com.froad.thrift.vo.BankRolePageVoRes recv_getBankRoleByPage() throws org.apache.thrift.TException
    {
      getBankRoleByPage_result result = new getBankRoleByPage_result();
      receiveBase(result, "getBankRoleByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankRoleByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBankRole_call method_call = new addBankRole_call(originVo, bankRoleVo, resourceIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBankRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      private List<Long> resourceIds;
      public addBankRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankRoleVo = bankRoleVo;
        this.resourceIds = resourceIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBankRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBankRole_args args = new addBankRole_args();
        args.setOriginVo(originVo);
        args.setBankRoleVo(bankRoleVo);
        args.setResourceIds(resourceIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBankRole();
      }
    }

    public void deleteBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBankRole_call method_call = new deleteBankRole_call(originVo, bankRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBankRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      public deleteBankRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankRoleVo = bankRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBankRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBankRole_args args = new deleteBankRole_args();
        args.setOriginVo(originVo);
        args.setBankRoleVo(bankRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBankRole();
      }
    }

    public void updateBankRole(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBankRole_call method_call = new updateBankRole_call(originVo, bankRoleVo, resourceIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBankRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      private List<Long> resourceIds;
      public updateBankRole_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BankRoleVo bankRoleVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bankRoleVo = bankRoleVo;
        this.resourceIds = resourceIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBankRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBankRole_args args = new updateBankRole_args();
        args.setOriginVo(originVo);
        args.setBankRoleVo(bankRoleVo);
        args.setResourceIds(resourceIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBankRole();
      }
    }

    public void getBankRole(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankRole_call method_call = new getBankRole_call(bankRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      public getBankRole_call(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankRoleVo = bankRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankRole_args args = new getBankRole_args();
        args.setBankRoleVo(bankRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BankRoleVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankRole();
      }
    }

    public void getBankRoleInCurrentOrg(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankRoleInCurrentOrg_call method_call = new getBankRoleInCurrentOrg_call(bankRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankRoleInCurrentOrg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      public getBankRoleInCurrentOrg_call(com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankRoleVo = bankRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankRoleInCurrentOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankRoleInCurrentOrg_args args = new getBankRoleInCurrentOrg_args();
        args.setBankRoleVo(bankRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BankRoleVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankRoleInCurrentOrg();
      }
    }

    public void getBankRoleByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankRoleByPage_call method_call = new getBankRoleByPage_call(page, bankRoleVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankRoleByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.BankRoleVo bankRoleVo;
      public getBankRoleByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BankRoleVo bankRoleVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.bankRoleVo = bankRoleVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankRoleByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankRoleByPage_args args = new getBankRoleByPage_args();
        args.setPage(page);
        args.setBankRoleVo(bankRoleVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankRolePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankRoleByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBankRole", new addBankRole());
      processMap.put("deleteBankRole", new deleteBankRole());
      processMap.put("updateBankRole", new updateBankRole());
      processMap.put("getBankRole", new getBankRole());
      processMap.put("getBankRoleInCurrentOrg", new getBankRoleInCurrentOrg());
      processMap.put("getBankRoleByPage", new getBankRoleByPage());
      return processMap;
    }

    public static class addBankRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBankRole_args> {
      public addBankRole() {
        super("addBankRole");
      }

      public addBankRole_args getEmptyArgsInstance() {
        return new addBankRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBankRole_result getResult(I iface, addBankRole_args args) throws org.apache.thrift.TException {
        addBankRole_result result = new addBankRole_result();
        result.success = iface.addBankRole(args.originVo, args.bankRoleVo, args.resourceIds);
        return result;
      }
    }

    public static class deleteBankRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBankRole_args> {
      public deleteBankRole() {
        super("deleteBankRole");
      }

      public deleteBankRole_args getEmptyArgsInstance() {
        return new deleteBankRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBankRole_result getResult(I iface, deleteBankRole_args args) throws org.apache.thrift.TException {
        deleteBankRole_result result = new deleteBankRole_result();
        result.success = iface.deleteBankRole(args.originVo, args.bankRoleVo);
        return result;
      }
    }

    public static class updateBankRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBankRole_args> {
      public updateBankRole() {
        super("updateBankRole");
      }

      public updateBankRole_args getEmptyArgsInstance() {
        return new updateBankRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBankRole_result getResult(I iface, updateBankRole_args args) throws org.apache.thrift.TException {
        updateBankRole_result result = new updateBankRole_result();
        result.success = iface.updateBankRole(args.originVo, args.bankRoleVo, args.resourceIds);
        return result;
      }
    }

    public static class getBankRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankRole_args> {
      public getBankRole() {
        super("getBankRole");
      }

      public getBankRole_args getEmptyArgsInstance() {
        return new getBankRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankRole_result getResult(I iface, getBankRole_args args) throws org.apache.thrift.TException {
        getBankRole_result result = new getBankRole_result();
        result.success = iface.getBankRole(args.bankRoleVo);
        return result;
      }
    }

    public static class getBankRoleInCurrentOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankRoleInCurrentOrg_args> {
      public getBankRoleInCurrentOrg() {
        super("getBankRoleInCurrentOrg");
      }

      public getBankRoleInCurrentOrg_args getEmptyArgsInstance() {
        return new getBankRoleInCurrentOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankRoleInCurrentOrg_result getResult(I iface, getBankRoleInCurrentOrg_args args) throws org.apache.thrift.TException {
        getBankRoleInCurrentOrg_result result = new getBankRoleInCurrentOrg_result();
        result.success = iface.getBankRoleInCurrentOrg(args.bankRoleVo);
        return result;
      }
    }

    public static class getBankRoleByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankRoleByPage_args> {
      public getBankRoleByPage() {
        super("getBankRoleByPage");
      }

      public getBankRoleByPage_args getEmptyArgsInstance() {
        return new getBankRoleByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankRoleByPage_result getResult(I iface, getBankRoleByPage_args args) throws org.apache.thrift.TException {
        getBankRoleByPage_result result = new getBankRoleByPage_result();
        result.success = iface.getBankRoleByPage(args.page, args.bankRoleVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBankRole", new addBankRole());
      processMap.put("deleteBankRole", new deleteBankRole());
      processMap.put("updateBankRole", new updateBankRole());
      processMap.put("getBankRole", new getBankRole());
      processMap.put("getBankRoleInCurrentOrg", new getBankRoleInCurrentOrg());
      processMap.put("getBankRoleByPage", new getBankRoleByPage());
      return processMap;
    }

    public static class addBankRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBankRole_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addBankRole() {
        super("addBankRole");
      }

      public addBankRole_args getEmptyArgsInstance() {
        return new addBankRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addBankRole_result result = new addBankRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBankRole_result result = new addBankRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBankRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addBankRole(args.originVo, args.bankRoleVo, args.resourceIds,resultHandler);
      }
    }

    public static class deleteBankRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBankRole_args, com.froad.thrift.vo.ResultVo> {
      public deleteBankRole() {
        super("deleteBankRole");
      }

      public deleteBankRole_args getEmptyArgsInstance() {
        return new deleteBankRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteBankRole_result result = new deleteBankRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBankRole_result result = new deleteBankRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBankRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteBankRole(args.originVo, args.bankRoleVo,resultHandler);
      }
    }

    public static class updateBankRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBankRole_args, com.froad.thrift.vo.ResultVo> {
      public updateBankRole() {
        super("updateBankRole");
      }

      public updateBankRole_args getEmptyArgsInstance() {
        return new updateBankRole_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateBankRole_result result = new updateBankRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBankRole_result result = new updateBankRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBankRole_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateBankRole(args.originVo, args.bankRoleVo, args.resourceIds,resultHandler);
      }
    }

    public static class getBankRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankRole_args, List<com.froad.thrift.vo.BankRoleVo>> {
      public getBankRole() {
        super("getBankRole");
      }

      public getBankRole_args getEmptyArgsInstance() {
        return new getBankRole_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BankRoleVo> o) {
            getBankRole_result result = new getBankRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankRole_result result = new getBankRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankRole_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>> resultHandler) throws TException {
        iface.getBankRole(args.bankRoleVo,resultHandler);
      }
    }

    public static class getBankRoleInCurrentOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankRoleInCurrentOrg_args, List<com.froad.thrift.vo.BankRoleVo>> {
      public getBankRoleInCurrentOrg() {
        super("getBankRoleInCurrentOrg");
      }

      public getBankRoleInCurrentOrg_args getEmptyArgsInstance() {
        return new getBankRoleInCurrentOrg_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BankRoleVo> o) {
            getBankRoleInCurrentOrg_result result = new getBankRoleInCurrentOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankRoleInCurrentOrg_result result = new getBankRoleInCurrentOrg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankRoleInCurrentOrg_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BankRoleVo>> resultHandler) throws TException {
        iface.getBankRoleInCurrentOrg(args.bankRoleVo,resultHandler);
      }
    }

    public static class getBankRoleByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankRoleByPage_args, com.froad.thrift.vo.BankRolePageVoRes> {
      public getBankRoleByPage() {
        super("getBankRoleByPage");
      }

      public getBankRoleByPage_args getEmptyArgsInstance() {
        return new getBankRoleByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankRolePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankRolePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BankRolePageVoRes o) {
            getBankRoleByPage_result result = new getBankRoleByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankRoleByPage_result result = new getBankRoleByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankRoleByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankRolePageVoRes> resultHandler) throws TException {
        iface.getBankRoleByPage(args.page, args.bankRoleVo,resultHandler);
      }
    }

  }

  public static class addBankRole_args implements org.apache.thrift.TBase<addBankRole_args, addBankRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBankRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required
    public List<Long> resourceIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_ROLE_VO((short)2, "bankRoleVo"),
      RESOURCE_IDS((short)3, "resourceIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          case 3: // RESOURCE_IDS
            return RESOURCE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      tmpMap.put(_Fields.RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("resourceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankRole_args.class, metaDataMap);
    }

    public addBankRole_args() {
    }

    public addBankRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankRoleVo bankRoleVo,
      List<Long> resourceIds)
    {
      this();
      this.originVo = originVo;
      this.bankRoleVo = bankRoleVo;
      this.resourceIds = resourceIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankRole_args(addBankRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
      if (other.isSetResourceIds()) {
        List<Long> __this__resourceIds = new ArrayList<Long>(other.resourceIds);
        this.resourceIds = __this__resourceIds;
      }
    }

    public addBankRole_args deepCopy() {
      return new addBankRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankRoleVo = null;
      this.resourceIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBankRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public addBankRole_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public int getResourceIdsSize() {
      return (this.resourceIds == null) ? 0 : this.resourceIds.size();
    }

    public java.util.Iterator<Long> getResourceIdsIterator() {
      return (this.resourceIds == null) ? null : this.resourceIds.iterator();
    }

    public void addToResourceIds(long elem) {
      if (this.resourceIds == null) {
        this.resourceIds = new ArrayList<Long>();
      }
      this.resourceIds.add(elem);
    }

    public List<Long> getResourceIds() {
      return this.resourceIds;
    }

    public addBankRole_args setResourceIds(List<Long> resourceIds) {
      this.resourceIds = resourceIds;
      return this;
    }

    public void unsetResourceIds() {
      this.resourceIds = null;
    }

    /** Returns true if field resourceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceIds() {
      return this.resourceIds != null;
    }

    public void setResourceIdsIsSet(boolean value) {
      if (!value) {
        this.resourceIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      case RESOURCE_IDS:
        if (value == null) {
          unsetResourceIds();
        } else {
          setResourceIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_ROLE_VO:
        return getBankRoleVo();

      case RESOURCE_IDS:
        return getResourceIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      case RESOURCE_IDS:
        return isSetResourceIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankRole_args)
        return this.equals((addBankRole_args)that);
      return false;
    }

    public boolean equals(addBankRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      boolean this_present_resourceIds = true && this.isSetResourceIds();
      boolean that_present_resourceIds = true && that.isSetResourceIds();
      if (this_present_resourceIds || that_present_resourceIds) {
        if (!(this_present_resourceIds && that_present_resourceIds))
          return false;
        if (!this.resourceIds.equals(that.resourceIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      boolean present_resourceIds = true && (isSetResourceIds());
      list.add(present_resourceIds);
      if (present_resourceIds)
        list.add(resourceIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceIds()).compareTo(other.isSetResourceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIds, other.resourceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceIds:");
      if (this.resourceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankRole_argsStandardSchemeFactory implements SchemeFactory {
      public addBankRole_argsStandardScheme getScheme() {
        return new addBankRole_argsStandardScheme();
      }
    }

    private static class addBankRole_argsStandardScheme extends StandardScheme<addBankRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESOURCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.resourceIds = new ArrayList<Long>(_list88.size);
                  long _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI64();
                    struct.resourceIds.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setResourceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resourceIds != null) {
          oprot.writeFieldBegin(RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.resourceIds.size()));
            for (long _iter91 : struct.resourceIds)
            {
              oprot.writeI64(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankRole_argsTupleSchemeFactory implements SchemeFactory {
      public addBankRole_argsTupleScheme getScheme() {
        return new addBankRole_argsTupleScheme();
      }
    }

    private static class addBankRole_argsTupleScheme extends TupleScheme<addBankRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankRoleVo()) {
          optionals.set(1);
        }
        if (struct.isSetResourceIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
        if (struct.isSetResourceIds()) {
          {
            oprot.writeI32(struct.resourceIds.size());
            for (long _iter92 : struct.resourceIds)
            {
              oprot.writeI64(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.resourceIds = new ArrayList<Long>(_list93.size);
            long _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI64();
              struct.resourceIds.add(_elem94);
            }
          }
          struct.setResourceIdsIsSet(true);
        }
      }
    }

  }

  public static class addBankRole_result implements org.apache.thrift.TBase<addBankRole_result, addBankRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBankRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankRole_result.class, metaDataMap);
    }

    public addBankRole_result() {
    }

    public addBankRole_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankRole_result(addBankRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addBankRole_result deepCopy() {
      return new addBankRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addBankRole_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankRole_result)
        return this.equals((addBankRole_result)that);
      return false;
    }

    public boolean equals(addBankRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankRole_resultStandardSchemeFactory implements SchemeFactory {
      public addBankRole_resultStandardScheme getScheme() {
        return new addBankRole_resultStandardScheme();
      }
    }

    private static class addBankRole_resultStandardScheme extends StandardScheme<addBankRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankRole_resultTupleSchemeFactory implements SchemeFactory {
      public addBankRole_resultTupleScheme getScheme() {
        return new addBankRole_resultTupleScheme();
      }
    }

    private static class addBankRole_resultTupleScheme extends TupleScheme<addBankRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBankRole_args implements org.apache.thrift.TBase<deleteBankRole_args, deleteBankRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_ROLE_VO((short)2, "bankRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankRole_args.class, metaDataMap);
    }

    public deleteBankRole_args() {
    }

    public deleteBankRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankRoleVo bankRoleVo)
    {
      this();
      this.originVo = originVo;
      this.bankRoleVo = bankRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankRole_args(deleteBankRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
    }

    public deleteBankRole_args deepCopy() {
      return new deleteBankRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankRoleVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBankRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public deleteBankRole_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_ROLE_VO:
        return getBankRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankRole_args)
        return this.equals((deleteBankRole_args)that);
      return false;
    }

    public boolean equals(deleteBankRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankRole_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBankRole_argsStandardScheme getScheme() {
        return new deleteBankRole_argsStandardScheme();
      }
    }

    private static class deleteBankRole_argsStandardScheme extends StandardScheme<deleteBankRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankRole_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBankRole_argsTupleScheme getScheme() {
        return new deleteBankRole_argsTupleScheme();
      }
    }

    private static class deleteBankRole_argsTupleScheme extends TupleScheme<deleteBankRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
      }
    }

  }

  public static class deleteBankRole_result implements org.apache.thrift.TBase<deleteBankRole_result, deleteBankRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankRole_result.class, metaDataMap);
    }

    public deleteBankRole_result() {
    }

    public deleteBankRole_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankRole_result(deleteBankRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteBankRole_result deepCopy() {
      return new deleteBankRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteBankRole_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankRole_result)
        return this.equals((deleteBankRole_result)that);
      return false;
    }

    public boolean equals(deleteBankRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankRole_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBankRole_resultStandardScheme getScheme() {
        return new deleteBankRole_resultStandardScheme();
      }
    }

    private static class deleteBankRole_resultStandardScheme extends StandardScheme<deleteBankRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankRole_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBankRole_resultTupleScheme getScheme() {
        return new deleteBankRole_resultTupleScheme();
      }
    }

    private static class deleteBankRole_resultTupleScheme extends TupleScheme<deleteBankRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBankRole_args implements org.apache.thrift.TBase<updateBankRole_args, updateBankRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBankRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBankRole_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBankRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBankRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required
    public List<Long> resourceIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BANK_ROLE_VO((short)2, "bankRoleVo"),
      RESOURCE_IDS((short)3, "resourceIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          case 3: // RESOURCE_IDS
            return RESOURCE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      tmpMap.put(_Fields.RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("resourceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBankRole_args.class, metaDataMap);
    }

    public updateBankRole_args() {
    }

    public updateBankRole_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BankRoleVo bankRoleVo,
      List<Long> resourceIds)
    {
      this();
      this.originVo = originVo;
      this.bankRoleVo = bankRoleVo;
      this.resourceIds = resourceIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBankRole_args(updateBankRole_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
      if (other.isSetResourceIds()) {
        List<Long> __this__resourceIds = new ArrayList<Long>(other.resourceIds);
        this.resourceIds = __this__resourceIds;
      }
    }

    public updateBankRole_args deepCopy() {
      return new updateBankRole_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bankRoleVo = null;
      this.resourceIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBankRole_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public updateBankRole_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public int getResourceIdsSize() {
      return (this.resourceIds == null) ? 0 : this.resourceIds.size();
    }

    public java.util.Iterator<Long> getResourceIdsIterator() {
      return (this.resourceIds == null) ? null : this.resourceIds.iterator();
    }

    public void addToResourceIds(long elem) {
      if (this.resourceIds == null) {
        this.resourceIds = new ArrayList<Long>();
      }
      this.resourceIds.add(elem);
    }

    public List<Long> getResourceIds() {
      return this.resourceIds;
    }

    public updateBankRole_args setResourceIds(List<Long> resourceIds) {
      this.resourceIds = resourceIds;
      return this;
    }

    public void unsetResourceIds() {
      this.resourceIds = null;
    }

    /** Returns true if field resourceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceIds() {
      return this.resourceIds != null;
    }

    public void setResourceIdsIsSet(boolean value) {
      if (!value) {
        this.resourceIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      case RESOURCE_IDS:
        if (value == null) {
          unsetResourceIds();
        } else {
          setResourceIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BANK_ROLE_VO:
        return getBankRoleVo();

      case RESOURCE_IDS:
        return getResourceIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      case RESOURCE_IDS:
        return isSetResourceIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBankRole_args)
        return this.equals((updateBankRole_args)that);
      return false;
    }

    public boolean equals(updateBankRole_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      boolean this_present_resourceIds = true && this.isSetResourceIds();
      boolean that_present_resourceIds = true && that.isSetResourceIds();
      if (this_present_resourceIds || that_present_resourceIds) {
        if (!(this_present_resourceIds && that_present_resourceIds))
          return false;
        if (!this.resourceIds.equals(that.resourceIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      boolean present_resourceIds = true && (isSetResourceIds());
      list.add(present_resourceIds);
      if (present_resourceIds)
        list.add(resourceIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBankRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceIds()).compareTo(other.isSetResourceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIds, other.resourceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBankRole_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceIds:");
      if (this.resourceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBankRole_argsStandardSchemeFactory implements SchemeFactory {
      public updateBankRole_argsStandardScheme getScheme() {
        return new updateBankRole_argsStandardScheme();
      }
    }

    private static class updateBankRole_argsStandardScheme extends StandardScheme<updateBankRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBankRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESOURCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.resourceIds = new ArrayList<Long>(_list96.size);
                  long _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI64();
                    struct.resourceIds.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setResourceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBankRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resourceIds != null) {
          oprot.writeFieldBegin(RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.resourceIds.size()));
            for (long _iter99 : struct.resourceIds)
            {
              oprot.writeI64(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBankRole_argsTupleSchemeFactory implements SchemeFactory {
      public updateBankRole_argsTupleScheme getScheme() {
        return new updateBankRole_argsTupleScheme();
      }
    }

    private static class updateBankRole_argsTupleScheme extends TupleScheme<updateBankRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBankRoleVo()) {
          optionals.set(1);
        }
        if (struct.isSetResourceIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
        if (struct.isSetResourceIds()) {
          {
            oprot.writeI32(struct.resourceIds.size());
            for (long _iter100 : struct.resourceIds)
            {
              oprot.writeI64(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.resourceIds = new ArrayList<Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.resourceIds.add(_elem102);
            }
          }
          struct.setResourceIdsIsSet(true);
        }
      }
    }

  }

  public static class updateBankRole_result implements org.apache.thrift.TBase<updateBankRole_result, updateBankRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBankRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBankRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBankRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBankRole_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBankRole_result.class, metaDataMap);
    }

    public updateBankRole_result() {
    }

    public updateBankRole_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBankRole_result(updateBankRole_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateBankRole_result deepCopy() {
      return new updateBankRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateBankRole_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBankRole_result)
        return this.equals((updateBankRole_result)that);
      return false;
    }

    public boolean equals(updateBankRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBankRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBankRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBankRole_resultStandardSchemeFactory implements SchemeFactory {
      public updateBankRole_resultStandardScheme getScheme() {
        return new updateBankRole_resultStandardScheme();
      }
    }

    private static class updateBankRole_resultStandardScheme extends StandardScheme<updateBankRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBankRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBankRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBankRole_resultTupleSchemeFactory implements SchemeFactory {
      public updateBankRole_resultTupleScheme getScheme() {
        return new updateBankRole_resultTupleScheme();
      }
    }

    private static class updateBankRole_resultTupleScheme extends TupleScheme<updateBankRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankRole_args implements org.apache.thrift.TBase<getBankRole_args, getBankRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRole_args");

    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_ROLE_VO((short)1, "bankRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRole_args.class, metaDataMap);
    }

    public getBankRole_args() {
    }

    public getBankRole_args(
      com.froad.thrift.vo.BankRoleVo bankRoleVo)
    {
      this();
      this.bankRoleVo = bankRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRole_args(getBankRole_args other) {
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
    }

    public getBankRole_args deepCopy() {
      return new getBankRole_args(this);
    }

    @Override
    public void clear() {
      this.bankRoleVo = null;
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public getBankRole_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_ROLE_VO:
        return getBankRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRole_args)
        return this.equals((getBankRole_args)that);
      return false;
    }

    public boolean equals(getBankRole_args that) {
      if (that == null)
        return false;

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRole_args(");
      boolean first = true;

      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRole_argsStandardSchemeFactory implements SchemeFactory {
      public getBankRole_argsStandardScheme getScheme() {
        return new getBankRole_argsStandardScheme();
      }
    }

    private static class getBankRole_argsStandardScheme extends StandardScheme<getBankRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRole_argsTupleSchemeFactory implements SchemeFactory {
      public getBankRole_argsTupleScheme getScheme() {
        return new getBankRole_argsTupleScheme();
      }
    }

    private static class getBankRole_argsTupleScheme extends TupleScheme<getBankRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankRoleVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
      }
    }

  }

  public static class getBankRole_result implements org.apache.thrift.TBase<getBankRole_result, getBankRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRole_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BankRoleVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRole_result.class, metaDataMap);
    }

    public getBankRole_result() {
    }

    public getBankRole_result(
      List<com.froad.thrift.vo.BankRoleVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRole_result(getBankRole_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BankRoleVo> __this__success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(other.success.size());
        for (com.froad.thrift.vo.BankRoleVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BankRoleVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBankRole_result deepCopy() {
      return new getBankRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BankRoleVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BankRoleVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BankRoleVo> getSuccess() {
      return this.success;
    }

    public getBankRole_result setSuccess(List<com.froad.thrift.vo.BankRoleVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BankRoleVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRole_result)
        return this.equals((getBankRole_result)that);
      return false;
    }

    public boolean equals(getBankRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRole_resultStandardSchemeFactory implements SchemeFactory {
      public getBankRole_resultStandardScheme getScheme() {
        return new getBankRole_resultStandardScheme();
      }
    }

    private static class getBankRole_resultStandardScheme extends StandardScheme<getBankRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(_list104.size);
                  com.froad.thrift.vo.BankRoleVo _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.froad.thrift.vo.BankRoleVo();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BankRoleVo _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRole_resultTupleSchemeFactory implements SchemeFactory {
      public getBankRole_resultTupleScheme getScheme() {
        return new getBankRole_resultTupleScheme();
      }
    }

    private static class getBankRole_resultTupleScheme extends TupleScheme<getBankRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BankRoleVo _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(_list109.size);
            com.froad.thrift.vo.BankRoleVo _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.froad.thrift.vo.BankRoleVo();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankRoleInCurrentOrg_args implements org.apache.thrift.TBase<getBankRoleInCurrentOrg_args, getBankRoleInCurrentOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRoleInCurrentOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRoleInCurrentOrg_args");

    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRoleInCurrentOrg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRoleInCurrentOrg_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_ROLE_VO((short)1, "bankRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRoleInCurrentOrg_args.class, metaDataMap);
    }

    public getBankRoleInCurrentOrg_args() {
    }

    public getBankRoleInCurrentOrg_args(
      com.froad.thrift.vo.BankRoleVo bankRoleVo)
    {
      this();
      this.bankRoleVo = bankRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRoleInCurrentOrg_args(getBankRoleInCurrentOrg_args other) {
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
    }

    public getBankRoleInCurrentOrg_args deepCopy() {
      return new getBankRoleInCurrentOrg_args(this);
    }

    @Override
    public void clear() {
      this.bankRoleVo = null;
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public getBankRoleInCurrentOrg_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_ROLE_VO:
        return getBankRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRoleInCurrentOrg_args)
        return this.equals((getBankRoleInCurrentOrg_args)that);
      return false;
    }

    public boolean equals(getBankRoleInCurrentOrg_args that) {
      if (that == null)
        return false;

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRoleInCurrentOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRoleInCurrentOrg_args(");
      boolean first = true;

      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRoleInCurrentOrg_argsStandardSchemeFactory implements SchemeFactory {
      public getBankRoleInCurrentOrg_argsStandardScheme getScheme() {
        return new getBankRoleInCurrentOrg_argsStandardScheme();
      }
    }

    private static class getBankRoleInCurrentOrg_argsStandardScheme extends StandardScheme<getBankRoleInCurrentOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRoleInCurrentOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRoleInCurrentOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRoleInCurrentOrg_argsTupleSchemeFactory implements SchemeFactory {
      public getBankRoleInCurrentOrg_argsTupleScheme getScheme() {
        return new getBankRoleInCurrentOrg_argsTupleScheme();
      }
    }

    private static class getBankRoleInCurrentOrg_argsTupleScheme extends TupleScheme<getBankRoleInCurrentOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRoleInCurrentOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankRoleVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRoleInCurrentOrg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
      }
    }

  }

  public static class getBankRoleInCurrentOrg_result implements org.apache.thrift.TBase<getBankRoleInCurrentOrg_result, getBankRoleInCurrentOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRoleInCurrentOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRoleInCurrentOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRoleInCurrentOrg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRoleInCurrentOrg_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BankRoleVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRoleInCurrentOrg_result.class, metaDataMap);
    }

    public getBankRoleInCurrentOrg_result() {
    }

    public getBankRoleInCurrentOrg_result(
      List<com.froad.thrift.vo.BankRoleVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRoleInCurrentOrg_result(getBankRoleInCurrentOrg_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BankRoleVo> __this__success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(other.success.size());
        for (com.froad.thrift.vo.BankRoleVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BankRoleVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBankRoleInCurrentOrg_result deepCopy() {
      return new getBankRoleInCurrentOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BankRoleVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BankRoleVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BankRoleVo> getSuccess() {
      return this.success;
    }

    public getBankRoleInCurrentOrg_result setSuccess(List<com.froad.thrift.vo.BankRoleVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BankRoleVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRoleInCurrentOrg_result)
        return this.equals((getBankRoleInCurrentOrg_result)that);
      return false;
    }

    public boolean equals(getBankRoleInCurrentOrg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRoleInCurrentOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRoleInCurrentOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRoleInCurrentOrg_resultStandardSchemeFactory implements SchemeFactory {
      public getBankRoleInCurrentOrg_resultStandardScheme getScheme() {
        return new getBankRoleInCurrentOrg_resultStandardScheme();
      }
    }

    private static class getBankRoleInCurrentOrg_resultStandardScheme extends StandardScheme<getBankRoleInCurrentOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRoleInCurrentOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(_list112.size);
                  com.froad.thrift.vo.BankRoleVo _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.froad.thrift.vo.BankRoleVo();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRoleInCurrentOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BankRoleVo _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRoleInCurrentOrg_resultTupleSchemeFactory implements SchemeFactory {
      public getBankRoleInCurrentOrg_resultTupleScheme getScheme() {
        return new getBankRoleInCurrentOrg_resultTupleScheme();
      }
    }

    private static class getBankRoleInCurrentOrg_resultTupleScheme extends TupleScheme<getBankRoleInCurrentOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRoleInCurrentOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BankRoleVo _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRoleInCurrentOrg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BankRoleVo>(_list117.size);
            com.froad.thrift.vo.BankRoleVo _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.froad.thrift.vo.BankRoleVo();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankRoleByPage_args implements org.apache.thrift.TBase<getBankRoleByPage_args, getBankRoleByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRoleByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRoleByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_ROLE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRoleVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRoleByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRoleByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.BankRoleVo bankRoleVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      BANK_ROLE_VO((short)2, "bankRoleVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // BANK_ROLE_VO
            return BANK_ROLE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BANK_ROLE_VO, new org.apache.thrift.meta_data.FieldMetaData("bankRoleVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRoleVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRoleByPage_args.class, metaDataMap);
    }

    public getBankRoleByPage_args() {
    }

    public getBankRoleByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.BankRoleVo bankRoleVo)
    {
      this();
      this.page = page;
      this.bankRoleVo = bankRoleVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRoleByPage_args(getBankRoleByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetBankRoleVo()) {
        this.bankRoleVo = new com.froad.thrift.vo.BankRoleVo(other.bankRoleVo);
      }
    }

    public getBankRoleByPage_args deepCopy() {
      return new getBankRoleByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.bankRoleVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getBankRoleByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.BankRoleVo getBankRoleVo() {
      return this.bankRoleVo;
    }

    public getBankRoleByPage_args setBankRoleVo(com.froad.thrift.vo.BankRoleVo bankRoleVo) {
      this.bankRoleVo = bankRoleVo;
      return this;
    }

    public void unsetBankRoleVo() {
      this.bankRoleVo = null;
    }

    /** Returns true if field bankRoleVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankRoleVo() {
      return this.bankRoleVo != null;
    }

    public void setBankRoleVoIsSet(boolean value) {
      if (!value) {
        this.bankRoleVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BANK_ROLE_VO:
        if (value == null) {
          unsetBankRoleVo();
        } else {
          setBankRoleVo((com.froad.thrift.vo.BankRoleVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case BANK_ROLE_VO:
        return getBankRoleVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case BANK_ROLE_VO:
        return isSetBankRoleVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRoleByPage_args)
        return this.equals((getBankRoleByPage_args)that);
      return false;
    }

    public boolean equals(getBankRoleByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_bankRoleVo = true && this.isSetBankRoleVo();
      boolean that_present_bankRoleVo = true && that.isSetBankRoleVo();
      if (this_present_bankRoleVo || that_present_bankRoleVo) {
        if (!(this_present_bankRoleVo && that_present_bankRoleVo))
          return false;
        if (!this.bankRoleVo.equals(that.bankRoleVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_bankRoleVo = true && (isSetBankRoleVo());
      list.add(present_bankRoleVo);
      if (present_bankRoleVo)
        list.add(bankRoleVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRoleByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankRoleVo()).compareTo(other.isSetBankRoleVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankRoleVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRoleVo, other.bankRoleVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRoleByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankRoleVo:");
      if (this.bankRoleVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankRoleVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (bankRoleVo != null) {
        bankRoleVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRoleByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getBankRoleByPage_argsStandardScheme getScheme() {
        return new getBankRoleByPage_argsStandardScheme();
      }
    }

    private static class getBankRoleByPage_argsStandardScheme extends StandardScheme<getBankRoleByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRoleByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_ROLE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
                struct.bankRoleVo.read(iprot);
                struct.setBankRoleVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRoleByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bankRoleVo != null) {
          oprot.writeFieldBegin(BANK_ROLE_VO_FIELD_DESC);
          struct.bankRoleVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRoleByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getBankRoleByPage_argsTupleScheme getScheme() {
        return new getBankRoleByPage_argsTupleScheme();
      }
    }

    private static class getBankRoleByPage_argsTupleScheme extends TupleScheme<getBankRoleByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRoleByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetBankRoleVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetBankRoleVo()) {
          struct.bankRoleVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRoleByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankRoleVo = new com.froad.thrift.vo.BankRoleVo();
          struct.bankRoleVo.read(iprot);
          struct.setBankRoleVoIsSet(true);
        }
      }
    }

  }

  public static class getBankRoleByPage_result implements org.apache.thrift.TBase<getBankRoleByPage_result, getBankRoleByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankRoleByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankRoleByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankRoleByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankRoleByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankRolePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankRolePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankRoleByPage_result.class, metaDataMap);
    }

    public getBankRoleByPage_result() {
    }

    public getBankRoleByPage_result(
      com.froad.thrift.vo.BankRolePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankRoleByPage_result(getBankRoleByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankRolePageVoRes(other.success);
      }
    }

    public getBankRoleByPage_result deepCopy() {
      return new getBankRoleByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankRolePageVoRes getSuccess() {
      return this.success;
    }

    public getBankRoleByPage_result setSuccess(com.froad.thrift.vo.BankRolePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankRolePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankRoleByPage_result)
        return this.equals((getBankRoleByPage_result)that);
      return false;
    }

    public boolean equals(getBankRoleByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankRoleByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankRoleByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankRoleByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getBankRoleByPage_resultStandardScheme getScheme() {
        return new getBankRoleByPage_resultStandardScheme();
      }
    }

    private static class getBankRoleByPage_resultStandardScheme extends StandardScheme<getBankRoleByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankRoleByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankRolePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankRoleByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankRoleByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getBankRoleByPage_resultTupleScheme getScheme() {
        return new getBankRoleByPage_resultTupleScheme();
      }
    }

    private static class getBankRoleByPage_resultTupleScheme extends TupleScheme<getBankRoleByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankRoleByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankRoleByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankRolePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
