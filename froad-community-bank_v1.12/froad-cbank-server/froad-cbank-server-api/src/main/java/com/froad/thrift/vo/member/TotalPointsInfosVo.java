/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class TotalPointsInfosVo implements org.apache.thrift.TBase<TotalPointsInfosVo, TotalPointsInfosVo._Fields>, java.io.Serializable, Cloneable, Comparable<TotalPointsInfosVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TotalPointsInfosVo");

  private static final org.apache.thrift.protocol.TField PROTOCOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPoints", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TotalPointsInfosVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TotalPointsInfosVoTupleSchemeFactory());
  }

  public String protocolType; // required
  public String totalPoints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROTOCOL_TYPE((short)1, "protocolType"),
    TOTAL_POINTS((short)2, "totalPoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_TYPE
          return PROTOCOL_TYPE;
        case 2: // TOTAL_POINTS
          return TOTAL_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("protocolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_POINTS, new org.apache.thrift.meta_data.FieldMetaData("totalPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TotalPointsInfosVo.class, metaDataMap);
  }

  public TotalPointsInfosVo() {
  }

  public TotalPointsInfosVo(
    String protocolType,
    String totalPoints)
  {
    this();
    this.protocolType = protocolType;
    this.totalPoints = totalPoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TotalPointsInfosVo(TotalPointsInfosVo other) {
    if (other.isSetProtocolType()) {
      this.protocolType = other.protocolType;
    }
    if (other.isSetTotalPoints()) {
      this.totalPoints = other.totalPoints;
    }
  }

  public TotalPointsInfosVo deepCopy() {
    return new TotalPointsInfosVo(this);
  }

  @Override
  public void clear() {
    this.protocolType = null;
    this.totalPoints = null;
  }

  public String getProtocolType() {
    return this.protocolType;
  }

  public TotalPointsInfosVo setProtocolType(String protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  public void unsetProtocolType() {
    this.protocolType = null;
  }

  /** Returns true if field protocolType is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolType() {
    return this.protocolType != null;
  }

  public void setProtocolTypeIsSet(boolean value) {
    if (!value) {
      this.protocolType = null;
    }
  }

  public String getTotalPoints() {
    return this.totalPoints;
  }

  public TotalPointsInfosVo setTotalPoints(String totalPoints) {
    this.totalPoints = totalPoints;
    return this;
  }

  public void unsetTotalPoints() {
    this.totalPoints = null;
  }

  /** Returns true if field totalPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPoints() {
    return this.totalPoints != null;
  }

  public void setTotalPointsIsSet(boolean value) {
    if (!value) {
      this.totalPoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_TYPE:
      if (value == null) {
        unsetProtocolType();
      } else {
        setProtocolType((String)value);
      }
      break;

    case TOTAL_POINTS:
      if (value == null) {
        unsetTotalPoints();
      } else {
        setTotalPoints((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_TYPE:
      return getProtocolType();

    case TOTAL_POINTS:
      return getTotalPoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_TYPE:
      return isSetProtocolType();
    case TOTAL_POINTS:
      return isSetTotalPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TotalPointsInfosVo)
      return this.equals((TotalPointsInfosVo)that);
    return false;
  }

  public boolean equals(TotalPointsInfosVo that) {
    if (that == null)
      return false;

    boolean this_present_protocolType = true && this.isSetProtocolType();
    boolean that_present_protocolType = true && that.isSetProtocolType();
    if (this_present_protocolType || that_present_protocolType) {
      if (!(this_present_protocolType && that_present_protocolType))
        return false;
      if (!this.protocolType.equals(that.protocolType))
        return false;
    }

    boolean this_present_totalPoints = true && this.isSetTotalPoints();
    boolean that_present_totalPoints = true && that.isSetTotalPoints();
    if (this_present_totalPoints || that_present_totalPoints) {
      if (!(this_present_totalPoints && that_present_totalPoints))
        return false;
      if (!this.totalPoints.equals(that.totalPoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocolType = true && (isSetProtocolType());
    list.add(present_protocolType);
    if (present_protocolType)
      list.add(protocolType);

    boolean present_totalPoints = true && (isSetTotalPoints());
    list.add(present_totalPoints);
    if (present_totalPoints)
      list.add(totalPoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(TotalPointsInfosVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocolType()).compareTo(other.isSetProtocolType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolType, other.protocolType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPoints()).compareTo(other.isSetTotalPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPoints, other.totalPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TotalPointsInfosVo(");
    boolean first = true;

    sb.append("protocolType:");
    if (this.protocolType == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPoints:");
    if (this.totalPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.totalPoints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TotalPointsInfosVoStandardSchemeFactory implements SchemeFactory {
    public TotalPointsInfosVoStandardScheme getScheme() {
      return new TotalPointsInfosVoStandardScheme();
    }
  }

  private static class TotalPointsInfosVoStandardScheme extends StandardScheme<TotalPointsInfosVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TotalPointsInfosVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolType = iprot.readString();
              struct.setProtocolTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalPoints = iprot.readString();
              struct.setTotalPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TotalPointsInfosVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocolType != null) {
        oprot.writeFieldBegin(PROTOCOL_TYPE_FIELD_DESC);
        oprot.writeString(struct.protocolType);
        oprot.writeFieldEnd();
      }
      if (struct.totalPoints != null) {
        oprot.writeFieldBegin(TOTAL_POINTS_FIELD_DESC);
        oprot.writeString(struct.totalPoints);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TotalPointsInfosVoTupleSchemeFactory implements SchemeFactory {
    public TotalPointsInfosVoTupleScheme getScheme() {
      return new TotalPointsInfosVoTupleScheme();
    }
  }

  private static class TotalPointsInfosVoTupleScheme extends TupleScheme<TotalPointsInfosVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TotalPointsInfosVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProtocolType()) {
        optionals.set(0);
      }
      if (struct.isSetTotalPoints()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetProtocolType()) {
        oprot.writeString(struct.protocolType);
      }
      if (struct.isSetTotalPoints()) {
        oprot.writeString(struct.totalPoints);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TotalPointsInfosVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.protocolType = iprot.readString();
        struct.setProtocolTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalPoints = iprot.readString();
        struct.setTotalPointsIsSet(true);
      }
    }
  }

}

