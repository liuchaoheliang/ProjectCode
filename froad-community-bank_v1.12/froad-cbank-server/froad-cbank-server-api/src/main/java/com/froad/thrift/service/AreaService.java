/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AreaService {

  /**
   * 地区 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 Area
     * @param area
     * @return long    主键ID
     * 
     * @param originVo
     * @param areaVo
     */
    public com.froad.thrift.vo.AddResultVo addArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException;

    /**
     * 删除 Area
     * @param area
     * @return boolean
     * 
     * @param originVo
     * @param areaVo
     */
    public com.froad.thrift.vo.ResultVo deleteArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException;

    /**
     * 修改 Area
     * @param area
     * @return boolean
     * 
     * @param originVo
     * @param areaVo
     */
    public com.froad.thrift.vo.ResultVo updateArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException;

    /**
     * 查询 Area
     * @param area
     * @return List<AreaVo>
     * 
     * @param areaVo
     */
    public List<com.froad.thrift.vo.AreaVo> getArea(com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 Area
     * @param area
     * @return AreaPageVoRes
     * 
     * @param page
     * @param areaVo
     */
    public com.froad.thrift.vo.AreaPageVoRes getAreaByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException;

    /**
     * 根据id获取地区
     * @param id
     * @return AreaVo
     * 
     * @param id
     */
    public com.froad.thrift.vo.AreaVo findAreaById(long id) throws org.apache.thrift.TException;

    /**
     * 根据 areaCode 获取地区
     * @return AreaVo
     * 
     * @param areaCode
     */
    public com.froad.thrift.vo.AreaVo findAreaByAreaCode(String areaCode) throws org.apache.thrift.TException;

    /**
     * 根据 areaCode 和 clientId 获取地区
     * @return AreaVo
     * 
     * @param areaCode
     * @param clientId
     */
    public com.froad.thrift.vo.AreaVo findAreaByAreaCodeAndClientId(String areaCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 根据id获取子集地区
     * @return List<AreaVo>
     * 
     * @param id
     * @param areaCode
     */
    public List<com.froad.thrift.vo.AreaVo> findChildrenInfoById(long id, String areaCode) throws org.apache.thrift.TException;

    /**
     * 根据id获取子集地区
     * 查询第一级时，根据clientId进行过滤
     * @return List<AreaVo>
     * 
     * @param id
     * @param areaCode
     * @param clientId
     */
    public List<com.froad.thrift.vo.AreaVo> findChildrenInfo(long id, String areaCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 判断areaCode是否属于clientId的范围内
     * @return boolean
     * 
     * @param areaCode
     * @param clientId
     */
    public boolean isAreaCodeScopeOfClientId(String areaCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 根据clientId获取省级地区
     * @return List<AreaVo>
     * 
     * @param clientId
     */
    public List<com.froad.thrift.vo.AreaVo> findProvinceAreaByClientId(String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getArea(com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAreaByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAreaById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAreaByAreaCode(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAreaByAreaCodeAndClientId(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findChildrenInfoById(long id, String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findChildrenInfo(long id, String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isAreaCodeScopeOfClientId(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProvinceAreaByClientId(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddResultVo addArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      send_addArea(originVo, areaVo);
      return recv_addArea();
    }

    public void send_addArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      addArea_args args = new addArea_args();
      args.setOriginVo(originVo);
      args.setAreaVo(areaVo);
      sendBase("addArea", args);
    }

    public com.froad.thrift.vo.AddResultVo recv_addArea() throws org.apache.thrift.TException
    {
      addArea_result result = new addArea_result();
      receiveBase(result, "addArea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addArea failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      send_deleteArea(originVo, areaVo);
      return recv_deleteArea();
    }

    public void send_deleteArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      deleteArea_args args = new deleteArea_args();
      args.setOriginVo(originVo);
      args.setAreaVo(areaVo);
      sendBase("deleteArea", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteArea() throws org.apache.thrift.TException
    {
      deleteArea_result result = new deleteArea_result();
      receiveBase(result, "deleteArea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteArea failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      send_updateArea(originVo, areaVo);
      return recv_updateArea();
    }

    public void send_updateArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      updateArea_args args = new updateArea_args();
      args.setOriginVo(originVo);
      args.setAreaVo(areaVo);
      sendBase("updateArea", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateArea() throws org.apache.thrift.TException
    {
      updateArea_result result = new updateArea_result();
      receiveBase(result, "updateArea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateArea failed: unknown result");
    }

    public List<com.froad.thrift.vo.AreaVo> getArea(com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      send_getArea(areaVo);
      return recv_getArea();
    }

    public void send_getArea(com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      getArea_args args = new getArea_args();
      args.setAreaVo(areaVo);
      sendBase("getArea", args);
    }

    public List<com.froad.thrift.vo.AreaVo> recv_getArea() throws org.apache.thrift.TException
    {
      getArea_result result = new getArea_result();
      receiveBase(result, "getArea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArea failed: unknown result");
    }

    public com.froad.thrift.vo.AreaPageVoRes getAreaByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      send_getAreaByPage(page, areaVo);
      return recv_getAreaByPage();
    }

    public void send_getAreaByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo) throws org.apache.thrift.TException
    {
      getAreaByPage_args args = new getAreaByPage_args();
      args.setPage(page);
      args.setAreaVo(areaVo);
      sendBase("getAreaByPage", args);
    }

    public com.froad.thrift.vo.AreaPageVoRes recv_getAreaByPage() throws org.apache.thrift.TException
    {
      getAreaByPage_result result = new getAreaByPage_result();
      receiveBase(result, "getAreaByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAreaByPage failed: unknown result");
    }

    public com.froad.thrift.vo.AreaVo findAreaById(long id) throws org.apache.thrift.TException
    {
      send_findAreaById(id);
      return recv_findAreaById();
    }

    public void send_findAreaById(long id) throws org.apache.thrift.TException
    {
      findAreaById_args args = new findAreaById_args();
      args.setId(id);
      sendBase("findAreaById", args);
    }

    public com.froad.thrift.vo.AreaVo recv_findAreaById() throws org.apache.thrift.TException
    {
      findAreaById_result result = new findAreaById_result();
      receiveBase(result, "findAreaById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAreaById failed: unknown result");
    }

    public com.froad.thrift.vo.AreaVo findAreaByAreaCode(String areaCode) throws org.apache.thrift.TException
    {
      send_findAreaByAreaCode(areaCode);
      return recv_findAreaByAreaCode();
    }

    public void send_findAreaByAreaCode(String areaCode) throws org.apache.thrift.TException
    {
      findAreaByAreaCode_args args = new findAreaByAreaCode_args();
      args.setAreaCode(areaCode);
      sendBase("findAreaByAreaCode", args);
    }

    public com.froad.thrift.vo.AreaVo recv_findAreaByAreaCode() throws org.apache.thrift.TException
    {
      findAreaByAreaCode_result result = new findAreaByAreaCode_result();
      receiveBase(result, "findAreaByAreaCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAreaByAreaCode failed: unknown result");
    }

    public com.froad.thrift.vo.AreaVo findAreaByAreaCodeAndClientId(String areaCode, String clientId) throws org.apache.thrift.TException
    {
      send_findAreaByAreaCodeAndClientId(areaCode, clientId);
      return recv_findAreaByAreaCodeAndClientId();
    }

    public void send_findAreaByAreaCodeAndClientId(String areaCode, String clientId) throws org.apache.thrift.TException
    {
      findAreaByAreaCodeAndClientId_args args = new findAreaByAreaCodeAndClientId_args();
      args.setAreaCode(areaCode);
      args.setClientId(clientId);
      sendBase("findAreaByAreaCodeAndClientId", args);
    }

    public com.froad.thrift.vo.AreaVo recv_findAreaByAreaCodeAndClientId() throws org.apache.thrift.TException
    {
      findAreaByAreaCodeAndClientId_result result = new findAreaByAreaCodeAndClientId_result();
      receiveBase(result, "findAreaByAreaCodeAndClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAreaByAreaCodeAndClientId failed: unknown result");
    }

    public List<com.froad.thrift.vo.AreaVo> findChildrenInfoById(long id, String areaCode) throws org.apache.thrift.TException
    {
      send_findChildrenInfoById(id, areaCode);
      return recv_findChildrenInfoById();
    }

    public void send_findChildrenInfoById(long id, String areaCode) throws org.apache.thrift.TException
    {
      findChildrenInfoById_args args = new findChildrenInfoById_args();
      args.setId(id);
      args.setAreaCode(areaCode);
      sendBase("findChildrenInfoById", args);
    }

    public List<com.froad.thrift.vo.AreaVo> recv_findChildrenInfoById() throws org.apache.thrift.TException
    {
      findChildrenInfoById_result result = new findChildrenInfoById_result();
      receiveBase(result, "findChildrenInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findChildrenInfoById failed: unknown result");
    }

    public List<com.froad.thrift.vo.AreaVo> findChildrenInfo(long id, String areaCode, String clientId) throws org.apache.thrift.TException
    {
      send_findChildrenInfo(id, areaCode, clientId);
      return recv_findChildrenInfo();
    }

    public void send_findChildrenInfo(long id, String areaCode, String clientId) throws org.apache.thrift.TException
    {
      findChildrenInfo_args args = new findChildrenInfo_args();
      args.setId(id);
      args.setAreaCode(areaCode);
      args.setClientId(clientId);
      sendBase("findChildrenInfo", args);
    }

    public List<com.froad.thrift.vo.AreaVo> recv_findChildrenInfo() throws org.apache.thrift.TException
    {
      findChildrenInfo_result result = new findChildrenInfo_result();
      receiveBase(result, "findChildrenInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findChildrenInfo failed: unknown result");
    }

    public boolean isAreaCodeScopeOfClientId(String areaCode, String clientId) throws org.apache.thrift.TException
    {
      send_isAreaCodeScopeOfClientId(areaCode, clientId);
      return recv_isAreaCodeScopeOfClientId();
    }

    public void send_isAreaCodeScopeOfClientId(String areaCode, String clientId) throws org.apache.thrift.TException
    {
      isAreaCodeScopeOfClientId_args args = new isAreaCodeScopeOfClientId_args();
      args.setAreaCode(areaCode);
      args.setClientId(clientId);
      sendBase("isAreaCodeScopeOfClientId", args);
    }

    public boolean recv_isAreaCodeScopeOfClientId() throws org.apache.thrift.TException
    {
      isAreaCodeScopeOfClientId_result result = new isAreaCodeScopeOfClientId_result();
      receiveBase(result, "isAreaCodeScopeOfClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isAreaCodeScopeOfClientId failed: unknown result");
    }

    public List<com.froad.thrift.vo.AreaVo> findProvinceAreaByClientId(String clientId) throws org.apache.thrift.TException
    {
      send_findProvinceAreaByClientId(clientId);
      return recv_findProvinceAreaByClientId();
    }

    public void send_findProvinceAreaByClientId(String clientId) throws org.apache.thrift.TException
    {
      findProvinceAreaByClientId_args args = new findProvinceAreaByClientId_args();
      args.setClientId(clientId);
      sendBase("findProvinceAreaByClientId", args);
    }

    public List<com.froad.thrift.vo.AreaVo> recv_findProvinceAreaByClientId() throws org.apache.thrift.TException
    {
      findProvinceAreaByClientId_result result = new findProvinceAreaByClientId_result();
      receiveBase(result, "findProvinceAreaByClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProvinceAreaByClientId failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addArea_call method_call = new addArea_call(originVo, areaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addArea_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.AreaVo areaVo;
      public addArea_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.areaVo = areaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addArea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addArea_args args = new addArea_args();
        args.setOriginVo(originVo);
        args.setAreaVo(areaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addArea();
      }
    }

    public void deleteArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteArea_call method_call = new deleteArea_call(originVo, areaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteArea_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.AreaVo areaVo;
      public deleteArea_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.areaVo = areaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteArea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteArea_args args = new deleteArea_args();
        args.setOriginVo(originVo);
        args.setAreaVo(areaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteArea();
      }
    }

    public void updateArea(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateArea_call method_call = new updateArea_call(originVo, areaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateArea_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.AreaVo areaVo;
      public updateArea_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.areaVo = areaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateArea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateArea_args args = new updateArea_args();
        args.setOriginVo(originVo);
        args.setAreaVo(areaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateArea();
      }
    }

    public void getArea(com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArea_call method_call = new getArea_call(areaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArea_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.AreaVo areaVo;
      public getArea_call(com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaVo = areaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArea_args args = new getArea_args();
        args.setAreaVo(areaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArea();
      }
    }

    public void getAreaByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAreaByPage_call method_call = new getAreaByPage_call(page, areaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAreaByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.AreaVo areaVo;
      public getAreaByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AreaVo areaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.areaVo = areaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAreaByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAreaByPage_args args = new getAreaByPage_args();
        args.setPage(page);
        args.setAreaVo(areaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AreaPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAreaByPage();
      }
    }

    public void findAreaById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAreaById_call method_call = new findAreaById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAreaById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public findAreaById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAreaById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAreaById_args args = new findAreaById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AreaVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAreaById();
      }
    }

    public void findAreaByAreaCode(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAreaByAreaCode_call method_call = new findAreaByAreaCode_call(areaCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAreaByAreaCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaCode;
      public findAreaByAreaCode_call(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaCode = areaCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAreaByAreaCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAreaByAreaCode_args args = new findAreaByAreaCode_args();
        args.setAreaCode(areaCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AreaVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAreaByAreaCode();
      }
    }

    public void findAreaByAreaCodeAndClientId(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAreaByAreaCodeAndClientId_call method_call = new findAreaByAreaCodeAndClientId_call(areaCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAreaByAreaCodeAndClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaCode;
      private String clientId;
      public findAreaByAreaCodeAndClientId_call(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaCode = areaCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAreaByAreaCodeAndClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAreaByAreaCodeAndClientId_args args = new findAreaByAreaCodeAndClientId_args();
        args.setAreaCode(areaCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AreaVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAreaByAreaCodeAndClientId();
      }
    }

    public void findChildrenInfoById(long id, String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findChildrenInfoById_call method_call = new findChildrenInfoById_call(id, areaCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findChildrenInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String areaCode;
      public findChildrenInfoById_call(long id, String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.areaCode = areaCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findChildrenInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findChildrenInfoById_args args = new findChildrenInfoById_args();
        args.setId(id);
        args.setAreaCode(areaCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findChildrenInfoById();
      }
    }

    public void findChildrenInfo(long id, String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findChildrenInfo_call method_call = new findChildrenInfo_call(id, areaCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findChildrenInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String areaCode;
      private String clientId;
      public findChildrenInfo_call(long id, String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.areaCode = areaCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findChildrenInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findChildrenInfo_args args = new findChildrenInfo_args();
        args.setId(id);
        args.setAreaCode(areaCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findChildrenInfo();
      }
    }

    public void isAreaCodeScopeOfClientId(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isAreaCodeScopeOfClientId_call method_call = new isAreaCodeScopeOfClientId_call(areaCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isAreaCodeScopeOfClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaCode;
      private String clientId;
      public isAreaCodeScopeOfClientId_call(String areaCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaCode = areaCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isAreaCodeScopeOfClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isAreaCodeScopeOfClientId_args args = new isAreaCodeScopeOfClientId_args();
        args.setAreaCode(areaCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isAreaCodeScopeOfClientId();
      }
    }

    public void findProvinceAreaByClientId(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProvinceAreaByClientId_call method_call = new findProvinceAreaByClientId_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProvinceAreaByClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public findProvinceAreaByClientId_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProvinceAreaByClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProvinceAreaByClientId_args args = new findProvinceAreaByClientId_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProvinceAreaByClientId();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addArea", new addArea());
      processMap.put("deleteArea", new deleteArea());
      processMap.put("updateArea", new updateArea());
      processMap.put("getArea", new getArea());
      processMap.put("getAreaByPage", new getAreaByPage());
      processMap.put("findAreaById", new findAreaById());
      processMap.put("findAreaByAreaCode", new findAreaByAreaCode());
      processMap.put("findAreaByAreaCodeAndClientId", new findAreaByAreaCodeAndClientId());
      processMap.put("findChildrenInfoById", new findChildrenInfoById());
      processMap.put("findChildrenInfo", new findChildrenInfo());
      processMap.put("isAreaCodeScopeOfClientId", new isAreaCodeScopeOfClientId());
      processMap.put("findProvinceAreaByClientId", new findProvinceAreaByClientId());
      return processMap;
    }

    public static class addArea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addArea_args> {
      public addArea() {
        super("addArea");
      }

      public addArea_args getEmptyArgsInstance() {
        return new addArea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addArea_result getResult(I iface, addArea_args args) throws org.apache.thrift.TException {
        addArea_result result = new addArea_result();
        result.success = iface.addArea(args.originVo, args.areaVo);
        return result;
      }
    }

    public static class deleteArea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteArea_args> {
      public deleteArea() {
        super("deleteArea");
      }

      public deleteArea_args getEmptyArgsInstance() {
        return new deleteArea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteArea_result getResult(I iface, deleteArea_args args) throws org.apache.thrift.TException {
        deleteArea_result result = new deleteArea_result();
        result.success = iface.deleteArea(args.originVo, args.areaVo);
        return result;
      }
    }

    public static class updateArea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateArea_args> {
      public updateArea() {
        super("updateArea");
      }

      public updateArea_args getEmptyArgsInstance() {
        return new updateArea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateArea_result getResult(I iface, updateArea_args args) throws org.apache.thrift.TException {
        updateArea_result result = new updateArea_result();
        result.success = iface.updateArea(args.originVo, args.areaVo);
        return result;
      }
    }

    public static class getArea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArea_args> {
      public getArea() {
        super("getArea");
      }

      public getArea_args getEmptyArgsInstance() {
        return new getArea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArea_result getResult(I iface, getArea_args args) throws org.apache.thrift.TException {
        getArea_result result = new getArea_result();
        result.success = iface.getArea(args.areaVo);
        return result;
      }
    }

    public static class getAreaByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAreaByPage_args> {
      public getAreaByPage() {
        super("getAreaByPage");
      }

      public getAreaByPage_args getEmptyArgsInstance() {
        return new getAreaByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAreaByPage_result getResult(I iface, getAreaByPage_args args) throws org.apache.thrift.TException {
        getAreaByPage_result result = new getAreaByPage_result();
        result.success = iface.getAreaByPage(args.page, args.areaVo);
        return result;
      }
    }

    public static class findAreaById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAreaById_args> {
      public findAreaById() {
        super("findAreaById");
      }

      public findAreaById_args getEmptyArgsInstance() {
        return new findAreaById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAreaById_result getResult(I iface, findAreaById_args args) throws org.apache.thrift.TException {
        findAreaById_result result = new findAreaById_result();
        result.success = iface.findAreaById(args.id);
        return result;
      }
    }

    public static class findAreaByAreaCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAreaByAreaCode_args> {
      public findAreaByAreaCode() {
        super("findAreaByAreaCode");
      }

      public findAreaByAreaCode_args getEmptyArgsInstance() {
        return new findAreaByAreaCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAreaByAreaCode_result getResult(I iface, findAreaByAreaCode_args args) throws org.apache.thrift.TException {
        findAreaByAreaCode_result result = new findAreaByAreaCode_result();
        result.success = iface.findAreaByAreaCode(args.areaCode);
        return result;
      }
    }

    public static class findAreaByAreaCodeAndClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAreaByAreaCodeAndClientId_args> {
      public findAreaByAreaCodeAndClientId() {
        super("findAreaByAreaCodeAndClientId");
      }

      public findAreaByAreaCodeAndClientId_args getEmptyArgsInstance() {
        return new findAreaByAreaCodeAndClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAreaByAreaCodeAndClientId_result getResult(I iface, findAreaByAreaCodeAndClientId_args args) throws org.apache.thrift.TException {
        findAreaByAreaCodeAndClientId_result result = new findAreaByAreaCodeAndClientId_result();
        result.success = iface.findAreaByAreaCodeAndClientId(args.areaCode, args.clientId);
        return result;
      }
    }

    public static class findChildrenInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findChildrenInfoById_args> {
      public findChildrenInfoById() {
        super("findChildrenInfoById");
      }

      public findChildrenInfoById_args getEmptyArgsInstance() {
        return new findChildrenInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findChildrenInfoById_result getResult(I iface, findChildrenInfoById_args args) throws org.apache.thrift.TException {
        findChildrenInfoById_result result = new findChildrenInfoById_result();
        result.success = iface.findChildrenInfoById(args.id, args.areaCode);
        return result;
      }
    }

    public static class findChildrenInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findChildrenInfo_args> {
      public findChildrenInfo() {
        super("findChildrenInfo");
      }

      public findChildrenInfo_args getEmptyArgsInstance() {
        return new findChildrenInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findChildrenInfo_result getResult(I iface, findChildrenInfo_args args) throws org.apache.thrift.TException {
        findChildrenInfo_result result = new findChildrenInfo_result();
        result.success = iface.findChildrenInfo(args.id, args.areaCode, args.clientId);
        return result;
      }
    }

    public static class isAreaCodeScopeOfClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isAreaCodeScopeOfClientId_args> {
      public isAreaCodeScopeOfClientId() {
        super("isAreaCodeScopeOfClientId");
      }

      public isAreaCodeScopeOfClientId_args getEmptyArgsInstance() {
        return new isAreaCodeScopeOfClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isAreaCodeScopeOfClientId_result getResult(I iface, isAreaCodeScopeOfClientId_args args) throws org.apache.thrift.TException {
        isAreaCodeScopeOfClientId_result result = new isAreaCodeScopeOfClientId_result();
        result.success = iface.isAreaCodeScopeOfClientId(args.areaCode, args.clientId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findProvinceAreaByClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProvinceAreaByClientId_args> {
      public findProvinceAreaByClientId() {
        super("findProvinceAreaByClientId");
      }

      public findProvinceAreaByClientId_args getEmptyArgsInstance() {
        return new findProvinceAreaByClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProvinceAreaByClientId_result getResult(I iface, findProvinceAreaByClientId_args args) throws org.apache.thrift.TException {
        findProvinceAreaByClientId_result result = new findProvinceAreaByClientId_result();
        result.success = iface.findProvinceAreaByClientId(args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addArea", new addArea());
      processMap.put("deleteArea", new deleteArea());
      processMap.put("updateArea", new updateArea());
      processMap.put("getArea", new getArea());
      processMap.put("getAreaByPage", new getAreaByPage());
      processMap.put("findAreaById", new findAreaById());
      processMap.put("findAreaByAreaCode", new findAreaByAreaCode());
      processMap.put("findAreaByAreaCodeAndClientId", new findAreaByAreaCodeAndClientId());
      processMap.put("findChildrenInfoById", new findChildrenInfoById());
      processMap.put("findChildrenInfo", new findChildrenInfo());
      processMap.put("isAreaCodeScopeOfClientId", new isAreaCodeScopeOfClientId());
      processMap.put("findProvinceAreaByClientId", new findProvinceAreaByClientId());
      return processMap;
    }

    public static class addArea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addArea_args, com.froad.thrift.vo.AddResultVo> {
      public addArea() {
        super("addArea");
      }

      public addArea_args getEmptyArgsInstance() {
        return new addArea_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.AddResultVo o) {
            addArea_result result = new addArea_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addArea_result result = new addArea_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addArea_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> resultHandler) throws TException {
        iface.addArea(args.originVo, args.areaVo,resultHandler);
      }
    }

    public static class deleteArea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteArea_args, com.froad.thrift.vo.ResultVo> {
      public deleteArea() {
        super("deleteArea");
      }

      public deleteArea_args getEmptyArgsInstance() {
        return new deleteArea_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteArea_result result = new deleteArea_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteArea_result result = new deleteArea_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteArea_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteArea(args.originVo, args.areaVo,resultHandler);
      }
    }

    public static class updateArea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateArea_args, com.froad.thrift.vo.ResultVo> {
      public updateArea() {
        super("updateArea");
      }

      public updateArea_args getEmptyArgsInstance() {
        return new updateArea_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateArea_result result = new updateArea_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateArea_result result = new updateArea_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateArea_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateArea(args.originVo, args.areaVo,resultHandler);
      }
    }

    public static class getArea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArea_args, List<com.froad.thrift.vo.AreaVo>> {
      public getArea() {
        super("getArea");
      }

      public getArea_args getEmptyArgsInstance() {
        return new getArea_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.AreaVo> o) {
            getArea_result result = new getArea_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getArea_result result = new getArea_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArea_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> resultHandler) throws TException {
        iface.getArea(args.areaVo,resultHandler);
      }
    }

    public static class getAreaByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAreaByPage_args, com.froad.thrift.vo.AreaPageVoRes> {
      public getAreaByPage() {
        super("getAreaByPage");
      }

      public getAreaByPage_args getEmptyArgsInstance() {
        return new getAreaByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AreaPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AreaPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AreaPageVoRes o) {
            getAreaByPage_result result = new getAreaByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAreaByPage_result result = new getAreaByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAreaByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AreaPageVoRes> resultHandler) throws TException {
        iface.getAreaByPage(args.page, args.areaVo,resultHandler);
      }
    }

    public static class findAreaById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAreaById_args, com.froad.thrift.vo.AreaVo> {
      public findAreaById() {
        super("findAreaById");
      }

      public findAreaById_args getEmptyArgsInstance() {
        return new findAreaById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AreaVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AreaVo>() { 
          public void onComplete(com.froad.thrift.vo.AreaVo o) {
            findAreaById_result result = new findAreaById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAreaById_result result = new findAreaById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAreaById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AreaVo> resultHandler) throws TException {
        iface.findAreaById(args.id,resultHandler);
      }
    }

    public static class findAreaByAreaCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAreaByAreaCode_args, com.froad.thrift.vo.AreaVo> {
      public findAreaByAreaCode() {
        super("findAreaByAreaCode");
      }

      public findAreaByAreaCode_args getEmptyArgsInstance() {
        return new findAreaByAreaCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AreaVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AreaVo>() { 
          public void onComplete(com.froad.thrift.vo.AreaVo o) {
            findAreaByAreaCode_result result = new findAreaByAreaCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAreaByAreaCode_result result = new findAreaByAreaCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAreaByAreaCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AreaVo> resultHandler) throws TException {
        iface.findAreaByAreaCode(args.areaCode,resultHandler);
      }
    }

    public static class findAreaByAreaCodeAndClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAreaByAreaCodeAndClientId_args, com.froad.thrift.vo.AreaVo> {
      public findAreaByAreaCodeAndClientId() {
        super("findAreaByAreaCodeAndClientId");
      }

      public findAreaByAreaCodeAndClientId_args getEmptyArgsInstance() {
        return new findAreaByAreaCodeAndClientId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AreaVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AreaVo>() { 
          public void onComplete(com.froad.thrift.vo.AreaVo o) {
            findAreaByAreaCodeAndClientId_result result = new findAreaByAreaCodeAndClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAreaByAreaCodeAndClientId_result result = new findAreaByAreaCodeAndClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAreaByAreaCodeAndClientId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AreaVo> resultHandler) throws TException {
        iface.findAreaByAreaCodeAndClientId(args.areaCode, args.clientId,resultHandler);
      }
    }

    public static class findChildrenInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findChildrenInfoById_args, List<com.froad.thrift.vo.AreaVo>> {
      public findChildrenInfoById() {
        super("findChildrenInfoById");
      }

      public findChildrenInfoById_args getEmptyArgsInstance() {
        return new findChildrenInfoById_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.AreaVo> o) {
            findChildrenInfoById_result result = new findChildrenInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findChildrenInfoById_result result = new findChildrenInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findChildrenInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> resultHandler) throws TException {
        iface.findChildrenInfoById(args.id, args.areaCode,resultHandler);
      }
    }

    public static class findChildrenInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findChildrenInfo_args, List<com.froad.thrift.vo.AreaVo>> {
      public findChildrenInfo() {
        super("findChildrenInfo");
      }

      public findChildrenInfo_args getEmptyArgsInstance() {
        return new findChildrenInfo_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.AreaVo> o) {
            findChildrenInfo_result result = new findChildrenInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findChildrenInfo_result result = new findChildrenInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findChildrenInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> resultHandler) throws TException {
        iface.findChildrenInfo(args.id, args.areaCode, args.clientId,resultHandler);
      }
    }

    public static class isAreaCodeScopeOfClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isAreaCodeScopeOfClientId_args, Boolean> {
      public isAreaCodeScopeOfClientId() {
        super("isAreaCodeScopeOfClientId");
      }

      public isAreaCodeScopeOfClientId_args getEmptyArgsInstance() {
        return new isAreaCodeScopeOfClientId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isAreaCodeScopeOfClientId_result result = new isAreaCodeScopeOfClientId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isAreaCodeScopeOfClientId_result result = new isAreaCodeScopeOfClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isAreaCodeScopeOfClientId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isAreaCodeScopeOfClientId(args.areaCode, args.clientId,resultHandler);
      }
    }

    public static class findProvinceAreaByClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProvinceAreaByClientId_args, List<com.froad.thrift.vo.AreaVo>> {
      public findProvinceAreaByClientId() {
        super("findProvinceAreaByClientId");
      }

      public findProvinceAreaByClientId_args getEmptyArgsInstance() {
        return new findProvinceAreaByClientId_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.AreaVo> o) {
            findProvinceAreaByClientId_result result = new findProvinceAreaByClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProvinceAreaByClientId_result result = new findProvinceAreaByClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProvinceAreaByClientId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> resultHandler) throws TException {
        iface.findProvinceAreaByClientId(args.clientId,resultHandler);
      }
    }

  }

  public static class addArea_args implements org.apache.thrift.TBase<addArea_args, addArea_args._Fields>, java.io.Serializable, Cloneable, Comparable<addArea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArea_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("areaVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArea_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArea_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.AreaVo areaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      AREA_VO((short)2, "areaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // AREA_VO
            return AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("areaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArea_args.class, metaDataMap);
    }

    public addArea_args() {
    }

    public addArea_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.AreaVo areaVo)
    {
      this();
      this.originVo = originVo;
      this.areaVo = areaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArea_args(addArea_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetAreaVo()) {
        this.areaVo = new com.froad.thrift.vo.AreaVo(other.areaVo);
      }
    }

    public addArea_args deepCopy() {
      return new addArea_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.areaVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addArea_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.AreaVo getAreaVo() {
      return this.areaVo;
    }

    public addArea_args setAreaVo(com.froad.thrift.vo.AreaVo areaVo) {
      this.areaVo = areaVo;
      return this;
    }

    public void unsetAreaVo() {
      this.areaVo = null;
    }

    /** Returns true if field areaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaVo() {
      return this.areaVo != null;
    }

    public void setAreaVoIsSet(boolean value) {
      if (!value) {
        this.areaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case AREA_VO:
        if (value == null) {
          unsetAreaVo();
        } else {
          setAreaVo((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case AREA_VO:
        return getAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case AREA_VO:
        return isSetAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArea_args)
        return this.equals((addArea_args)that);
      return false;
    }

    public boolean equals(addArea_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_areaVo = true && this.isSetAreaVo();
      boolean that_present_areaVo = true && that.isSetAreaVo();
      if (this_present_areaVo || that_present_areaVo) {
        if (!(this_present_areaVo && that_present_areaVo))
          return false;
        if (!this.areaVo.equals(that.areaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_areaVo = true && (isSetAreaVo());
      list.add(present_areaVo);
      if (present_areaVo)
        list.add(areaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addArea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaVo()).compareTo(other.isSetAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaVo, other.areaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArea_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaVo:");
      if (this.areaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.areaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (areaVo != null) {
        areaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArea_argsStandardSchemeFactory implements SchemeFactory {
      public addArea_argsStandardScheme getScheme() {
        return new addArea_argsStandardScheme();
      }
    }

    private static class addArea_argsStandardScheme extends StandardScheme<addArea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaVo = new com.froad.thrift.vo.AreaVo();
                struct.areaVo.read(iprot);
                struct.setAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.areaVo != null) {
          oprot.writeFieldBegin(AREA_VO_FIELD_DESC);
          struct.areaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArea_argsTupleSchemeFactory implements SchemeFactory {
      public addArea_argsTupleScheme getScheme() {
        return new addArea_argsTupleScheme();
      }
    }

    private static class addArea_argsTupleScheme extends TupleScheme<addArea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetAreaVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetAreaVo()) {
          struct.areaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaVo = new com.froad.thrift.vo.AreaVo();
          struct.areaVo.read(iprot);
          struct.setAreaVoIsSet(true);
        }
      }
    }

  }

  public static class addArea_result implements org.apache.thrift.TBase<addArea_result, addArea_result._Fields>, java.io.Serializable, Cloneable, Comparable<addArea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArea_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArea_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArea_result.class, metaDataMap);
    }

    public addArea_result() {
    }

    public addArea_result(
      com.froad.thrift.vo.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArea_result(addArea_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddResultVo(other.success);
      }
    }

    public addArea_result deepCopy() {
      return new addArea_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddResultVo getSuccess() {
      return this.success;
    }

    public addArea_result setSuccess(com.froad.thrift.vo.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArea_result)
        return this.equals((addArea_result)that);
      return false;
    }

    public boolean equals(addArea_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addArea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArea_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArea_resultStandardSchemeFactory implements SchemeFactory {
      public addArea_resultStandardScheme getScheme() {
        return new addArea_resultStandardScheme();
      }
    }

    private static class addArea_resultStandardScheme extends StandardScheme<addArea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArea_resultTupleSchemeFactory implements SchemeFactory {
      public addArea_resultTupleScheme getScheme() {
        return new addArea_resultTupleScheme();
      }
    }

    private static class addArea_resultTupleScheme extends TupleScheme<addArea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteArea_args implements org.apache.thrift.TBase<deleteArea_args, deleteArea_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArea_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("areaVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArea_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArea_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.AreaVo areaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      AREA_VO((short)2, "areaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // AREA_VO
            return AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("areaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArea_args.class, metaDataMap);
    }

    public deleteArea_args() {
    }

    public deleteArea_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.AreaVo areaVo)
    {
      this();
      this.originVo = originVo;
      this.areaVo = areaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArea_args(deleteArea_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetAreaVo()) {
        this.areaVo = new com.froad.thrift.vo.AreaVo(other.areaVo);
      }
    }

    public deleteArea_args deepCopy() {
      return new deleteArea_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.areaVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteArea_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.AreaVo getAreaVo() {
      return this.areaVo;
    }

    public deleteArea_args setAreaVo(com.froad.thrift.vo.AreaVo areaVo) {
      this.areaVo = areaVo;
      return this;
    }

    public void unsetAreaVo() {
      this.areaVo = null;
    }

    /** Returns true if field areaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaVo() {
      return this.areaVo != null;
    }

    public void setAreaVoIsSet(boolean value) {
      if (!value) {
        this.areaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case AREA_VO:
        if (value == null) {
          unsetAreaVo();
        } else {
          setAreaVo((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case AREA_VO:
        return getAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case AREA_VO:
        return isSetAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArea_args)
        return this.equals((deleteArea_args)that);
      return false;
    }

    public boolean equals(deleteArea_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_areaVo = true && this.isSetAreaVo();
      boolean that_present_areaVo = true && that.isSetAreaVo();
      if (this_present_areaVo || that_present_areaVo) {
        if (!(this_present_areaVo && that_present_areaVo))
          return false;
        if (!this.areaVo.equals(that.areaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_areaVo = true && (isSetAreaVo());
      list.add(present_areaVo);
      if (present_areaVo)
        list.add(areaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteArea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaVo()).compareTo(other.isSetAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaVo, other.areaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArea_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaVo:");
      if (this.areaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.areaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (areaVo != null) {
        areaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArea_argsStandardSchemeFactory implements SchemeFactory {
      public deleteArea_argsStandardScheme getScheme() {
        return new deleteArea_argsStandardScheme();
      }
    }

    private static class deleteArea_argsStandardScheme extends StandardScheme<deleteArea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaVo = new com.froad.thrift.vo.AreaVo();
                struct.areaVo.read(iprot);
                struct.setAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.areaVo != null) {
          oprot.writeFieldBegin(AREA_VO_FIELD_DESC);
          struct.areaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArea_argsTupleSchemeFactory implements SchemeFactory {
      public deleteArea_argsTupleScheme getScheme() {
        return new deleteArea_argsTupleScheme();
      }
    }

    private static class deleteArea_argsTupleScheme extends TupleScheme<deleteArea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetAreaVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetAreaVo()) {
          struct.areaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaVo = new com.froad.thrift.vo.AreaVo();
          struct.areaVo.read(iprot);
          struct.setAreaVoIsSet(true);
        }
      }
    }

  }

  public static class deleteArea_result implements org.apache.thrift.TBase<deleteArea_result, deleteArea_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArea_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArea_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArea_result.class, metaDataMap);
    }

    public deleteArea_result() {
    }

    public deleteArea_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArea_result(deleteArea_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteArea_result deepCopy() {
      return new deleteArea_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteArea_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArea_result)
        return this.equals((deleteArea_result)that);
      return false;
    }

    public boolean equals(deleteArea_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteArea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArea_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArea_resultStandardSchemeFactory implements SchemeFactory {
      public deleteArea_resultStandardScheme getScheme() {
        return new deleteArea_resultStandardScheme();
      }
    }

    private static class deleteArea_resultStandardScheme extends StandardScheme<deleteArea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArea_resultTupleSchemeFactory implements SchemeFactory {
      public deleteArea_resultTupleScheme getScheme() {
        return new deleteArea_resultTupleScheme();
      }
    }

    private static class deleteArea_resultTupleScheme extends TupleScheme<deleteArea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateArea_args implements org.apache.thrift.TBase<updateArea_args, updateArea_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateArea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateArea_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("areaVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateArea_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateArea_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.AreaVo areaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      AREA_VO((short)2, "areaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // AREA_VO
            return AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("areaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateArea_args.class, metaDataMap);
    }

    public updateArea_args() {
    }

    public updateArea_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.AreaVo areaVo)
    {
      this();
      this.originVo = originVo;
      this.areaVo = areaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateArea_args(updateArea_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetAreaVo()) {
        this.areaVo = new com.froad.thrift.vo.AreaVo(other.areaVo);
      }
    }

    public updateArea_args deepCopy() {
      return new updateArea_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.areaVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateArea_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.AreaVo getAreaVo() {
      return this.areaVo;
    }

    public updateArea_args setAreaVo(com.froad.thrift.vo.AreaVo areaVo) {
      this.areaVo = areaVo;
      return this;
    }

    public void unsetAreaVo() {
      this.areaVo = null;
    }

    /** Returns true if field areaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaVo() {
      return this.areaVo != null;
    }

    public void setAreaVoIsSet(boolean value) {
      if (!value) {
        this.areaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case AREA_VO:
        if (value == null) {
          unsetAreaVo();
        } else {
          setAreaVo((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case AREA_VO:
        return getAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case AREA_VO:
        return isSetAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateArea_args)
        return this.equals((updateArea_args)that);
      return false;
    }

    public boolean equals(updateArea_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_areaVo = true && this.isSetAreaVo();
      boolean that_present_areaVo = true && that.isSetAreaVo();
      if (this_present_areaVo || that_present_areaVo) {
        if (!(this_present_areaVo && that_present_areaVo))
          return false;
        if (!this.areaVo.equals(that.areaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_areaVo = true && (isSetAreaVo());
      list.add(present_areaVo);
      if (present_areaVo)
        list.add(areaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateArea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaVo()).compareTo(other.isSetAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaVo, other.areaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateArea_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaVo:");
      if (this.areaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.areaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (areaVo != null) {
        areaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateArea_argsStandardSchemeFactory implements SchemeFactory {
      public updateArea_argsStandardScheme getScheme() {
        return new updateArea_argsStandardScheme();
      }
    }

    private static class updateArea_argsStandardScheme extends StandardScheme<updateArea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateArea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaVo = new com.froad.thrift.vo.AreaVo();
                struct.areaVo.read(iprot);
                struct.setAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateArea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.areaVo != null) {
          oprot.writeFieldBegin(AREA_VO_FIELD_DESC);
          struct.areaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateArea_argsTupleSchemeFactory implements SchemeFactory {
      public updateArea_argsTupleScheme getScheme() {
        return new updateArea_argsTupleScheme();
      }
    }

    private static class updateArea_argsTupleScheme extends TupleScheme<updateArea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetAreaVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetAreaVo()) {
          struct.areaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaVo = new com.froad.thrift.vo.AreaVo();
          struct.areaVo.read(iprot);
          struct.setAreaVoIsSet(true);
        }
      }
    }

  }

  public static class updateArea_result implements org.apache.thrift.TBase<updateArea_result, updateArea_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateArea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateArea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateArea_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateArea_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateArea_result.class, metaDataMap);
    }

    public updateArea_result() {
    }

    public updateArea_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateArea_result(updateArea_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateArea_result deepCopy() {
      return new updateArea_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateArea_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateArea_result)
        return this.equals((updateArea_result)that);
      return false;
    }

    public boolean equals(updateArea_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateArea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateArea_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateArea_resultStandardSchemeFactory implements SchemeFactory {
      public updateArea_resultStandardScheme getScheme() {
        return new updateArea_resultStandardScheme();
      }
    }

    private static class updateArea_resultStandardScheme extends StandardScheme<updateArea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateArea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateArea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateArea_resultTupleSchemeFactory implements SchemeFactory {
      public updateArea_resultTupleScheme getScheme() {
        return new updateArea_resultTupleScheme();
      }
    }

    private static class updateArea_resultTupleScheme extends TupleScheme<updateArea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArea_args implements org.apache.thrift.TBase<getArea_args, getArea_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArea_args");

    private static final org.apache.thrift.protocol.TField AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("areaVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArea_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArea_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AreaVo areaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_VO((short)1, "areaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_VO
            return AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("areaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArea_args.class, metaDataMap);
    }

    public getArea_args() {
    }

    public getArea_args(
      com.froad.thrift.vo.AreaVo areaVo)
    {
      this();
      this.areaVo = areaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArea_args(getArea_args other) {
      if (other.isSetAreaVo()) {
        this.areaVo = new com.froad.thrift.vo.AreaVo(other.areaVo);
      }
    }

    public getArea_args deepCopy() {
      return new getArea_args(this);
    }

    @Override
    public void clear() {
      this.areaVo = null;
    }

    public com.froad.thrift.vo.AreaVo getAreaVo() {
      return this.areaVo;
    }

    public getArea_args setAreaVo(com.froad.thrift.vo.AreaVo areaVo) {
      this.areaVo = areaVo;
      return this;
    }

    public void unsetAreaVo() {
      this.areaVo = null;
    }

    /** Returns true if field areaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaVo() {
      return this.areaVo != null;
    }

    public void setAreaVoIsSet(boolean value) {
      if (!value) {
        this.areaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_VO:
        if (value == null) {
          unsetAreaVo();
        } else {
          setAreaVo((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_VO:
        return getAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_VO:
        return isSetAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArea_args)
        return this.equals((getArea_args)that);
      return false;
    }

    public boolean equals(getArea_args that) {
      if (that == null)
        return false;

      boolean this_present_areaVo = true && this.isSetAreaVo();
      boolean that_present_areaVo = true && that.isSetAreaVo();
      if (this_present_areaVo || that_present_areaVo) {
        if (!(this_present_areaVo && that_present_areaVo))
          return false;
        if (!this.areaVo.equals(that.areaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaVo = true && (isSetAreaVo());
      list.add(present_areaVo);
      if (present_areaVo)
        list.add(areaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaVo()).compareTo(other.isSetAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaVo, other.areaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArea_args(");
      boolean first = true;

      sb.append("areaVo:");
      if (this.areaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.areaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (areaVo != null) {
        areaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArea_argsStandardSchemeFactory implements SchemeFactory {
      public getArea_argsStandardScheme getScheme() {
        return new getArea_argsStandardScheme();
      }
    }

    private static class getArea_argsStandardScheme extends StandardScheme<getArea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaVo = new com.froad.thrift.vo.AreaVo();
                struct.areaVo.read(iprot);
                struct.setAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaVo != null) {
          oprot.writeFieldBegin(AREA_VO_FIELD_DESC);
          struct.areaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArea_argsTupleSchemeFactory implements SchemeFactory {
      public getArea_argsTupleScheme getScheme() {
        return new getArea_argsTupleScheme();
      }
    }

    private static class getArea_argsTupleScheme extends TupleScheme<getArea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAreaVo()) {
          struct.areaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArea_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.areaVo = new com.froad.thrift.vo.AreaVo();
          struct.areaVo.read(iprot);
          struct.setAreaVoIsSet(true);
        }
      }
    }

  }

  public static class getArea_result implements org.apache.thrift.TBase<getArea_result, getArea_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArea_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArea_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArea_result.class, metaDataMap);
    }

    public getArea_result() {
    }

    public getArea_result(
      List<com.froad.thrift.vo.AreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArea_result(getArea_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AreaVo> __this__success = new ArrayList<com.froad.thrift.vo.AreaVo>(other.success.size());
        for (com.froad.thrift.vo.AreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArea_result deepCopy() {
      return new getArea_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AreaVo> getSuccess() {
      return this.success;
    }

    public getArea_result setSuccess(List<com.froad.thrift.vo.AreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArea_result)
        return this.equals((getArea_result)that);
      return false;
    }

    public boolean equals(getArea_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArea_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArea_resultStandardSchemeFactory implements SchemeFactory {
      public getArea_resultStandardScheme getScheme() {
        return new getArea_resultStandardScheme();
      }
    }

    private static class getArea_resultStandardScheme extends StandardScheme<getArea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list58.size);
                  com.froad.thrift.vo.AreaVo _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new com.froad.thrift.vo.AreaVo();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AreaVo _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArea_resultTupleSchemeFactory implements SchemeFactory {
      public getArea_resultTupleScheme getScheme() {
        return new getArea_resultTupleScheme();
      }
    }

    private static class getArea_resultTupleScheme extends TupleScheme<getArea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AreaVo _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArea_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list63.size);
            com.froad.thrift.vo.AreaVo _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new com.froad.thrift.vo.AreaVo();
              _elem64.read(iprot);
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAreaByPage_args implements org.apache.thrift.TBase<getAreaByPage_args, getAreaByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAreaByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("areaVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAreaByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAreaByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.AreaVo areaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      AREA_VO((short)2, "areaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // AREA_VO
            return AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("areaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaByPage_args.class, metaDataMap);
    }

    public getAreaByPage_args() {
    }

    public getAreaByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.AreaVo areaVo)
    {
      this();
      this.page = page;
      this.areaVo = areaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaByPage_args(getAreaByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetAreaVo()) {
        this.areaVo = new com.froad.thrift.vo.AreaVo(other.areaVo);
      }
    }

    public getAreaByPage_args deepCopy() {
      return new getAreaByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.areaVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getAreaByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.AreaVo getAreaVo() {
      return this.areaVo;
    }

    public getAreaByPage_args setAreaVo(com.froad.thrift.vo.AreaVo areaVo) {
      this.areaVo = areaVo;
      return this;
    }

    public void unsetAreaVo() {
      this.areaVo = null;
    }

    /** Returns true if field areaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaVo() {
      return this.areaVo != null;
    }

    public void setAreaVoIsSet(boolean value) {
      if (!value) {
        this.areaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case AREA_VO:
        if (value == null) {
          unsetAreaVo();
        } else {
          setAreaVo((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case AREA_VO:
        return getAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case AREA_VO:
        return isSetAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaByPage_args)
        return this.equals((getAreaByPage_args)that);
      return false;
    }

    public boolean equals(getAreaByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_areaVo = true && this.isSetAreaVo();
      boolean that_present_areaVo = true && that.isSetAreaVo();
      if (this_present_areaVo || that_present_areaVo) {
        if (!(this_present_areaVo && that_present_areaVo))
          return false;
        if (!this.areaVo.equals(that.areaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_areaVo = true && (isSetAreaVo());
      list.add(present_areaVo);
      if (present_areaVo)
        list.add(areaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAreaByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaVo()).compareTo(other.isSetAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaVo, other.areaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAreaByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaVo:");
      if (this.areaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.areaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (areaVo != null) {
        areaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getAreaByPage_argsStandardScheme getScheme() {
        return new getAreaByPage_argsStandardScheme();
      }
    }

    private static class getAreaByPage_argsStandardScheme extends StandardScheme<getAreaByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.areaVo = new com.froad.thrift.vo.AreaVo();
                struct.areaVo.read(iprot);
                struct.setAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.areaVo != null) {
          oprot.writeFieldBegin(AREA_VO_FIELD_DESC);
          struct.areaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getAreaByPage_argsTupleScheme getScheme() {
        return new getAreaByPage_argsTupleScheme();
      }
    }

    private static class getAreaByPage_argsTupleScheme extends TupleScheme<getAreaByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetAreaVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetAreaVo()) {
          struct.areaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaVo = new com.froad.thrift.vo.AreaVo();
          struct.areaVo.read(iprot);
          struct.setAreaVoIsSet(true);
        }
      }
    }

  }

  public static class getAreaByPage_result implements org.apache.thrift.TBase<getAreaByPage_result, getAreaByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAreaByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAreaByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAreaByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AreaPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaByPage_result.class, metaDataMap);
    }

    public getAreaByPage_result() {
    }

    public getAreaByPage_result(
      com.froad.thrift.vo.AreaPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaByPage_result(getAreaByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AreaPageVoRes(other.success);
      }
    }

    public getAreaByPage_result deepCopy() {
      return new getAreaByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AreaPageVoRes getSuccess() {
      return this.success;
    }

    public getAreaByPage_result setSuccess(com.froad.thrift.vo.AreaPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AreaPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaByPage_result)
        return this.equals((getAreaByPage_result)that);
      return false;
    }

    public boolean equals(getAreaByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAreaByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAreaByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getAreaByPage_resultStandardScheme getScheme() {
        return new getAreaByPage_resultStandardScheme();
      }
    }

    private static class getAreaByPage_resultStandardScheme extends StandardScheme<getAreaByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AreaPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getAreaByPage_resultTupleScheme getScheme() {
        return new getAreaByPage_resultTupleScheme();
      }
    }

    private static class getAreaByPage_resultTupleScheme extends TupleScheme<getAreaByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AreaPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAreaById_args implements org.apache.thrift.TBase<findAreaById_args, findAreaById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaById_args.class, metaDataMap);
    }

    public findAreaById_args() {
    }

    public findAreaById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaById_args(findAreaById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public findAreaById_args deepCopy() {
      return new findAreaById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public findAreaById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaById_args)
        return this.equals((findAreaById_args)that);
      return false;
    }

    public boolean equals(findAreaById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaById_argsStandardSchemeFactory implements SchemeFactory {
      public findAreaById_argsStandardScheme getScheme() {
        return new findAreaById_argsStandardScheme();
      }
    }

    private static class findAreaById_argsStandardScheme extends StandardScheme<findAreaById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaById_argsTupleSchemeFactory implements SchemeFactory {
      public findAreaById_argsTupleScheme getScheme() {
        return new findAreaById_argsTupleScheme();
      }
    }

    private static class findAreaById_argsTupleScheme extends TupleScheme<findAreaById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findAreaById_result implements org.apache.thrift.TBase<findAreaById_result, findAreaById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AreaVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaById_result.class, metaDataMap);
    }

    public findAreaById_result() {
    }

    public findAreaById_result(
      com.froad.thrift.vo.AreaVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaById_result(findAreaById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AreaVo(other.success);
      }
    }

    public findAreaById_result deepCopy() {
      return new findAreaById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AreaVo getSuccess() {
      return this.success;
    }

    public findAreaById_result setSuccess(com.froad.thrift.vo.AreaVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaById_result)
        return this.equals((findAreaById_result)that);
      return false;
    }

    public boolean equals(findAreaById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaById_resultStandardSchemeFactory implements SchemeFactory {
      public findAreaById_resultStandardScheme getScheme() {
        return new findAreaById_resultStandardScheme();
      }
    }

    private static class findAreaById_resultStandardScheme extends StandardScheme<findAreaById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AreaVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaById_resultTupleSchemeFactory implements SchemeFactory {
      public findAreaById_resultTupleScheme getScheme() {
        return new findAreaById_resultTupleScheme();
      }
    }

    private static class findAreaById_resultTupleScheme extends TupleScheme<findAreaById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AreaVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAreaByAreaCode_args implements org.apache.thrift.TBase<findAreaByAreaCode_args, findAreaByAreaCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaByAreaCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaByAreaCode_args");

    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaByAreaCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaByAreaCode_argsTupleSchemeFactory());
    }

    public String areaCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_CODE((short)1, "areaCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_CODE
            return AREA_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaByAreaCode_args.class, metaDataMap);
    }

    public findAreaByAreaCode_args() {
    }

    public findAreaByAreaCode_args(
      String areaCode)
    {
      this();
      this.areaCode = areaCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaByAreaCode_args(findAreaByAreaCode_args other) {
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
    }

    public findAreaByAreaCode_args deepCopy() {
      return new findAreaByAreaCode_args(this);
    }

    @Override
    public void clear() {
      this.areaCode = null;
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public findAreaByAreaCode_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_CODE:
        return getAreaCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_CODE:
        return isSetAreaCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaByAreaCode_args)
        return this.equals((findAreaByAreaCode_args)that);
      return false;
    }

    public boolean equals(findAreaByAreaCode_args that) {
      if (that == null)
        return false;

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaByAreaCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaByAreaCode_args(");
      boolean first = true;

      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaByAreaCode_argsStandardSchemeFactory implements SchemeFactory {
      public findAreaByAreaCode_argsStandardScheme getScheme() {
        return new findAreaByAreaCode_argsStandardScheme();
      }
    }

    private static class findAreaByAreaCode_argsStandardScheme extends StandardScheme<findAreaByAreaCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaByAreaCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaByAreaCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaByAreaCode_argsTupleSchemeFactory implements SchemeFactory {
      public findAreaByAreaCode_argsTupleScheme getScheme() {
        return new findAreaByAreaCode_argsTupleScheme();
      }
    }

    private static class findAreaByAreaCode_argsTupleScheme extends TupleScheme<findAreaByAreaCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
      }
    }

  }

  public static class findAreaByAreaCode_result implements org.apache.thrift.TBase<findAreaByAreaCode_result, findAreaByAreaCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaByAreaCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaByAreaCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaByAreaCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaByAreaCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AreaVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaByAreaCode_result.class, metaDataMap);
    }

    public findAreaByAreaCode_result() {
    }

    public findAreaByAreaCode_result(
      com.froad.thrift.vo.AreaVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaByAreaCode_result(findAreaByAreaCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AreaVo(other.success);
      }
    }

    public findAreaByAreaCode_result deepCopy() {
      return new findAreaByAreaCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AreaVo getSuccess() {
      return this.success;
    }

    public findAreaByAreaCode_result setSuccess(com.froad.thrift.vo.AreaVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaByAreaCode_result)
        return this.equals((findAreaByAreaCode_result)that);
      return false;
    }

    public boolean equals(findAreaByAreaCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaByAreaCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaByAreaCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaByAreaCode_resultStandardSchemeFactory implements SchemeFactory {
      public findAreaByAreaCode_resultStandardScheme getScheme() {
        return new findAreaByAreaCode_resultStandardScheme();
      }
    }

    private static class findAreaByAreaCode_resultStandardScheme extends StandardScheme<findAreaByAreaCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaByAreaCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AreaVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaByAreaCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaByAreaCode_resultTupleSchemeFactory implements SchemeFactory {
      public findAreaByAreaCode_resultTupleScheme getScheme() {
        return new findAreaByAreaCode_resultTupleScheme();
      }
    }

    private static class findAreaByAreaCode_resultTupleScheme extends TupleScheme<findAreaByAreaCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AreaVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAreaByAreaCodeAndClientId_args implements org.apache.thrift.TBase<findAreaByAreaCodeAndClientId_args, findAreaByAreaCodeAndClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaByAreaCodeAndClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaByAreaCodeAndClientId_args");

    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaByAreaCodeAndClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaByAreaCodeAndClientId_argsTupleSchemeFactory());
    }

    public String areaCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_CODE((short)1, "areaCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_CODE
            return AREA_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaByAreaCodeAndClientId_args.class, metaDataMap);
    }

    public findAreaByAreaCodeAndClientId_args() {
    }

    public findAreaByAreaCodeAndClientId_args(
      String areaCode,
      String clientId)
    {
      this();
      this.areaCode = areaCode;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaByAreaCodeAndClientId_args(findAreaByAreaCodeAndClientId_args other) {
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public findAreaByAreaCodeAndClientId_args deepCopy() {
      return new findAreaByAreaCodeAndClientId_args(this);
    }

    @Override
    public void clear() {
      this.areaCode = null;
      this.clientId = null;
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public findAreaByAreaCodeAndClientId_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public findAreaByAreaCodeAndClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_CODE:
        return getAreaCode();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_CODE:
        return isSetAreaCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaByAreaCodeAndClientId_args)
        return this.equals((findAreaByAreaCodeAndClientId_args)that);
      return false;
    }

    public boolean equals(findAreaByAreaCodeAndClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaByAreaCodeAndClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaByAreaCodeAndClientId_args(");
      boolean first = true;

      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaByAreaCodeAndClientId_argsStandardSchemeFactory implements SchemeFactory {
      public findAreaByAreaCodeAndClientId_argsStandardScheme getScheme() {
        return new findAreaByAreaCodeAndClientId_argsStandardScheme();
      }
    }

    private static class findAreaByAreaCodeAndClientId_argsStandardScheme extends StandardScheme<findAreaByAreaCodeAndClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaByAreaCodeAndClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaByAreaCodeAndClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaByAreaCodeAndClientId_argsTupleSchemeFactory implements SchemeFactory {
      public findAreaByAreaCodeAndClientId_argsTupleScheme getScheme() {
        return new findAreaByAreaCodeAndClientId_argsTupleScheme();
      }
    }

    private static class findAreaByAreaCodeAndClientId_argsTupleScheme extends TupleScheme<findAreaByAreaCodeAndClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCodeAndClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCodeAndClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class findAreaByAreaCodeAndClientId_result implements org.apache.thrift.TBase<findAreaByAreaCodeAndClientId_result, findAreaByAreaCodeAndClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaByAreaCodeAndClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaByAreaCodeAndClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaByAreaCodeAndClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaByAreaCodeAndClientId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AreaVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaByAreaCodeAndClientId_result.class, metaDataMap);
    }

    public findAreaByAreaCodeAndClientId_result() {
    }

    public findAreaByAreaCodeAndClientId_result(
      com.froad.thrift.vo.AreaVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaByAreaCodeAndClientId_result(findAreaByAreaCodeAndClientId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AreaVo(other.success);
      }
    }

    public findAreaByAreaCodeAndClientId_result deepCopy() {
      return new findAreaByAreaCodeAndClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AreaVo getSuccess() {
      return this.success;
    }

    public findAreaByAreaCodeAndClientId_result setSuccess(com.froad.thrift.vo.AreaVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaByAreaCodeAndClientId_result)
        return this.equals((findAreaByAreaCodeAndClientId_result)that);
      return false;
    }

    public boolean equals(findAreaByAreaCodeAndClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaByAreaCodeAndClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaByAreaCodeAndClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaByAreaCodeAndClientId_resultStandardSchemeFactory implements SchemeFactory {
      public findAreaByAreaCodeAndClientId_resultStandardScheme getScheme() {
        return new findAreaByAreaCodeAndClientId_resultStandardScheme();
      }
    }

    private static class findAreaByAreaCodeAndClientId_resultStandardScheme extends StandardScheme<findAreaByAreaCodeAndClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaByAreaCodeAndClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AreaVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaByAreaCodeAndClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaByAreaCodeAndClientId_resultTupleSchemeFactory implements SchemeFactory {
      public findAreaByAreaCodeAndClientId_resultTupleScheme getScheme() {
        return new findAreaByAreaCodeAndClientId_resultTupleScheme();
      }
    }

    private static class findAreaByAreaCodeAndClientId_resultTupleScheme extends TupleScheme<findAreaByAreaCodeAndClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCodeAndClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaByAreaCodeAndClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AreaVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findChildrenInfoById_args implements org.apache.thrift.TBase<findChildrenInfoById_args, findChildrenInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenInfoById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findChildrenInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findChildrenInfoById_argsTupleSchemeFactory());
    }

    public long id; // required
    public String areaCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      AREA_CODE((short)2, "areaCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // AREA_CODE
            return AREA_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenInfoById_args.class, metaDataMap);
    }

    public findChildrenInfoById_args() {
    }

    public findChildrenInfoById_args(
      long id,
      String areaCode)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.areaCode = areaCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenInfoById_args(findChildrenInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
    }

    public findChildrenInfoById_args deepCopy() {
      return new findChildrenInfoById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.areaCode = null;
    }

    public long getId() {
      return this.id;
    }

    public findChildrenInfoById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public findChildrenInfoById_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case AREA_CODE:
        return getAreaCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case AREA_CODE:
        return isSetAreaCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenInfoById_args)
        return this.equals((findChildrenInfoById_args)that);
      return false;
    }

    public boolean equals(findChildrenInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(findChildrenInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findChildrenInfoById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public findChildrenInfoById_argsStandardScheme getScheme() {
        return new findChildrenInfoById_argsStandardScheme();
      }
    }

    private static class findChildrenInfoById_argsStandardScheme extends StandardScheme<findChildrenInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public findChildrenInfoById_argsTupleScheme getScheme() {
        return new findChildrenInfoById_argsTupleScheme();
      }
    }

    private static class findChildrenInfoById_argsTupleScheme extends TupleScheme<findChildrenInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAreaCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
      }
    }

  }

  public static class findChildrenInfoById_result implements org.apache.thrift.TBase<findChildrenInfoById_result, findChildrenInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findChildrenInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findChildrenInfoById_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenInfoById_result.class, metaDataMap);
    }

    public findChildrenInfoById_result() {
    }

    public findChildrenInfoById_result(
      List<com.froad.thrift.vo.AreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenInfoById_result(findChildrenInfoById_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AreaVo> __this__success = new ArrayList<com.froad.thrift.vo.AreaVo>(other.success.size());
        for (com.froad.thrift.vo.AreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findChildrenInfoById_result deepCopy() {
      return new findChildrenInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AreaVo> getSuccess() {
      return this.success;
    }

    public findChildrenInfoById_result setSuccess(List<com.froad.thrift.vo.AreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenInfoById_result)
        return this.equals((findChildrenInfoById_result)that);
      return false;
    }

    public boolean equals(findChildrenInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findChildrenInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findChildrenInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public findChildrenInfoById_resultStandardScheme getScheme() {
        return new findChildrenInfoById_resultStandardScheme();
      }
    }

    private static class findChildrenInfoById_resultStandardScheme extends StandardScheme<findChildrenInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list66.size);
                  com.froad.thrift.vo.AreaVo _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new com.froad.thrift.vo.AreaVo();
                    _elem67.read(iprot);
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AreaVo _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public findChildrenInfoById_resultTupleScheme getScheme() {
        return new findChildrenInfoById_resultTupleScheme();
      }
    }

    private static class findChildrenInfoById_resultTupleScheme extends TupleScheme<findChildrenInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AreaVo _iter70 : struct.success)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list71.size);
            com.froad.thrift.vo.AreaVo _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = new com.froad.thrift.vo.AreaVo();
              _elem72.read(iprot);
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findChildrenInfo_args implements org.apache.thrift.TBase<findChildrenInfo_args, findChildrenInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenInfo_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findChildrenInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findChildrenInfo_argsTupleSchemeFactory());
    }

    public long id; // required
    public String areaCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      AREA_CODE((short)2, "areaCode"),
      CLIENT_ID((short)3, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // AREA_CODE
            return AREA_CODE;
          case 3: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenInfo_args.class, metaDataMap);
    }

    public findChildrenInfo_args() {
    }

    public findChildrenInfo_args(
      long id,
      String areaCode,
      String clientId)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.areaCode = areaCode;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenInfo_args(findChildrenInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public findChildrenInfo_args deepCopy() {
      return new findChildrenInfo_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.areaCode = null;
      this.clientId = null;
    }

    public long getId() {
      return this.id;
    }

    public findChildrenInfo_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public findChildrenInfo_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public findChildrenInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case AREA_CODE:
        return getAreaCode();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case AREA_CODE:
        return isSetAreaCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenInfo_args)
        return this.equals((findChildrenInfo_args)that);
      return false;
    }

    public boolean equals(findChildrenInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findChildrenInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findChildrenInfo_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findChildrenInfo_argsStandardScheme getScheme() {
        return new findChildrenInfo_argsStandardScheme();
      }
    }

    private static class findChildrenInfo_argsStandardScheme extends StandardScheme<findChildrenInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findChildrenInfo_argsTupleScheme getScheme() {
        return new findChildrenInfo_argsTupleScheme();
      }
    }

    private static class findChildrenInfo_argsTupleScheme extends TupleScheme<findChildrenInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAreaCode()) {
          optionals.set(1);
        }
        if (struct.isSetClientId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class findChildrenInfo_result implements org.apache.thrift.TBase<findChildrenInfo_result, findChildrenInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findChildrenInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findChildrenInfo_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenInfo_result.class, metaDataMap);
    }

    public findChildrenInfo_result() {
    }

    public findChildrenInfo_result(
      List<com.froad.thrift.vo.AreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenInfo_result(findChildrenInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AreaVo> __this__success = new ArrayList<com.froad.thrift.vo.AreaVo>(other.success.size());
        for (com.froad.thrift.vo.AreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findChildrenInfo_result deepCopy() {
      return new findChildrenInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AreaVo> getSuccess() {
      return this.success;
    }

    public findChildrenInfo_result setSuccess(List<com.froad.thrift.vo.AreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenInfo_result)
        return this.equals((findChildrenInfo_result)that);
      return false;
    }

    public boolean equals(findChildrenInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findChildrenInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findChildrenInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findChildrenInfo_resultStandardScheme getScheme() {
        return new findChildrenInfo_resultStandardScheme();
      }
    }

    private static class findChildrenInfo_resultStandardScheme extends StandardScheme<findChildrenInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list74.size);
                  com.froad.thrift.vo.AreaVo _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new com.froad.thrift.vo.AreaVo();
                    _elem75.read(iprot);
                    struct.success.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AreaVo _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findChildrenInfo_resultTupleScheme getScheme() {
        return new findChildrenInfo_resultTupleScheme();
      }
    }

    private static class findChildrenInfo_resultTupleScheme extends TupleScheme<findChildrenInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AreaVo _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list79.size);
            com.froad.thrift.vo.AreaVo _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new com.froad.thrift.vo.AreaVo();
              _elem80.read(iprot);
              struct.success.add(_elem80);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isAreaCodeScopeOfClientId_args implements org.apache.thrift.TBase<isAreaCodeScopeOfClientId_args, isAreaCodeScopeOfClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<isAreaCodeScopeOfClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAreaCodeScopeOfClientId_args");

    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isAreaCodeScopeOfClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isAreaCodeScopeOfClientId_argsTupleSchemeFactory());
    }

    public String areaCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_CODE((short)1, "areaCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_CODE
            return AREA_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAreaCodeScopeOfClientId_args.class, metaDataMap);
    }

    public isAreaCodeScopeOfClientId_args() {
    }

    public isAreaCodeScopeOfClientId_args(
      String areaCode,
      String clientId)
    {
      this();
      this.areaCode = areaCode;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAreaCodeScopeOfClientId_args(isAreaCodeScopeOfClientId_args other) {
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public isAreaCodeScopeOfClientId_args deepCopy() {
      return new isAreaCodeScopeOfClientId_args(this);
    }

    @Override
    public void clear() {
      this.areaCode = null;
      this.clientId = null;
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public isAreaCodeScopeOfClientId_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public isAreaCodeScopeOfClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_CODE:
        return getAreaCode();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_CODE:
        return isSetAreaCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isAreaCodeScopeOfClientId_args)
        return this.equals((isAreaCodeScopeOfClientId_args)that);
      return false;
    }

    public boolean equals(isAreaCodeScopeOfClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isAreaCodeScopeOfClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isAreaCodeScopeOfClientId_args(");
      boolean first = true;

      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAreaCodeScopeOfClientId_argsStandardSchemeFactory implements SchemeFactory {
      public isAreaCodeScopeOfClientId_argsStandardScheme getScheme() {
        return new isAreaCodeScopeOfClientId_argsStandardScheme();
      }
    }

    private static class isAreaCodeScopeOfClientId_argsStandardScheme extends StandardScheme<isAreaCodeScopeOfClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAreaCodeScopeOfClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAreaCodeScopeOfClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAreaCodeScopeOfClientId_argsTupleSchemeFactory implements SchemeFactory {
      public isAreaCodeScopeOfClientId_argsTupleScheme getScheme() {
        return new isAreaCodeScopeOfClientId_argsTupleScheme();
      }
    }

    private static class isAreaCodeScopeOfClientId_argsTupleScheme extends TupleScheme<isAreaCodeScopeOfClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAreaCodeScopeOfClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAreaCodeScopeOfClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class isAreaCodeScopeOfClientId_result implements org.apache.thrift.TBase<isAreaCodeScopeOfClientId_result, isAreaCodeScopeOfClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<isAreaCodeScopeOfClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAreaCodeScopeOfClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isAreaCodeScopeOfClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isAreaCodeScopeOfClientId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAreaCodeScopeOfClientId_result.class, metaDataMap);
    }

    public isAreaCodeScopeOfClientId_result() {
    }

    public isAreaCodeScopeOfClientId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAreaCodeScopeOfClientId_result(isAreaCodeScopeOfClientId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isAreaCodeScopeOfClientId_result deepCopy() {
      return new isAreaCodeScopeOfClientId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isAreaCodeScopeOfClientId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isAreaCodeScopeOfClientId_result)
        return this.equals((isAreaCodeScopeOfClientId_result)that);
      return false;
    }

    public boolean equals(isAreaCodeScopeOfClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isAreaCodeScopeOfClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isAreaCodeScopeOfClientId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAreaCodeScopeOfClientId_resultStandardSchemeFactory implements SchemeFactory {
      public isAreaCodeScopeOfClientId_resultStandardScheme getScheme() {
        return new isAreaCodeScopeOfClientId_resultStandardScheme();
      }
    }

    private static class isAreaCodeScopeOfClientId_resultStandardScheme extends StandardScheme<isAreaCodeScopeOfClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAreaCodeScopeOfClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAreaCodeScopeOfClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAreaCodeScopeOfClientId_resultTupleSchemeFactory implements SchemeFactory {
      public isAreaCodeScopeOfClientId_resultTupleScheme getScheme() {
        return new isAreaCodeScopeOfClientId_resultTupleScheme();
      }
    }

    private static class isAreaCodeScopeOfClientId_resultTupleScheme extends TupleScheme<isAreaCodeScopeOfClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAreaCodeScopeOfClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAreaCodeScopeOfClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProvinceAreaByClientId_args implements org.apache.thrift.TBase<findProvinceAreaByClientId_args, findProvinceAreaByClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProvinceAreaByClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProvinceAreaByClientId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProvinceAreaByClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProvinceAreaByClientId_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProvinceAreaByClientId_args.class, metaDataMap);
    }

    public findProvinceAreaByClientId_args() {
    }

    public findProvinceAreaByClientId_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProvinceAreaByClientId_args(findProvinceAreaByClientId_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public findProvinceAreaByClientId_args deepCopy() {
      return new findProvinceAreaByClientId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public findProvinceAreaByClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProvinceAreaByClientId_args)
        return this.equals((findProvinceAreaByClientId_args)that);
      return false;
    }

    public boolean equals(findProvinceAreaByClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProvinceAreaByClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProvinceAreaByClientId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProvinceAreaByClientId_argsStandardSchemeFactory implements SchemeFactory {
      public findProvinceAreaByClientId_argsStandardScheme getScheme() {
        return new findProvinceAreaByClientId_argsStandardScheme();
      }
    }

    private static class findProvinceAreaByClientId_argsStandardScheme extends StandardScheme<findProvinceAreaByClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProvinceAreaByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProvinceAreaByClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProvinceAreaByClientId_argsTupleSchemeFactory implements SchemeFactory {
      public findProvinceAreaByClientId_argsTupleScheme getScheme() {
        return new findProvinceAreaByClientId_argsTupleScheme();
      }
    }

    private static class findProvinceAreaByClientId_argsTupleScheme extends TupleScheme<findProvinceAreaByClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProvinceAreaByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProvinceAreaByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class findProvinceAreaByClientId_result implements org.apache.thrift.TBase<findProvinceAreaByClientId_result, findProvinceAreaByClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProvinceAreaByClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProvinceAreaByClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProvinceAreaByClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProvinceAreaByClientId_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProvinceAreaByClientId_result.class, metaDataMap);
    }

    public findProvinceAreaByClientId_result() {
    }

    public findProvinceAreaByClientId_result(
      List<com.froad.thrift.vo.AreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProvinceAreaByClientId_result(findProvinceAreaByClientId_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AreaVo> __this__success = new ArrayList<com.froad.thrift.vo.AreaVo>(other.success.size());
        for (com.froad.thrift.vo.AreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findProvinceAreaByClientId_result deepCopy() {
      return new findProvinceAreaByClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AreaVo> getSuccess() {
      return this.success;
    }

    public findProvinceAreaByClientId_result setSuccess(List<com.froad.thrift.vo.AreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProvinceAreaByClientId_result)
        return this.equals((findProvinceAreaByClientId_result)that);
      return false;
    }

    public boolean equals(findProvinceAreaByClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProvinceAreaByClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProvinceAreaByClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProvinceAreaByClientId_resultStandardSchemeFactory implements SchemeFactory {
      public findProvinceAreaByClientId_resultStandardScheme getScheme() {
        return new findProvinceAreaByClientId_resultStandardScheme();
      }
    }

    private static class findProvinceAreaByClientId_resultStandardScheme extends StandardScheme<findProvinceAreaByClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProvinceAreaByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list82.size);
                  com.froad.thrift.vo.AreaVo _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new com.froad.thrift.vo.AreaVo();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProvinceAreaByClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AreaVo _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProvinceAreaByClientId_resultTupleSchemeFactory implements SchemeFactory {
      public findProvinceAreaByClientId_resultTupleScheme getScheme() {
        return new findProvinceAreaByClientId_resultTupleScheme();
      }
    }

    private static class findProvinceAreaByClientId_resultTupleScheme extends TupleScheme<findProvinceAreaByClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProvinceAreaByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AreaVo _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProvinceAreaByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list87.size);
            com.froad.thrift.vo.AreaVo _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new com.froad.thrift.vo.AreaVo();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
