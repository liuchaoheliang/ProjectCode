/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 面对面支付订单详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QrcodeOrderDetailVo implements org.apache.thrift.TBase<QrcodeOrderDetailVo, QrcodeOrderDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<QrcodeOrderDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QrcodeOrderDetailVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("realPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MERCHANT_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantImg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FFT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField BANK_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField PAYMENT_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentChannel", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CONSUME_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField POINT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pointMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField OUTLET_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("outletImg", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DISCOUNT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("discountMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QrcodeOrderDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QrcodeOrderDetailVoTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 实际总货币值
   */
  public double realPrice; // required
  /**
   * 订单状态
   */
  public String orderStatus; // required
  /**
   * 订单创建时间
   */
  public long createTime; // required
  /**
   * 订单支付方式
   */
  public String paymentMethod; // required
  /**
   * 商户号
   */
  public String merchantId; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 商户图片
   */
  public String merchantImg; // required
  /**
   * 付款账号
   */
  public String accountNo; // required
  /**
   * 支付号
   */
  public String paymentId; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 方付通积分
   */
  public double fftPoints; // required
  /**
   * 银行积分
   */
  public double bankPoints; // required
  /**
   * 支付渠道
   */
  public String paymentChannel; // required
  /**
   * 总金额
   */
  public double totalPrice; // required
  /**
   * 支付时间
   */
  public long paymentTime; // required
  /**
   * 门店ID
   */
  public String outletId; // required
  /**
   * 门店名称
   */
  public String outletName; // required
  /**
   * 消费总金额
   */
  public double consumeMoney; // required
  /**
   * 优惠金额
   */
  public double cutMoney; // required
  /**
   * 积分抵扣金额
   */
  public double pointMoney; // required
  /**
   * 门店logo
   */
  public String outletImg; // required
  /**
   * 门店折扣金额
   */
  public double discountMoney; // required
  /**
   * 手机号
   */
  public String phone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 实际总货币值
     */
    REAL_PRICE((short)2, "realPrice"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)3, "orderStatus"),
    /**
     * 订单创建时间
     */
    CREATE_TIME((short)4, "createTime"),
    /**
     * 订单支付方式
     */
    PAYMENT_METHOD((short)5, "paymentMethod"),
    /**
     * 商户号
     */
    MERCHANT_ID((short)6, "merchantId"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)7, "merchantName"),
    /**
     * 商户图片
     */
    MERCHANT_IMG((short)8, "merchantImg"),
    /**
     * 付款账号
     */
    ACCOUNT_NO((short)9, "accountNo"),
    /**
     * 支付号
     */
    PAYMENT_ID((short)10, "paymentId"),
    /**
     * 备注
     */
    REMARK((short)11, "remark"),
    /**
     * 方付通积分
     */
    FFT_POINTS((short)12, "fftPoints"),
    /**
     * 银行积分
     */
    BANK_POINTS((short)13, "bankPoints"),
    /**
     * 支付渠道
     */
    PAYMENT_CHANNEL((short)14, "paymentChannel"),
    /**
     * 总金额
     */
    TOTAL_PRICE((short)15, "totalPrice"),
    /**
     * 支付时间
     */
    PAYMENT_TIME((short)16, "paymentTime"),
    /**
     * 门店ID
     */
    OUTLET_ID((short)17, "outletId"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)18, "outletName"),
    /**
     * 消费总金额
     */
    CONSUME_MONEY((short)19, "consumeMoney"),
    /**
     * 优惠金额
     */
    CUT_MONEY((short)20, "cutMoney"),
    /**
     * 积分抵扣金额
     */
    POINT_MONEY((short)21, "pointMoney"),
    /**
     * 门店logo
     */
    OUTLET_IMG((short)22, "outletImg"),
    /**
     * 门店折扣金额
     */
    DISCOUNT_MONEY((short)23, "discountMoney"),
    /**
     * 手机号
     */
    PHONE((short)24, "phone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // REAL_PRICE
          return REAL_PRICE;
        case 3: // ORDER_STATUS
          return ORDER_STATUS;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 6: // MERCHANT_ID
          return MERCHANT_ID;
        case 7: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 8: // MERCHANT_IMG
          return MERCHANT_IMG;
        case 9: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 10: // PAYMENT_ID
          return PAYMENT_ID;
        case 11: // REMARK
          return REMARK;
        case 12: // FFT_POINTS
          return FFT_POINTS;
        case 13: // BANK_POINTS
          return BANK_POINTS;
        case 14: // PAYMENT_CHANNEL
          return PAYMENT_CHANNEL;
        case 15: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 16: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 17: // OUTLET_ID
          return OUTLET_ID;
        case 18: // OUTLET_NAME
          return OUTLET_NAME;
        case 19: // CONSUME_MONEY
          return CONSUME_MONEY;
        case 20: // CUT_MONEY
          return CUT_MONEY;
        case 21: // POINT_MONEY
          return POINT_MONEY;
        case 22: // OUTLET_IMG
          return OUTLET_IMG;
        case 23: // DISCOUNT_MONEY
          return DISCOUNT_MONEY;
        case 24: // PHONE
          return PHONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REALPRICE_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __FFTPOINTS_ISSET_ID = 2;
  private static final int __BANKPOINTS_ISSET_ID = 3;
  private static final int __TOTALPRICE_ISSET_ID = 4;
  private static final int __PAYMENTTIME_ISSET_ID = 5;
  private static final int __CONSUMEMONEY_ISSET_ID = 6;
  private static final int __CUTMONEY_ISSET_ID = 7;
  private static final int __POINTMONEY_ISSET_ID = 8;
  private static final int __DISCOUNTMONEY_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("realPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_IMG, new org.apache.thrift.meta_data.FieldMetaData("merchantImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FFT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("fftPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINTS, new org.apache.thrift.meta_data.FieldMetaData("bankPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("paymentChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSUME_MONEY, new org.apache.thrift.meta_data.FieldMetaData("consumeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("pointMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTLET_IMG, new org.apache.thrift.meta_data.FieldMetaData("outletImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCOUNT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("discountMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QrcodeOrderDetailVo.class, metaDataMap);
  }

  public QrcodeOrderDetailVo() {
  }

  public QrcodeOrderDetailVo(
    String orderId,
    double realPrice,
    String orderStatus,
    long createTime,
    String paymentMethod,
    String merchantId,
    String merchantName,
    String merchantImg,
    String accountNo,
    String paymentId,
    String remark,
    double fftPoints,
    double bankPoints,
    String paymentChannel,
    double totalPrice,
    long paymentTime,
    String outletId,
    String outletName,
    double consumeMoney,
    double cutMoney,
    double pointMoney,
    String outletImg,
    double discountMoney,
    String phone)
  {
    this();
    this.orderId = orderId;
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    this.orderStatus = orderStatus;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.paymentMethod = paymentMethod;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.merchantImg = merchantImg;
    this.accountNo = accountNo;
    this.paymentId = paymentId;
    this.remark = remark;
    this.fftPoints = fftPoints;
    setFftPointsIsSet(true);
    this.bankPoints = bankPoints;
    setBankPointsIsSet(true);
    this.paymentChannel = paymentChannel;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.outletId = outletId;
    this.outletName = outletName;
    this.consumeMoney = consumeMoney;
    setConsumeMoneyIsSet(true);
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    this.outletImg = outletImg;
    this.discountMoney = discountMoney;
    setDiscountMoneyIsSet(true);
    this.phone = phone;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QrcodeOrderDetailVo(QrcodeOrderDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.realPrice = other.realPrice;
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.createTime = other.createTime;
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetMerchantImg()) {
      this.merchantImg = other.merchantImg;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.fftPoints = other.fftPoints;
    this.bankPoints = other.bankPoints;
    if (other.isSetPaymentChannel()) {
      this.paymentChannel = other.paymentChannel;
    }
    this.totalPrice = other.totalPrice;
    this.paymentTime = other.paymentTime;
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    this.consumeMoney = other.consumeMoney;
    this.cutMoney = other.cutMoney;
    this.pointMoney = other.pointMoney;
    if (other.isSetOutletImg()) {
      this.outletImg = other.outletImg;
    }
    this.discountMoney = other.discountMoney;
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
  }

  public QrcodeOrderDetailVo deepCopy() {
    return new QrcodeOrderDetailVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setRealPriceIsSet(false);
    this.realPrice = 0.0;
    this.orderStatus = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.paymentMethod = null;
    this.merchantId = null;
    this.merchantName = null;
    this.merchantImg = null;
    this.accountNo = null;
    this.paymentId = null;
    this.remark = null;
    setFftPointsIsSet(false);
    this.fftPoints = 0.0;
    setBankPointsIsSet(false);
    this.bankPoints = 0.0;
    this.paymentChannel = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    this.outletId = null;
    this.outletName = null;
    setConsumeMoneyIsSet(false);
    this.consumeMoney = 0.0;
    setCutMoneyIsSet(false);
    this.cutMoney = 0.0;
    setPointMoneyIsSet(false);
    this.pointMoney = 0.0;
    this.outletImg = null;
    setDiscountMoneyIsSet(false);
    this.discountMoney = 0.0;
    this.phone = null;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public QrcodeOrderDetailVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 实际总货币值
   */
  public double getRealPrice() {
    return this.realPrice;
  }

  /**
   * 实际总货币值
   */
  public QrcodeOrderDetailVo setRealPrice(double realPrice) {
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    return this;
  }

  public void unsetRealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  /** Returns true if field realPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  public void setRealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALPRICE_ISSET_ID, value);
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public QrcodeOrderDetailVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 订单创建时间
   */
  public QrcodeOrderDetailVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 订单支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 订单支付方式
   */
  public QrcodeOrderDetailVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 商户号
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户号
   */
  public QrcodeOrderDetailVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public QrcodeOrderDetailVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商户图片
   */
  public String getMerchantImg() {
    return this.merchantImg;
  }

  /**
   * 商户图片
   */
  public QrcodeOrderDetailVo setMerchantImg(String merchantImg) {
    this.merchantImg = merchantImg;
    return this;
  }

  public void unsetMerchantImg() {
    this.merchantImg = null;
  }

  /** Returns true if field merchantImg is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantImg() {
    return this.merchantImg != null;
  }

  public void setMerchantImgIsSet(boolean value) {
    if (!value) {
      this.merchantImg = null;
    }
  }

  /**
   * 付款账号
   */
  public String getAccountNo() {
    return this.accountNo;
  }

  /**
   * 付款账号
   */
  public QrcodeOrderDetailVo setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  /**
   * 支付号
   */
  public String getPaymentId() {
    return this.paymentId;
  }

  /**
   * 支付号
   */
  public QrcodeOrderDetailVo setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public QrcodeOrderDetailVo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 方付通积分
   */
  public double getFftPoints() {
    return this.fftPoints;
  }

  /**
   * 方付通积分
   */
  public QrcodeOrderDetailVo setFftPoints(double fftPoints) {
    this.fftPoints = fftPoints;
    setFftPointsIsSet(true);
    return this;
  }

  public void unsetFftPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  /** Returns true if field fftPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  public void setFftPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINTS_ISSET_ID, value);
  }

  /**
   * 银行积分
   */
  public double getBankPoints() {
    return this.bankPoints;
  }

  /**
   * 银行积分
   */
  public QrcodeOrderDetailVo setBankPoints(double bankPoints) {
    this.bankPoints = bankPoints;
    setBankPointsIsSet(true);
    return this;
  }

  public void unsetBankPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  /** Returns true if field bankPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  public void setBankPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINTS_ISSET_ID, value);
  }

  /**
   * 支付渠道
   */
  public String getPaymentChannel() {
    return this.paymentChannel;
  }

  /**
   * 支付渠道
   */
  public QrcodeOrderDetailVo setPaymentChannel(String paymentChannel) {
    this.paymentChannel = paymentChannel;
    return this;
  }

  public void unsetPaymentChannel() {
    this.paymentChannel = null;
  }

  /** Returns true if field paymentChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentChannel() {
    return this.paymentChannel != null;
  }

  public void setPaymentChannelIsSet(boolean value) {
    if (!value) {
      this.paymentChannel = null;
    }
  }

  /**
   * 总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总金额
   */
  public QrcodeOrderDetailVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间
   */
  public QrcodeOrderDetailVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店ID
   */
  public QrcodeOrderDetailVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public QrcodeOrderDetailVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 消费总金额
   */
  public double getConsumeMoney() {
    return this.consumeMoney;
  }

  /**
   * 消费总金额
   */
  public QrcodeOrderDetailVo setConsumeMoney(double consumeMoney) {
    this.consumeMoney = consumeMoney;
    setConsumeMoneyIsSet(true);
    return this;
  }

  public void unsetConsumeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID);
  }

  /** Returns true if field consumeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID);
  }

  public void setConsumeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID, value);
  }

  /**
   * 优惠金额
   */
  public double getCutMoney() {
    return this.cutMoney;
  }

  /**
   * 优惠金额
   */
  public QrcodeOrderDetailVo setCutMoney(double cutMoney) {
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    return this;
  }

  public void unsetCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  /** Returns true if field cutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  public void setCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTMONEY_ISSET_ID, value);
  }

  /**
   * 积分抵扣金额
   */
  public double getPointMoney() {
    return this.pointMoney;
  }

  /**
   * 积分抵扣金额
   */
  public QrcodeOrderDetailVo setPointMoney(double pointMoney) {
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    return this;
  }

  public void unsetPointMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  /** Returns true if field pointMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPointMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  public void setPointMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTMONEY_ISSET_ID, value);
  }

  /**
   * 门店logo
   */
  public String getOutletImg() {
    return this.outletImg;
  }

  /**
   * 门店logo
   */
  public QrcodeOrderDetailVo setOutletImg(String outletImg) {
    this.outletImg = outletImg;
    return this;
  }

  public void unsetOutletImg() {
    this.outletImg = null;
  }

  /** Returns true if field outletImg is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletImg() {
    return this.outletImg != null;
  }

  public void setOutletImgIsSet(boolean value) {
    if (!value) {
      this.outletImg = null;
    }
  }

  /**
   * 门店折扣金额
   */
  public double getDiscountMoney() {
    return this.discountMoney;
  }

  /**
   * 门店折扣金额
   */
  public QrcodeOrderDetailVo setDiscountMoney(double discountMoney) {
    this.discountMoney = discountMoney;
    setDiscountMoneyIsSet(true);
    return this;
  }

  public void unsetDiscountMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID);
  }

  /** Returns true if field discountMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID);
  }

  public void setDiscountMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID, value);
  }

  /**
   * 手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 手机号
   */
  public QrcodeOrderDetailVo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case REAL_PRICE:
      if (value == null) {
        unsetRealPrice();
      } else {
        setRealPrice((Double)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case MERCHANT_IMG:
      if (value == null) {
        unsetMerchantImg();
      } else {
        setMerchantImg((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case FFT_POINTS:
      if (value == null) {
        unsetFftPoints();
      } else {
        setFftPoints((Double)value);
      }
      break;

    case BANK_POINTS:
      if (value == null) {
        unsetBankPoints();
      } else {
        setBankPoints((Double)value);
      }
      break;

    case PAYMENT_CHANNEL:
      if (value == null) {
        unsetPaymentChannel();
      } else {
        setPaymentChannel((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case CONSUME_MONEY:
      if (value == null) {
        unsetConsumeMoney();
      } else {
        setConsumeMoney((Double)value);
      }
      break;

    case CUT_MONEY:
      if (value == null) {
        unsetCutMoney();
      } else {
        setCutMoney((Double)value);
      }
      break;

    case POINT_MONEY:
      if (value == null) {
        unsetPointMoney();
      } else {
        setPointMoney((Double)value);
      }
      break;

    case OUTLET_IMG:
      if (value == null) {
        unsetOutletImg();
      } else {
        setOutletImg((String)value);
      }
      break;

    case DISCOUNT_MONEY:
      if (value == null) {
        unsetDiscountMoney();
      } else {
        setDiscountMoney((Double)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case REAL_PRICE:
      return Double.valueOf(getRealPrice());

    case ORDER_STATUS:
      return getOrderStatus();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case MERCHANT_IMG:
      return getMerchantImg();

    case ACCOUNT_NO:
      return getAccountNo();

    case PAYMENT_ID:
      return getPaymentId();

    case REMARK:
      return getRemark();

    case FFT_POINTS:
      return Double.valueOf(getFftPoints());

    case BANK_POINTS:
      return Double.valueOf(getBankPoints());

    case PAYMENT_CHANNEL:
      return getPaymentChannel();

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case CONSUME_MONEY:
      return Double.valueOf(getConsumeMoney());

    case CUT_MONEY:
      return Double.valueOf(getCutMoney());

    case POINT_MONEY:
      return Double.valueOf(getPointMoney());

    case OUTLET_IMG:
      return getOutletImg();

    case DISCOUNT_MONEY:
      return Double.valueOf(getDiscountMoney());

    case PHONE:
      return getPhone();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case REAL_PRICE:
      return isSetRealPrice();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case MERCHANT_IMG:
      return isSetMerchantImg();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case PAYMENT_ID:
      return isSetPaymentId();
    case REMARK:
      return isSetRemark();
    case FFT_POINTS:
      return isSetFftPoints();
    case BANK_POINTS:
      return isSetBankPoints();
    case PAYMENT_CHANNEL:
      return isSetPaymentChannel();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case CONSUME_MONEY:
      return isSetConsumeMoney();
    case CUT_MONEY:
      return isSetCutMoney();
    case POINT_MONEY:
      return isSetPointMoney();
    case OUTLET_IMG:
      return isSetOutletImg();
    case DISCOUNT_MONEY:
      return isSetDiscountMoney();
    case PHONE:
      return isSetPhone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QrcodeOrderDetailVo)
      return this.equals((QrcodeOrderDetailVo)that);
    return false;
  }

  public boolean equals(QrcodeOrderDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_realPrice = true;
    boolean that_present_realPrice = true;
    if (this_present_realPrice || that_present_realPrice) {
      if (!(this_present_realPrice && that_present_realPrice))
        return false;
      if (this.realPrice != that.realPrice)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_merchantImg = true && this.isSetMerchantImg();
    boolean that_present_merchantImg = true && that.isSetMerchantImg();
    if (this_present_merchantImg || that_present_merchantImg) {
      if (!(this_present_merchantImg && that_present_merchantImg))
        return false;
      if (!this.merchantImg.equals(that.merchantImg))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_fftPoints = true;
    boolean that_present_fftPoints = true;
    if (this_present_fftPoints || that_present_fftPoints) {
      if (!(this_present_fftPoints && that_present_fftPoints))
        return false;
      if (this.fftPoints != that.fftPoints)
        return false;
    }

    boolean this_present_bankPoints = true;
    boolean that_present_bankPoints = true;
    if (this_present_bankPoints || that_present_bankPoints) {
      if (!(this_present_bankPoints && that_present_bankPoints))
        return false;
      if (this.bankPoints != that.bankPoints)
        return false;
    }

    boolean this_present_paymentChannel = true && this.isSetPaymentChannel();
    boolean that_present_paymentChannel = true && that.isSetPaymentChannel();
    if (this_present_paymentChannel || that_present_paymentChannel) {
      if (!(this_present_paymentChannel && that_present_paymentChannel))
        return false;
      if (!this.paymentChannel.equals(that.paymentChannel))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_consumeMoney = true;
    boolean that_present_consumeMoney = true;
    if (this_present_consumeMoney || that_present_consumeMoney) {
      if (!(this_present_consumeMoney && that_present_consumeMoney))
        return false;
      if (this.consumeMoney != that.consumeMoney)
        return false;
    }

    boolean this_present_cutMoney = true;
    boolean that_present_cutMoney = true;
    if (this_present_cutMoney || that_present_cutMoney) {
      if (!(this_present_cutMoney && that_present_cutMoney))
        return false;
      if (this.cutMoney != that.cutMoney)
        return false;
    }

    boolean this_present_pointMoney = true;
    boolean that_present_pointMoney = true;
    if (this_present_pointMoney || that_present_pointMoney) {
      if (!(this_present_pointMoney && that_present_pointMoney))
        return false;
      if (this.pointMoney != that.pointMoney)
        return false;
    }

    boolean this_present_outletImg = true && this.isSetOutletImg();
    boolean that_present_outletImg = true && that.isSetOutletImg();
    if (this_present_outletImg || that_present_outletImg) {
      if (!(this_present_outletImg && that_present_outletImg))
        return false;
      if (!this.outletImg.equals(that.outletImg))
        return false;
    }

    boolean this_present_discountMoney = true;
    boolean that_present_discountMoney = true;
    if (this_present_discountMoney || that_present_discountMoney) {
      if (!(this_present_discountMoney && that_present_discountMoney))
        return false;
      if (this.discountMoney != that.discountMoney)
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_realPrice = true;
    list.add(present_realPrice);
    if (present_realPrice)
      list.add(realPrice);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_merchantImg = true && (isSetMerchantImg());
    list.add(present_merchantImg);
    if (present_merchantImg)
      list.add(merchantImg);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_fftPoints = true;
    list.add(present_fftPoints);
    if (present_fftPoints)
      list.add(fftPoints);

    boolean present_bankPoints = true;
    list.add(present_bankPoints);
    if (present_bankPoints)
      list.add(bankPoints);

    boolean present_paymentChannel = true && (isSetPaymentChannel());
    list.add(present_paymentChannel);
    if (present_paymentChannel)
      list.add(paymentChannel);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_consumeMoney = true;
    list.add(present_consumeMoney);
    if (present_consumeMoney)
      list.add(consumeMoney);

    boolean present_cutMoney = true;
    list.add(present_cutMoney);
    if (present_cutMoney)
      list.add(cutMoney);

    boolean present_pointMoney = true;
    list.add(present_pointMoney);
    if (present_pointMoney)
      list.add(pointMoney);

    boolean present_outletImg = true && (isSetOutletImg());
    list.add(present_outletImg);
    if (present_outletImg)
      list.add(outletImg);

    boolean present_discountMoney = true;
    list.add(present_discountMoney);
    if (present_discountMoney)
      list.add(discountMoney);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    return list.hashCode();
  }

  @Override
  public int compareTo(QrcodeOrderDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealPrice()).compareTo(other.isSetRealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realPrice, other.realPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantImg()).compareTo(other.isSetMerchantImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantImg, other.merchantImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPoints()).compareTo(other.isSetFftPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPoints, other.fftPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoints()).compareTo(other.isSetBankPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoints, other.bankPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentChannel()).compareTo(other.isSetPaymentChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentChannel, other.paymentChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeMoney()).compareTo(other.isSetConsumeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeMoney, other.consumeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutMoney()).compareTo(other.isSetCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutMoney, other.cutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointMoney()).compareTo(other.isSetPointMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointMoney, other.pointMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletImg()).compareTo(other.isSetOutletImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletImg, other.outletImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountMoney()).compareTo(other.isSetDiscountMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountMoney, other.discountMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QrcodeOrderDetailVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realPrice:");
    sb.append(this.realPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantImg:");
    if (this.merchantImg == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fftPoints:");
    sb.append(this.fftPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPoints:");
    sb.append(this.bankPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentChannel:");
    if (this.paymentChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeMoney:");
    sb.append(this.consumeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutMoney:");
    sb.append(this.cutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointMoney:");
    sb.append(this.pointMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletImg:");
    if (this.outletImg == null) {
      sb.append("null");
    } else {
      sb.append(this.outletImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountMoney:");
    sb.append(this.discountMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QrcodeOrderDetailVoStandardSchemeFactory implements SchemeFactory {
    public QrcodeOrderDetailVoStandardScheme getScheme() {
      return new QrcodeOrderDetailVoStandardScheme();
    }
  }

  private static class QrcodeOrderDetailVoStandardScheme extends StandardScheme<QrcodeOrderDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QrcodeOrderDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realPrice = iprot.readDouble();
              struct.setRealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MERCHANT_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantImg = iprot.readString();
              struct.setMerchantImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FFT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPoints = iprot.readDouble();
              struct.setFftPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BANK_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankPoints = iprot.readDouble();
              struct.setBankPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAYMENT_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentChannel = iprot.readString();
              struct.setPaymentChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CONSUME_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consumeMoney = iprot.readDouble();
              struct.setConsumeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cutMoney = iprot.readDouble();
              struct.setCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // POINT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointMoney = iprot.readDouble();
              struct.setPointMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // OUTLET_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletImg = iprot.readString();
              struct.setOutletImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DISCOUNT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountMoney = iprot.readDouble();
              struct.setDiscountMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QrcodeOrderDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.realPrice);
      oprot.writeFieldEnd();
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantImg != null) {
        oprot.writeFieldBegin(MERCHANT_IMG_FIELD_DESC);
        oprot.writeString(struct.merchantImg);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FFT_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.fftPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.bankPoints);
      oprot.writeFieldEnd();
      if (struct.paymentChannel != null) {
        oprot.writeFieldBegin(PAYMENT_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.paymentChannel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSUME_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.consumeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.cutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.pointMoney);
      oprot.writeFieldEnd();
      if (struct.outletImg != null) {
        oprot.writeFieldBegin(OUTLET_IMG_FIELD_DESC);
        oprot.writeString(struct.outletImg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISCOUNT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.discountMoney);
      oprot.writeFieldEnd();
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QrcodeOrderDetailVoTupleSchemeFactory implements SchemeFactory {
    public QrcodeOrderDetailVoTupleScheme getScheme() {
      return new QrcodeOrderDetailVoTupleScheme();
    }
  }

  private static class QrcodeOrderDetailVoTupleScheme extends TupleScheme<QrcodeOrderDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QrcodeOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetRealPrice()) {
        optionals.set(1);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(5);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(6);
      }
      if (struct.isSetMerchantImg()) {
        optionals.set(7);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetFftPoints()) {
        optionals.set(11);
      }
      if (struct.isSetBankPoints()) {
        optionals.set(12);
      }
      if (struct.isSetPaymentChannel()) {
        optionals.set(13);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(14);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(15);
      }
      if (struct.isSetOutletId()) {
        optionals.set(16);
      }
      if (struct.isSetOutletName()) {
        optionals.set(17);
      }
      if (struct.isSetConsumeMoney()) {
        optionals.set(18);
      }
      if (struct.isSetCutMoney()) {
        optionals.set(19);
      }
      if (struct.isSetPointMoney()) {
        optionals.set(20);
      }
      if (struct.isSetOutletImg()) {
        optionals.set(21);
      }
      if (struct.isSetDiscountMoney()) {
        optionals.set(22);
      }
      if (struct.isSetPhone()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetRealPrice()) {
        oprot.writeDouble(struct.realPrice);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetMerchantImg()) {
        oprot.writeString(struct.merchantImg);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetFftPoints()) {
        oprot.writeDouble(struct.fftPoints);
      }
      if (struct.isSetBankPoints()) {
        oprot.writeDouble(struct.bankPoints);
      }
      if (struct.isSetPaymentChannel()) {
        oprot.writeString(struct.paymentChannel);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetConsumeMoney()) {
        oprot.writeDouble(struct.consumeMoney);
      }
      if (struct.isSetCutMoney()) {
        oprot.writeDouble(struct.cutMoney);
      }
      if (struct.isSetPointMoney()) {
        oprot.writeDouble(struct.pointMoney);
      }
      if (struct.isSetOutletImg()) {
        oprot.writeString(struct.outletImg);
      }
      if (struct.isSetDiscountMoney()) {
        oprot.writeDouble(struct.discountMoney);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QrcodeOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.realPrice = iprot.readDouble();
        struct.setRealPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.merchantImg = iprot.readString();
        struct.setMerchantImgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fftPoints = iprot.readDouble();
        struct.setFftPointsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bankPoints = iprot.readDouble();
        struct.setBankPointsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.paymentChannel = iprot.readString();
        struct.setPaymentChannelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.consumeMoney = iprot.readDouble();
        struct.setConsumeMoneyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.cutMoney = iprot.readDouble();
        struct.setCutMoneyIsSet(true);
      }
      if (incoming.get(20)) {
        struct.pointMoney = iprot.readDouble();
        struct.setPointMoneyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.outletImg = iprot.readString();
        struct.setOutletImgIsSet(true);
      }
      if (incoming.get(22)) {
        struct.discountMoney = iprot.readDouble();
        struct.setDiscountMoneyIsSet(true);
      }
      if (incoming.get(23)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
    }
  }

}

