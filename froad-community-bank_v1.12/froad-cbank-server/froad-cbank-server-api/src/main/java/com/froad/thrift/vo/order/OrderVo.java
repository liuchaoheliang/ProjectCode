/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OrderVo implements org.apache.thrift.TBase<OrderVo, OrderVo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderVo");

  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField POINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField REAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("realPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GIVE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("givePoints", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IS_QRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("isQrcode", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderVoTupleSchemeFactory());
  }

  /**
   * 用户编号
   */
  public long memberCode; // required
  /**
   * 订单状态
   */
  public String orderStatus; // required
  /**
   * 所属客户端
   */
  public String clientId; // required
  /**
   * 支付方式
   */
  public String paymentMethod; // required
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 支付时间
   */
  public long paymentTime; // required
  /**
   * 收银交易操作人
   */
  public long merchantUserId; // required
  /**
   * 总金额
   */
  public double totalPrice; // required
  /**
   * 积分类型
   */
  public int pointType; // required
  /**
   * 积分金额
   */
  public double points; // required
  /**
   * 现金金额
   */
  public double realPrice; // required
  /**
   * 积分兑换比例
   */
  public String pointRate; // required
  /**
   * 赠送积分数
   */
  public double givePoints; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 是否面对面-面对面没有详细内容
   */
  public int isQrcode; // required
  /**
   * 订单号
   */
  public String orderId; // required
  /**
   * 创建时间
   */
  public long createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户编号
     */
    MEMBER_CODE((short)1, "memberCode"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)2, "orderStatus"),
    /**
     * 所属客户端
     */
    CLIENT_ID((short)3, "clientId"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD((short)4, "paymentMethod"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)5, "createSource"),
    /**
     * 支付时间
     */
    PAYMENT_TIME((short)6, "paymentTime"),
    /**
     * 收银交易操作人
     */
    MERCHANT_USER_ID((short)7, "merchantUserId"),
    /**
     * 总金额
     */
    TOTAL_PRICE((short)8, "totalPrice"),
    /**
     * 积分类型
     */
    POINT_TYPE((short)9, "pointType"),
    /**
     * 积分金额
     */
    POINTS((short)10, "points"),
    /**
     * 现金金额
     */
    REAL_PRICE((short)11, "realPrice"),
    /**
     * 积分兑换比例
     */
    POINT_RATE((short)12, "pointRate"),
    /**
     * 赠送积分数
     */
    GIVE_POINTS((short)13, "givePoints"),
    /**
     * 备注
     */
    REMARK((short)14, "remark"),
    /**
     * 是否面对面-面对面没有详细内容
     */
    IS_QRCODE((short)15, "isQrcode"),
    /**
     * 订单号
     */
    ORDER_ID((short)16, "orderId"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)17, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_CODE
          return MEMBER_CODE;
        case 2: // ORDER_STATUS
          return ORDER_STATUS;
        case 3: // CLIENT_ID
          return CLIENT_ID;
        case 4: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 5: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 6: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 7: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        case 8: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 9: // POINT_TYPE
          return POINT_TYPE;
        case 10: // POINTS
          return POINTS;
        case 11: // REAL_PRICE
          return REAL_PRICE;
        case 12: // POINT_RATE
          return POINT_RATE;
        case 13: // GIVE_POINTS
          return GIVE_POINTS;
        case 14: // REMARK
          return REMARK;
        case 15: // IS_QRCODE
          return IS_QRCODE;
        case 16: // ORDER_ID
          return ORDER_ID;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __PAYMENTTIME_ISSET_ID = 1;
  private static final int __MERCHANTUSERID_ISSET_ID = 2;
  private static final int __TOTALPRICE_ISSET_ID = 3;
  private static final int __POINTTYPE_ISSET_ID = 4;
  private static final int __POINTS_ISSET_ID = 5;
  private static final int __REALPRICE_ISSET_ID = 6;
  private static final int __GIVEPOINTS_ISSET_ID = 7;
  private static final int __ISQRCODE_ISSET_ID = 8;
  private static final int __CREATETIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pointType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("realPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pointRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("givePoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_QRCODE, new org.apache.thrift.meta_data.FieldMetaData("isQrcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderVo.class, metaDataMap);
  }

  public OrderVo() {
  }

  public OrderVo(
    long memberCode,
    String orderStatus,
    String clientId,
    String paymentMethod,
    String createSource,
    long paymentTime,
    long merchantUserId,
    double totalPrice,
    int pointType,
    double points,
    double realPrice,
    String pointRate,
    double givePoints,
    String remark,
    int isQrcode,
    String orderId,
    long createTime)
  {
    this();
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.orderStatus = orderStatus;
    this.clientId = clientId;
    this.paymentMethod = paymentMethod;
    this.createSource = createSource;
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.pointType = pointType;
    setPointTypeIsSet(true);
    this.points = points;
    setPointsIsSet(true);
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    this.pointRate = pointRate;
    this.givePoints = givePoints;
    setGivePointsIsSet(true);
    this.remark = remark;
    this.isQrcode = isQrcode;
    setIsQrcodeIsSet(true);
    this.orderId = orderId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderVo(OrderVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memberCode = other.memberCode;
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    this.paymentTime = other.paymentTime;
    this.merchantUserId = other.merchantUserId;
    this.totalPrice = other.totalPrice;
    this.pointType = other.pointType;
    this.points = other.points;
    this.realPrice = other.realPrice;
    if (other.isSetPointRate()) {
      this.pointRate = other.pointRate;
    }
    this.givePoints = other.givePoints;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.isQrcode = other.isQrcode;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.createTime = other.createTime;
  }

  public OrderVo deepCopy() {
    return new OrderVo(this);
  }

  @Override
  public void clear() {
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.orderStatus = null;
    this.clientId = null;
    this.paymentMethod = null;
    this.createSource = null;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    setMerchantUserIdIsSet(false);
    this.merchantUserId = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setPointTypeIsSet(false);
    this.pointType = 0;
    setPointsIsSet(false);
    this.points = 0.0;
    setRealPriceIsSet(false);
    this.realPrice = 0.0;
    this.pointRate = null;
    setGivePointsIsSet(false);
    this.givePoints = 0.0;
    this.remark = null;
    setIsQrcodeIsSet(false);
    this.isQrcode = 0;
    this.orderId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  /**
   * 用户编号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 用户编号
   */
  public OrderVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public OrderVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 所属客户端
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 所属客户端
   */
  public OrderVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式
   */
  public OrderVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public OrderVo setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间
   */
  public OrderVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 收银交易操作人
   */
  public long getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 收银交易操作人
   */
  public OrderVo setMerchantUserId(long merchantUserId) {
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    return this;
  }

  public void unsetMerchantUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  public void setMerchantUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID, value);
  }

  /**
   * 总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总金额
   */
  public OrderVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 积分类型
   */
  public int getPointType() {
    return this.pointType;
  }

  /**
   * 积分类型
   */
  public OrderVo setPointType(int pointType) {
    this.pointType = pointType;
    setPointTypeIsSet(true);
    return this;
  }

  public void unsetPointType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTTYPE_ISSET_ID);
  }

  /** Returns true if field pointType is set (has been assigned a value) and false otherwise */
  public boolean isSetPointType() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTTYPE_ISSET_ID);
  }

  public void setPointTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTTYPE_ISSET_ID, value);
  }

  /**
   * 积分金额
   */
  public double getPoints() {
    return this.points;
  }

  /**
   * 积分金额
   */
  public OrderVo setPoints(double points) {
    this.points = points;
    setPointsIsSet(true);
    return this;
  }

  public void unsetPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
  }

  public void setPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
  }

  /**
   * 现金金额
   */
  public double getRealPrice() {
    return this.realPrice;
  }

  /**
   * 现金金额
   */
  public OrderVo setRealPrice(double realPrice) {
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    return this;
  }

  public void unsetRealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  /** Returns true if field realPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  public void setRealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALPRICE_ISSET_ID, value);
  }

  /**
   * 积分兑换比例
   */
  public String getPointRate() {
    return this.pointRate;
  }

  /**
   * 积分兑换比例
   */
  public OrderVo setPointRate(String pointRate) {
    this.pointRate = pointRate;
    return this;
  }

  public void unsetPointRate() {
    this.pointRate = null;
  }

  /** Returns true if field pointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRate() {
    return this.pointRate != null;
  }

  public void setPointRateIsSet(boolean value) {
    if (!value) {
      this.pointRate = null;
    }
  }

  /**
   * 赠送积分数
   */
  public double getGivePoints() {
    return this.givePoints;
  }

  /**
   * 赠送积分数
   */
  public OrderVo setGivePoints(double givePoints) {
    this.givePoints = givePoints;
    setGivePointsIsSet(true);
    return this;
  }

  public void unsetGivePoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID);
  }

  /** Returns true if field givePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetGivePoints() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID);
  }

  public void setGivePointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEPOINTS_ISSET_ID, value);
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public OrderVo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 是否面对面-面对面没有详细内容
   */
  public int getIsQrcode() {
    return this.isQrcode;
  }

  /**
   * 是否面对面-面对面没有详细内容
   */
  public OrderVo setIsQrcode(int isQrcode) {
    this.isQrcode = isQrcode;
    setIsQrcodeIsSet(true);
    return this;
  }

  public void unsetIsQrcode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISQRCODE_ISSET_ID);
  }

  /** Returns true if field isQrcode is set (has been assigned a value) and false otherwise */
  public boolean isSetIsQrcode() {
    return EncodingUtils.testBit(__isset_bitfield, __ISQRCODE_ISSET_ID);
  }

  public void setIsQrcodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISQRCODE_ISSET_ID, value);
  }

  /**
   * 订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单号
   */
  public OrderVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public OrderVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((Long)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case POINT_TYPE:
      if (value == null) {
        unsetPointType();
      } else {
        setPointType((Integer)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Double)value);
      }
      break;

    case REAL_PRICE:
      if (value == null) {
        unsetRealPrice();
      } else {
        setRealPrice((Double)value);
      }
      break;

    case POINT_RATE:
      if (value == null) {
        unsetPointRate();
      } else {
        setPointRate((String)value);
      }
      break;

    case GIVE_POINTS:
      if (value == null) {
        unsetGivePoints();
      } else {
        setGivePoints((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case IS_QRCODE:
      if (value == null) {
        unsetIsQrcode();
      } else {
        setIsQrcode((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case ORDER_STATUS:
      return getOrderStatus();

    case CLIENT_ID:
      return getClientId();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case CREATE_SOURCE:
      return getCreateSource();

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case MERCHANT_USER_ID:
      return Long.valueOf(getMerchantUserId());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case POINT_TYPE:
      return Integer.valueOf(getPointType());

    case POINTS:
      return Double.valueOf(getPoints());

    case REAL_PRICE:
      return Double.valueOf(getRealPrice());

    case POINT_RATE:
      return getPointRate();

    case GIVE_POINTS:
      return Double.valueOf(getGivePoints());

    case REMARK:
      return getRemark();

    case IS_QRCODE:
      return Integer.valueOf(getIsQrcode());

    case ORDER_ID:
      return getOrderId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_CODE:
      return isSetMemberCode();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case CLIENT_ID:
      return isSetClientId();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case POINT_TYPE:
      return isSetPointType();
    case POINTS:
      return isSetPoints();
    case REAL_PRICE:
      return isSetRealPrice();
    case POINT_RATE:
      return isSetPointRate();
    case GIVE_POINTS:
      return isSetGivePoints();
    case REMARK:
      return isSetRemark();
    case IS_QRCODE:
      return isSetIsQrcode();
    case ORDER_ID:
      return isSetOrderId();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderVo)
      return this.equals((OrderVo)that);
    return false;
  }

  public boolean equals(OrderVo that) {
    if (that == null)
      return false;

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_merchantUserId = true;
    boolean that_present_merchantUserId = true;
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (this.merchantUserId != that.merchantUserId)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_pointType = true;
    boolean that_present_pointType = true;
    if (this_present_pointType || that_present_pointType) {
      if (!(this_present_pointType && that_present_pointType))
        return false;
      if (this.pointType != that.pointType)
        return false;
    }

    boolean this_present_points = true;
    boolean that_present_points = true;
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (this.points != that.points)
        return false;
    }

    boolean this_present_realPrice = true;
    boolean that_present_realPrice = true;
    if (this_present_realPrice || that_present_realPrice) {
      if (!(this_present_realPrice && that_present_realPrice))
        return false;
      if (this.realPrice != that.realPrice)
        return false;
    }

    boolean this_present_pointRate = true && this.isSetPointRate();
    boolean that_present_pointRate = true && that.isSetPointRate();
    if (this_present_pointRate || that_present_pointRate) {
      if (!(this_present_pointRate && that_present_pointRate))
        return false;
      if (!this.pointRate.equals(that.pointRate))
        return false;
    }

    boolean this_present_givePoints = true;
    boolean that_present_givePoints = true;
    if (this_present_givePoints || that_present_givePoints) {
      if (!(this_present_givePoints && that_present_givePoints))
        return false;
      if (this.givePoints != that.givePoints)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_isQrcode = true;
    boolean that_present_isQrcode = true;
    if (this_present_isQrcode || that_present_isQrcode) {
      if (!(this_present_isQrcode && that_present_isQrcode))
        return false;
      if (this.isQrcode != that.isQrcode)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_merchantUserId = true;
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_pointType = true;
    list.add(present_pointType);
    if (present_pointType)
      list.add(pointType);

    boolean present_points = true;
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_realPrice = true;
    list.add(present_realPrice);
    if (present_realPrice)
      list.add(realPrice);

    boolean present_pointRate = true && (isSetPointRate());
    list.add(present_pointRate);
    if (present_pointRate)
      list.add(pointRate);

    boolean present_givePoints = true;
    list.add(present_givePoints);
    if (present_givePoints)
      list.add(givePoints);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_isQrcode = true;
    list.add(present_isQrcode);
    if (present_isQrcode)
      list.add(isQrcode);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointType()).compareTo(other.isSetPointType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointType, other.pointType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealPrice()).compareTo(other.isSetRealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realPrice, other.realPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRate()).compareTo(other.isSetPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRate, other.pointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGivePoints()).compareTo(other.isSetGivePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGivePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.givePoints, other.givePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsQrcode()).compareTo(other.isSetIsQrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsQrcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isQrcode, other.isQrcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderVo(");
    boolean first = true;

    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    sb.append(this.merchantUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointType:");
    sb.append(this.pointType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("points:");
    sb.append(this.points);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realPrice:");
    sb.append(this.realPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointRate:");
    if (this.pointRate == null) {
      sb.append("null");
    } else {
      sb.append(this.pointRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("givePoints:");
    sb.append(this.givePoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isQrcode:");
    sb.append(this.isQrcode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderVoStandardSchemeFactory implements SchemeFactory {
    public OrderVoStandardScheme getScheme() {
      return new OrderVoStandardScheme();
    }
  }

  private static class OrderVoStandardScheme extends StandardScheme<OrderVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantUserId = iprot.readI64();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointType = iprot.readI32();
              struct.setPointTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.points = iprot.readDouble();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realPrice = iprot.readDouble();
              struct.setRealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointRate = iprot.readString();
              struct.setPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GIVE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.givePoints = iprot.readDouble();
              struct.setGivePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_QRCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isQrcode = iprot.readI32();
              struct.setIsQrcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.pointType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINTS_FIELD_DESC);
      oprot.writeDouble(struct.points);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.realPrice);
      oprot.writeFieldEnd();
      if (struct.pointRate != null) {
        oprot.writeFieldBegin(POINT_RATE_FIELD_DESC);
        oprot.writeString(struct.pointRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.givePoints);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_QRCODE_FIELD_DESC);
      oprot.writeI32(struct.isQrcode);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderVoTupleSchemeFactory implements SchemeFactory {
    public OrderVoTupleScheme getScheme() {
      return new OrderVoTupleScheme();
    }
  }

  private static class OrderVoTupleScheme extends TupleScheme<OrderVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemberCode()) {
        optionals.set(0);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(1);
      }
      if (struct.isSetClientId()) {
        optionals.set(2);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(3);
      }
      if (struct.isSetCreateSource()) {
        optionals.set(4);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(5);
      }
      if (struct.isSetMerchantUserId()) {
        optionals.set(6);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(7);
      }
      if (struct.isSetPointType()) {
        optionals.set(8);
      }
      if (struct.isSetPoints()) {
        optionals.set(9);
      }
      if (struct.isSetRealPrice()) {
        optionals.set(10);
      }
      if (struct.isSetPointRate()) {
        optionals.set(11);
      }
      if (struct.isSetGivePoints()) {
        optionals.set(12);
      }
      if (struct.isSetRemark()) {
        optionals.set(13);
      }
      if (struct.isSetIsQrcode()) {
        optionals.set(14);
      }
      if (struct.isSetOrderId()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetCreateSource()) {
        oprot.writeString(struct.createSource);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetMerchantUserId()) {
        oprot.writeI64(struct.merchantUserId);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetPointType()) {
        oprot.writeI32(struct.pointType);
      }
      if (struct.isSetPoints()) {
        oprot.writeDouble(struct.points);
      }
      if (struct.isSetRealPrice()) {
        oprot.writeDouble(struct.realPrice);
      }
      if (struct.isSetPointRate()) {
        oprot.writeString(struct.pointRate);
      }
      if (struct.isSetGivePoints()) {
        oprot.writeDouble(struct.givePoints);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetIsQrcode()) {
        oprot.writeI32(struct.isQrcode);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createSource = iprot.readString();
        struct.setCreateSourceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.merchantUserId = iprot.readI64();
        struct.setMerchantUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pointType = iprot.readI32();
        struct.setPointTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.points = iprot.readDouble();
        struct.setPointsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.realPrice = iprot.readDouble();
        struct.setRealPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pointRate = iprot.readString();
        struct.setPointRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.givePoints = iprot.readDouble();
        struct.setGivePointsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isQrcode = iprot.readI32();
        struct.setIsQrcodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

