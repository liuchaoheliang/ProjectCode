/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersRuleInfoService {

  /**
   * 代金券规则信息 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 VouchersRuleInfo
     * 
     * @param originVo
     * @param vouchersRuleInfoVo
     */
    public com.froad.thrift.vo.active.AddResultVo addVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 禁用 VouchersRuleInfo
     * 
     * @param originVo
     * @param clientId
     * @param activeId
     * @param operator
     */
    public com.froad.thrift.vo.ResultVo disableVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException;

    /**
     * 修改 VouchersRuleInfo
     * 
     * @param originVo
     * @param vouchersRuleInfoVo
     */
    public com.froad.thrift.vo.ResultVo updateVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 VouchersRuleInfo 列表
     * 
     * @param vouchersRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo getActiveRuleInfo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 VouchersRuleInfo
     * 
     * @param page
     * @param vouchersRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 VouchersRuleInfo 单个
     * 
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 下载红包劵码明细信息
     * 
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.ExportVouchersDetailInfo exportVouchersDetailInfo(String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 保存红包券码临时信息
     * 
     * @param originVo
     * @param temporaryVouchersDetailInfoVO
     */
    public com.froad.thrift.vo.active.AddResultVo addTemporaryVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disableVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportVouchersDetailInfo(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTemporaryVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.AddResultVo addVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      send_addVouchersRuleInfo(originVo, vouchersRuleInfoVo);
      return recv_addVouchersRuleInfo();
    }

    public void send_addVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      addVouchersRuleInfo_args args = new addVouchersRuleInfo_args();
      args.setOriginVo(originVo);
      args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
      sendBase("addVouchersRuleInfo", args);
    }

    public com.froad.thrift.vo.active.AddResultVo recv_addVouchersRuleInfo() throws org.apache.thrift.TException
    {
      addVouchersRuleInfo_result result = new addVouchersRuleInfo_result();
      receiveBase(result, "addVouchersRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVouchersRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo disableVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      send_disableVouchersRuleInfo(originVo, clientId, activeId, operator);
      return recv_disableVouchersRuleInfo();
    }

    public void send_disableVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      disableVouchersRuleInfo_args args = new disableVouchersRuleInfo_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setActiveId(activeId);
      args.setOperator(operator);
      sendBase("disableVouchersRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_disableVouchersRuleInfo() throws org.apache.thrift.TException
    {
      disableVouchersRuleInfo_result result = new disableVouchersRuleInfo_result();
      receiveBase(result, "disableVouchersRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disableVouchersRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      send_updateVouchersRuleInfo(originVo, vouchersRuleInfoVo);
      return recv_updateVouchersRuleInfo();
    }

    public void send_updateVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      updateVouchersRuleInfo_args args = new updateVouchersRuleInfo_args();
      args.setOriginVo(originVo);
      args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
      sendBase("updateVouchersRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateVouchersRuleInfo() throws org.apache.thrift.TException
    {
      updateVouchersRuleInfo_result result = new updateVouchersRuleInfo_result();
      receiveBase(result, "updateVouchersRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVouchersRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo getActiveRuleInfo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfo(vouchersRuleInfoVo);
      return recv_getActiveRuleInfo();
    }

    public void send_getActiveRuleInfo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      getActiveRuleInfo_args args = new getActiveRuleInfo_args();
      args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
      sendBase("getActiveRuleInfo", args);
    }

    public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo recv_getActiveRuleInfo() throws org.apache.thrift.TException
    {
      getActiveRuleInfo_result result = new getActiveRuleInfo_result();
      receiveBase(result, "getActiveRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfoByPage(page, vouchersRuleInfoVo);
      return recv_getActiveRuleInfoByPage();
    }

    public void send_getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) throws org.apache.thrift.TException
    {
      getActiveRuleInfoByPage_args args = new getActiveRuleInfoByPage_args();
      args.setPage(page);
      args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
      sendBase("getActiveRuleInfoByPage", args);
    }

    public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo recv_getActiveRuleInfoByPage() throws org.apache.thrift.TException
    {
      getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
      receiveBase(result, "getActiveRuleInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfoById(clientId, activeId);
      return recv_getActiveRuleInfoById();
    }

    public void send_getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      getActiveRuleInfoById_args args = new getActiveRuleInfoById_args();
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("getActiveRuleInfoById", args);
    }

    public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo recv_getActiveRuleInfoById() throws org.apache.thrift.TException
    {
      getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
      receiveBase(result, "getActiveRuleInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfoById failed: unknown result");
    }

    public com.froad.thrift.vo.active.ExportVouchersDetailInfo exportVouchersDetailInfo(String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_exportVouchersDetailInfo(clientId, activeId);
      return recv_exportVouchersDetailInfo();
    }

    public void send_exportVouchersDetailInfo(String clientId, String activeId) throws org.apache.thrift.TException
    {
      exportVouchersDetailInfo_args args = new exportVouchersDetailInfo_args();
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("exportVouchersDetailInfo", args);
    }

    public com.froad.thrift.vo.active.ExportVouchersDetailInfo recv_exportVouchersDetailInfo() throws org.apache.thrift.TException
    {
      exportVouchersDetailInfo_result result = new exportVouchersDetailInfo_result();
      receiveBase(result, "exportVouchersDetailInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportVouchersDetailInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.AddResultVo addTemporaryVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO) throws org.apache.thrift.TException
    {
      send_addTemporaryVouchersRuleInfo(originVo, temporaryVouchersDetailInfoVO);
      return recv_addTemporaryVouchersRuleInfo();
    }

    public void send_addTemporaryVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO) throws org.apache.thrift.TException
    {
      addTemporaryVouchersRuleInfo_args args = new addTemporaryVouchersRuleInfo_args();
      args.setOriginVo(originVo);
      args.setTemporaryVouchersDetailInfoVO(temporaryVouchersDetailInfoVO);
      sendBase("addTemporaryVouchersRuleInfo", args);
    }

    public com.froad.thrift.vo.active.AddResultVo recv_addTemporaryVouchersRuleInfo() throws org.apache.thrift.TException
    {
      addTemporaryVouchersRuleInfo_result result = new addTemporaryVouchersRuleInfo_result();
      receiveBase(result, "addTemporaryVouchersRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTemporaryVouchersRuleInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVouchersRuleInfo_call method_call = new addVouchersRuleInfo_call(originVo, vouchersRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVouchersRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo;
      public addVouchersRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVouchersRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVouchersRuleInfo_args args = new addVouchersRuleInfo_args();
        args.setOriginVo(originVo);
        args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVouchersRuleInfo();
      }
    }

    public void disableVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disableVouchersRuleInfo_call method_call = new disableVouchersRuleInfo_call(originVo, clientId, activeId, operator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disableVouchersRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private String activeId;
      private String operator;
      public disableVouchersRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.activeId = activeId;
        this.operator = operator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableVouchersRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disableVouchersRuleInfo_args args = new disableVouchersRuleInfo_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.setOperator(operator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disableVouchersRuleInfo();
      }
    }

    public void updateVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVouchersRuleInfo_call method_call = new updateVouchersRuleInfo_call(originVo, vouchersRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVouchersRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo;
      public updateVouchersRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVouchersRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVouchersRuleInfo_args args = new updateVouchersRuleInfo_args();
        args.setOriginVo(originVo);
        args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVouchersRuleInfo();
      }
    }

    public void getActiveRuleInfo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfo_call method_call = new getActiveRuleInfo_call(vouchersRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo;
      public getActiveRuleInfo_call(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfo_args args = new getActiveRuleInfo_args();
        args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfo();
      }
    }

    public void getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfoByPage_call method_call = new getActiveRuleInfoByPage_call(page, vouchersRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo;
      public getActiveRuleInfoByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfoByPage_args args = new getActiveRuleInfoByPage_args();
        args.setPage(page);
        args.setVouchersRuleInfoVo(vouchersRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfoByPage();
      }
    }

    public void getActiveRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfoById_call method_call = new getActiveRuleInfoById_call(clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String activeId;
      public getActiveRuleInfoById_call(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfoById_args args = new getActiveRuleInfoById_args();
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfoById();
      }
    }

    public void exportVouchersDetailInfo(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportVouchersDetailInfo_call method_call = new exportVouchersDetailInfo_call(clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportVouchersDetailInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String activeId;
      public exportVouchersDetailInfo_call(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportVouchersDetailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportVouchersDetailInfo_args args = new exportVouchersDetailInfo_args();
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.ExportVouchersDetailInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportVouchersDetailInfo();
      }
    }

    public void addTemporaryVouchersRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTemporaryVouchersRuleInfo_call method_call = new addTemporaryVouchersRuleInfo_call(originVo, temporaryVouchersDetailInfoVO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTemporaryVouchersRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO;
      public addTemporaryVouchersRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.temporaryVouchersDetailInfoVO = temporaryVouchersDetailInfoVO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTemporaryVouchersRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTemporaryVouchersRuleInfo_args args = new addTemporaryVouchersRuleInfo_args();
        args.setOriginVo(originVo);
        args.setTemporaryVouchersDetailInfoVO(temporaryVouchersDetailInfoVO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTemporaryVouchersRuleInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addVouchersRuleInfo", new addVouchersRuleInfo());
      processMap.put("disableVouchersRuleInfo", new disableVouchersRuleInfo());
      processMap.put("updateVouchersRuleInfo", new updateVouchersRuleInfo());
      processMap.put("getActiveRuleInfo", new getActiveRuleInfo());
      processMap.put("getActiveRuleInfoByPage", new getActiveRuleInfoByPage());
      processMap.put("getActiveRuleInfoById", new getActiveRuleInfoById());
      processMap.put("exportVouchersDetailInfo", new exportVouchersDetailInfo());
      processMap.put("addTemporaryVouchersRuleInfo", new addTemporaryVouchersRuleInfo());
      return processMap;
    }

    public static class addVouchersRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVouchersRuleInfo_args> {
      public addVouchersRuleInfo() {
        super("addVouchersRuleInfo");
      }

      public addVouchersRuleInfo_args getEmptyArgsInstance() {
        return new addVouchersRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVouchersRuleInfo_result getResult(I iface, addVouchersRuleInfo_args args) throws org.apache.thrift.TException {
        addVouchersRuleInfo_result result = new addVouchersRuleInfo_result();
        result.success = iface.addVouchersRuleInfo(args.originVo, args.vouchersRuleInfoVo);
        return result;
      }
    }

    public static class disableVouchersRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disableVouchersRuleInfo_args> {
      public disableVouchersRuleInfo() {
        super("disableVouchersRuleInfo");
      }

      public disableVouchersRuleInfo_args getEmptyArgsInstance() {
        return new disableVouchersRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disableVouchersRuleInfo_result getResult(I iface, disableVouchersRuleInfo_args args) throws org.apache.thrift.TException {
        disableVouchersRuleInfo_result result = new disableVouchersRuleInfo_result();
        result.success = iface.disableVouchersRuleInfo(args.originVo, args.clientId, args.activeId, args.operator);
        return result;
      }
    }

    public static class updateVouchersRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVouchersRuleInfo_args> {
      public updateVouchersRuleInfo() {
        super("updateVouchersRuleInfo");
      }

      public updateVouchersRuleInfo_args getEmptyArgsInstance() {
        return new updateVouchersRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVouchersRuleInfo_result getResult(I iface, updateVouchersRuleInfo_args args) throws org.apache.thrift.TException {
        updateVouchersRuleInfo_result result = new updateVouchersRuleInfo_result();
        result.success = iface.updateVouchersRuleInfo(args.originVo, args.vouchersRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfo_args> {
      public getActiveRuleInfo() {
        super("getActiveRuleInfo");
      }

      public getActiveRuleInfo_args getEmptyArgsInstance() {
        return new getActiveRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfo_result getResult(I iface, getActiveRuleInfo_args args) throws org.apache.thrift.TException {
        getActiveRuleInfo_result result = new getActiveRuleInfo_result();
        result.success = iface.getActiveRuleInfo(args.vouchersRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfoByPage_args> {
      public getActiveRuleInfoByPage() {
        super("getActiveRuleInfoByPage");
      }

      public getActiveRuleInfoByPage_args getEmptyArgsInstance() {
        return new getActiveRuleInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfoByPage_result getResult(I iface, getActiveRuleInfoByPage_args args) throws org.apache.thrift.TException {
        getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
        result.success = iface.getActiveRuleInfoByPage(args.page, args.vouchersRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfoById_args> {
      public getActiveRuleInfoById() {
        super("getActiveRuleInfoById");
      }

      public getActiveRuleInfoById_args getEmptyArgsInstance() {
        return new getActiveRuleInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfoById_result getResult(I iface, getActiveRuleInfoById_args args) throws org.apache.thrift.TException {
        getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
        result.success = iface.getActiveRuleInfoById(args.clientId, args.activeId);
        return result;
      }
    }

    public static class exportVouchersDetailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportVouchersDetailInfo_args> {
      public exportVouchersDetailInfo() {
        super("exportVouchersDetailInfo");
      }

      public exportVouchersDetailInfo_args getEmptyArgsInstance() {
        return new exportVouchersDetailInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportVouchersDetailInfo_result getResult(I iface, exportVouchersDetailInfo_args args) throws org.apache.thrift.TException {
        exportVouchersDetailInfo_result result = new exportVouchersDetailInfo_result();
        result.success = iface.exportVouchersDetailInfo(args.clientId, args.activeId);
        return result;
      }
    }

    public static class addTemporaryVouchersRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTemporaryVouchersRuleInfo_args> {
      public addTemporaryVouchersRuleInfo() {
        super("addTemporaryVouchersRuleInfo");
      }

      public addTemporaryVouchersRuleInfo_args getEmptyArgsInstance() {
        return new addTemporaryVouchersRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTemporaryVouchersRuleInfo_result getResult(I iface, addTemporaryVouchersRuleInfo_args args) throws org.apache.thrift.TException {
        addTemporaryVouchersRuleInfo_result result = new addTemporaryVouchersRuleInfo_result();
        result.success = iface.addTemporaryVouchersRuleInfo(args.originVo, args.temporaryVouchersDetailInfoVO);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addVouchersRuleInfo", new addVouchersRuleInfo());
      processMap.put("disableVouchersRuleInfo", new disableVouchersRuleInfo());
      processMap.put("updateVouchersRuleInfo", new updateVouchersRuleInfo());
      processMap.put("getActiveRuleInfo", new getActiveRuleInfo());
      processMap.put("getActiveRuleInfoByPage", new getActiveRuleInfoByPage());
      processMap.put("getActiveRuleInfoById", new getActiveRuleInfoById());
      processMap.put("exportVouchersDetailInfo", new exportVouchersDetailInfo());
      processMap.put("addTemporaryVouchersRuleInfo", new addTemporaryVouchersRuleInfo());
      return processMap;
    }

    public static class addVouchersRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVouchersRuleInfo_args, com.froad.thrift.vo.active.AddResultVo> {
      public addVouchersRuleInfo() {
        super("addVouchersRuleInfo");
      }

      public addVouchersRuleInfo_args getEmptyArgsInstance() {
        return new addVouchersRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.AddResultVo o) {
            addVouchersRuleInfo_result result = new addVouchersRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVouchersRuleInfo_result result = new addVouchersRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVouchersRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> resultHandler) throws TException {
        iface.addVouchersRuleInfo(args.originVo, args.vouchersRuleInfoVo,resultHandler);
      }
    }

    public static class disableVouchersRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disableVouchersRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public disableVouchersRuleInfo() {
        super("disableVouchersRuleInfo");
      }

      public disableVouchersRuleInfo_args getEmptyArgsInstance() {
        return new disableVouchersRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            disableVouchersRuleInfo_result result = new disableVouchersRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disableVouchersRuleInfo_result result = new disableVouchersRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disableVouchersRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.disableVouchersRuleInfo(args.originVo, args.clientId, args.activeId, args.operator,resultHandler);
      }
    }

    public static class updateVouchersRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVouchersRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public updateVouchersRuleInfo() {
        super("updateVouchersRuleInfo");
      }

      public updateVouchersRuleInfo_args getEmptyArgsInstance() {
        return new updateVouchersRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateVouchersRuleInfo_result result = new updateVouchersRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVouchersRuleInfo_result result = new updateVouchersRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVouchersRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateVouchersRuleInfo(args.originVo, args.vouchersRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfo_args, com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo> {
      public getActiveRuleInfo() {
        super("getActiveRuleInfo");
      }

      public getActiveRuleInfo_args getEmptyArgsInstance() {
        return new getActiveRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo o) {
            getActiveRuleInfo_result result = new getActiveRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfo_result result = new getActiveRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfo(args.vouchersRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfoByPage_args, com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo> {
      public getActiveRuleInfoByPage() {
        super("getActiveRuleInfoByPage");
      }

      public getActiveRuleInfoByPage_args getEmptyArgsInstance() {
        return new getActiveRuleInfoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo o) {
            getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfoByPage(args.page, args.vouchersRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfoById_args, com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo> {
      public getActiveRuleInfoById() {
        super("getActiveRuleInfoById");
      }

      public getActiveRuleInfoById_args getEmptyArgsInstance() {
        return new getActiveRuleInfoById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo o) {
            getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfoById(args.clientId, args.activeId,resultHandler);
      }
    }

    public static class exportVouchersDetailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportVouchersDetailInfo_args, com.froad.thrift.vo.active.ExportVouchersDetailInfo> {
      public exportVouchersDetailInfo() {
        super("exportVouchersDetailInfo");
      }

      public exportVouchersDetailInfo_args getEmptyArgsInstance() {
        return new exportVouchersDetailInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.ExportVouchersDetailInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.ExportVouchersDetailInfo>() { 
          public void onComplete(com.froad.thrift.vo.active.ExportVouchersDetailInfo o) {
            exportVouchersDetailInfo_result result = new exportVouchersDetailInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportVouchersDetailInfo_result result = new exportVouchersDetailInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportVouchersDetailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.ExportVouchersDetailInfo> resultHandler) throws TException {
        iface.exportVouchersDetailInfo(args.clientId, args.activeId,resultHandler);
      }
    }

    public static class addTemporaryVouchersRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTemporaryVouchersRuleInfo_args, com.froad.thrift.vo.active.AddResultVo> {
      public addTemporaryVouchersRuleInfo() {
        super("addTemporaryVouchersRuleInfo");
      }

      public addTemporaryVouchersRuleInfo_args getEmptyArgsInstance() {
        return new addTemporaryVouchersRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.AddResultVo o) {
            addTemporaryVouchersRuleInfo_result result = new addTemporaryVouchersRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTemporaryVouchersRuleInfo_result result = new addTemporaryVouchersRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTemporaryVouchersRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> resultHandler) throws TException {
        iface.addTemporaryVouchersRuleInfo(args.originVo, args.temporaryVouchersDetailInfoVO,resultHandler);
      }
    }

  }

  public static class addVouchersRuleInfo_args implements org.apache.thrift.TBase<addVouchersRuleInfo_args, addVouchersRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVouchersRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVouchersRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VOUCHERS_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVouchersRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVouchersRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VOUCHERS_RULE_INFO_VO((short)2, "vouchersRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VOUCHERS_RULE_INFO_VO
            return VOUCHERS_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VOUCHERS_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("vouchersRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.VouchersRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVouchersRuleInfo_args.class, metaDataMap);
    }

    public addVouchersRuleInfo_args() {
    }

    public addVouchersRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVouchersRuleInfo_args(addVouchersRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVouchersRuleInfoVo()) {
        this.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo(other.vouchersRuleInfoVo);
      }
    }

    public addVouchersRuleInfo_args deepCopy() {
      return new addVouchersRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vouchersRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addVouchersRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.VouchersRuleInfoVo getVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo;
    }

    public addVouchersRuleInfo_args setVouchersRuleInfoVo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) {
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      return this;
    }

    public void unsetVouchersRuleInfoVo() {
      this.vouchersRuleInfoVo = null;
    }

    /** Returns true if field vouchersRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo != null;
    }

    public void setVouchersRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.vouchersRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VOUCHERS_RULE_INFO_VO:
        if (value == null) {
          unsetVouchersRuleInfoVo();
        } else {
          setVouchersRuleInfoVo((com.froad.thrift.vo.active.VouchersRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VOUCHERS_RULE_INFO_VO:
        return getVouchersRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VOUCHERS_RULE_INFO_VO:
        return isSetVouchersRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVouchersRuleInfo_args)
        return this.equals((addVouchersRuleInfo_args)that);
      return false;
    }

    public boolean equals(addVouchersRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vouchersRuleInfoVo = true && this.isSetVouchersRuleInfoVo();
      boolean that_present_vouchersRuleInfoVo = true && that.isSetVouchersRuleInfoVo();
      if (this_present_vouchersRuleInfoVo || that_present_vouchersRuleInfoVo) {
        if (!(this_present_vouchersRuleInfoVo && that_present_vouchersRuleInfoVo))
          return false;
        if (!this.vouchersRuleInfoVo.equals(that.vouchersRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vouchersRuleInfoVo = true && (isSetVouchersRuleInfoVo());
      list.add(present_vouchersRuleInfoVo);
      if (present_vouchersRuleInfoVo)
        list.add(vouchersRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVouchersRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVouchersRuleInfoVo()).compareTo(other.isSetVouchersRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVouchersRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersRuleInfoVo, other.vouchersRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVouchersRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vouchersRuleInfoVo:");
      if (this.vouchersRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (vouchersRuleInfoVo != null) {
        vouchersRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVouchersRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addVouchersRuleInfo_argsStandardScheme getScheme() {
        return new addVouchersRuleInfo_argsStandardScheme();
      }
    }

    private static class addVouchersRuleInfo_argsStandardScheme extends StandardScheme<addVouchersRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOUCHERS_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
                struct.vouchersRuleInfoVo.read(iprot);
                struct.setVouchersRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vouchersRuleInfoVo != null) {
          oprot.writeFieldBegin(VOUCHERS_RULE_INFO_VO_FIELD_DESC);
          struct.vouchersRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVouchersRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addVouchersRuleInfo_argsTupleScheme getScheme() {
        return new addVouchersRuleInfo_argsTupleScheme();
      }
    }

    private static class addVouchersRuleInfo_argsTupleScheme extends TupleScheme<addVouchersRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          struct.vouchersRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
          struct.vouchersRuleInfoVo.read(iprot);
          struct.setVouchersRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addVouchersRuleInfo_result implements org.apache.thrift.TBase<addVouchersRuleInfo_result, addVouchersRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVouchersRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVouchersRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVouchersRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVouchersRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVouchersRuleInfo_result.class, metaDataMap);
    }

    public addVouchersRuleInfo_result() {
    }

    public addVouchersRuleInfo_result(
      com.froad.thrift.vo.active.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVouchersRuleInfo_result(addVouchersRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.AddResultVo(other.success);
      }
    }

    public addVouchersRuleInfo_result deepCopy() {
      return new addVouchersRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.AddResultVo getSuccess() {
      return this.success;
    }

    public addVouchersRuleInfo_result setSuccess(com.froad.thrift.vo.active.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVouchersRuleInfo_result)
        return this.equals((addVouchersRuleInfo_result)that);
      return false;
    }

    public boolean equals(addVouchersRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVouchersRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVouchersRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVouchersRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addVouchersRuleInfo_resultStandardScheme getScheme() {
        return new addVouchersRuleInfo_resultStandardScheme();
      }
    }

    private static class addVouchersRuleInfo_resultStandardScheme extends StandardScheme<addVouchersRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVouchersRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addVouchersRuleInfo_resultTupleScheme getScheme() {
        return new addVouchersRuleInfo_resultTupleScheme();
      }
    }

    private static class addVouchersRuleInfo_resultTupleScheme extends TupleScheme<addVouchersRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disableVouchersRuleInfo_args implements org.apache.thrift.TBase<disableVouchersRuleInfo_args, disableVouchersRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<disableVouchersRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableVouchersRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableVouchersRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableVouchersRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public String activeId; // required
    public String operator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ACTIVE_ID((short)3, "activeId"),
      OPERATOR((short)4, "operator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ACTIVE_ID
            return ACTIVE_ID;
          case 4: // OPERATOR
            return OPERATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableVouchersRuleInfo_args.class, metaDataMap);
    }

    public disableVouchersRuleInfo_args() {
    }

    public disableVouchersRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      String activeId,
      String operator)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.activeId = activeId;
      this.operator = operator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableVouchersRuleInfo_args(disableVouchersRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
      if (other.isSetOperator()) {
        this.operator = other.operator;
      }
    }

    public disableVouchersRuleInfo_args deepCopy() {
      return new disableVouchersRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.activeId = null;
      this.operator = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public disableVouchersRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public disableVouchersRuleInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public disableVouchersRuleInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public String getOperator() {
      return this.operator;
    }

    public disableVouchersRuleInfo_args setOperator(String operator) {
      this.operator = operator;
      return this;
    }

    public void unsetOperator() {
      this.operator = null;
    }

    /** Returns true if field operator is set (has been assigned a value) and false otherwise */
    public boolean isSetOperator() {
      return this.operator != null;
    }

    public void setOperatorIsSet(boolean value) {
      if (!value) {
        this.operator = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      case OPERATOR:
        if (value == null) {
          unsetOperator();
        } else {
          setOperator((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      case OPERATOR:
        return getOperator();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      case OPERATOR:
        return isSetOperator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableVouchersRuleInfo_args)
        return this.equals((disableVouchersRuleInfo_args)that);
      return false;
    }

    public boolean equals(disableVouchersRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      boolean this_present_operator = true && this.isSetOperator();
      boolean that_present_operator = true && that.isSetOperator();
      if (this_present_operator || that_present_operator) {
        if (!(this_present_operator && that_present_operator))
          return false;
        if (!this.operator.equals(that.operator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      boolean present_operator = true && (isSetOperator());
      list.add(present_operator);
      if (present_operator)
        list.add(operator);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableVouchersRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableVouchersRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableVouchersRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public disableVouchersRuleInfo_argsStandardScheme getScheme() {
        return new disableVouchersRuleInfo_argsStandardScheme();
      }
    }

    private static class disableVouchersRuleInfo_argsStandardScheme extends StandardScheme<disableVouchersRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPERATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operator = iprot.readString();
                struct.setOperatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        if (struct.operator != null) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          oprot.writeString(struct.operator);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableVouchersRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public disableVouchersRuleInfo_argsTupleScheme getScheme() {
        return new disableVouchersRuleInfo_argsTupleScheme();
      }
    }

    private static class disableVouchersRuleInfo_argsTupleScheme extends TupleScheme<disableVouchersRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetActiveId()) {
          optionals.set(2);
        }
        if (struct.isSetOperator()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
        if (struct.isSetOperator()) {
          oprot.writeString(struct.operator);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.operator = iprot.readString();
          struct.setOperatorIsSet(true);
        }
      }
    }

  }

  public static class disableVouchersRuleInfo_result implements org.apache.thrift.TBase<disableVouchersRuleInfo_result, disableVouchersRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<disableVouchersRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableVouchersRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableVouchersRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableVouchersRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableVouchersRuleInfo_result.class, metaDataMap);
    }

    public disableVouchersRuleInfo_result() {
    }

    public disableVouchersRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableVouchersRuleInfo_result(disableVouchersRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public disableVouchersRuleInfo_result deepCopy() {
      return new disableVouchersRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public disableVouchersRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableVouchersRuleInfo_result)
        return this.equals((disableVouchersRuleInfo_result)that);
      return false;
    }

    public boolean equals(disableVouchersRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableVouchersRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableVouchersRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableVouchersRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public disableVouchersRuleInfo_resultStandardScheme getScheme() {
        return new disableVouchersRuleInfo_resultStandardScheme();
      }
    }

    private static class disableVouchersRuleInfo_resultStandardScheme extends StandardScheme<disableVouchersRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableVouchersRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public disableVouchersRuleInfo_resultTupleScheme getScheme() {
        return new disableVouchersRuleInfo_resultTupleScheme();
      }
    }

    private static class disableVouchersRuleInfo_resultTupleScheme extends TupleScheme<disableVouchersRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateVouchersRuleInfo_args implements org.apache.thrift.TBase<updateVouchersRuleInfo_args, updateVouchersRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVouchersRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVouchersRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VOUCHERS_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVouchersRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVouchersRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VOUCHERS_RULE_INFO_VO((short)2, "vouchersRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VOUCHERS_RULE_INFO_VO
            return VOUCHERS_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VOUCHERS_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("vouchersRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.VouchersRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVouchersRuleInfo_args.class, metaDataMap);
    }

    public updateVouchersRuleInfo_args() {
    }

    public updateVouchersRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVouchersRuleInfo_args(updateVouchersRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVouchersRuleInfoVo()) {
        this.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo(other.vouchersRuleInfoVo);
      }
    }

    public updateVouchersRuleInfo_args deepCopy() {
      return new updateVouchersRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vouchersRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateVouchersRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.VouchersRuleInfoVo getVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo;
    }

    public updateVouchersRuleInfo_args setVouchersRuleInfoVo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) {
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      return this;
    }

    public void unsetVouchersRuleInfoVo() {
      this.vouchersRuleInfoVo = null;
    }

    /** Returns true if field vouchersRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo != null;
    }

    public void setVouchersRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.vouchersRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VOUCHERS_RULE_INFO_VO:
        if (value == null) {
          unsetVouchersRuleInfoVo();
        } else {
          setVouchersRuleInfoVo((com.froad.thrift.vo.active.VouchersRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VOUCHERS_RULE_INFO_VO:
        return getVouchersRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VOUCHERS_RULE_INFO_VO:
        return isSetVouchersRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVouchersRuleInfo_args)
        return this.equals((updateVouchersRuleInfo_args)that);
      return false;
    }

    public boolean equals(updateVouchersRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vouchersRuleInfoVo = true && this.isSetVouchersRuleInfoVo();
      boolean that_present_vouchersRuleInfoVo = true && that.isSetVouchersRuleInfoVo();
      if (this_present_vouchersRuleInfoVo || that_present_vouchersRuleInfoVo) {
        if (!(this_present_vouchersRuleInfoVo && that_present_vouchersRuleInfoVo))
          return false;
        if (!this.vouchersRuleInfoVo.equals(that.vouchersRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vouchersRuleInfoVo = true && (isSetVouchersRuleInfoVo());
      list.add(present_vouchersRuleInfoVo);
      if (present_vouchersRuleInfoVo)
        list.add(vouchersRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVouchersRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVouchersRuleInfoVo()).compareTo(other.isSetVouchersRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVouchersRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersRuleInfoVo, other.vouchersRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVouchersRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vouchersRuleInfoVo:");
      if (this.vouchersRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (vouchersRuleInfoVo != null) {
        vouchersRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVouchersRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateVouchersRuleInfo_argsStandardScheme getScheme() {
        return new updateVouchersRuleInfo_argsStandardScheme();
      }
    }

    private static class updateVouchersRuleInfo_argsStandardScheme extends StandardScheme<updateVouchersRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOUCHERS_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
                struct.vouchersRuleInfoVo.read(iprot);
                struct.setVouchersRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vouchersRuleInfoVo != null) {
          oprot.writeFieldBegin(VOUCHERS_RULE_INFO_VO_FIELD_DESC);
          struct.vouchersRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVouchersRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateVouchersRuleInfo_argsTupleScheme getScheme() {
        return new updateVouchersRuleInfo_argsTupleScheme();
      }
    }

    private static class updateVouchersRuleInfo_argsTupleScheme extends TupleScheme<updateVouchersRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          struct.vouchersRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
          struct.vouchersRuleInfoVo.read(iprot);
          struct.setVouchersRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateVouchersRuleInfo_result implements org.apache.thrift.TBase<updateVouchersRuleInfo_result, updateVouchersRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVouchersRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVouchersRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVouchersRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVouchersRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVouchersRuleInfo_result.class, metaDataMap);
    }

    public updateVouchersRuleInfo_result() {
    }

    public updateVouchersRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVouchersRuleInfo_result(updateVouchersRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateVouchersRuleInfo_result deepCopy() {
      return new updateVouchersRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateVouchersRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVouchersRuleInfo_result)
        return this.equals((updateVouchersRuleInfo_result)that);
      return false;
    }

    public boolean equals(updateVouchersRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVouchersRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVouchersRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVouchersRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateVouchersRuleInfo_resultStandardScheme getScheme() {
        return new updateVouchersRuleInfo_resultStandardScheme();
      }
    }

    private static class updateVouchersRuleInfo_resultStandardScheme extends StandardScheme<updateVouchersRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVouchersRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateVouchersRuleInfo_resultTupleScheme getScheme() {
        return new updateVouchersRuleInfo_resultTupleScheme();
      }
    }

    private static class updateVouchersRuleInfo_resultTupleScheme extends TupleScheme<updateVouchersRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfo_args implements org.apache.thrift.TBase<getActiveRuleInfo_args, getActiveRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfo_args");

    private static final org.apache.thrift.protocol.TField VOUCHERS_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOUCHERS_RULE_INFO_VO((short)1, "vouchersRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOUCHERS_RULE_INFO_VO
            return VOUCHERS_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOUCHERS_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("vouchersRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.VouchersRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfo_args.class, metaDataMap);
    }

    public getActiveRuleInfo_args() {
    }

    public getActiveRuleInfo_args(
      com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo)
    {
      this();
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfo_args(getActiveRuleInfo_args other) {
      if (other.isSetVouchersRuleInfoVo()) {
        this.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo(other.vouchersRuleInfoVo);
      }
    }

    public getActiveRuleInfo_args deepCopy() {
      return new getActiveRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.vouchersRuleInfoVo = null;
    }

    public com.froad.thrift.vo.active.VouchersRuleInfoVo getVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo;
    }

    public getActiveRuleInfo_args setVouchersRuleInfoVo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) {
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      return this;
    }

    public void unsetVouchersRuleInfoVo() {
      this.vouchersRuleInfoVo = null;
    }

    /** Returns true if field vouchersRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo != null;
    }

    public void setVouchersRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.vouchersRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOUCHERS_RULE_INFO_VO:
        if (value == null) {
          unsetVouchersRuleInfoVo();
        } else {
          setVouchersRuleInfoVo((com.froad.thrift.vo.active.VouchersRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOUCHERS_RULE_INFO_VO:
        return getVouchersRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOUCHERS_RULE_INFO_VO:
        return isSetVouchersRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfo_args)
        return this.equals((getActiveRuleInfo_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_vouchersRuleInfoVo = true && this.isSetVouchersRuleInfoVo();
      boolean that_present_vouchersRuleInfoVo = true && that.isSetVouchersRuleInfoVo();
      if (this_present_vouchersRuleInfoVo || that_present_vouchersRuleInfoVo) {
        if (!(this_present_vouchersRuleInfoVo && that_present_vouchersRuleInfoVo))
          return false;
        if (!this.vouchersRuleInfoVo.equals(that.vouchersRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vouchersRuleInfoVo = true && (isSetVouchersRuleInfoVo());
      list.add(present_vouchersRuleInfoVo);
      if (present_vouchersRuleInfoVo)
        list.add(vouchersRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVouchersRuleInfoVo()).compareTo(other.isSetVouchersRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVouchersRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersRuleInfoVo, other.vouchersRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfo_args(");
      boolean first = true;

      sb.append("vouchersRuleInfoVo:");
      if (this.vouchersRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vouchersRuleInfoVo != null) {
        vouchersRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_argsStandardScheme getScheme() {
        return new getActiveRuleInfo_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfo_argsStandardScheme extends StandardScheme<getActiveRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOUCHERS_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
                struct.vouchersRuleInfoVo.read(iprot);
                struct.setVouchersRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vouchersRuleInfoVo != null) {
          oprot.writeFieldBegin(VOUCHERS_RULE_INFO_VO_FIELD_DESC);
          struct.vouchersRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_argsTupleScheme getScheme() {
        return new getActiveRuleInfo_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfo_argsTupleScheme extends TupleScheme<getActiveRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVouchersRuleInfoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVouchersRuleInfoVo()) {
          struct.vouchersRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
          struct.vouchersRuleInfoVo.read(iprot);
          struct.setVouchersRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfo_result implements org.apache.thrift.TBase<getActiveRuleInfo_result, getActiveRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfo_result.class, metaDataMap);
    }

    public getActiveRuleInfo_result() {
    }

    public getActiveRuleInfo_result(
      com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfo_result(getActiveRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfo_result deepCopy() {
      return new getActiveRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfo_result setSuccess(com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfo_result)
        return this.equals((getActiveRuleInfo_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_resultStandardScheme getScheme() {
        return new getActiveRuleInfo_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfo_resultStandardScheme extends StandardScheme<getActiveRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_resultTupleScheme getScheme() {
        return new getActiveRuleInfo_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfo_resultTupleScheme extends TupleScheme<getActiveRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindAllVouchersRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoByPage_args implements org.apache.thrift.TBase<getActiveRuleInfoByPage_args, getActiveRuleInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VOUCHERS_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      VOUCHERS_RULE_INFO_VO((short)2, "vouchersRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // VOUCHERS_RULE_INFO_VO
            return VOUCHERS_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.VOUCHERS_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("vouchersRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.VouchersRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoByPage_args.class, metaDataMap);
    }

    public getActiveRuleInfoByPage_args() {
    }

    public getActiveRuleInfoByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo)
    {
      this();
      this.page = page;
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoByPage_args(getActiveRuleInfoByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetVouchersRuleInfoVo()) {
        this.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo(other.vouchersRuleInfoVo);
      }
    }

    public getActiveRuleInfoByPage_args deepCopy() {
      return new getActiveRuleInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.vouchersRuleInfoVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getActiveRuleInfoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.active.VouchersRuleInfoVo getVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo;
    }

    public getActiveRuleInfoByPage_args setVouchersRuleInfoVo(com.froad.thrift.vo.active.VouchersRuleInfoVo vouchersRuleInfoVo) {
      this.vouchersRuleInfoVo = vouchersRuleInfoVo;
      return this;
    }

    public void unsetVouchersRuleInfoVo() {
      this.vouchersRuleInfoVo = null;
    }

    /** Returns true if field vouchersRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVouchersRuleInfoVo() {
      return this.vouchersRuleInfoVo != null;
    }

    public void setVouchersRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.vouchersRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case VOUCHERS_RULE_INFO_VO:
        if (value == null) {
          unsetVouchersRuleInfoVo();
        } else {
          setVouchersRuleInfoVo((com.froad.thrift.vo.active.VouchersRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case VOUCHERS_RULE_INFO_VO:
        return getVouchersRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case VOUCHERS_RULE_INFO_VO:
        return isSetVouchersRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoByPage_args)
        return this.equals((getActiveRuleInfoByPage_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_vouchersRuleInfoVo = true && this.isSetVouchersRuleInfoVo();
      boolean that_present_vouchersRuleInfoVo = true && that.isSetVouchersRuleInfoVo();
      if (this_present_vouchersRuleInfoVo || that_present_vouchersRuleInfoVo) {
        if (!(this_present_vouchersRuleInfoVo && that_present_vouchersRuleInfoVo))
          return false;
        if (!this.vouchersRuleInfoVo.equals(that.vouchersRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_vouchersRuleInfoVo = true && (isSetVouchersRuleInfoVo());
      list.add(present_vouchersRuleInfoVo);
      if (present_vouchersRuleInfoVo)
        list.add(vouchersRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVouchersRuleInfoVo()).compareTo(other.isSetVouchersRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVouchersRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersRuleInfoVo, other.vouchersRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vouchersRuleInfoVo:");
      if (this.vouchersRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (vouchersRuleInfoVo != null) {
        vouchersRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_argsStandardScheme getScheme() {
        return new getActiveRuleInfoByPage_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfoByPage_argsStandardScheme extends StandardScheme<getActiveRuleInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOUCHERS_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
                struct.vouchersRuleInfoVo.read(iprot);
                struct.setVouchersRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vouchersRuleInfoVo != null) {
          oprot.writeFieldBegin(VOUCHERS_RULE_INFO_VO_FIELD_DESC);
          struct.vouchersRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_argsTupleScheme getScheme() {
        return new getActiveRuleInfoByPage_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfoByPage_argsTupleScheme extends TupleScheme<getActiveRuleInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetVouchersRuleInfoVo()) {
          struct.vouchersRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vouchersRuleInfoVo = new com.froad.thrift.vo.active.VouchersRuleInfoVo();
          struct.vouchersRuleInfoVo.read(iprot);
          struct.setVouchersRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoByPage_result implements org.apache.thrift.TBase<getActiveRuleInfoByPage_result, getActiveRuleInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoByPage_result.class, metaDataMap);
    }

    public getActiveRuleInfoByPage_result() {
    }

    public getActiveRuleInfoByPage_result(
      com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoByPage_result(getActiveRuleInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfoByPage_result deepCopy() {
      return new getActiveRuleInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfoByPage_result setSuccess(com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoByPage_result)
        return this.equals((getActiveRuleInfoByPage_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_resultStandardScheme getScheme() {
        return new getActiveRuleInfoByPage_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfoByPage_resultStandardScheme extends StandardScheme<getActiveRuleInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_resultTupleScheme getScheme() {
        return new getActiveRuleInfoByPage_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfoByPage_resultTupleScheme extends TupleScheme<getActiveRuleInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindPageVouchersRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoById_args implements org.apache.thrift.TBase<getActiveRuleInfoById_args, getActiveRuleInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACTIVE_ID((short)2, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoById_args.class, metaDataMap);
    }

    public getActiveRuleInfoById_args() {
    }

    public getActiveRuleInfoById_args(
      String clientId,
      String activeId)
    {
      this();
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoById_args(getActiveRuleInfoById_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public getActiveRuleInfoById_args deepCopy() {
      return new getActiveRuleInfoById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.activeId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getActiveRuleInfoById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public getActiveRuleInfoById_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoById_args)
        return this.equals((getActiveRuleInfoById_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_argsStandardScheme getScheme() {
        return new getActiveRuleInfoById_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfoById_argsStandardScheme extends StandardScheme<getActiveRuleInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_argsTupleScheme getScheme() {
        return new getActiveRuleInfoById_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfoById_argsTupleScheme extends TupleScheme<getActiveRuleInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetActiveId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoById_result implements org.apache.thrift.TBase<getActiveRuleInfoById_result, getActiveRuleInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoById_result.class, metaDataMap);
    }

    public getActiveRuleInfoById_result() {
    }

    public getActiveRuleInfoById_result(
      com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoById_result(getActiveRuleInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfoById_result deepCopy() {
      return new getActiveRuleInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfoById_result setSuccess(com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoById_result)
        return this.equals((getActiveRuleInfoById_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_resultStandardScheme getScheme() {
        return new getActiveRuleInfoById_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfoById_resultStandardScheme extends StandardScheme<getActiveRuleInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_resultTupleScheme getScheme() {
        return new getActiveRuleInfoById_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfoById_resultTupleScheme extends TupleScheme<getActiveRuleInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindVouchersRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportVouchersDetailInfo_args implements org.apache.thrift.TBase<exportVouchersDetailInfo_args, exportVouchersDetailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportVouchersDetailInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportVouchersDetailInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportVouchersDetailInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportVouchersDetailInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACTIVE_ID((short)2, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportVouchersDetailInfo_args.class, metaDataMap);
    }

    public exportVouchersDetailInfo_args() {
    }

    public exportVouchersDetailInfo_args(
      String clientId,
      String activeId)
    {
      this();
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportVouchersDetailInfo_args(exportVouchersDetailInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public exportVouchersDetailInfo_args deepCopy() {
      return new exportVouchersDetailInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.activeId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public exportVouchersDetailInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public exportVouchersDetailInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportVouchersDetailInfo_args)
        return this.equals((exportVouchersDetailInfo_args)that);
      return false;
    }

    public boolean equals(exportVouchersDetailInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportVouchersDetailInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportVouchersDetailInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportVouchersDetailInfo_argsStandardSchemeFactory implements SchemeFactory {
      public exportVouchersDetailInfo_argsStandardScheme getScheme() {
        return new exportVouchersDetailInfo_argsStandardScheme();
      }
    }

    private static class exportVouchersDetailInfo_argsStandardScheme extends StandardScheme<exportVouchersDetailInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportVouchersDetailInfo_argsTupleSchemeFactory implements SchemeFactory {
      public exportVouchersDetailInfo_argsTupleScheme getScheme() {
        return new exportVouchersDetailInfo_argsTupleScheme();
      }
    }

    private static class exportVouchersDetailInfo_argsTupleScheme extends TupleScheme<exportVouchersDetailInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetActiveId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportVouchersDetailInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class exportVouchersDetailInfo_result implements org.apache.thrift.TBase<exportVouchersDetailInfo_result, exportVouchersDetailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportVouchersDetailInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportVouchersDetailInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportVouchersDetailInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportVouchersDetailInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ExportVouchersDetailInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ExportVouchersDetailInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportVouchersDetailInfo_result.class, metaDataMap);
    }

    public exportVouchersDetailInfo_result() {
    }

    public exportVouchersDetailInfo_result(
      com.froad.thrift.vo.active.ExportVouchersDetailInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportVouchersDetailInfo_result(exportVouchersDetailInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.ExportVouchersDetailInfo(other.success);
      }
    }

    public exportVouchersDetailInfo_result deepCopy() {
      return new exportVouchersDetailInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.ExportVouchersDetailInfo getSuccess() {
      return this.success;
    }

    public exportVouchersDetailInfo_result setSuccess(com.froad.thrift.vo.active.ExportVouchersDetailInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.ExportVouchersDetailInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportVouchersDetailInfo_result)
        return this.equals((exportVouchersDetailInfo_result)that);
      return false;
    }

    public boolean equals(exportVouchersDetailInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportVouchersDetailInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportVouchersDetailInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportVouchersDetailInfo_resultStandardSchemeFactory implements SchemeFactory {
      public exportVouchersDetailInfo_resultStandardScheme getScheme() {
        return new exportVouchersDetailInfo_resultStandardScheme();
      }
    }

    private static class exportVouchersDetailInfo_resultStandardScheme extends StandardScheme<exportVouchersDetailInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.ExportVouchersDetailInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportVouchersDetailInfo_resultTupleSchemeFactory implements SchemeFactory {
      public exportVouchersDetailInfo_resultTupleScheme getScheme() {
        return new exportVouchersDetailInfo_resultTupleScheme();
      }
    }

    private static class exportVouchersDetailInfo_resultTupleScheme extends TupleScheme<exportVouchersDetailInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportVouchersDetailInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.ExportVouchersDetailInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addTemporaryVouchersRuleInfo_args implements org.apache.thrift.TBase<addTemporaryVouchersRuleInfo_args, addTemporaryVouchersRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTemporaryVouchersRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemporaryVouchersRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEMPORARY_VOUCHERS_DETAIL_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("temporaryVouchersDetailInfoVO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemporaryVouchersRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTemporaryVouchersRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      TEMPORARY_VOUCHERS_DETAIL_INFO_VO((short)2, "temporaryVouchersDetailInfoVO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // TEMPORARY_VOUCHERS_DETAIL_INFO_VO
            return TEMPORARY_VOUCHERS_DETAIL_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.TEMPORARY_VOUCHERS_DETAIL_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("temporaryVouchersDetailInfoVO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemporaryVouchersRuleInfo_args.class, metaDataMap);
    }

    public addTemporaryVouchersRuleInfo_args() {
    }

    public addTemporaryVouchersRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO)
    {
      this();
      this.originVo = originVo;
      this.temporaryVouchersDetailInfoVO = temporaryVouchersDetailInfoVO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemporaryVouchersRuleInfo_args(addTemporaryVouchersRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetTemporaryVouchersDetailInfoVO()) {
        this.temporaryVouchersDetailInfoVO = new com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO(other.temporaryVouchersDetailInfoVO);
      }
    }

    public addTemporaryVouchersRuleInfo_args deepCopy() {
      return new addTemporaryVouchersRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.temporaryVouchersDetailInfoVO = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addTemporaryVouchersRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO getTemporaryVouchersDetailInfoVO() {
      return this.temporaryVouchersDetailInfoVO;
    }

    public addTemporaryVouchersRuleInfo_args setTemporaryVouchersDetailInfoVO(com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO temporaryVouchersDetailInfoVO) {
      this.temporaryVouchersDetailInfoVO = temporaryVouchersDetailInfoVO;
      return this;
    }

    public void unsetTemporaryVouchersDetailInfoVO() {
      this.temporaryVouchersDetailInfoVO = null;
    }

    /** Returns true if field temporaryVouchersDetailInfoVO is set (has been assigned a value) and false otherwise */
    public boolean isSetTemporaryVouchersDetailInfoVO() {
      return this.temporaryVouchersDetailInfoVO != null;
    }

    public void setTemporaryVouchersDetailInfoVOIsSet(boolean value) {
      if (!value) {
        this.temporaryVouchersDetailInfoVO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case TEMPORARY_VOUCHERS_DETAIL_INFO_VO:
        if (value == null) {
          unsetTemporaryVouchersDetailInfoVO();
        } else {
          setTemporaryVouchersDetailInfoVO((com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case TEMPORARY_VOUCHERS_DETAIL_INFO_VO:
        return getTemporaryVouchersDetailInfoVO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case TEMPORARY_VOUCHERS_DETAIL_INFO_VO:
        return isSetTemporaryVouchersDetailInfoVO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemporaryVouchersRuleInfo_args)
        return this.equals((addTemporaryVouchersRuleInfo_args)that);
      return false;
    }

    public boolean equals(addTemporaryVouchersRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_temporaryVouchersDetailInfoVO = true && this.isSetTemporaryVouchersDetailInfoVO();
      boolean that_present_temporaryVouchersDetailInfoVO = true && that.isSetTemporaryVouchersDetailInfoVO();
      if (this_present_temporaryVouchersDetailInfoVO || that_present_temporaryVouchersDetailInfoVO) {
        if (!(this_present_temporaryVouchersDetailInfoVO && that_present_temporaryVouchersDetailInfoVO))
          return false;
        if (!this.temporaryVouchersDetailInfoVO.equals(that.temporaryVouchersDetailInfoVO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_temporaryVouchersDetailInfoVO = true && (isSetTemporaryVouchersDetailInfoVO());
      list.add(present_temporaryVouchersDetailInfoVO);
      if (present_temporaryVouchersDetailInfoVO)
        list.add(temporaryVouchersDetailInfoVO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemporaryVouchersRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemporaryVouchersDetailInfoVO()).compareTo(other.isSetTemporaryVouchersDetailInfoVO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemporaryVouchersDetailInfoVO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temporaryVouchersDetailInfoVO, other.temporaryVouchersDetailInfoVO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemporaryVouchersRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("temporaryVouchersDetailInfoVO:");
      if (this.temporaryVouchersDetailInfoVO == null) {
        sb.append("null");
      } else {
        sb.append(this.temporaryVouchersDetailInfoVO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (temporaryVouchersDetailInfoVO != null) {
        temporaryVouchersDetailInfoVO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemporaryVouchersRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addTemporaryVouchersRuleInfo_argsStandardScheme getScheme() {
        return new addTemporaryVouchersRuleInfo_argsStandardScheme();
      }
    }

    private static class addTemporaryVouchersRuleInfo_argsStandardScheme extends StandardScheme<addTemporaryVouchersRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemporaryVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMPORARY_VOUCHERS_DETAIL_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.temporaryVouchersDetailInfoVO = new com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO();
                struct.temporaryVouchersDetailInfoVO.read(iprot);
                struct.setTemporaryVouchersDetailInfoVOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemporaryVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.temporaryVouchersDetailInfoVO != null) {
          oprot.writeFieldBegin(TEMPORARY_VOUCHERS_DETAIL_INFO_VO_FIELD_DESC);
          struct.temporaryVouchersDetailInfoVO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTemporaryVouchersRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addTemporaryVouchersRuleInfo_argsTupleScheme getScheme() {
        return new addTemporaryVouchersRuleInfo_argsTupleScheme();
      }
    }

    private static class addTemporaryVouchersRuleInfo_argsTupleScheme extends TupleScheme<addTemporaryVouchersRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTemporaryVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetTemporaryVouchersDetailInfoVO()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetTemporaryVouchersDetailInfoVO()) {
          struct.temporaryVouchersDetailInfoVO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTemporaryVouchersRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.temporaryVouchersDetailInfoVO = new com.froad.thrift.vo.active.TemporaryVouchersDetailInfoVO();
          struct.temporaryVouchersDetailInfoVO.read(iprot);
          struct.setTemporaryVouchersDetailInfoVOIsSet(true);
        }
      }
    }

  }

  public static class addTemporaryVouchersRuleInfo_result implements org.apache.thrift.TBase<addTemporaryVouchersRuleInfo_result, addTemporaryVouchersRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTemporaryVouchersRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemporaryVouchersRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemporaryVouchersRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTemporaryVouchersRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemporaryVouchersRuleInfo_result.class, metaDataMap);
    }

    public addTemporaryVouchersRuleInfo_result() {
    }

    public addTemporaryVouchersRuleInfo_result(
      com.froad.thrift.vo.active.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemporaryVouchersRuleInfo_result(addTemporaryVouchersRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.AddResultVo(other.success);
      }
    }

    public addTemporaryVouchersRuleInfo_result deepCopy() {
      return new addTemporaryVouchersRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.AddResultVo getSuccess() {
      return this.success;
    }

    public addTemporaryVouchersRuleInfo_result setSuccess(com.froad.thrift.vo.active.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemporaryVouchersRuleInfo_result)
        return this.equals((addTemporaryVouchersRuleInfo_result)that);
      return false;
    }

    public boolean equals(addTemporaryVouchersRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemporaryVouchersRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemporaryVouchersRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemporaryVouchersRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addTemporaryVouchersRuleInfo_resultStandardScheme getScheme() {
        return new addTemporaryVouchersRuleInfo_resultStandardScheme();
      }
    }

    private static class addTemporaryVouchersRuleInfo_resultStandardScheme extends StandardScheme<addTemporaryVouchersRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemporaryVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemporaryVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTemporaryVouchersRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addTemporaryVouchersRuleInfo_resultTupleScheme getScheme() {
        return new addTemporaryVouchersRuleInfo_resultTupleScheme();
      }
    }

    private static class addTemporaryVouchersRuleInfo_resultTupleScheme extends TupleScheme<addTemporaryVouchersRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTemporaryVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTemporaryVouchersRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
