/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MemberInfoVo implements org.apache.thrift.TBase<MemberInfoVo, MemberInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<MemberInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MemberInfoVo");

  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOGIN_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPwd", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("loginType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IDENTITY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("identityKey", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("createChannel", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipCode", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DUTY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dutyCode", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SERVICE_LEVEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceLevelCode", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIP", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField LOGIN_FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginFailureCount", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField LOCK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockDate", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField ALLOW_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("allowIP", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField FIRST_TRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstTryTime", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField TRY_LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tryLoginCount", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("registerIP", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField LOGIN_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("loginFlag", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField INTRODUCE_FIELD_DESC = new org.apache.thrift.protocol.TField("introduce", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField IS_BIND_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindEmail", org.apache.thrift.protocol.TType.BOOL, (short)35);
  private static final org.apache.thrift.protocol.TField IS_BIND_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindMobile", org.apache.thrift.protocol.TType.BOOL, (short)36);
  private static final org.apache.thrift.protocol.TField IS_BIND_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("isBindBank", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField IS_VALID_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("isValidBank", org.apache.thrift.protocol.TType.BOOL, (short)38);
  private static final org.apache.thrift.protocol.TField BATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("batchNo", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField USER_BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userBankID", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField BANK_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankGroupId", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField BANK_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOrgNo", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField INTRODUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("introducer", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField INTRODUCER_MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("introducerMemberCode", org.apache.thrift.protocol.TType.I64, (short)45);
  private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField RESULT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMessage", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField RESULT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSuccess", org.apache.thrift.protocol.TType.BOOL, (short)48);
  private static final org.apache.thrift.protocol.TField MEMBER_VIPINFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("memberVIPInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)49);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MemberInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MemberInfoVoTupleSchemeFactory());
  }

  /**
   * 会员号*
   */
  public long memberCode; // required
  /**
   * 会员类型 1：个人会员，2：企业会员*
   */
  public int memberType; // required
  /**
   * 登录ID*
   */
  public String loginID; // required
  /**
   * 密码*
   */
  public String loginPwd; // required
  /**
   * 登录类别*
   */
  public int loginType; // required
  /**
   * 用户姓名*
   */
  public String uname; // required
  /**
   * 邮箱*
   */
  public String email; // required
  /**
   * 用户活动状态1正常状态(已激活)，2.未激活，3已冻结*
   */
  public int status; // required
  /**
   * 电话号码*
   */
  public String mobile; // required
  /**
   * 身份证号*
   */
  public String identityKey; // required
  /**
   * 性别0：男 1:女性2：保密*
   */
  public String sex; // required
  /**
   * 年龄*
   */
  public int age; // required
  /**
   * 注册时间*
   */
  public long createTime; // required
  /**
   * 注册时间*
   */
  public long beginTime; // required
  /**
   * 注册时间*
   */
  public long endTime; // required
  /**
   * 修改时间*
   */
  public long updateTime; // required
  /**
   * 创建渠道：FFT 分分通,MALL 商城，FFT_MC 分分通手机客户端，MAll_MC 商城手机客户端*
   */
  public String createChannel; // required
  /**
   * ADDRESS*
   */
  public String address; // required
  /**
   * 邮编*
   */
  public String zipCode; // required
  /**
   * 部门*
   */
  public String orgCode; // required
  /**
   * 职位*
   */
  public String dutyCode; // required
  /**
   * 服务级别*
   */
  public String serviceLevelCode; // required
  /**
   * 最近登录IP地址*
   */
  public String lastLoginIP; // required
  /**
   * 最近登录时间*
   */
  public long lastLoginTime; // required
  /**
   * 登陆失败限制次数，默认为0*
   */
  public int loginFailureCount; // required
  /**
   * 账号冻结日期*
   */
  public long lockDate; // required
  /**
   * 允许登录的IP*
   */
  public String allowIP; // required
  /**
   * 用户ID*
   */
  public String userID; // required
  /**
   * 生日*
   */
  public long birthday; // required
  /**
   * 首次失败时间*
   */
  public long firstTryTime; // required
  /**
   * 连续登陆失败次数，默认为0*
   */
  public int tryLoginCount; // required
  /**
   * 注册IP*
   */
  public String registerIP; // required
  /**
   * 成功登录标识*
   */
  public String loginFlag; // required
  /**
   * 个人介绍*
   */
  public String introduce; // required
  /**
   * 是否绑定邮箱 0：未绑定，1：已绑定*
   */
  public boolean isBindEmail; // required
  /**
   * 是否绑定手机 0：未绑定，1：已绑定*
   */
  public boolean isBindMobile; // required
  /**
   * 是否绑定银行 0：未绑定，1：已绑定*
   */
  public boolean isBindBank; // required
  /**
   * 是否验证绑定的银行 0：未验证，1：已验证*
   */
  public boolean isValidBank; // required
  /**
   * 批次号*
   */
  public String batchNo; // required
  /**
   * 用户跟踪号*
   */
  public String userBankID; // required
  /**
   * 银行组号*
   */
  public String bankGroupId; // required
  /**
   * 银行名称*
   */
  public String bankName; // required
  /**
   * 银行标识*
   */
  public String bankOrgNo; // required
  /**
   * 介绍人login_id..*
   */
  public String introducer; // required
  /**
   * 介绍人MemberCode*
   */
  public long introducerMemberCode; // required
  /**
   * 密码*
   */
  public String pwd; // required
  public String resultMessage; // required
  public boolean resultSuccess; // required
  public MemberVIPInfoVo memberVIPInfoVo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 会员号*
     */
    MEMBER_CODE((short)1, "memberCode"),
    /**
     * 会员类型 1：个人会员，2：企业会员*
     */
    MEMBER_TYPE((short)2, "memberType"),
    /**
     * 登录ID*
     */
    LOGIN_ID((short)3, "loginID"),
    /**
     * 密码*
     */
    LOGIN_PWD((short)4, "loginPwd"),
    /**
     * 登录类别*
     */
    LOGIN_TYPE((short)5, "loginType"),
    /**
     * 用户姓名*
     */
    UNAME((short)6, "uname"),
    /**
     * 邮箱*
     */
    EMAIL((short)7, "email"),
    /**
     * 用户活动状态1正常状态(已激活)，2.未激活，3已冻结*
     */
    STATUS((short)8, "status"),
    /**
     * 电话号码*
     */
    MOBILE((short)9, "mobile"),
    /**
     * 身份证号*
     */
    IDENTITY_KEY((short)10, "identityKey"),
    /**
     * 性别0：男 1:女性2：保密*
     */
    SEX((short)11, "sex"),
    /**
     * 年龄*
     */
    AGE((short)12, "age"),
    /**
     * 注册时间*
     */
    CREATE_TIME((short)13, "createTime"),
    /**
     * 注册时间*
     */
    BEGIN_TIME((short)14, "beginTime"),
    /**
     * 注册时间*
     */
    END_TIME((short)15, "endTime"),
    /**
     * 修改时间*
     */
    UPDATE_TIME((short)16, "updateTime"),
    /**
     * 创建渠道：FFT 分分通,MALL 商城，FFT_MC 分分通手机客户端，MAll_MC 商城手机客户端*
     */
    CREATE_CHANNEL((short)17, "createChannel"),
    /**
     * ADDRESS*
     */
    ADDRESS((short)18, "address"),
    /**
     * 邮编*
     */
    ZIP_CODE((short)19, "zipCode"),
    /**
     * 部门*
     */
    ORG_CODE((short)20, "orgCode"),
    /**
     * 职位*
     */
    DUTY_CODE((short)21, "dutyCode"),
    /**
     * 服务级别*
     */
    SERVICE_LEVEL_CODE((short)22, "serviceLevelCode"),
    /**
     * 最近登录IP地址*
     */
    LAST_LOGIN_IP((short)23, "lastLoginIP"),
    /**
     * 最近登录时间*
     */
    LAST_LOGIN_TIME((short)24, "lastLoginTime"),
    /**
     * 登陆失败限制次数，默认为0*
     */
    LOGIN_FAILURE_COUNT((short)25, "loginFailureCount"),
    /**
     * 账号冻结日期*
     */
    LOCK_DATE((short)26, "lockDate"),
    /**
     * 允许登录的IP*
     */
    ALLOW_IP((short)27, "allowIP"),
    /**
     * 用户ID*
     */
    USER_ID((short)28, "userID"),
    /**
     * 生日*
     */
    BIRTHDAY((short)29, "birthday"),
    /**
     * 首次失败时间*
     */
    FIRST_TRY_TIME((short)30, "firstTryTime"),
    /**
     * 连续登陆失败次数，默认为0*
     */
    TRY_LOGIN_COUNT((short)31, "tryLoginCount"),
    /**
     * 注册IP*
     */
    REGISTER_IP((short)32, "registerIP"),
    /**
     * 成功登录标识*
     */
    LOGIN_FLAG((short)33, "loginFlag"),
    /**
     * 个人介绍*
     */
    INTRODUCE((short)34, "introduce"),
    /**
     * 是否绑定邮箱 0：未绑定，1：已绑定*
     */
    IS_BIND_EMAIL((short)35, "isBindEmail"),
    /**
     * 是否绑定手机 0：未绑定，1：已绑定*
     */
    IS_BIND_MOBILE((short)36, "isBindMobile"),
    /**
     * 是否绑定银行 0：未绑定，1：已绑定*
     */
    IS_BIND_BANK((short)37, "isBindBank"),
    /**
     * 是否验证绑定的银行 0：未验证，1：已验证*
     */
    IS_VALID_BANK((short)38, "isValidBank"),
    /**
     * 批次号*
     */
    BATCH_NO((short)39, "batchNo"),
    /**
     * 用户跟踪号*
     */
    USER_BANK_ID((short)40, "userBankID"),
    /**
     * 银行组号*
     */
    BANK_GROUP_ID((short)41, "bankGroupId"),
    /**
     * 银行名称*
     */
    BANK_NAME((short)42, "bankName"),
    /**
     * 银行标识*
     */
    BANK_ORG_NO((short)43, "bankOrgNo"),
    /**
     * 介绍人login_id..*
     */
    INTRODUCER((short)44, "introducer"),
    /**
     * 介绍人MemberCode*
     */
    INTRODUCER_MEMBER_CODE((short)45, "introducerMemberCode"),
    /**
     * 密码*
     */
    PWD((short)46, "pwd"),
    RESULT_MESSAGE((short)47, "resultMessage"),
    RESULT_SUCCESS((short)48, "resultSuccess"),
    MEMBER_VIPINFO_VO((short)49, "memberVIPInfoVo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_CODE
          return MEMBER_CODE;
        case 2: // MEMBER_TYPE
          return MEMBER_TYPE;
        case 3: // LOGIN_ID
          return LOGIN_ID;
        case 4: // LOGIN_PWD
          return LOGIN_PWD;
        case 5: // LOGIN_TYPE
          return LOGIN_TYPE;
        case 6: // UNAME
          return UNAME;
        case 7: // EMAIL
          return EMAIL;
        case 8: // STATUS
          return STATUS;
        case 9: // MOBILE
          return MOBILE;
        case 10: // IDENTITY_KEY
          return IDENTITY_KEY;
        case 11: // SEX
          return SEX;
        case 12: // AGE
          return AGE;
        case 13: // CREATE_TIME
          return CREATE_TIME;
        case 14: // BEGIN_TIME
          return BEGIN_TIME;
        case 15: // END_TIME
          return END_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        case 17: // CREATE_CHANNEL
          return CREATE_CHANNEL;
        case 18: // ADDRESS
          return ADDRESS;
        case 19: // ZIP_CODE
          return ZIP_CODE;
        case 20: // ORG_CODE
          return ORG_CODE;
        case 21: // DUTY_CODE
          return DUTY_CODE;
        case 22: // SERVICE_LEVEL_CODE
          return SERVICE_LEVEL_CODE;
        case 23: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 24: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 25: // LOGIN_FAILURE_COUNT
          return LOGIN_FAILURE_COUNT;
        case 26: // LOCK_DATE
          return LOCK_DATE;
        case 27: // ALLOW_IP
          return ALLOW_IP;
        case 28: // USER_ID
          return USER_ID;
        case 29: // BIRTHDAY
          return BIRTHDAY;
        case 30: // FIRST_TRY_TIME
          return FIRST_TRY_TIME;
        case 31: // TRY_LOGIN_COUNT
          return TRY_LOGIN_COUNT;
        case 32: // REGISTER_IP
          return REGISTER_IP;
        case 33: // LOGIN_FLAG
          return LOGIN_FLAG;
        case 34: // INTRODUCE
          return INTRODUCE;
        case 35: // IS_BIND_EMAIL
          return IS_BIND_EMAIL;
        case 36: // IS_BIND_MOBILE
          return IS_BIND_MOBILE;
        case 37: // IS_BIND_BANK
          return IS_BIND_BANK;
        case 38: // IS_VALID_BANK
          return IS_VALID_BANK;
        case 39: // BATCH_NO
          return BATCH_NO;
        case 40: // USER_BANK_ID
          return USER_BANK_ID;
        case 41: // BANK_GROUP_ID
          return BANK_GROUP_ID;
        case 42: // BANK_NAME
          return BANK_NAME;
        case 43: // BANK_ORG_NO
          return BANK_ORG_NO;
        case 44: // INTRODUCER
          return INTRODUCER;
        case 45: // INTRODUCER_MEMBER_CODE
          return INTRODUCER_MEMBER_CODE;
        case 46: // PWD
          return PWD;
        case 47: // RESULT_MESSAGE
          return RESULT_MESSAGE;
        case 48: // RESULT_SUCCESS
          return RESULT_SUCCESS;
        case 49: // MEMBER_VIPINFO_VO
          return MEMBER_VIPINFO_VO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __MEMBERTYPE_ISSET_ID = 1;
  private static final int __LOGINTYPE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __AGE_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __BEGINTIME_ISSET_ID = 6;
  private static final int __ENDTIME_ISSET_ID = 7;
  private static final int __UPDATETIME_ISSET_ID = 8;
  private static final int __LASTLOGINTIME_ISSET_ID = 9;
  private static final int __LOGINFAILURECOUNT_ISSET_ID = 10;
  private static final int __LOCKDATE_ISSET_ID = 11;
  private static final int __BIRTHDAY_ISSET_ID = 12;
  private static final int __FIRSTTRYTIME_ISSET_ID = 13;
  private static final int __TRYLOGINCOUNT_ISSET_ID = 14;
  private static final int __ISBINDEMAIL_ISSET_ID = 15;
  private static final int __ISBINDMOBILE_ISSET_ID = 16;
  private static final int __ISBINDBANK_ISSET_ID = 17;
  private static final int __ISVALIDBANK_ISSET_ID = 18;
  private static final int __INTRODUCERMEMBERCODE_ISSET_ID = 19;
  private static final int __RESULTSUCCESS_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("memberType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PWD, new org.apache.thrift.meta_data.FieldMetaData("loginPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("loginType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNAME, new org.apache.thrift.meta_data.FieldMetaData("uname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_KEY, new org.apache.thrift.meta_data.FieldMetaData("identityKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("createChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY_CODE, new org.apache.thrift.meta_data.FieldMetaData("dutyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_LEVEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("serviceLevelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIN_FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loginFailureCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCK_DATE, new org.apache.thrift.meta_data.FieldMetaData("lockDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALLOW_IP, new org.apache.thrift.meta_data.FieldMetaData("allowIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_TRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("firstTryTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRY_LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("tryLoginCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("registerIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_FLAG, new org.apache.thrift.meta_data.FieldMetaData("loginFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCE, new org.apache.thrift.meta_data.FieldMetaData("introduce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BIND_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("isBindEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_BIND_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("isBindMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_BIND_BANK, new org.apache.thrift.meta_data.FieldMetaData("isBindBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_VALID_BANK, new org.apache.thrift.meta_data.FieldMetaData("isValidBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("batchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("userBankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("bankGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("bankOrgNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCER, new org.apache.thrift.meta_data.FieldMetaData("introducer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCER_MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("introducerMemberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("resultMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("resultSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEMBER_VIPINFO_VO, new org.apache.thrift.meta_data.FieldMetaData("memberVIPInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MemberVIPInfoVo")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MemberInfoVo.class, metaDataMap);
  }

  public MemberInfoVo() {
  }

  public MemberInfoVo(
    long memberCode,
    int memberType,
    String loginID,
    String loginPwd,
    int loginType,
    String uname,
    String email,
    int status,
    String mobile,
    String identityKey,
    String sex,
    int age,
    long createTime,
    long beginTime,
    long endTime,
    long updateTime,
    String createChannel,
    String address,
    String zipCode,
    String orgCode,
    String dutyCode,
    String serviceLevelCode,
    String lastLoginIP,
    long lastLoginTime,
    int loginFailureCount,
    long lockDate,
    String allowIP,
    String userID,
    long birthday,
    long firstTryTime,
    int tryLoginCount,
    String registerIP,
    String loginFlag,
    String introduce,
    boolean isBindEmail,
    boolean isBindMobile,
    boolean isBindBank,
    boolean isValidBank,
    String batchNo,
    String userBankID,
    String bankGroupId,
    String bankName,
    String bankOrgNo,
    String introducer,
    long introducerMemberCode,
    String pwd,
    String resultMessage,
    boolean resultSuccess,
    MemberVIPInfoVo memberVIPInfoVo)
  {
    this();
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberType = memberType;
    setMemberTypeIsSet(true);
    this.loginID = loginID;
    this.loginPwd = loginPwd;
    this.loginType = loginType;
    setLoginTypeIsSet(true);
    this.uname = uname;
    this.email = email;
    this.status = status;
    setStatusIsSet(true);
    this.mobile = mobile;
    this.identityKey = identityKey;
    this.sex = sex;
    this.age = age;
    setAgeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.createChannel = createChannel;
    this.address = address;
    this.zipCode = zipCode;
    this.orgCode = orgCode;
    this.dutyCode = dutyCode;
    this.serviceLevelCode = serviceLevelCode;
    this.lastLoginIP = lastLoginIP;
    this.lastLoginTime = lastLoginTime;
    setLastLoginTimeIsSet(true);
    this.loginFailureCount = loginFailureCount;
    setLoginFailureCountIsSet(true);
    this.lockDate = lockDate;
    setLockDateIsSet(true);
    this.allowIP = allowIP;
    this.userID = userID;
    this.birthday = birthday;
    setBirthdayIsSet(true);
    this.firstTryTime = firstTryTime;
    setFirstTryTimeIsSet(true);
    this.tryLoginCount = tryLoginCount;
    setTryLoginCountIsSet(true);
    this.registerIP = registerIP;
    this.loginFlag = loginFlag;
    this.introduce = introduce;
    this.isBindEmail = isBindEmail;
    setIsBindEmailIsSet(true);
    this.isBindMobile = isBindMobile;
    setIsBindMobileIsSet(true);
    this.isBindBank = isBindBank;
    setIsBindBankIsSet(true);
    this.isValidBank = isValidBank;
    setIsValidBankIsSet(true);
    this.batchNo = batchNo;
    this.userBankID = userBankID;
    this.bankGroupId = bankGroupId;
    this.bankName = bankName;
    this.bankOrgNo = bankOrgNo;
    this.introducer = introducer;
    this.introducerMemberCode = introducerMemberCode;
    setIntroducerMemberCodeIsSet(true);
    this.pwd = pwd;
    this.resultMessage = resultMessage;
    this.resultSuccess = resultSuccess;
    setResultSuccessIsSet(true);
    this.memberVIPInfoVo = memberVIPInfoVo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MemberInfoVo(MemberInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memberCode = other.memberCode;
    this.memberType = other.memberType;
    if (other.isSetLoginID()) {
      this.loginID = other.loginID;
    }
    if (other.isSetLoginPwd()) {
      this.loginPwd = other.loginPwd;
    }
    this.loginType = other.loginType;
    if (other.isSetUname()) {
      this.uname = other.uname;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.status = other.status;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetIdentityKey()) {
      this.identityKey = other.identityKey;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    this.age = other.age;
    this.createTime = other.createTime;
    this.beginTime = other.beginTime;
    this.endTime = other.endTime;
    this.updateTime = other.updateTime;
    if (other.isSetCreateChannel()) {
      this.createChannel = other.createChannel;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetZipCode()) {
      this.zipCode = other.zipCode;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetDutyCode()) {
      this.dutyCode = other.dutyCode;
    }
    if (other.isSetServiceLevelCode()) {
      this.serviceLevelCode = other.serviceLevelCode;
    }
    if (other.isSetLastLoginIP()) {
      this.lastLoginIP = other.lastLoginIP;
    }
    this.lastLoginTime = other.lastLoginTime;
    this.loginFailureCount = other.loginFailureCount;
    this.lockDate = other.lockDate;
    if (other.isSetAllowIP()) {
      this.allowIP = other.allowIP;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    this.birthday = other.birthday;
    this.firstTryTime = other.firstTryTime;
    this.tryLoginCount = other.tryLoginCount;
    if (other.isSetRegisterIP()) {
      this.registerIP = other.registerIP;
    }
    if (other.isSetLoginFlag()) {
      this.loginFlag = other.loginFlag;
    }
    if (other.isSetIntroduce()) {
      this.introduce = other.introduce;
    }
    this.isBindEmail = other.isBindEmail;
    this.isBindMobile = other.isBindMobile;
    this.isBindBank = other.isBindBank;
    this.isValidBank = other.isValidBank;
    if (other.isSetBatchNo()) {
      this.batchNo = other.batchNo;
    }
    if (other.isSetUserBankID()) {
      this.userBankID = other.userBankID;
    }
    if (other.isSetBankGroupId()) {
      this.bankGroupId = other.bankGroupId;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBankOrgNo()) {
      this.bankOrgNo = other.bankOrgNo;
    }
    if (other.isSetIntroducer()) {
      this.introducer = other.introducer;
    }
    this.introducerMemberCode = other.introducerMemberCode;
    if (other.isSetPwd()) {
      this.pwd = other.pwd;
    }
    if (other.isSetResultMessage()) {
      this.resultMessage = other.resultMessage;
    }
    this.resultSuccess = other.resultSuccess;
    if (other.isSetMemberVIPInfoVo()) {
      this.memberVIPInfoVo = other.memberVIPInfoVo;
    }
  }

  public MemberInfoVo deepCopy() {
    return new MemberInfoVo(this);
  }

  @Override
  public void clear() {
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    setMemberTypeIsSet(false);
    this.memberType = 0;
    this.loginID = null;
    this.loginPwd = null;
    setLoginTypeIsSet(false);
    this.loginType = 0;
    this.uname = null;
    this.email = null;
    setStatusIsSet(false);
    this.status = 0;
    this.mobile = null;
    this.identityKey = null;
    this.sex = null;
    setAgeIsSet(false);
    this.age = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setBeginTimeIsSet(false);
    this.beginTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.createChannel = null;
    this.address = null;
    this.zipCode = null;
    this.orgCode = null;
    this.dutyCode = null;
    this.serviceLevelCode = null;
    this.lastLoginIP = null;
    setLastLoginTimeIsSet(false);
    this.lastLoginTime = 0;
    setLoginFailureCountIsSet(false);
    this.loginFailureCount = 0;
    setLockDateIsSet(false);
    this.lockDate = 0;
    this.allowIP = null;
    this.userID = null;
    setBirthdayIsSet(false);
    this.birthday = 0;
    setFirstTryTimeIsSet(false);
    this.firstTryTime = 0;
    setTryLoginCountIsSet(false);
    this.tryLoginCount = 0;
    this.registerIP = null;
    this.loginFlag = null;
    this.introduce = null;
    setIsBindEmailIsSet(false);
    this.isBindEmail = false;
    setIsBindMobileIsSet(false);
    this.isBindMobile = false;
    setIsBindBankIsSet(false);
    this.isBindBank = false;
    setIsValidBankIsSet(false);
    this.isValidBank = false;
    this.batchNo = null;
    this.userBankID = null;
    this.bankGroupId = null;
    this.bankName = null;
    this.bankOrgNo = null;
    this.introducer = null;
    setIntroducerMemberCodeIsSet(false);
    this.introducerMemberCode = 0;
    this.pwd = null;
    this.resultMessage = null;
    setResultSuccessIsSet(false);
    this.resultSuccess = false;
    this.memberVIPInfoVo = null;
  }

  /**
   * 会员号*
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号*
   */
  public MemberInfoVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 会员类型 1：个人会员，2：企业会员*
   */
  public int getMemberType() {
    return this.memberType;
  }

  /**
   * 会员类型 1：个人会员，2：企业会员*
   */
  public MemberInfoVo setMemberType(int memberType) {
    this.memberType = memberType;
    setMemberTypeIsSet(true);
    return this;
  }

  public void unsetMemberType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERTYPE_ISSET_ID);
  }

  /** Returns true if field memberType is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberType() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERTYPE_ISSET_ID);
  }

  public void setMemberTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERTYPE_ISSET_ID, value);
  }

  /**
   * 登录ID*
   */
  public String getLoginID() {
    return this.loginID;
  }

  /**
   * 登录ID*
   */
  public MemberInfoVo setLoginID(String loginID) {
    this.loginID = loginID;
    return this;
  }

  public void unsetLoginID() {
    this.loginID = null;
  }

  /** Returns true if field loginID is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginID() {
    return this.loginID != null;
  }

  public void setLoginIDIsSet(boolean value) {
    if (!value) {
      this.loginID = null;
    }
  }

  /**
   * 密码*
   */
  public String getLoginPwd() {
    return this.loginPwd;
  }

  /**
   * 密码*
   */
  public MemberInfoVo setLoginPwd(String loginPwd) {
    this.loginPwd = loginPwd;
    return this;
  }

  public void unsetLoginPwd() {
    this.loginPwd = null;
  }

  /** Returns true if field loginPwd is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPwd() {
    return this.loginPwd != null;
  }

  public void setLoginPwdIsSet(boolean value) {
    if (!value) {
      this.loginPwd = null;
    }
  }

  /**
   * 登录类别*
   */
  public int getLoginType() {
    return this.loginType;
  }

  /**
   * 登录类别*
   */
  public MemberInfoVo setLoginType(int loginType) {
    this.loginType = loginType;
    setLoginTypeIsSet(true);
    return this;
  }

  public void unsetLoginType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINTYPE_ISSET_ID);
  }

  /** Returns true if field loginType is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginType() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGINTYPE_ISSET_ID);
  }

  public void setLoginTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINTYPE_ISSET_ID, value);
  }

  /**
   * 用户姓名*
   */
  public String getUname() {
    return this.uname;
  }

  /**
   * 用户姓名*
   */
  public MemberInfoVo setUname(String uname) {
    this.uname = uname;
    return this;
  }

  public void unsetUname() {
    this.uname = null;
  }

  /** Returns true if field uname is set (has been assigned a value) and false otherwise */
  public boolean isSetUname() {
    return this.uname != null;
  }

  public void setUnameIsSet(boolean value) {
    if (!value) {
      this.uname = null;
    }
  }

  /**
   * 邮箱*
   */
  public String getEmail() {
    return this.email;
  }

  /**
   * 邮箱*
   */
  public MemberInfoVo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  /**
   * 用户活动状态1正常状态(已激活)，2.未激活，3已冻结*
   */
  public int getStatus() {
    return this.status;
  }

  /**
   * 用户活动状态1正常状态(已激活)，2.未激活，3已冻结*
   */
  public MemberInfoVo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 电话号码*
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 电话号码*
   */
  public MemberInfoVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 身份证号*
   */
  public String getIdentityKey() {
    return this.identityKey;
  }

  /**
   * 身份证号*
   */
  public MemberInfoVo setIdentityKey(String identityKey) {
    this.identityKey = identityKey;
    return this;
  }

  public void unsetIdentityKey() {
    this.identityKey = null;
  }

  /** Returns true if field identityKey is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityKey() {
    return this.identityKey != null;
  }

  public void setIdentityKeyIsSet(boolean value) {
    if (!value) {
      this.identityKey = null;
    }
  }

  /**
   * 性别0：男 1:女性2：保密*
   */
  public String getSex() {
    return this.sex;
  }

  /**
   * 性别0：男 1:女性2：保密*
   */
  public MemberInfoVo setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  /**
   * 年龄*
   */
  public int getAge() {
    return this.age;
  }

  /**
   * 年龄*
   */
  public MemberInfoVo setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  /**
   * 注册时间*
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 注册时间*
   */
  public MemberInfoVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 注册时间*
   */
  public long getBeginTime() {
    return this.beginTime;
  }

  /**
   * 注册时间*
   */
  public MemberInfoVo setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
  }

  /**
   * 注册时间*
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 注册时间*
   */
  public MemberInfoVo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 修改时间*
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 修改时间*
   */
  public MemberInfoVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 创建渠道：FFT 分分通,MALL 商城，FFT_MC 分分通手机客户端，MAll_MC 商城手机客户端*
   */
  public String getCreateChannel() {
    return this.createChannel;
  }

  /**
   * 创建渠道：FFT 分分通,MALL 商城，FFT_MC 分分通手机客户端，MAll_MC 商城手机客户端*
   */
  public MemberInfoVo setCreateChannel(String createChannel) {
    this.createChannel = createChannel;
    return this;
  }

  public void unsetCreateChannel() {
    this.createChannel = null;
  }

  /** Returns true if field createChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateChannel() {
    return this.createChannel != null;
  }

  public void setCreateChannelIsSet(boolean value) {
    if (!value) {
      this.createChannel = null;
    }
  }

  /**
   * ADDRESS*
   */
  public String getAddress() {
    return this.address;
  }

  /**
   * ADDRESS*
   */
  public MemberInfoVo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  /**
   * 邮编*
   */
  public String getZipCode() {
    return this.zipCode;
  }

  /**
   * 邮编*
   */
  public MemberInfoVo setZipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  public void unsetZipCode() {
    this.zipCode = null;
  }

  /** Returns true if field zipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipCode() {
    return this.zipCode != null;
  }

  public void setZipCodeIsSet(boolean value) {
    if (!value) {
      this.zipCode = null;
    }
  }

  /**
   * 部门*
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 部门*
   */
  public MemberInfoVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 职位*
   */
  public String getDutyCode() {
    return this.dutyCode;
  }

  /**
   * 职位*
   */
  public MemberInfoVo setDutyCode(String dutyCode) {
    this.dutyCode = dutyCode;
    return this;
  }

  public void unsetDutyCode() {
    this.dutyCode = null;
  }

  /** Returns true if field dutyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDutyCode() {
    return this.dutyCode != null;
  }

  public void setDutyCodeIsSet(boolean value) {
    if (!value) {
      this.dutyCode = null;
    }
  }

  /**
   * 服务级别*
   */
  public String getServiceLevelCode() {
    return this.serviceLevelCode;
  }

  /**
   * 服务级别*
   */
  public MemberInfoVo setServiceLevelCode(String serviceLevelCode) {
    this.serviceLevelCode = serviceLevelCode;
    return this;
  }

  public void unsetServiceLevelCode() {
    this.serviceLevelCode = null;
  }

  /** Returns true if field serviceLevelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceLevelCode() {
    return this.serviceLevelCode != null;
  }

  public void setServiceLevelCodeIsSet(boolean value) {
    if (!value) {
      this.serviceLevelCode = null;
    }
  }

  /**
   * 最近登录IP地址*
   */
  public String getLastLoginIP() {
    return this.lastLoginIP;
  }

  /**
   * 最近登录IP地址*
   */
  public MemberInfoVo setLastLoginIP(String lastLoginIP) {
    this.lastLoginIP = lastLoginIP;
    return this;
  }

  public void unsetLastLoginIP() {
    this.lastLoginIP = null;
  }

  /** Returns true if field lastLoginIP is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIP() {
    return this.lastLoginIP != null;
  }

  public void setLastLoginIPIsSet(boolean value) {
    if (!value) {
      this.lastLoginIP = null;
    }
  }

  /**
   * 最近登录时间*
   */
  public long getLastLoginTime() {
    return this.lastLoginTime;
  }

  /**
   * 最近登录时间*
   */
  public MemberInfoVo setLastLoginTime(long lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    setLastLoginTimeIsSet(true);
    return this;
  }

  public void unsetLastLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  public void setLastLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID, value);
  }

  /**
   * 登陆失败限制次数，默认为0*
   */
  public int getLoginFailureCount() {
    return this.loginFailureCount;
  }

  /**
   * 登陆失败限制次数，默认为0*
   */
  public MemberInfoVo setLoginFailureCount(int loginFailureCount) {
    this.loginFailureCount = loginFailureCount;
    setLoginFailureCountIsSet(true);
    return this;
  }

  public void unsetLoginFailureCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINFAILURECOUNT_ISSET_ID);
  }

  /** Returns true if field loginFailureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginFailureCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGINFAILURECOUNT_ISSET_ID);
  }

  public void setLoginFailureCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINFAILURECOUNT_ISSET_ID, value);
  }

  /**
   * 账号冻结日期*
   */
  public long getLockDate() {
    return this.lockDate;
  }

  /**
   * 账号冻结日期*
   */
  public MemberInfoVo setLockDate(long lockDate) {
    this.lockDate = lockDate;
    setLockDateIsSet(true);
    return this;
  }

  public void unsetLockDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKDATE_ISSET_ID);
  }

  /** Returns true if field lockDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLockDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKDATE_ISSET_ID);
  }

  public void setLockDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKDATE_ISSET_ID, value);
  }

  /**
   * 允许登录的IP*
   */
  public String getAllowIP() {
    return this.allowIP;
  }

  /**
   * 允许登录的IP*
   */
  public MemberInfoVo setAllowIP(String allowIP) {
    this.allowIP = allowIP;
    return this;
  }

  public void unsetAllowIP() {
    this.allowIP = null;
  }

  /** Returns true if field allowIP is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowIP() {
    return this.allowIP != null;
  }

  public void setAllowIPIsSet(boolean value) {
    if (!value) {
      this.allowIP = null;
    }
  }

  /**
   * 用户ID*
   */
  public String getUserID() {
    return this.userID;
  }

  /**
   * 用户ID*
   */
  public MemberInfoVo setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  /**
   * 生日*
   */
  public long getBirthday() {
    return this.birthday;
  }

  /**
   * 生日*
   */
  public MemberInfoVo setBirthday(long birthday) {
    this.birthday = birthday;
    setBirthdayIsSet(true);
    return this;
  }

  public void unsetBirthday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBirthdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  /**
   * 首次失败时间*
   */
  public long getFirstTryTime() {
    return this.firstTryTime;
  }

  /**
   * 首次失败时间*
   */
  public MemberInfoVo setFirstTryTime(long firstTryTime) {
    this.firstTryTime = firstTryTime;
    setFirstTryTimeIsSet(true);
    return this;
  }

  public void unsetFirstTryTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTTRYTIME_ISSET_ID);
  }

  /** Returns true if field firstTryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstTryTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTTRYTIME_ISSET_ID);
  }

  public void setFirstTryTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTTRYTIME_ISSET_ID, value);
  }

  /**
   * 连续登陆失败次数，默认为0*
   */
  public int getTryLoginCount() {
    return this.tryLoginCount;
  }

  /**
   * 连续登陆失败次数，默认为0*
   */
  public MemberInfoVo setTryLoginCount(int tryLoginCount) {
    this.tryLoginCount = tryLoginCount;
    setTryLoginCountIsSet(true);
    return this;
  }

  public void unsetTryLoginCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRYLOGINCOUNT_ISSET_ID);
  }

  /** Returns true if field tryLoginCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTryLoginCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRYLOGINCOUNT_ISSET_ID);
  }

  public void setTryLoginCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRYLOGINCOUNT_ISSET_ID, value);
  }

  /**
   * 注册IP*
   */
  public String getRegisterIP() {
    return this.registerIP;
  }

  /**
   * 注册IP*
   */
  public MemberInfoVo setRegisterIP(String registerIP) {
    this.registerIP = registerIP;
    return this;
  }

  public void unsetRegisterIP() {
    this.registerIP = null;
  }

  /** Returns true if field registerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterIP() {
    return this.registerIP != null;
  }

  public void setRegisterIPIsSet(boolean value) {
    if (!value) {
      this.registerIP = null;
    }
  }

  /**
   * 成功登录标识*
   */
  public String getLoginFlag() {
    return this.loginFlag;
  }

  /**
   * 成功登录标识*
   */
  public MemberInfoVo setLoginFlag(String loginFlag) {
    this.loginFlag = loginFlag;
    return this;
  }

  public void unsetLoginFlag() {
    this.loginFlag = null;
  }

  /** Returns true if field loginFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginFlag() {
    return this.loginFlag != null;
  }

  public void setLoginFlagIsSet(boolean value) {
    if (!value) {
      this.loginFlag = null;
    }
  }

  /**
   * 个人介绍*
   */
  public String getIntroduce() {
    return this.introduce;
  }

  /**
   * 个人介绍*
   */
  public MemberInfoVo setIntroduce(String introduce) {
    this.introduce = introduce;
    return this;
  }

  public void unsetIntroduce() {
    this.introduce = null;
  }

  /** Returns true if field introduce is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduce() {
    return this.introduce != null;
  }

  public void setIntroduceIsSet(boolean value) {
    if (!value) {
      this.introduce = null;
    }
  }

  /**
   * 是否绑定邮箱 0：未绑定，1：已绑定*
   */
  public boolean isIsBindEmail() {
    return this.isBindEmail;
  }

  /**
   * 是否绑定邮箱 0：未绑定，1：已绑定*
   */
  public MemberInfoVo setIsBindEmail(boolean isBindEmail) {
    this.isBindEmail = isBindEmail;
    setIsBindEmailIsSet(true);
    return this;
  }

  public void unsetIsBindEmail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDEMAIL_ISSET_ID);
  }

  /** Returns true if field isBindEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBindEmail() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDEMAIL_ISSET_ID);
  }

  public void setIsBindEmailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDEMAIL_ISSET_ID, value);
  }

  /**
   * 是否绑定手机 0：未绑定，1：已绑定*
   */
  public boolean isIsBindMobile() {
    return this.isBindMobile;
  }

  /**
   * 是否绑定手机 0：未绑定，1：已绑定*
   */
  public MemberInfoVo setIsBindMobile(boolean isBindMobile) {
    this.isBindMobile = isBindMobile;
    setIsBindMobileIsSet(true);
    return this;
  }

  public void unsetIsBindMobile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDMOBILE_ISSET_ID);
  }

  /** Returns true if field isBindMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBindMobile() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDMOBILE_ISSET_ID);
  }

  public void setIsBindMobileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDMOBILE_ISSET_ID, value);
  }

  /**
   * 是否绑定银行 0：未绑定，1：已绑定*
   */
  public boolean isIsBindBank() {
    return this.isBindBank;
  }

  /**
   * 是否绑定银行 0：未绑定，1：已绑定*
   */
  public MemberInfoVo setIsBindBank(boolean isBindBank) {
    this.isBindBank = isBindBank;
    setIsBindBankIsSet(true);
    return this;
  }

  public void unsetIsBindBank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBINDBANK_ISSET_ID);
  }

  /** Returns true if field isBindBank is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBindBank() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBINDBANK_ISSET_ID);
  }

  public void setIsBindBankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBINDBANK_ISSET_ID, value);
  }

  /**
   * 是否验证绑定的银行 0：未验证，1：已验证*
   */
  public boolean isIsValidBank() {
    return this.isValidBank;
  }

  /**
   * 是否验证绑定的银行 0：未验证，1：已验证*
   */
  public MemberInfoVo setIsValidBank(boolean isValidBank) {
    this.isValidBank = isValidBank;
    setIsValidBankIsSet(true);
    return this;
  }

  public void unsetIsValidBank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVALIDBANK_ISSET_ID);
  }

  /** Returns true if field isValidBank is set (has been assigned a value) and false otherwise */
  public boolean isSetIsValidBank() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVALIDBANK_ISSET_ID);
  }

  public void setIsValidBankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVALIDBANK_ISSET_ID, value);
  }

  /**
   * 批次号*
   */
  public String getBatchNo() {
    return this.batchNo;
  }

  /**
   * 批次号*
   */
  public MemberInfoVo setBatchNo(String batchNo) {
    this.batchNo = batchNo;
    return this;
  }

  public void unsetBatchNo() {
    this.batchNo = null;
  }

  /** Returns true if field batchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchNo() {
    return this.batchNo != null;
  }

  public void setBatchNoIsSet(boolean value) {
    if (!value) {
      this.batchNo = null;
    }
  }

  /**
   * 用户跟踪号*
   */
  public String getUserBankID() {
    return this.userBankID;
  }

  /**
   * 用户跟踪号*
   */
  public MemberInfoVo setUserBankID(String userBankID) {
    this.userBankID = userBankID;
    return this;
  }

  public void unsetUserBankID() {
    this.userBankID = null;
  }

  /** Returns true if field userBankID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserBankID() {
    return this.userBankID != null;
  }

  public void setUserBankIDIsSet(boolean value) {
    if (!value) {
      this.userBankID = null;
    }
  }

  /**
   * 银行组号*
   */
  public String getBankGroupId() {
    return this.bankGroupId;
  }

  /**
   * 银行组号*
   */
  public MemberInfoVo setBankGroupId(String bankGroupId) {
    this.bankGroupId = bankGroupId;
    return this;
  }

  public void unsetBankGroupId() {
    this.bankGroupId = null;
  }

  /** Returns true if field bankGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankGroupId() {
    return this.bankGroupId != null;
  }

  public void setBankGroupIdIsSet(boolean value) {
    if (!value) {
      this.bankGroupId = null;
    }
  }

  /**
   * 银行名称*
   */
  public String getBankName() {
    return this.bankName;
  }

  /**
   * 银行名称*
   */
  public MemberInfoVo setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  /**
   * 银行标识*
   */
  public String getBankOrgNo() {
    return this.bankOrgNo;
  }

  /**
   * 银行标识*
   */
  public MemberInfoVo setBankOrgNo(String bankOrgNo) {
    this.bankOrgNo = bankOrgNo;
    return this;
  }

  public void unsetBankOrgNo() {
    this.bankOrgNo = null;
  }

  /** Returns true if field bankOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankOrgNo() {
    return this.bankOrgNo != null;
  }

  public void setBankOrgNoIsSet(boolean value) {
    if (!value) {
      this.bankOrgNo = null;
    }
  }

  /**
   * 介绍人login_id..*
   */
  public String getIntroducer() {
    return this.introducer;
  }

  /**
   * 介绍人login_id..*
   */
  public MemberInfoVo setIntroducer(String introducer) {
    this.introducer = introducer;
    return this;
  }

  public void unsetIntroducer() {
    this.introducer = null;
  }

  /** Returns true if field introducer is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroducer() {
    return this.introducer != null;
  }

  public void setIntroducerIsSet(boolean value) {
    if (!value) {
      this.introducer = null;
    }
  }

  /**
   * 介绍人MemberCode*
   */
  public long getIntroducerMemberCode() {
    return this.introducerMemberCode;
  }

  /**
   * 介绍人MemberCode*
   */
  public MemberInfoVo setIntroducerMemberCode(long introducerMemberCode) {
    this.introducerMemberCode = introducerMemberCode;
    setIntroducerMemberCodeIsSet(true);
    return this;
  }

  public void unsetIntroducerMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTRODUCERMEMBERCODE_ISSET_ID);
  }

  /** Returns true if field introducerMemberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroducerMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __INTRODUCERMEMBERCODE_ISSET_ID);
  }

  public void setIntroducerMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTRODUCERMEMBERCODE_ISSET_ID, value);
  }

  /**
   * 密码*
   */
  public String getPwd() {
    return this.pwd;
  }

  /**
   * 密码*
   */
  public MemberInfoVo setPwd(String pwd) {
    this.pwd = pwd;
    return this;
  }

  public void unsetPwd() {
    this.pwd = null;
  }

  /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPwd() {
    return this.pwd != null;
  }

  public void setPwdIsSet(boolean value) {
    if (!value) {
      this.pwd = null;
    }
  }

  public String getResultMessage() {
    return this.resultMessage;
  }

  public MemberInfoVo setResultMessage(String resultMessage) {
    this.resultMessage = resultMessage;
    return this;
  }

  public void unsetResultMessage() {
    this.resultMessage = null;
  }

  /** Returns true if field resultMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMessage() {
    return this.resultMessage != null;
  }

  public void setResultMessageIsSet(boolean value) {
    if (!value) {
      this.resultMessage = null;
    }
  }

  public boolean isResultSuccess() {
    return this.resultSuccess;
  }

  public MemberInfoVo setResultSuccess(boolean resultSuccess) {
    this.resultSuccess = resultSuccess;
    setResultSuccessIsSet(true);
    return this;
  }

  public void unsetResultSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID);
  }

  /** Returns true if field resultSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID);
  }

  public void setResultSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID, value);
  }

  public MemberVIPInfoVo getMemberVIPInfoVo() {
    return this.memberVIPInfoVo;
  }

  public MemberInfoVo setMemberVIPInfoVo(MemberVIPInfoVo memberVIPInfoVo) {
    this.memberVIPInfoVo = memberVIPInfoVo;
    return this;
  }

  public void unsetMemberVIPInfoVo() {
    this.memberVIPInfoVo = null;
  }

  /** Returns true if field memberVIPInfoVo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberVIPInfoVo() {
    return this.memberVIPInfoVo != null;
  }

  public void setMemberVIPInfoVoIsSet(boolean value) {
    if (!value) {
      this.memberVIPInfoVo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_TYPE:
      if (value == null) {
        unsetMemberType();
      } else {
        setMemberType((Integer)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginID();
      } else {
        setLoginID((String)value);
      }
      break;

    case LOGIN_PWD:
      if (value == null) {
        unsetLoginPwd();
      } else {
        setLoginPwd((String)value);
      }
      break;

    case LOGIN_TYPE:
      if (value == null) {
        unsetLoginType();
      } else {
        setLoginType((Integer)value);
      }
      break;

    case UNAME:
      if (value == null) {
        unsetUname();
      } else {
        setUname((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case IDENTITY_KEY:
      if (value == null) {
        unsetIdentityKey();
      } else {
        setIdentityKey((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case CREATE_CHANNEL:
      if (value == null) {
        unsetCreateChannel();
      } else {
        setCreateChannel((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZipCode();
      } else {
        setZipCode((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case DUTY_CODE:
      if (value == null) {
        unsetDutyCode();
      } else {
        setDutyCode((String)value);
      }
      break;

    case SERVICE_LEVEL_CODE:
      if (value == null) {
        unsetServiceLevelCode();
      } else {
        setServiceLevelCode((String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIP();
      } else {
        setLastLoginIP((String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((Long)value);
      }
      break;

    case LOGIN_FAILURE_COUNT:
      if (value == null) {
        unsetLoginFailureCount();
      } else {
        setLoginFailureCount((Integer)value);
      }
      break;

    case LOCK_DATE:
      if (value == null) {
        unsetLockDate();
      } else {
        setLockDate((Long)value);
      }
      break;

    case ALLOW_IP:
      if (value == null) {
        unsetAllowIP();
      } else {
        setAllowIP((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((Long)value);
      }
      break;

    case FIRST_TRY_TIME:
      if (value == null) {
        unsetFirstTryTime();
      } else {
        setFirstTryTime((Long)value);
      }
      break;

    case TRY_LOGIN_COUNT:
      if (value == null) {
        unsetTryLoginCount();
      } else {
        setTryLoginCount((Integer)value);
      }
      break;

    case REGISTER_IP:
      if (value == null) {
        unsetRegisterIP();
      } else {
        setRegisterIP((String)value);
      }
      break;

    case LOGIN_FLAG:
      if (value == null) {
        unsetLoginFlag();
      } else {
        setLoginFlag((String)value);
      }
      break;

    case INTRODUCE:
      if (value == null) {
        unsetIntroduce();
      } else {
        setIntroduce((String)value);
      }
      break;

    case IS_BIND_EMAIL:
      if (value == null) {
        unsetIsBindEmail();
      } else {
        setIsBindEmail((Boolean)value);
      }
      break;

    case IS_BIND_MOBILE:
      if (value == null) {
        unsetIsBindMobile();
      } else {
        setIsBindMobile((Boolean)value);
      }
      break;

    case IS_BIND_BANK:
      if (value == null) {
        unsetIsBindBank();
      } else {
        setIsBindBank((Boolean)value);
      }
      break;

    case IS_VALID_BANK:
      if (value == null) {
        unsetIsValidBank();
      } else {
        setIsValidBank((Boolean)value);
      }
      break;

    case BATCH_NO:
      if (value == null) {
        unsetBatchNo();
      } else {
        setBatchNo((String)value);
      }
      break;

    case USER_BANK_ID:
      if (value == null) {
        unsetUserBankID();
      } else {
        setUserBankID((String)value);
      }
      break;

    case BANK_GROUP_ID:
      if (value == null) {
        unsetBankGroupId();
      } else {
        setBankGroupId((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_ORG_NO:
      if (value == null) {
        unsetBankOrgNo();
      } else {
        setBankOrgNo((String)value);
      }
      break;

    case INTRODUCER:
      if (value == null) {
        unsetIntroducer();
      } else {
        setIntroducer((String)value);
      }
      break;

    case INTRODUCER_MEMBER_CODE:
      if (value == null) {
        unsetIntroducerMemberCode();
      } else {
        setIntroducerMemberCode((Long)value);
      }
      break;

    case PWD:
      if (value == null) {
        unsetPwd();
      } else {
        setPwd((String)value);
      }
      break;

    case RESULT_MESSAGE:
      if (value == null) {
        unsetResultMessage();
      } else {
        setResultMessage((String)value);
      }
      break;

    case RESULT_SUCCESS:
      if (value == null) {
        unsetResultSuccess();
      } else {
        setResultSuccess((Boolean)value);
      }
      break;

    case MEMBER_VIPINFO_VO:
      if (value == null) {
        unsetMemberVIPInfoVo();
      } else {
        setMemberVIPInfoVo((MemberVIPInfoVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_TYPE:
      return Integer.valueOf(getMemberType());

    case LOGIN_ID:
      return getLoginID();

    case LOGIN_PWD:
      return getLoginPwd();

    case LOGIN_TYPE:
      return Integer.valueOf(getLoginType());

    case UNAME:
      return getUname();

    case EMAIL:
      return getEmail();

    case STATUS:
      return Integer.valueOf(getStatus());

    case MOBILE:
      return getMobile();

    case IDENTITY_KEY:
      return getIdentityKey();

    case SEX:
      return getSex();

    case AGE:
      return Integer.valueOf(getAge());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case CREATE_CHANNEL:
      return getCreateChannel();

    case ADDRESS:
      return getAddress();

    case ZIP_CODE:
      return getZipCode();

    case ORG_CODE:
      return getOrgCode();

    case DUTY_CODE:
      return getDutyCode();

    case SERVICE_LEVEL_CODE:
      return getServiceLevelCode();

    case LAST_LOGIN_IP:
      return getLastLoginIP();

    case LAST_LOGIN_TIME:
      return Long.valueOf(getLastLoginTime());

    case LOGIN_FAILURE_COUNT:
      return Integer.valueOf(getLoginFailureCount());

    case LOCK_DATE:
      return Long.valueOf(getLockDate());

    case ALLOW_IP:
      return getAllowIP();

    case USER_ID:
      return getUserID();

    case BIRTHDAY:
      return Long.valueOf(getBirthday());

    case FIRST_TRY_TIME:
      return Long.valueOf(getFirstTryTime());

    case TRY_LOGIN_COUNT:
      return Integer.valueOf(getTryLoginCount());

    case REGISTER_IP:
      return getRegisterIP();

    case LOGIN_FLAG:
      return getLoginFlag();

    case INTRODUCE:
      return getIntroduce();

    case IS_BIND_EMAIL:
      return Boolean.valueOf(isIsBindEmail());

    case IS_BIND_MOBILE:
      return Boolean.valueOf(isIsBindMobile());

    case IS_BIND_BANK:
      return Boolean.valueOf(isIsBindBank());

    case IS_VALID_BANK:
      return Boolean.valueOf(isIsValidBank());

    case BATCH_NO:
      return getBatchNo();

    case USER_BANK_ID:
      return getUserBankID();

    case BANK_GROUP_ID:
      return getBankGroupId();

    case BANK_NAME:
      return getBankName();

    case BANK_ORG_NO:
      return getBankOrgNo();

    case INTRODUCER:
      return getIntroducer();

    case INTRODUCER_MEMBER_CODE:
      return Long.valueOf(getIntroducerMemberCode());

    case PWD:
      return getPwd();

    case RESULT_MESSAGE:
      return getResultMessage();

    case RESULT_SUCCESS:
      return Boolean.valueOf(isResultSuccess());

    case MEMBER_VIPINFO_VO:
      return getMemberVIPInfoVo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_TYPE:
      return isSetMemberType();
    case LOGIN_ID:
      return isSetLoginID();
    case LOGIN_PWD:
      return isSetLoginPwd();
    case LOGIN_TYPE:
      return isSetLoginType();
    case UNAME:
      return isSetUname();
    case EMAIL:
      return isSetEmail();
    case STATUS:
      return isSetStatus();
    case MOBILE:
      return isSetMobile();
    case IDENTITY_KEY:
      return isSetIdentityKey();
    case SEX:
      return isSetSex();
    case AGE:
      return isSetAge();
    case CREATE_TIME:
      return isSetCreateTime();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CREATE_CHANNEL:
      return isSetCreateChannel();
    case ADDRESS:
      return isSetAddress();
    case ZIP_CODE:
      return isSetZipCode();
    case ORG_CODE:
      return isSetOrgCode();
    case DUTY_CODE:
      return isSetDutyCode();
    case SERVICE_LEVEL_CODE:
      return isSetServiceLevelCode();
    case LAST_LOGIN_IP:
      return isSetLastLoginIP();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case LOGIN_FAILURE_COUNT:
      return isSetLoginFailureCount();
    case LOCK_DATE:
      return isSetLockDate();
    case ALLOW_IP:
      return isSetAllowIP();
    case USER_ID:
      return isSetUserID();
    case BIRTHDAY:
      return isSetBirthday();
    case FIRST_TRY_TIME:
      return isSetFirstTryTime();
    case TRY_LOGIN_COUNT:
      return isSetTryLoginCount();
    case REGISTER_IP:
      return isSetRegisterIP();
    case LOGIN_FLAG:
      return isSetLoginFlag();
    case INTRODUCE:
      return isSetIntroduce();
    case IS_BIND_EMAIL:
      return isSetIsBindEmail();
    case IS_BIND_MOBILE:
      return isSetIsBindMobile();
    case IS_BIND_BANK:
      return isSetIsBindBank();
    case IS_VALID_BANK:
      return isSetIsValidBank();
    case BATCH_NO:
      return isSetBatchNo();
    case USER_BANK_ID:
      return isSetUserBankID();
    case BANK_GROUP_ID:
      return isSetBankGroupId();
    case BANK_NAME:
      return isSetBankName();
    case BANK_ORG_NO:
      return isSetBankOrgNo();
    case INTRODUCER:
      return isSetIntroducer();
    case INTRODUCER_MEMBER_CODE:
      return isSetIntroducerMemberCode();
    case PWD:
      return isSetPwd();
    case RESULT_MESSAGE:
      return isSetResultMessage();
    case RESULT_SUCCESS:
      return isSetResultSuccess();
    case MEMBER_VIPINFO_VO:
      return isSetMemberVIPInfoVo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MemberInfoVo)
      return this.equals((MemberInfoVo)that);
    return false;
  }

  public boolean equals(MemberInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberType = true;
    boolean that_present_memberType = true;
    if (this_present_memberType || that_present_memberType) {
      if (!(this_present_memberType && that_present_memberType))
        return false;
      if (this.memberType != that.memberType)
        return false;
    }

    boolean this_present_loginID = true && this.isSetLoginID();
    boolean that_present_loginID = true && that.isSetLoginID();
    if (this_present_loginID || that_present_loginID) {
      if (!(this_present_loginID && that_present_loginID))
        return false;
      if (!this.loginID.equals(that.loginID))
        return false;
    }

    boolean this_present_loginPwd = true && this.isSetLoginPwd();
    boolean that_present_loginPwd = true && that.isSetLoginPwd();
    if (this_present_loginPwd || that_present_loginPwd) {
      if (!(this_present_loginPwd && that_present_loginPwd))
        return false;
      if (!this.loginPwd.equals(that.loginPwd))
        return false;
    }

    boolean this_present_loginType = true;
    boolean that_present_loginType = true;
    if (this_present_loginType || that_present_loginType) {
      if (!(this_present_loginType && that_present_loginType))
        return false;
      if (this.loginType != that.loginType)
        return false;
    }

    boolean this_present_uname = true && this.isSetUname();
    boolean that_present_uname = true && that.isSetUname();
    if (this_present_uname || that_present_uname) {
      if (!(this_present_uname && that_present_uname))
        return false;
      if (!this.uname.equals(that.uname))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_identityKey = true && this.isSetIdentityKey();
    boolean that_present_identityKey = true && that.isSetIdentityKey();
    if (this_present_identityKey || that_present_identityKey) {
      if (!(this_present_identityKey && that_present_identityKey))
        return false;
      if (!this.identityKey.equals(that.identityKey))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_beginTime = true;
    boolean that_present_beginTime = true;
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_createChannel = true && this.isSetCreateChannel();
    boolean that_present_createChannel = true && that.isSetCreateChannel();
    if (this_present_createChannel || that_present_createChannel) {
      if (!(this_present_createChannel && that_present_createChannel))
        return false;
      if (!this.createChannel.equals(that.createChannel))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_zipCode = true && this.isSetZipCode();
    boolean that_present_zipCode = true && that.isSetZipCode();
    if (this_present_zipCode || that_present_zipCode) {
      if (!(this_present_zipCode && that_present_zipCode))
        return false;
      if (!this.zipCode.equals(that.zipCode))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_dutyCode = true && this.isSetDutyCode();
    boolean that_present_dutyCode = true && that.isSetDutyCode();
    if (this_present_dutyCode || that_present_dutyCode) {
      if (!(this_present_dutyCode && that_present_dutyCode))
        return false;
      if (!this.dutyCode.equals(that.dutyCode))
        return false;
    }

    boolean this_present_serviceLevelCode = true && this.isSetServiceLevelCode();
    boolean that_present_serviceLevelCode = true && that.isSetServiceLevelCode();
    if (this_present_serviceLevelCode || that_present_serviceLevelCode) {
      if (!(this_present_serviceLevelCode && that_present_serviceLevelCode))
        return false;
      if (!this.serviceLevelCode.equals(that.serviceLevelCode))
        return false;
    }

    boolean this_present_lastLoginIP = true && this.isSetLastLoginIP();
    boolean that_present_lastLoginIP = true && that.isSetLastLoginIP();
    if (this_present_lastLoginIP || that_present_lastLoginIP) {
      if (!(this_present_lastLoginIP && that_present_lastLoginIP))
        return false;
      if (!this.lastLoginIP.equals(that.lastLoginIP))
        return false;
    }

    boolean this_present_lastLoginTime = true;
    boolean that_present_lastLoginTime = true;
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (this.lastLoginTime != that.lastLoginTime)
        return false;
    }

    boolean this_present_loginFailureCount = true;
    boolean that_present_loginFailureCount = true;
    if (this_present_loginFailureCount || that_present_loginFailureCount) {
      if (!(this_present_loginFailureCount && that_present_loginFailureCount))
        return false;
      if (this.loginFailureCount != that.loginFailureCount)
        return false;
    }

    boolean this_present_lockDate = true;
    boolean that_present_lockDate = true;
    if (this_present_lockDate || that_present_lockDate) {
      if (!(this_present_lockDate && that_present_lockDate))
        return false;
      if (this.lockDate != that.lockDate)
        return false;
    }

    boolean this_present_allowIP = true && this.isSetAllowIP();
    boolean that_present_allowIP = true && that.isSetAllowIP();
    if (this_present_allowIP || that_present_allowIP) {
      if (!(this_present_allowIP && that_present_allowIP))
        return false;
      if (!this.allowIP.equals(that.allowIP))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_birthday = true;
    boolean that_present_birthday = true;
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (this.birthday != that.birthday)
        return false;
    }

    boolean this_present_firstTryTime = true;
    boolean that_present_firstTryTime = true;
    if (this_present_firstTryTime || that_present_firstTryTime) {
      if (!(this_present_firstTryTime && that_present_firstTryTime))
        return false;
      if (this.firstTryTime != that.firstTryTime)
        return false;
    }

    boolean this_present_tryLoginCount = true;
    boolean that_present_tryLoginCount = true;
    if (this_present_tryLoginCount || that_present_tryLoginCount) {
      if (!(this_present_tryLoginCount && that_present_tryLoginCount))
        return false;
      if (this.tryLoginCount != that.tryLoginCount)
        return false;
    }

    boolean this_present_registerIP = true && this.isSetRegisterIP();
    boolean that_present_registerIP = true && that.isSetRegisterIP();
    if (this_present_registerIP || that_present_registerIP) {
      if (!(this_present_registerIP && that_present_registerIP))
        return false;
      if (!this.registerIP.equals(that.registerIP))
        return false;
    }

    boolean this_present_loginFlag = true && this.isSetLoginFlag();
    boolean that_present_loginFlag = true && that.isSetLoginFlag();
    if (this_present_loginFlag || that_present_loginFlag) {
      if (!(this_present_loginFlag && that_present_loginFlag))
        return false;
      if (!this.loginFlag.equals(that.loginFlag))
        return false;
    }

    boolean this_present_introduce = true && this.isSetIntroduce();
    boolean that_present_introduce = true && that.isSetIntroduce();
    if (this_present_introduce || that_present_introduce) {
      if (!(this_present_introduce && that_present_introduce))
        return false;
      if (!this.introduce.equals(that.introduce))
        return false;
    }

    boolean this_present_isBindEmail = true;
    boolean that_present_isBindEmail = true;
    if (this_present_isBindEmail || that_present_isBindEmail) {
      if (!(this_present_isBindEmail && that_present_isBindEmail))
        return false;
      if (this.isBindEmail != that.isBindEmail)
        return false;
    }

    boolean this_present_isBindMobile = true;
    boolean that_present_isBindMobile = true;
    if (this_present_isBindMobile || that_present_isBindMobile) {
      if (!(this_present_isBindMobile && that_present_isBindMobile))
        return false;
      if (this.isBindMobile != that.isBindMobile)
        return false;
    }

    boolean this_present_isBindBank = true;
    boolean that_present_isBindBank = true;
    if (this_present_isBindBank || that_present_isBindBank) {
      if (!(this_present_isBindBank && that_present_isBindBank))
        return false;
      if (this.isBindBank != that.isBindBank)
        return false;
    }

    boolean this_present_isValidBank = true;
    boolean that_present_isValidBank = true;
    if (this_present_isValidBank || that_present_isValidBank) {
      if (!(this_present_isValidBank && that_present_isValidBank))
        return false;
      if (this.isValidBank != that.isValidBank)
        return false;
    }

    boolean this_present_batchNo = true && this.isSetBatchNo();
    boolean that_present_batchNo = true && that.isSetBatchNo();
    if (this_present_batchNo || that_present_batchNo) {
      if (!(this_present_batchNo && that_present_batchNo))
        return false;
      if (!this.batchNo.equals(that.batchNo))
        return false;
    }

    boolean this_present_userBankID = true && this.isSetUserBankID();
    boolean that_present_userBankID = true && that.isSetUserBankID();
    if (this_present_userBankID || that_present_userBankID) {
      if (!(this_present_userBankID && that_present_userBankID))
        return false;
      if (!this.userBankID.equals(that.userBankID))
        return false;
    }

    boolean this_present_bankGroupId = true && this.isSetBankGroupId();
    boolean that_present_bankGroupId = true && that.isSetBankGroupId();
    if (this_present_bankGroupId || that_present_bankGroupId) {
      if (!(this_present_bankGroupId && that_present_bankGroupId))
        return false;
      if (!this.bankGroupId.equals(that.bankGroupId))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankOrgNo = true && this.isSetBankOrgNo();
    boolean that_present_bankOrgNo = true && that.isSetBankOrgNo();
    if (this_present_bankOrgNo || that_present_bankOrgNo) {
      if (!(this_present_bankOrgNo && that_present_bankOrgNo))
        return false;
      if (!this.bankOrgNo.equals(that.bankOrgNo))
        return false;
    }

    boolean this_present_introducer = true && this.isSetIntroducer();
    boolean that_present_introducer = true && that.isSetIntroducer();
    if (this_present_introducer || that_present_introducer) {
      if (!(this_present_introducer && that_present_introducer))
        return false;
      if (!this.introducer.equals(that.introducer))
        return false;
    }

    boolean this_present_introducerMemberCode = true;
    boolean that_present_introducerMemberCode = true;
    if (this_present_introducerMemberCode || that_present_introducerMemberCode) {
      if (!(this_present_introducerMemberCode && that_present_introducerMemberCode))
        return false;
      if (this.introducerMemberCode != that.introducerMemberCode)
        return false;
    }

    boolean this_present_pwd = true && this.isSetPwd();
    boolean that_present_pwd = true && that.isSetPwd();
    if (this_present_pwd || that_present_pwd) {
      if (!(this_present_pwd && that_present_pwd))
        return false;
      if (!this.pwd.equals(that.pwd))
        return false;
    }

    boolean this_present_resultMessage = true && this.isSetResultMessage();
    boolean that_present_resultMessage = true && that.isSetResultMessage();
    if (this_present_resultMessage || that_present_resultMessage) {
      if (!(this_present_resultMessage && that_present_resultMessage))
        return false;
      if (!this.resultMessage.equals(that.resultMessage))
        return false;
    }

    boolean this_present_resultSuccess = true;
    boolean that_present_resultSuccess = true;
    if (this_present_resultSuccess || that_present_resultSuccess) {
      if (!(this_present_resultSuccess && that_present_resultSuccess))
        return false;
      if (this.resultSuccess != that.resultSuccess)
        return false;
    }

    boolean this_present_memberVIPInfoVo = true && this.isSetMemberVIPInfoVo();
    boolean that_present_memberVIPInfoVo = true && that.isSetMemberVIPInfoVo();
    if (this_present_memberVIPInfoVo || that_present_memberVIPInfoVo) {
      if (!(this_present_memberVIPInfoVo && that_present_memberVIPInfoVo))
        return false;
      if (!this.memberVIPInfoVo.equals(that.memberVIPInfoVo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberType = true;
    list.add(present_memberType);
    if (present_memberType)
      list.add(memberType);

    boolean present_loginID = true && (isSetLoginID());
    list.add(present_loginID);
    if (present_loginID)
      list.add(loginID);

    boolean present_loginPwd = true && (isSetLoginPwd());
    list.add(present_loginPwd);
    if (present_loginPwd)
      list.add(loginPwd);

    boolean present_loginType = true;
    list.add(present_loginType);
    if (present_loginType)
      list.add(loginType);

    boolean present_uname = true && (isSetUname());
    list.add(present_uname);
    if (present_uname)
      list.add(uname);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_identityKey = true && (isSetIdentityKey());
    list.add(present_identityKey);
    if (present_identityKey)
      list.add(identityKey);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_beginTime = true;
    list.add(present_beginTime);
    if (present_beginTime)
      list.add(beginTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_createChannel = true && (isSetCreateChannel());
    list.add(present_createChannel);
    if (present_createChannel)
      list.add(createChannel);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_zipCode = true && (isSetZipCode());
    list.add(present_zipCode);
    if (present_zipCode)
      list.add(zipCode);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_dutyCode = true && (isSetDutyCode());
    list.add(present_dutyCode);
    if (present_dutyCode)
      list.add(dutyCode);

    boolean present_serviceLevelCode = true && (isSetServiceLevelCode());
    list.add(present_serviceLevelCode);
    if (present_serviceLevelCode)
      list.add(serviceLevelCode);

    boolean present_lastLoginIP = true && (isSetLastLoginIP());
    list.add(present_lastLoginIP);
    if (present_lastLoginIP)
      list.add(lastLoginIP);

    boolean present_lastLoginTime = true;
    list.add(present_lastLoginTime);
    if (present_lastLoginTime)
      list.add(lastLoginTime);

    boolean present_loginFailureCount = true;
    list.add(present_loginFailureCount);
    if (present_loginFailureCount)
      list.add(loginFailureCount);

    boolean present_lockDate = true;
    list.add(present_lockDate);
    if (present_lockDate)
      list.add(lockDate);

    boolean present_allowIP = true && (isSetAllowIP());
    list.add(present_allowIP);
    if (present_allowIP)
      list.add(allowIP);

    boolean present_userID = true && (isSetUserID());
    list.add(present_userID);
    if (present_userID)
      list.add(userID);

    boolean present_birthday = true;
    list.add(present_birthday);
    if (present_birthday)
      list.add(birthday);

    boolean present_firstTryTime = true;
    list.add(present_firstTryTime);
    if (present_firstTryTime)
      list.add(firstTryTime);

    boolean present_tryLoginCount = true;
    list.add(present_tryLoginCount);
    if (present_tryLoginCount)
      list.add(tryLoginCount);

    boolean present_registerIP = true && (isSetRegisterIP());
    list.add(present_registerIP);
    if (present_registerIP)
      list.add(registerIP);

    boolean present_loginFlag = true && (isSetLoginFlag());
    list.add(present_loginFlag);
    if (present_loginFlag)
      list.add(loginFlag);

    boolean present_introduce = true && (isSetIntroduce());
    list.add(present_introduce);
    if (present_introduce)
      list.add(introduce);

    boolean present_isBindEmail = true;
    list.add(present_isBindEmail);
    if (present_isBindEmail)
      list.add(isBindEmail);

    boolean present_isBindMobile = true;
    list.add(present_isBindMobile);
    if (present_isBindMobile)
      list.add(isBindMobile);

    boolean present_isBindBank = true;
    list.add(present_isBindBank);
    if (present_isBindBank)
      list.add(isBindBank);

    boolean present_isValidBank = true;
    list.add(present_isValidBank);
    if (present_isValidBank)
      list.add(isValidBank);

    boolean present_batchNo = true && (isSetBatchNo());
    list.add(present_batchNo);
    if (present_batchNo)
      list.add(batchNo);

    boolean present_userBankID = true && (isSetUserBankID());
    list.add(present_userBankID);
    if (present_userBankID)
      list.add(userBankID);

    boolean present_bankGroupId = true && (isSetBankGroupId());
    list.add(present_bankGroupId);
    if (present_bankGroupId)
      list.add(bankGroupId);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_bankOrgNo = true && (isSetBankOrgNo());
    list.add(present_bankOrgNo);
    if (present_bankOrgNo)
      list.add(bankOrgNo);

    boolean present_introducer = true && (isSetIntroducer());
    list.add(present_introducer);
    if (present_introducer)
      list.add(introducer);

    boolean present_introducerMemberCode = true;
    list.add(present_introducerMemberCode);
    if (present_introducerMemberCode)
      list.add(introducerMemberCode);

    boolean present_pwd = true && (isSetPwd());
    list.add(present_pwd);
    if (present_pwd)
      list.add(pwd);

    boolean present_resultMessage = true && (isSetResultMessage());
    list.add(present_resultMessage);
    if (present_resultMessage)
      list.add(resultMessage);

    boolean present_resultSuccess = true;
    list.add(present_resultSuccess);
    if (present_resultSuccess)
      list.add(resultSuccess);

    boolean present_memberVIPInfoVo = true && (isSetMemberVIPInfoVo());
    list.add(present_memberVIPInfoVo);
    if (present_memberVIPInfoVo)
      list.add(memberVIPInfoVo);

    return list.hashCode();
  }

  @Override
  public int compareTo(MemberInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberType()).compareTo(other.isSetMemberType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberType, other.memberType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginID()).compareTo(other.isSetLoginID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginID, other.loginID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPwd()).compareTo(other.isSetLoginPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPwd, other.loginPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginType()).compareTo(other.isSetLoginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginType, other.loginType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUname()).compareTo(other.isSetUname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uname, other.uname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityKey()).compareTo(other.isSetIdentityKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityKey, other.identityKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateChannel()).compareTo(other.isSetCreateChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createChannel, other.createChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipCode()).compareTo(other.isSetZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipCode, other.zipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDutyCode()).compareTo(other.isSetDutyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDutyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dutyCode, other.dutyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceLevelCode()).compareTo(other.isSetServiceLevelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceLevelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceLevelCode, other.serviceLevelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginIP()).compareTo(other.isSetLastLoginIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIP, other.lastLoginIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginFailureCount()).compareTo(other.isSetLoginFailureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginFailureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginFailureCount, other.loginFailureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockDate()).compareTo(other.isSetLockDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockDate, other.lockDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowIP()).compareTo(other.isSetAllowIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowIP, other.allowIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstTryTime()).compareTo(other.isSetFirstTryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstTryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstTryTime, other.firstTryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTryLoginCount()).compareTo(other.isSetTryLoginCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTryLoginCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tryLoginCount, other.tryLoginCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterIP()).compareTo(other.isSetRegisterIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerIP, other.registerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginFlag()).compareTo(other.isSetLoginFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginFlag, other.loginFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduce()).compareTo(other.isSetIntroduce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduce, other.introduce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBindEmail()).compareTo(other.isSetIsBindEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBindEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindEmail, other.isBindEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBindMobile()).compareTo(other.isSetIsBindMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBindMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindMobile, other.isBindMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBindBank()).compareTo(other.isSetIsBindBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBindBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBindBank, other.isBindBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsValidBank()).compareTo(other.isSetIsValidBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsValidBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValidBank, other.isValidBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchNo()).compareTo(other.isSetBatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchNo, other.batchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserBankID()).compareTo(other.isSetUserBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBankID, other.userBankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankGroupId()).compareTo(other.isSetBankGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankGroupId, other.bankGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankOrgNo()).compareTo(other.isSetBankOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOrgNo, other.bankOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroducer()).compareTo(other.isSetIntroducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introducer, other.introducer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroducerMemberCode()).compareTo(other.isSetIntroducerMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroducerMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introducerMemberCode, other.introducerMemberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultMessage()).compareTo(other.isSetResultMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMessage, other.resultMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultSuccess()).compareTo(other.isSetResultSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSuccess, other.resultSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberVIPInfoVo()).compareTo(other.isSetMemberVIPInfoVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberVIPInfoVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberVIPInfoVo, other.memberVIPInfoVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MemberInfoVo(");
    boolean first = true;

    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberType:");
    sb.append(this.memberType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginID:");
    if (this.loginID == null) {
      sb.append("null");
    } else {
      sb.append(this.loginID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPwd:");
    if (this.loginPwd == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginType:");
    sb.append(this.loginType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uname:");
    if (this.uname == null) {
      sb.append("null");
    } else {
      sb.append(this.uname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityKey:");
    if (this.identityKey == null) {
      sb.append("null");
    } else {
      sb.append(this.identityKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    sb.append(this.beginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createChannel:");
    if (this.createChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.createChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipCode:");
    if (this.zipCode == null) {
      sb.append("null");
    } else {
      sb.append(this.zipCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dutyCode:");
    if (this.dutyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.dutyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceLevelCode:");
    if (this.serviceLevelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceLevelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginIP:");
    if (this.lastLoginIP == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginTime:");
    sb.append(this.lastLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginFailureCount:");
    sb.append(this.loginFailureCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockDate:");
    sb.append(this.lockDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowIP:");
    if (this.allowIP == null) {
      sb.append("null");
    } else {
      sb.append(this.allowIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    sb.append(this.birthday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstTryTime:");
    sb.append(this.firstTryTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tryLoginCount:");
    sb.append(this.tryLoginCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerIP:");
    if (this.registerIP == null) {
      sb.append("null");
    } else {
      sb.append(this.registerIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginFlag:");
    if (this.loginFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.loginFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduce:");
    if (this.introduce == null) {
      sb.append("null");
    } else {
      sb.append(this.introduce);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBindEmail:");
    sb.append(this.isBindEmail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBindMobile:");
    sb.append(this.isBindMobile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBindBank:");
    sb.append(this.isBindBank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isValidBank:");
    sb.append(this.isValidBank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchNo:");
    if (this.batchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.batchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userBankID:");
    if (this.userBankID == null) {
      sb.append("null");
    } else {
      sb.append(this.userBankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankGroupId:");
    if (this.bankGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.bankGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankOrgNo:");
    if (this.bankOrgNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankOrgNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introducer:");
    if (this.introducer == null) {
      sb.append("null");
    } else {
      sb.append(this.introducer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introducerMemberCode:");
    sb.append(this.introducerMemberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwd:");
    if (this.pwd == null) {
      sb.append("null");
    } else {
      sb.append(this.pwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultMessage:");
    if (this.resultMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.resultMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultSuccess:");
    sb.append(this.resultSuccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberVIPInfoVo:");
    if (this.memberVIPInfoVo == null) {
      sb.append("null");
    } else {
      sb.append(this.memberVIPInfoVo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MemberInfoVoStandardSchemeFactory implements SchemeFactory {
    public MemberInfoVoStandardScheme getScheme() {
      return new MemberInfoVoStandardScheme();
    }
  }

  private static class MemberInfoVoStandardScheme extends StandardScheme<MemberInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MemberInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberType = iprot.readI32();
              struct.setMemberTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginID = iprot.readString();
              struct.setLoginIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGIN_PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPwd = iprot.readString();
              struct.setLoginPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginType = iprot.readI32();
              struct.setLoginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uname = iprot.readString();
              struct.setUnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IDENTITY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityKey = iprot.readString();
              struct.setIdentityKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createChannel = iprot.readString();
              struct.setCreateChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipCode = iprot.readString();
              struct.setZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DUTY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dutyCode = iprot.readString();
              struct.setDutyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SERVICE_LEVEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceLevelCode = iprot.readString();
              struct.setServiceLevelCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIP = iprot.readString();
              struct.setLastLoginIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastLoginTime = iprot.readI64();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOGIN_FAILURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginFailureCount = iprot.readI32();
              struct.setLoginFailureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOCK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockDate = iprot.readI64();
              struct.setLockDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ALLOW_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allowIP = iprot.readString();
              struct.setAllowIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthday = iprot.readI64();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FIRST_TRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstTryTime = iprot.readI64();
              struct.setFirstTryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TRY_LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tryLoginCount = iprot.readI32();
              struct.setTryLoginCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerIP = iprot.readString();
              struct.setRegisterIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LOGIN_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginFlag = iprot.readString();
              struct.setLoginFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INTRODUCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduce = iprot.readString();
              struct.setIntroduceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IS_BIND_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindEmail = iprot.readBool();
              struct.setIsBindEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // IS_BIND_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindMobile = iprot.readBool();
              struct.setIsBindMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // IS_BIND_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBindBank = iprot.readBool();
              struct.setIsBindBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // IS_VALID_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isValidBank = iprot.readBool();
              struct.setIsValidBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // BATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchNo = iprot.readString();
              struct.setBatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // USER_BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userBankID = iprot.readString();
              struct.setUserBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // BANK_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankGroupId = iprot.readString();
              struct.setBankGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // BANK_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankOrgNo = iprot.readString();
              struct.setBankOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // INTRODUCER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introducer = iprot.readString();
              struct.setIntroducerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // INTRODUCER_MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.introducerMemberCode = iprot.readI64();
              struct.setIntroducerMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwd = iprot.readString();
              struct.setPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // RESULT_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultMessage = iprot.readString();
              struct.setResultMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // RESULT_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resultSuccess = iprot.readBool();
              struct.setResultSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // MEMBER_VIPINFO_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memberVIPInfoVo = new MemberVIPInfoVo();
              struct.memberVIPInfoVo.read(iprot);
              struct.setMemberVIPInfoVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MemberInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.memberType);
      oprot.writeFieldEnd();
      if (struct.loginID != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginID);
        oprot.writeFieldEnd();
      }
      if (struct.loginPwd != null) {
        oprot.writeFieldBegin(LOGIN_PWD_FIELD_DESC);
        oprot.writeString(struct.loginPwd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOGIN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.loginType);
      oprot.writeFieldEnd();
      if (struct.uname != null) {
        oprot.writeFieldBegin(UNAME_FIELD_DESC);
        oprot.writeString(struct.uname);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.identityKey != null) {
        oprot.writeFieldBegin(IDENTITY_KEY_FIELD_DESC);
        oprot.writeString(struct.identityKey);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.beginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.createChannel != null) {
        oprot.writeFieldBegin(CREATE_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.createChannel);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.zipCode != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zipCode);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.dutyCode != null) {
        oprot.writeFieldBegin(DUTY_CODE_FIELD_DESC);
        oprot.writeString(struct.dutyCode);
        oprot.writeFieldEnd();
      }
      if (struct.serviceLevelCode != null) {
        oprot.writeFieldBegin(SERVICE_LEVEL_CODE_FIELD_DESC);
        oprot.writeString(struct.serviceLevelCode);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginIP != null) {
        oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
        oprot.writeString(struct.lastLoginIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOGIN_FAILURE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.loginFailureCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCK_DATE_FIELD_DESC);
      oprot.writeI64(struct.lockDate);
      oprot.writeFieldEnd();
      if (struct.allowIP != null) {
        oprot.writeFieldBegin(ALLOW_IP_FIELD_DESC);
        oprot.writeString(struct.allowIP);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.birthday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_TRY_TIME_FIELD_DESC);
      oprot.writeI64(struct.firstTryTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRY_LOGIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.tryLoginCount);
      oprot.writeFieldEnd();
      if (struct.registerIP != null) {
        oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
        oprot.writeString(struct.registerIP);
        oprot.writeFieldEnd();
      }
      if (struct.loginFlag != null) {
        oprot.writeFieldBegin(LOGIN_FLAG_FIELD_DESC);
        oprot.writeString(struct.loginFlag);
        oprot.writeFieldEnd();
      }
      if (struct.introduce != null) {
        oprot.writeFieldBegin(INTRODUCE_FIELD_DESC);
        oprot.writeString(struct.introduce);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_BIND_EMAIL_FIELD_DESC);
      oprot.writeBool(struct.isBindEmail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BIND_MOBILE_FIELD_DESC);
      oprot.writeBool(struct.isBindMobile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BIND_BANK_FIELD_DESC);
      oprot.writeBool(struct.isBindBank);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VALID_BANK_FIELD_DESC);
      oprot.writeBool(struct.isValidBank);
      oprot.writeFieldEnd();
      if (struct.batchNo != null) {
        oprot.writeFieldBegin(BATCH_NO_FIELD_DESC);
        oprot.writeString(struct.batchNo);
        oprot.writeFieldEnd();
      }
      if (struct.userBankID != null) {
        oprot.writeFieldBegin(USER_BANK_ID_FIELD_DESC);
        oprot.writeString(struct.userBankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankGroupId != null) {
        oprot.writeFieldBegin(BANK_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.bankGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.bankOrgNo != null) {
        oprot.writeFieldBegin(BANK_ORG_NO_FIELD_DESC);
        oprot.writeString(struct.bankOrgNo);
        oprot.writeFieldEnd();
      }
      if (struct.introducer != null) {
        oprot.writeFieldBegin(INTRODUCER_FIELD_DESC);
        oprot.writeString(struct.introducer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTRODUCER_MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.introducerMemberCode);
      oprot.writeFieldEnd();
      if (struct.pwd != null) {
        oprot.writeFieldBegin(PWD_FIELD_DESC);
        oprot.writeString(struct.pwd);
        oprot.writeFieldEnd();
      }
      if (struct.resultMessage != null) {
        oprot.writeFieldBegin(RESULT_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.resultMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.resultSuccess);
      oprot.writeFieldEnd();
      if (struct.memberVIPInfoVo != null) {
        oprot.writeFieldBegin(MEMBER_VIPINFO_VO_FIELD_DESC);
        struct.memberVIPInfoVo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MemberInfoVoTupleSchemeFactory implements SchemeFactory {
    public MemberInfoVoTupleScheme getScheme() {
      return new MemberInfoVoTupleScheme();
    }
  }

  private static class MemberInfoVoTupleScheme extends TupleScheme<MemberInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MemberInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemberCode()) {
        optionals.set(0);
      }
      if (struct.isSetMemberType()) {
        optionals.set(1);
      }
      if (struct.isSetLoginID()) {
        optionals.set(2);
      }
      if (struct.isSetLoginPwd()) {
        optionals.set(3);
      }
      if (struct.isSetLoginType()) {
        optionals.set(4);
      }
      if (struct.isSetUname()) {
        optionals.set(5);
      }
      if (struct.isSetEmail()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetMobile()) {
        optionals.set(8);
      }
      if (struct.isSetIdentityKey()) {
        optionals.set(9);
      }
      if (struct.isSetSex()) {
        optionals.set(10);
      }
      if (struct.isSetAge()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(12);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(13);
      }
      if (struct.isSetEndTime()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(15);
      }
      if (struct.isSetCreateChannel()) {
        optionals.set(16);
      }
      if (struct.isSetAddress()) {
        optionals.set(17);
      }
      if (struct.isSetZipCode()) {
        optionals.set(18);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(19);
      }
      if (struct.isSetDutyCode()) {
        optionals.set(20);
      }
      if (struct.isSetServiceLevelCode()) {
        optionals.set(21);
      }
      if (struct.isSetLastLoginIP()) {
        optionals.set(22);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(23);
      }
      if (struct.isSetLoginFailureCount()) {
        optionals.set(24);
      }
      if (struct.isSetLockDate()) {
        optionals.set(25);
      }
      if (struct.isSetAllowIP()) {
        optionals.set(26);
      }
      if (struct.isSetUserID()) {
        optionals.set(27);
      }
      if (struct.isSetBirthday()) {
        optionals.set(28);
      }
      if (struct.isSetFirstTryTime()) {
        optionals.set(29);
      }
      if (struct.isSetTryLoginCount()) {
        optionals.set(30);
      }
      if (struct.isSetRegisterIP()) {
        optionals.set(31);
      }
      if (struct.isSetLoginFlag()) {
        optionals.set(32);
      }
      if (struct.isSetIntroduce()) {
        optionals.set(33);
      }
      if (struct.isSetIsBindEmail()) {
        optionals.set(34);
      }
      if (struct.isSetIsBindMobile()) {
        optionals.set(35);
      }
      if (struct.isSetIsBindBank()) {
        optionals.set(36);
      }
      if (struct.isSetIsValidBank()) {
        optionals.set(37);
      }
      if (struct.isSetBatchNo()) {
        optionals.set(38);
      }
      if (struct.isSetUserBankID()) {
        optionals.set(39);
      }
      if (struct.isSetBankGroupId()) {
        optionals.set(40);
      }
      if (struct.isSetBankName()) {
        optionals.set(41);
      }
      if (struct.isSetBankOrgNo()) {
        optionals.set(42);
      }
      if (struct.isSetIntroducer()) {
        optionals.set(43);
      }
      if (struct.isSetIntroducerMemberCode()) {
        optionals.set(44);
      }
      if (struct.isSetPwd()) {
        optionals.set(45);
      }
      if (struct.isSetResultMessage()) {
        optionals.set(46);
      }
      if (struct.isSetResultSuccess()) {
        optionals.set(47);
      }
      if (struct.isSetMemberVIPInfoVo()) {
        optionals.set(48);
      }
      oprot.writeBitSet(optionals, 49);
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetMemberType()) {
        oprot.writeI32(struct.memberType);
      }
      if (struct.isSetLoginID()) {
        oprot.writeString(struct.loginID);
      }
      if (struct.isSetLoginPwd()) {
        oprot.writeString(struct.loginPwd);
      }
      if (struct.isSetLoginType()) {
        oprot.writeI32(struct.loginType);
      }
      if (struct.isSetUname()) {
        oprot.writeString(struct.uname);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetIdentityKey()) {
        oprot.writeString(struct.identityKey);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetCreateChannel()) {
        oprot.writeString(struct.createChannel);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetZipCode()) {
        oprot.writeString(struct.zipCode);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetDutyCode()) {
        oprot.writeString(struct.dutyCode);
      }
      if (struct.isSetServiceLevelCode()) {
        oprot.writeString(struct.serviceLevelCode);
      }
      if (struct.isSetLastLoginIP()) {
        oprot.writeString(struct.lastLoginIP);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeI64(struct.lastLoginTime);
      }
      if (struct.isSetLoginFailureCount()) {
        oprot.writeI32(struct.loginFailureCount);
      }
      if (struct.isSetLockDate()) {
        oprot.writeI64(struct.lockDate);
      }
      if (struct.isSetAllowIP()) {
        oprot.writeString(struct.allowIP);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetBirthday()) {
        oprot.writeI64(struct.birthday);
      }
      if (struct.isSetFirstTryTime()) {
        oprot.writeI64(struct.firstTryTime);
      }
      if (struct.isSetTryLoginCount()) {
        oprot.writeI32(struct.tryLoginCount);
      }
      if (struct.isSetRegisterIP()) {
        oprot.writeString(struct.registerIP);
      }
      if (struct.isSetLoginFlag()) {
        oprot.writeString(struct.loginFlag);
      }
      if (struct.isSetIntroduce()) {
        oprot.writeString(struct.introduce);
      }
      if (struct.isSetIsBindEmail()) {
        oprot.writeBool(struct.isBindEmail);
      }
      if (struct.isSetIsBindMobile()) {
        oprot.writeBool(struct.isBindMobile);
      }
      if (struct.isSetIsBindBank()) {
        oprot.writeBool(struct.isBindBank);
      }
      if (struct.isSetIsValidBank()) {
        oprot.writeBool(struct.isValidBank);
      }
      if (struct.isSetBatchNo()) {
        oprot.writeString(struct.batchNo);
      }
      if (struct.isSetUserBankID()) {
        oprot.writeString(struct.userBankID);
      }
      if (struct.isSetBankGroupId()) {
        oprot.writeString(struct.bankGroupId);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankOrgNo()) {
        oprot.writeString(struct.bankOrgNo);
      }
      if (struct.isSetIntroducer()) {
        oprot.writeString(struct.introducer);
      }
      if (struct.isSetIntroducerMemberCode()) {
        oprot.writeI64(struct.introducerMemberCode);
      }
      if (struct.isSetPwd()) {
        oprot.writeString(struct.pwd);
      }
      if (struct.isSetResultMessage()) {
        oprot.writeString(struct.resultMessage);
      }
      if (struct.isSetResultSuccess()) {
        oprot.writeBool(struct.resultSuccess);
      }
      if (struct.isSetMemberVIPInfoVo()) {
        struct.memberVIPInfoVo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MemberInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(49);
      if (incoming.get(0)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memberType = iprot.readI32();
        struct.setMemberTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginID = iprot.readString();
        struct.setLoginIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loginPwd = iprot.readString();
        struct.setLoginPwdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loginType = iprot.readI32();
        struct.setLoginTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uname = iprot.readString();
        struct.setUnameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(9)) {
        struct.identityKey = iprot.readString();
        struct.setIdentityKeyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
      if (incoming.get(11)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createChannel = iprot.readString();
        struct.setCreateChannelIsSet(true);
      }
      if (incoming.get(17)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(18)) {
        struct.zipCode = iprot.readString();
        struct.setZipCodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.dutyCode = iprot.readString();
        struct.setDutyCodeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.serviceLevelCode = iprot.readString();
        struct.setServiceLevelCodeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.lastLoginIP = iprot.readString();
        struct.setLastLoginIPIsSet(true);
      }
      if (incoming.get(23)) {
        struct.lastLoginTime = iprot.readI64();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.loginFailureCount = iprot.readI32();
        struct.setLoginFailureCountIsSet(true);
      }
      if (incoming.get(25)) {
        struct.lockDate = iprot.readI64();
        struct.setLockDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.allowIP = iprot.readString();
        struct.setAllowIPIsSet(true);
      }
      if (incoming.get(27)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.birthday = iprot.readI64();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(29)) {
        struct.firstTryTime = iprot.readI64();
        struct.setFirstTryTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.tryLoginCount = iprot.readI32();
        struct.setTryLoginCountIsSet(true);
      }
      if (incoming.get(31)) {
        struct.registerIP = iprot.readString();
        struct.setRegisterIPIsSet(true);
      }
      if (incoming.get(32)) {
        struct.loginFlag = iprot.readString();
        struct.setLoginFlagIsSet(true);
      }
      if (incoming.get(33)) {
        struct.introduce = iprot.readString();
        struct.setIntroduceIsSet(true);
      }
      if (incoming.get(34)) {
        struct.isBindEmail = iprot.readBool();
        struct.setIsBindEmailIsSet(true);
      }
      if (incoming.get(35)) {
        struct.isBindMobile = iprot.readBool();
        struct.setIsBindMobileIsSet(true);
      }
      if (incoming.get(36)) {
        struct.isBindBank = iprot.readBool();
        struct.setIsBindBankIsSet(true);
      }
      if (incoming.get(37)) {
        struct.isValidBank = iprot.readBool();
        struct.setIsValidBankIsSet(true);
      }
      if (incoming.get(38)) {
        struct.batchNo = iprot.readString();
        struct.setBatchNoIsSet(true);
      }
      if (incoming.get(39)) {
        struct.userBankID = iprot.readString();
        struct.setUserBankIDIsSet(true);
      }
      if (incoming.get(40)) {
        struct.bankGroupId = iprot.readString();
        struct.setBankGroupIdIsSet(true);
      }
      if (incoming.get(41)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(42)) {
        struct.bankOrgNo = iprot.readString();
        struct.setBankOrgNoIsSet(true);
      }
      if (incoming.get(43)) {
        struct.introducer = iprot.readString();
        struct.setIntroducerIsSet(true);
      }
      if (incoming.get(44)) {
        struct.introducerMemberCode = iprot.readI64();
        struct.setIntroducerMemberCodeIsSet(true);
      }
      if (incoming.get(45)) {
        struct.pwd = iprot.readString();
        struct.setPwdIsSet(true);
      }
      if (incoming.get(46)) {
        struct.resultMessage = iprot.readString();
        struct.setResultMessageIsSet(true);
      }
      if (incoming.get(47)) {
        struct.resultSuccess = iprot.readBool();
        struct.setResultSuccessIsSet(true);
      }
      if (incoming.get(48)) {
        struct.memberVIPInfoVo = new MemberVIPInfoVo();
        struct.memberVIPInfoVo.read(iprot);
        struct.setMemberVIPInfoVoIsSet(true);
      }
    }
  }

}

