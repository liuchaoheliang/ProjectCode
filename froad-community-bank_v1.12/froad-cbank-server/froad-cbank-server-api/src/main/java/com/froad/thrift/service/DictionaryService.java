/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class DictionaryService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * MerchantAccount
     * @param merchantAccount
     * @return List<DictionaryItemVo>
     * 
     * @param dicCode
     * @param clientId
     */
    public List<com.froad.thrift.vo.DictionaryItemVo> getDictionaryItemList(String dicCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 
     * @param outletId
     * @return OutletVo
     * 
     * @param dictionaryitemId
     */
    public com.froad.thrift.vo.DictionaryItemVo getDictionaryitemById(long dictionaryitemId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getDictionaryItemList(String dicCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDictionaryitemById(long dictionaryitemId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.froad.thrift.vo.DictionaryItemVo> getDictionaryItemList(String dicCode, String clientId) throws org.apache.thrift.TException
    {
      send_getDictionaryItemList(dicCode, clientId);
      return recv_getDictionaryItemList();
    }

    public void send_getDictionaryItemList(String dicCode, String clientId) throws org.apache.thrift.TException
    {
      getDictionaryItemList_args args = new getDictionaryItemList_args();
      args.setDicCode(dicCode);
      args.setClientId(clientId);
      sendBase("getDictionaryItemList", args);
    }

    public List<com.froad.thrift.vo.DictionaryItemVo> recv_getDictionaryItemList() throws org.apache.thrift.TException
    {
      getDictionaryItemList_result result = new getDictionaryItemList_result();
      receiveBase(result, "getDictionaryItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDictionaryItemList failed: unknown result");
    }

    public com.froad.thrift.vo.DictionaryItemVo getDictionaryitemById(long dictionaryitemId) throws org.apache.thrift.TException
    {
      send_getDictionaryitemById(dictionaryitemId);
      return recv_getDictionaryitemById();
    }

    public void send_getDictionaryitemById(long dictionaryitemId) throws org.apache.thrift.TException
    {
      getDictionaryitemById_args args = new getDictionaryitemById_args();
      args.setDictionaryitemId(dictionaryitemId);
      sendBase("getDictionaryitemById", args);
    }

    public com.froad.thrift.vo.DictionaryItemVo recv_getDictionaryitemById() throws org.apache.thrift.TException
    {
      getDictionaryitemById_result result = new getDictionaryitemById_result();
      receiveBase(result, "getDictionaryitemById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDictionaryitemById failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDictionaryItemList(String dicCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDictionaryItemList_call method_call = new getDictionaryItemList_call(dicCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDictionaryItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dicCode;
      private String clientId;
      public getDictionaryItemList_call(String dicCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dicCode = dicCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDictionaryItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDictionaryItemList_args args = new getDictionaryItemList_args();
        args.setDicCode(dicCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.DictionaryItemVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDictionaryItemList();
      }
    }

    public void getDictionaryitemById(long dictionaryitemId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDictionaryitemById_call method_call = new getDictionaryitemById_call(dictionaryitemId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDictionaryitemById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dictionaryitemId;
      public getDictionaryitemById_call(long dictionaryitemId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dictionaryitemId = dictionaryitemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDictionaryitemById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDictionaryitemById_args args = new getDictionaryitemById_args();
        args.setDictionaryitemId(dictionaryitemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.DictionaryItemVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDictionaryitemById();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDictionaryItemList", new getDictionaryItemList());
      processMap.put("getDictionaryitemById", new getDictionaryitemById());
      return processMap;
    }

    public static class getDictionaryItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDictionaryItemList_args> {
      public getDictionaryItemList() {
        super("getDictionaryItemList");
      }

      public getDictionaryItemList_args getEmptyArgsInstance() {
        return new getDictionaryItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDictionaryItemList_result getResult(I iface, getDictionaryItemList_args args) throws org.apache.thrift.TException {
        getDictionaryItemList_result result = new getDictionaryItemList_result();
        result.success = iface.getDictionaryItemList(args.dicCode, args.clientId);
        return result;
      }
    }

    public static class getDictionaryitemById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDictionaryitemById_args> {
      public getDictionaryitemById() {
        super("getDictionaryitemById");
      }

      public getDictionaryitemById_args getEmptyArgsInstance() {
        return new getDictionaryitemById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDictionaryitemById_result getResult(I iface, getDictionaryitemById_args args) throws org.apache.thrift.TException {
        getDictionaryitemById_result result = new getDictionaryitemById_result();
        result.success = iface.getDictionaryitemById(args.dictionaryitemId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDictionaryItemList", new getDictionaryItemList());
      processMap.put("getDictionaryitemById", new getDictionaryitemById());
      return processMap;
    }

    public static class getDictionaryItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDictionaryItemList_args, List<com.froad.thrift.vo.DictionaryItemVo>> {
      public getDictionaryItemList() {
        super("getDictionaryItemList");
      }

      public getDictionaryItemList_args getEmptyArgsInstance() {
        return new getDictionaryItemList_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.DictionaryItemVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.DictionaryItemVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.DictionaryItemVo> o) {
            getDictionaryItemList_result result = new getDictionaryItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDictionaryItemList_result result = new getDictionaryItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDictionaryItemList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.DictionaryItemVo>> resultHandler) throws TException {
        iface.getDictionaryItemList(args.dicCode, args.clientId,resultHandler);
      }
    }

    public static class getDictionaryitemById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDictionaryitemById_args, com.froad.thrift.vo.DictionaryItemVo> {
      public getDictionaryitemById() {
        super("getDictionaryitemById");
      }

      public getDictionaryitemById_args getEmptyArgsInstance() {
        return new getDictionaryitemById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.DictionaryItemVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.DictionaryItemVo>() { 
          public void onComplete(com.froad.thrift.vo.DictionaryItemVo o) {
            getDictionaryitemById_result result = new getDictionaryitemById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDictionaryitemById_result result = new getDictionaryitemById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDictionaryitemById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.DictionaryItemVo> resultHandler) throws TException {
        iface.getDictionaryitemById(args.dictionaryitemId,resultHandler);
      }
    }

  }

  public static class getDictionaryItemList_args implements org.apache.thrift.TBase<getDictionaryItemList_args, getDictionaryItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDictionaryItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictionaryItemList_args");

    private static final org.apache.thrift.protocol.TField DIC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dicCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDictionaryItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDictionaryItemList_argsTupleSchemeFactory());
    }

    public String dicCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIC_CODE((short)1, "dicCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIC_CODE
            return DIC_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIC_CODE, new org.apache.thrift.meta_data.FieldMetaData("dicCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictionaryItemList_args.class, metaDataMap);
    }

    public getDictionaryItemList_args() {
    }

    public getDictionaryItemList_args(
      String dicCode,
      String clientId)
    {
      this();
      this.dicCode = dicCode;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictionaryItemList_args(getDictionaryItemList_args other) {
      if (other.isSetDicCode()) {
        this.dicCode = other.dicCode;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getDictionaryItemList_args deepCopy() {
      return new getDictionaryItemList_args(this);
    }

    @Override
    public void clear() {
      this.dicCode = null;
      this.clientId = null;
    }

    public String getDicCode() {
      return this.dicCode;
    }

    public getDictionaryItemList_args setDicCode(String dicCode) {
      this.dicCode = dicCode;
      return this;
    }

    public void unsetDicCode() {
      this.dicCode = null;
    }

    /** Returns true if field dicCode is set (has been assigned a value) and false otherwise */
    public boolean isSetDicCode() {
      return this.dicCode != null;
    }

    public void setDicCodeIsSet(boolean value) {
      if (!value) {
        this.dicCode = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public getDictionaryItemList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIC_CODE:
        if (value == null) {
          unsetDicCode();
        } else {
          setDicCode((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIC_CODE:
        return getDicCode();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIC_CODE:
        return isSetDicCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictionaryItemList_args)
        return this.equals((getDictionaryItemList_args)that);
      return false;
    }

    public boolean equals(getDictionaryItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_dicCode = true && this.isSetDicCode();
      boolean that_present_dicCode = true && that.isSetDicCode();
      if (this_present_dicCode || that_present_dicCode) {
        if (!(this_present_dicCode && that_present_dicCode))
          return false;
        if (!this.dicCode.equals(that.dicCode))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dicCode = true && (isSetDicCode());
      list.add(present_dicCode);
      if (present_dicCode)
        list.add(dicCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDictionaryItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDicCode()).compareTo(other.isSetDicCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDicCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dicCode, other.dicCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDictionaryItemList_args(");
      boolean first = true;

      sb.append("dicCode:");
      if (this.dicCode == null) {
        sb.append("null");
      } else {
        sb.append(this.dicCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictionaryItemList_argsStandardSchemeFactory implements SchemeFactory {
      public getDictionaryItemList_argsStandardScheme getScheme() {
        return new getDictionaryItemList_argsStandardScheme();
      }
    }

    private static class getDictionaryItemList_argsStandardScheme extends StandardScheme<getDictionaryItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictionaryItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dicCode = iprot.readString();
                struct.setDicCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictionaryItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dicCode != null) {
          oprot.writeFieldBegin(DIC_CODE_FIELD_DESC);
          oprot.writeString(struct.dicCode);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictionaryItemList_argsTupleSchemeFactory implements SchemeFactory {
      public getDictionaryItemList_argsTupleScheme getScheme() {
        return new getDictionaryItemList_argsTupleScheme();
      }
    }

    private static class getDictionaryItemList_argsTupleScheme extends TupleScheme<getDictionaryItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictionaryItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDicCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDicCode()) {
          oprot.writeString(struct.dicCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictionaryItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dicCode = iprot.readString();
          struct.setDicCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getDictionaryItemList_result implements org.apache.thrift.TBase<getDictionaryItemList_result, getDictionaryItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDictionaryItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictionaryItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDictionaryItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDictionaryItemList_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.DictionaryItemVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.DictionaryItemVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictionaryItemList_result.class, metaDataMap);
    }

    public getDictionaryItemList_result() {
    }

    public getDictionaryItemList_result(
      List<com.froad.thrift.vo.DictionaryItemVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictionaryItemList_result(getDictionaryItemList_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.DictionaryItemVo> __this__success = new ArrayList<com.froad.thrift.vo.DictionaryItemVo>(other.success.size());
        for (com.froad.thrift.vo.DictionaryItemVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.DictionaryItemVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDictionaryItemList_result deepCopy() {
      return new getDictionaryItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.DictionaryItemVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.DictionaryItemVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.DictionaryItemVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.DictionaryItemVo> getSuccess() {
      return this.success;
    }

    public getDictionaryItemList_result setSuccess(List<com.froad.thrift.vo.DictionaryItemVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.DictionaryItemVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictionaryItemList_result)
        return this.equals((getDictionaryItemList_result)that);
      return false;
    }

    public boolean equals(getDictionaryItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDictionaryItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDictionaryItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictionaryItemList_resultStandardSchemeFactory implements SchemeFactory {
      public getDictionaryItemList_resultStandardScheme getScheme() {
        return new getDictionaryItemList_resultStandardScheme();
      }
    }

    private static class getDictionaryItemList_resultStandardScheme extends StandardScheme<getDictionaryItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictionaryItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.DictionaryItemVo>(_list0.size);
                  com.froad.thrift.vo.DictionaryItemVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.DictionaryItemVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictionaryItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.DictionaryItemVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictionaryItemList_resultTupleSchemeFactory implements SchemeFactory {
      public getDictionaryItemList_resultTupleScheme getScheme() {
        return new getDictionaryItemList_resultTupleScheme();
      }
    }

    private static class getDictionaryItemList_resultTupleScheme extends TupleScheme<getDictionaryItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictionaryItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.DictionaryItemVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictionaryItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.DictionaryItemVo>(_list5.size);
            com.froad.thrift.vo.DictionaryItemVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.DictionaryItemVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDictionaryitemById_args implements org.apache.thrift.TBase<getDictionaryitemById_args, getDictionaryitemById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDictionaryitemById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictionaryitemById_args");

    private static final org.apache.thrift.protocol.TField DICTIONARYITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionaryitemId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDictionaryitemById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDictionaryitemById_argsTupleSchemeFactory());
    }

    public long dictionaryitemId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DICTIONARYITEM_ID((short)1, "dictionaryitemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DICTIONARYITEM_ID
            return DICTIONARYITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DICTIONARYITEMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DICTIONARYITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("dictionaryitemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictionaryitemById_args.class, metaDataMap);
    }

    public getDictionaryitemById_args() {
    }

    public getDictionaryitemById_args(
      long dictionaryitemId)
    {
      this();
      this.dictionaryitemId = dictionaryitemId;
      setDictionaryitemIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictionaryitemById_args(getDictionaryitemById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dictionaryitemId = other.dictionaryitemId;
    }

    public getDictionaryitemById_args deepCopy() {
      return new getDictionaryitemById_args(this);
    }

    @Override
    public void clear() {
      setDictionaryitemIdIsSet(false);
      this.dictionaryitemId = 0;
    }

    public long getDictionaryitemId() {
      return this.dictionaryitemId;
    }

    public getDictionaryitemById_args setDictionaryitemId(long dictionaryitemId) {
      this.dictionaryitemId = dictionaryitemId;
      setDictionaryitemIdIsSet(true);
      return this;
    }

    public void unsetDictionaryitemId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DICTIONARYITEMID_ISSET_ID);
    }

    /** Returns true if field dictionaryitemId is set (has been assigned a value) and false otherwise */
    public boolean isSetDictionaryitemId() {
      return EncodingUtils.testBit(__isset_bitfield, __DICTIONARYITEMID_ISSET_ID);
    }

    public void setDictionaryitemIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DICTIONARYITEMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DICTIONARYITEM_ID:
        if (value == null) {
          unsetDictionaryitemId();
        } else {
          setDictionaryitemId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DICTIONARYITEM_ID:
        return Long.valueOf(getDictionaryitemId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DICTIONARYITEM_ID:
        return isSetDictionaryitemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictionaryitemById_args)
        return this.equals((getDictionaryitemById_args)that);
      return false;
    }

    public boolean equals(getDictionaryitemById_args that) {
      if (that == null)
        return false;

      boolean this_present_dictionaryitemId = true;
      boolean that_present_dictionaryitemId = true;
      if (this_present_dictionaryitemId || that_present_dictionaryitemId) {
        if (!(this_present_dictionaryitemId && that_present_dictionaryitemId))
          return false;
        if (this.dictionaryitemId != that.dictionaryitemId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dictionaryitemId = true;
      list.add(present_dictionaryitemId);
      if (present_dictionaryitemId)
        list.add(dictionaryitemId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDictionaryitemById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDictionaryitemId()).compareTo(other.isSetDictionaryitemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDictionaryitemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionaryitemId, other.dictionaryitemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDictionaryitemById_args(");
      boolean first = true;

      sb.append("dictionaryitemId:");
      sb.append(this.dictionaryitemId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictionaryitemById_argsStandardSchemeFactory implements SchemeFactory {
      public getDictionaryitemById_argsStandardScheme getScheme() {
        return new getDictionaryitemById_argsStandardScheme();
      }
    }

    private static class getDictionaryitemById_argsStandardScheme extends StandardScheme<getDictionaryitemById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictionaryitemById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DICTIONARYITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dictionaryitemId = iprot.readI64();
                struct.setDictionaryitemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictionaryitemById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DICTIONARYITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.dictionaryitemId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictionaryitemById_argsTupleSchemeFactory implements SchemeFactory {
      public getDictionaryitemById_argsTupleScheme getScheme() {
        return new getDictionaryitemById_argsTupleScheme();
      }
    }

    private static class getDictionaryitemById_argsTupleScheme extends TupleScheme<getDictionaryitemById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictionaryitemById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDictionaryitemId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDictionaryitemId()) {
          oprot.writeI64(struct.dictionaryitemId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictionaryitemById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dictionaryitemId = iprot.readI64();
          struct.setDictionaryitemIdIsSet(true);
        }
      }
    }

  }

  public static class getDictionaryitemById_result implements org.apache.thrift.TBase<getDictionaryitemById_result, getDictionaryitemById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDictionaryitemById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictionaryitemById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDictionaryitemById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDictionaryitemById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.DictionaryItemVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.DictionaryItemVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictionaryitemById_result.class, metaDataMap);
    }

    public getDictionaryitemById_result() {
    }

    public getDictionaryitemById_result(
      com.froad.thrift.vo.DictionaryItemVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictionaryitemById_result(getDictionaryitemById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.DictionaryItemVo(other.success);
      }
    }

    public getDictionaryitemById_result deepCopy() {
      return new getDictionaryitemById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.DictionaryItemVo getSuccess() {
      return this.success;
    }

    public getDictionaryitemById_result setSuccess(com.froad.thrift.vo.DictionaryItemVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.DictionaryItemVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictionaryitemById_result)
        return this.equals((getDictionaryitemById_result)that);
      return false;
    }

    public boolean equals(getDictionaryitemById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDictionaryitemById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDictionaryitemById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictionaryitemById_resultStandardSchemeFactory implements SchemeFactory {
      public getDictionaryitemById_resultStandardScheme getScheme() {
        return new getDictionaryitemById_resultStandardScheme();
      }
    }

    private static class getDictionaryitemById_resultStandardScheme extends StandardScheme<getDictionaryitemById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictionaryitemById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.DictionaryItemVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictionaryitemById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictionaryitemById_resultTupleSchemeFactory implements SchemeFactory {
      public getDictionaryitemById_resultTupleScheme getScheme() {
        return new getDictionaryitemById_resultTupleScheme();
      }
    }

    private static class getDictionaryitemById_resultTupleScheme extends TupleScheme<getDictionaryitemById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictionaryitemById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictionaryitemById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.DictionaryItemVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
