/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ShoppingCartService {

  /**
   * 3 对外接口定义
   * 
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 拉取用户购物车单个商品信息
     * 
     * @param memberCode
     * @param clientId
     * @param merchantId
     * @param productId
     * @param vipLevel
     */
    public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes getCartByProductId(long memberCode, String clientId, String merchantId, String productId, int vipLevel) throws org.apache.thrift.TException;

    /**
     * 拉取用户购物车全部商品信息
     * 
     * @param memberCode
     * @param clientId
     * @param vipLevel
     */
    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getCart(long memberCode, String clientId, int vipLevel) throws org.apache.thrift.TException;

    /**
     * 清空购物车
     * 
     * @param memberCode
     * @param clientId
     */
    public boolean deleteCart(long memberCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 修改购物车单个商品数量
     * 
     * @param shoppingCartVoReq
     */
    public com.froad.thrift.vo.ResultVo updateCartByProductNum(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException;

    /**
     * 批量删除购物车信息
     * 
     * @param shoppingCartVoReq
     */
    public com.froad.thrift.vo.ResultVo deleteBatchCart(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq) throws org.apache.thrift.TException;

    /**
     * 添加商品和数量到购物车
     * 
     * @param shoppingCartVoReq
     */
    public com.froad.thrift.vo.ResultVo addCart(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException;

    /**
     * 获取购物车商品数量
     * 
     * @param memberCode
     * @param clientId
     */
    public int getCartCount(long memberCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 更新购物车商品的提货网点
     * 
     * @param memberCode
     * @param clientId
     * @param merchantId
     * @param productId
     * @param outletId
     */
    public com.froad.thrift.vo.ResultVo updateDelivery(long memberCode, String clientId, String merchantId, String productId, String outletId) throws org.apache.thrift.TException;

    /**
     * 获取购物车商品总数量
     * 
     * @param memberCode
     * @param clientId
     */
    public int getCartProductCount(long memberCode, String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getCartByProductId(long memberCode, String clientId, String merchantId, String productId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCart(long memberCode, String clientId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteCart(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCartByProductNum(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBatchCart(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCart(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCartCount(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDelivery(long memberCode, String clientId, String merchantId, String productId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCartProductCount(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes getCartByProductId(long memberCode, String clientId, String merchantId, String productId, int vipLevel) throws org.apache.thrift.TException
    {
      send_getCartByProductId(memberCode, clientId, merchantId, productId, vipLevel);
      return recv_getCartByProductId();
    }

    public void send_getCartByProductId(long memberCode, String clientId, String merchantId, String productId, int vipLevel) throws org.apache.thrift.TException
    {
      getCartByProductId_args args = new getCartByProductId_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      args.setMerchantId(merchantId);
      args.setProductId(productId);
      args.setVipLevel(vipLevel);
      sendBase("getCartByProductId", args);
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes recv_getCartByProductId() throws org.apache.thrift.TException
    {
      getCartByProductId_result result = new getCartByProductId_result();
      receiveBase(result, "getCartByProductId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCartByProductId failed: unknown result");
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getCart(long memberCode, String clientId, int vipLevel) throws org.apache.thrift.TException
    {
      send_getCart(memberCode, clientId, vipLevel);
      return recv_getCart();
    }

    public void send_getCart(long memberCode, String clientId, int vipLevel) throws org.apache.thrift.TException
    {
      getCart_args args = new getCart_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      args.setVipLevel(vipLevel);
      sendBase("getCart", args);
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> recv_getCart() throws org.apache.thrift.TException
    {
      getCart_result result = new getCart_result();
      receiveBase(result, "getCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCart failed: unknown result");
    }

    public boolean deleteCart(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      send_deleteCart(memberCode, clientId);
      return recv_deleteCart();
    }

    public void send_deleteCart(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      deleteCart_args args = new deleteCart_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      sendBase("deleteCart", args);
    }

    public boolean recv_deleteCart() throws org.apache.thrift.TException
    {
      deleteCart_result result = new deleteCart_result();
      receiveBase(result, "deleteCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCart failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateCartByProductNum(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException
    {
      send_updateCartByProductNum(shoppingCartVoReq);
      return recv_updateCartByProductNum();
    }

    public void send_updateCartByProductNum(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException
    {
      updateCartByProductNum_args args = new updateCartByProductNum_args();
      args.setShoppingCartVoReq(shoppingCartVoReq);
      sendBase("updateCartByProductNum", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateCartByProductNum() throws org.apache.thrift.TException
    {
      updateCartByProductNum_result result = new updateCartByProductNum_result();
      receiveBase(result, "updateCartByProductNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCartByProductNum failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteBatchCart(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq) throws org.apache.thrift.TException
    {
      send_deleteBatchCart(shoppingCartVoReq);
      return recv_deleteBatchCart();
    }

    public void send_deleteBatchCart(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq) throws org.apache.thrift.TException
    {
      deleteBatchCart_args args = new deleteBatchCart_args();
      args.setShoppingCartVoReq(shoppingCartVoReq);
      sendBase("deleteBatchCart", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteBatchCart() throws org.apache.thrift.TException
    {
      deleteBatchCart_result result = new deleteBatchCart_result();
      receiveBase(result, "deleteBatchCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBatchCart failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addCart(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException
    {
      send_addCart(shoppingCartVoReq);
      return recv_addCart();
    }

    public void send_addCart(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) throws org.apache.thrift.TException
    {
      addCart_args args = new addCart_args();
      args.setShoppingCartVoReq(shoppingCartVoReq);
      sendBase("addCart", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addCart() throws org.apache.thrift.TException
    {
      addCart_result result = new addCart_result();
      receiveBase(result, "addCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCart failed: unknown result");
    }

    public int getCartCount(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      send_getCartCount(memberCode, clientId);
      return recv_getCartCount();
    }

    public void send_getCartCount(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      getCartCount_args args = new getCartCount_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      sendBase("getCartCount", args);
    }

    public int recv_getCartCount() throws org.apache.thrift.TException
    {
      getCartCount_result result = new getCartCount_result();
      receiveBase(result, "getCartCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCartCount failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateDelivery(long memberCode, String clientId, String merchantId, String productId, String outletId) throws org.apache.thrift.TException
    {
      send_updateDelivery(memberCode, clientId, merchantId, productId, outletId);
      return recv_updateDelivery();
    }

    public void send_updateDelivery(long memberCode, String clientId, String merchantId, String productId, String outletId) throws org.apache.thrift.TException
    {
      updateDelivery_args args = new updateDelivery_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      args.setMerchantId(merchantId);
      args.setProductId(productId);
      args.setOutletId(outletId);
      sendBase("updateDelivery", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateDelivery() throws org.apache.thrift.TException
    {
      updateDelivery_result result = new updateDelivery_result();
      receiveBase(result, "updateDelivery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDelivery failed: unknown result");
    }

    public int getCartProductCount(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      send_getCartProductCount(memberCode, clientId);
      return recv_getCartProductCount();
    }

    public void send_getCartProductCount(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      getCartProductCount_args args = new getCartProductCount_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      sendBase("getCartProductCount", args);
    }

    public int recv_getCartProductCount() throws org.apache.thrift.TException
    {
      getCartProductCount_result result = new getCartProductCount_result();
      receiveBase(result, "getCartProductCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCartProductCount failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCartByProductId(long memberCode, String clientId, String merchantId, String productId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCartByProductId_call method_call = new getCartByProductId_call(memberCode, clientId, merchantId, productId, vipLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCartByProductId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      private String merchantId;
      private String productId;
      private int vipLevel;
      public getCartByProductId_call(long memberCode, String clientId, String merchantId, String productId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
        this.merchantId = merchantId;
        this.productId = productId;
        this.vipLevel = vipLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCartByProductId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCartByProductId_args args = new getCartByProductId_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.setMerchantId(merchantId);
        args.setProductId(productId);
        args.setVipLevel(vipLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCartByProductId();
      }
    }

    public void getCart(long memberCode, String clientId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCart_call method_call = new getCart_call(memberCode, clientId, vipLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      private int vipLevel;
      public getCart_call(long memberCode, String clientId, int vipLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
        this.vipLevel = vipLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCart_args args = new getCart_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.setVipLevel(vipLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCart();
      }
    }

    public void deleteCart(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCart_call method_call = new deleteCart_call(memberCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      public deleteCart_call(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCart_args args = new deleteCart_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCart();
      }
    }

    public void updateCartByProductNum(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCartByProductNum_call method_call = new updateCartByProductNum_call(shoppingCartVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCartByProductNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq;
      public updateCartByProductNum_call(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shoppingCartVoReq = shoppingCartVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCartByProductNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCartByProductNum_args args = new updateCartByProductNum_args();
        args.setShoppingCartVoReq(shoppingCartVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCartByProductNum();
      }
    }

    public void deleteBatchCart(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBatchCart_call method_call = new deleteBatchCart_call(shoppingCartVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBatchCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq;
      public deleteBatchCart_call(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shoppingCartVoReq = shoppingCartVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBatchCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBatchCart_args args = new deleteBatchCart_args();
        args.setShoppingCartVoReq(shoppingCartVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBatchCart();
      }
    }

    public void addCart(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCart_call method_call = new addCart_call(shoppingCartVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq;
      public addCart_call(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shoppingCartVoReq = shoppingCartVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCart_args args = new addCart_args();
        args.setShoppingCartVoReq(shoppingCartVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCart();
      }
    }

    public void getCartCount(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCartCount_call method_call = new getCartCount_call(memberCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCartCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      public getCartCount_call(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCartCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCartCount_args args = new getCartCount_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCartCount();
      }
    }

    public void updateDelivery(long memberCode, String clientId, String merchantId, String productId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDelivery_call method_call = new updateDelivery_call(memberCode, clientId, merchantId, productId, outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDelivery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      private String merchantId;
      private String productId;
      private String outletId;
      public updateDelivery_call(long memberCode, String clientId, String merchantId, String productId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
        this.merchantId = merchantId;
        this.productId = productId;
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDelivery_args args = new updateDelivery_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.setMerchantId(merchantId);
        args.setProductId(productId);
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDelivery();
      }
    }

    public void getCartProductCount(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCartProductCount_call method_call = new getCartProductCount_call(memberCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCartProductCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      public getCartProductCount_call(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCartProductCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCartProductCount_args args = new getCartProductCount_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCartProductCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCartByProductId", new getCartByProductId());
      processMap.put("getCart", new getCart());
      processMap.put("deleteCart", new deleteCart());
      processMap.put("updateCartByProductNum", new updateCartByProductNum());
      processMap.put("deleteBatchCart", new deleteBatchCart());
      processMap.put("addCart", new addCart());
      processMap.put("getCartCount", new getCartCount());
      processMap.put("updateDelivery", new updateDelivery());
      processMap.put("getCartProductCount", new getCartProductCount());
      return processMap;
    }

    public static class getCartByProductId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCartByProductId_args> {
      public getCartByProductId() {
        super("getCartByProductId");
      }

      public getCartByProductId_args getEmptyArgsInstance() {
        return new getCartByProductId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCartByProductId_result getResult(I iface, getCartByProductId_args args) throws org.apache.thrift.TException {
        getCartByProductId_result result = new getCartByProductId_result();
        result.success = iface.getCartByProductId(args.memberCode, args.clientId, args.merchantId, args.productId, args.vipLevel);
        return result;
      }
    }

    public static class getCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCart_args> {
      public getCart() {
        super("getCart");
      }

      public getCart_args getEmptyArgsInstance() {
        return new getCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCart_result getResult(I iface, getCart_args args) throws org.apache.thrift.TException {
        getCart_result result = new getCart_result();
        result.success = iface.getCart(args.memberCode, args.clientId, args.vipLevel);
        return result;
      }
    }

    public static class deleteCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCart_args> {
      public deleteCart() {
        super("deleteCart");
      }

      public deleteCart_args getEmptyArgsInstance() {
        return new deleteCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCart_result getResult(I iface, deleteCart_args args) throws org.apache.thrift.TException {
        deleteCart_result result = new deleteCart_result();
        result.success = iface.deleteCart(args.memberCode, args.clientId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateCartByProductNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCartByProductNum_args> {
      public updateCartByProductNum() {
        super("updateCartByProductNum");
      }

      public updateCartByProductNum_args getEmptyArgsInstance() {
        return new updateCartByProductNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCartByProductNum_result getResult(I iface, updateCartByProductNum_args args) throws org.apache.thrift.TException {
        updateCartByProductNum_result result = new updateCartByProductNum_result();
        result.success = iface.updateCartByProductNum(args.shoppingCartVoReq);
        return result;
      }
    }

    public static class deleteBatchCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBatchCart_args> {
      public deleteBatchCart() {
        super("deleteBatchCart");
      }

      public deleteBatchCart_args getEmptyArgsInstance() {
        return new deleteBatchCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBatchCart_result getResult(I iface, deleteBatchCart_args args) throws org.apache.thrift.TException {
        deleteBatchCart_result result = new deleteBatchCart_result();
        result.success = iface.deleteBatchCart(args.shoppingCartVoReq);
        return result;
      }
    }

    public static class addCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCart_args> {
      public addCart() {
        super("addCart");
      }

      public addCart_args getEmptyArgsInstance() {
        return new addCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCart_result getResult(I iface, addCart_args args) throws org.apache.thrift.TException {
        addCart_result result = new addCart_result();
        result.success = iface.addCart(args.shoppingCartVoReq);
        return result;
      }
    }

    public static class getCartCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCartCount_args> {
      public getCartCount() {
        super("getCartCount");
      }

      public getCartCount_args getEmptyArgsInstance() {
        return new getCartCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCartCount_result getResult(I iface, getCartCount_args args) throws org.apache.thrift.TException {
        getCartCount_result result = new getCartCount_result();
        result.success = iface.getCartCount(args.memberCode, args.clientId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDelivery_args> {
      public updateDelivery() {
        super("updateDelivery");
      }

      public updateDelivery_args getEmptyArgsInstance() {
        return new updateDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDelivery_result getResult(I iface, updateDelivery_args args) throws org.apache.thrift.TException {
        updateDelivery_result result = new updateDelivery_result();
        result.success = iface.updateDelivery(args.memberCode, args.clientId, args.merchantId, args.productId, args.outletId);
        return result;
      }
    }

    public static class getCartProductCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCartProductCount_args> {
      public getCartProductCount() {
        super("getCartProductCount");
      }

      public getCartProductCount_args getEmptyArgsInstance() {
        return new getCartProductCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCartProductCount_result getResult(I iface, getCartProductCount_args args) throws org.apache.thrift.TException {
        getCartProductCount_result result = new getCartProductCount_result();
        result.success = iface.getCartProductCount(args.memberCode, args.clientId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCartByProductId", new getCartByProductId());
      processMap.put("getCart", new getCart());
      processMap.put("deleteCart", new deleteCart());
      processMap.put("updateCartByProductNum", new updateCartByProductNum());
      processMap.put("deleteBatchCart", new deleteBatchCart());
      processMap.put("addCart", new addCart());
      processMap.put("getCartCount", new getCartCount());
      processMap.put("updateDelivery", new updateDelivery());
      processMap.put("getCartProductCount", new getCartProductCount());
      return processMap;
    }

    public static class getCartByProductId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCartByProductId_args, com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> {
      public getCartByProductId() {
        super("getCartByProductId");
      }

      public getCartByProductId_args getEmptyArgsInstance() {
        return new getCartByProductId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>() { 
          public void onComplete(com.froad.thrift.vo.shopingcart.ShoppingCartVoRes o) {
            getCartByProductId_result result = new getCartByProductId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCartByProductId_result result = new getCartByProductId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCartByProductId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> resultHandler) throws TException {
        iface.getCartByProductId(args.memberCode, args.clientId, args.merchantId, args.productId, args.vipLevel,resultHandler);
      }
    }

    public static class getCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCart_args, List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>> {
      public getCart() {
        super("getCart");
      }

      public getCart_args getEmptyArgsInstance() {
        return new getCart_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>>() { 
          public void onComplete(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> o) {
            getCart_result result = new getCart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCart_result result = new getCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCart_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>> resultHandler) throws TException {
        iface.getCart(args.memberCode, args.clientId, args.vipLevel,resultHandler);
      }
    }

    public static class deleteCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCart_args, Boolean> {
      public deleteCart() {
        super("deleteCart");
      }

      public deleteCart_args getEmptyArgsInstance() {
        return new deleteCart_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteCart_result result = new deleteCart_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteCart_result result = new deleteCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCart_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteCart(args.memberCode, args.clientId,resultHandler);
      }
    }

    public static class updateCartByProductNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCartByProductNum_args, com.froad.thrift.vo.ResultVo> {
      public updateCartByProductNum() {
        super("updateCartByProductNum");
      }

      public updateCartByProductNum_args getEmptyArgsInstance() {
        return new updateCartByProductNum_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateCartByProductNum_result result = new updateCartByProductNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCartByProductNum_result result = new updateCartByProductNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCartByProductNum_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateCartByProductNum(args.shoppingCartVoReq,resultHandler);
      }
    }

    public static class deleteBatchCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBatchCart_args, com.froad.thrift.vo.ResultVo> {
      public deleteBatchCart() {
        super("deleteBatchCart");
      }

      public deleteBatchCart_args getEmptyArgsInstance() {
        return new deleteBatchCart_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteBatchCart_result result = new deleteBatchCart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBatchCart_result result = new deleteBatchCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBatchCart_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteBatchCart(args.shoppingCartVoReq,resultHandler);
      }
    }

    public static class addCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCart_args, com.froad.thrift.vo.ResultVo> {
      public addCart() {
        super("addCart");
      }

      public addCart_args getEmptyArgsInstance() {
        return new addCart_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addCart_result result = new addCart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCart_result result = new addCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCart_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addCart(args.shoppingCartVoReq,resultHandler);
      }
    }

    public static class getCartCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCartCount_args, Integer> {
      public getCartCount() {
        super("getCartCount");
      }

      public getCartCount_args getEmptyArgsInstance() {
        return new getCartCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCartCount_result result = new getCartCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCartCount_result result = new getCartCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCartCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCartCount(args.memberCode, args.clientId,resultHandler);
      }
    }

    public static class updateDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDelivery_args, com.froad.thrift.vo.ResultVo> {
      public updateDelivery() {
        super("updateDelivery");
      }

      public updateDelivery_args getEmptyArgsInstance() {
        return new updateDelivery_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateDelivery_result result = new updateDelivery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDelivery_result result = new updateDelivery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateDelivery(args.memberCode, args.clientId, args.merchantId, args.productId, args.outletId,resultHandler);
      }
    }

    public static class getCartProductCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCartProductCount_args, Integer> {
      public getCartProductCount() {
        super("getCartProductCount");
      }

      public getCartProductCount_args getEmptyArgsInstance() {
        return new getCartProductCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCartProductCount_result result = new getCartProductCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCartProductCount_result result = new getCartProductCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCartProductCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCartProductCount(args.memberCode, args.clientId,resultHandler);
      }
    }

  }

  public static class getCartByProductId_args implements org.apache.thrift.TBase<getCartByProductId_args, getCartByProductId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCartByProductId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartByProductId_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartByProductId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartByProductId_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required
    public String merchantId; // required
    public String productId; // required
    public int vipLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId"),
      MERCHANT_ID((short)3, "merchantId"),
      PRODUCT_ID((short)4, "productId"),
      VIP_LEVEL((short)5, "vipLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // MERCHANT_ID
            return MERCHANT_ID;
          case 4: // PRODUCT_ID
            return PRODUCT_ID;
          case 5: // VIP_LEVEL
            return VIP_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private static final int __VIPLEVEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartByProductId_args.class, metaDataMap);
    }

    public getCartByProductId_args() {
    }

    public getCartByProductId_args(
      long memberCode,
      String clientId,
      String merchantId,
      String productId,
      int vipLevel)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
      this.merchantId = merchantId;
      this.productId = productId;
      this.vipLevel = vipLevel;
      setVipLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartByProductId_args(getCartByProductId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.vipLevel = other.vipLevel;
    }

    public getCartByProductId_args deepCopy() {
      return new getCartByProductId_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
      this.merchantId = null;
      this.productId = null;
      setVipLevelIsSet(false);
      this.vipLevel = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getCartByProductId_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getCartByProductId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getCartByProductId_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public getCartByProductId_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public int getVipLevel() {
      return this.vipLevel;
    }

    public getCartByProductId_args setVipLevel(int vipLevel) {
      this.vipLevel = vipLevel;
      setVipLevelIsSet(true);
      return this;
    }

    public void unsetVipLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
    }

    /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetVipLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
    }

    public void setVipLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case VIP_LEVEL:
        if (value == null) {
          unsetVipLevel();
        } else {
          setVipLevel((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_ID:
        return getProductId();

      case VIP_LEVEL:
        return Integer.valueOf(getVipLevel());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_ID:
        return isSetProductId();
      case VIP_LEVEL:
        return isSetVipLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartByProductId_args)
        return this.equals((getCartByProductId_args)that);
      return false;
    }

    public boolean equals(getCartByProductId_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_vipLevel = true;
      boolean that_present_vipLevel = true;
      if (this_present_vipLevel || that_present_vipLevel) {
        if (!(this_present_vipLevel && that_present_vipLevel))
          return false;
        if (this.vipLevel != that.vipLevel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_vipLevel = true;
      list.add(present_vipLevel);
      if (present_vipLevel)
        list.add(vipLevel);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartByProductId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(other.isSetVipLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, other.vipLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartByProductId_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipLevel:");
      sb.append(this.vipLevel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartByProductId_argsStandardSchemeFactory implements SchemeFactory {
      public getCartByProductId_argsStandardScheme getScheme() {
        return new getCartByProductId_argsStandardScheme();
      }
    }

    private static class getCartByProductId_argsStandardScheme extends StandardScheme<getCartByProductId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartByProductId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VIP_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vipLevel = iprot.readI32();
                struct.setVipLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartByProductId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.vipLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartByProductId_argsTupleSchemeFactory implements SchemeFactory {
      public getCartByProductId_argsTupleScheme getScheme() {
        return new getCartByProductId_argsTupleScheme();
      }
    }

    private static class getCartByProductId_argsTupleScheme extends TupleScheme<getCartByProductId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartByProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(2);
        }
        if (struct.isSetProductId()) {
          optionals.set(3);
        }
        if (struct.isSetVipLevel()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetVipLevel()) {
          oprot.writeI32(struct.vipLevel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartByProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.vipLevel = iprot.readI32();
          struct.setVipLevelIsSet(true);
        }
      }
    }

  }

  public static class getCartByProductId_result implements org.apache.thrift.TBase<getCartByProductId_result, getCartByProductId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCartByProductId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartByProductId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartByProductId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartByProductId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.shopingcart.ShoppingCartVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartByProductId_result.class, metaDataMap);
    }

    public getCartByProductId_result() {
    }

    public getCartByProductId_result(
      com.froad.thrift.vo.shopingcart.ShoppingCartVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartByProductId_result(getCartByProductId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes(other.success);
      }
    }

    public getCartByProductId_result deepCopy() {
      return new getCartByProductId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoRes getSuccess() {
      return this.success;
    }

    public getCartByProductId_result setSuccess(com.froad.thrift.vo.shopingcart.ShoppingCartVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.shopingcart.ShoppingCartVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartByProductId_result)
        return this.equals((getCartByProductId_result)that);
      return false;
    }

    public boolean equals(getCartByProductId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartByProductId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartByProductId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartByProductId_resultStandardSchemeFactory implements SchemeFactory {
      public getCartByProductId_resultStandardScheme getScheme() {
        return new getCartByProductId_resultStandardScheme();
      }
    }

    private static class getCartByProductId_resultStandardScheme extends StandardScheme<getCartByProductId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartByProductId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartByProductId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartByProductId_resultTupleSchemeFactory implements SchemeFactory {
      public getCartByProductId_resultTupleScheme getScheme() {
        return new getCartByProductId_resultTupleScheme();
      }
    }

    private static class getCartByProductId_resultTupleScheme extends TupleScheme<getCartByProductId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartByProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartByProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCart_args implements org.apache.thrift.TBase<getCart_args, getCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCart_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCart_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required
    public int vipLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId"),
      VIP_LEVEL((short)3, "vipLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // VIP_LEVEL
            return VIP_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private static final int __VIPLEVEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCart_args.class, metaDataMap);
    }

    public getCart_args() {
    }

    public getCart_args(
      long memberCode,
      String clientId,
      int vipLevel)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
      this.vipLevel = vipLevel;
      setVipLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCart_args(getCart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.vipLevel = other.vipLevel;
    }

    public getCart_args deepCopy() {
      return new getCart_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
      setVipLevelIsSet(false);
      this.vipLevel = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getCart_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getCart_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getVipLevel() {
      return this.vipLevel;
    }

    public getCart_args setVipLevel(int vipLevel) {
      this.vipLevel = vipLevel;
      setVipLevelIsSet(true);
      return this;
    }

    public void unsetVipLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
    }

    /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetVipLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
    }

    public void setVipLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case VIP_LEVEL:
        if (value == null) {
          unsetVipLevel();
        } else {
          setVipLevel((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      case VIP_LEVEL:
        return Integer.valueOf(getVipLevel());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      case VIP_LEVEL:
        return isSetVipLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCart_args)
        return this.equals((getCart_args)that);
      return false;
    }

    public boolean equals(getCart_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_vipLevel = true;
      boolean that_present_vipLevel = true;
      if (this_present_vipLevel || that_present_vipLevel) {
        if (!(this_present_vipLevel && that_present_vipLevel))
          return false;
        if (this.vipLevel != that.vipLevel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_vipLevel = true;
      list.add(present_vipLevel);
      if (present_vipLevel)
        list.add(vipLevel);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(other.isSetVipLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, other.vipLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCart_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipLevel:");
      sb.append(this.vipLevel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCart_argsStandardSchemeFactory implements SchemeFactory {
      public getCart_argsStandardScheme getScheme() {
        return new getCart_argsStandardScheme();
      }
    }

    private static class getCart_argsStandardScheme extends StandardScheme<getCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VIP_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vipLevel = iprot.readI32();
                struct.setVipLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.vipLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCart_argsTupleSchemeFactory implements SchemeFactory {
      public getCart_argsTupleScheme getScheme() {
        return new getCart_argsTupleScheme();
      }
    }

    private static class getCart_argsTupleScheme extends TupleScheme<getCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetVipLevel()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetVipLevel()) {
          oprot.writeI32(struct.vipLevel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vipLevel = iprot.readI32();
          struct.setVipLevelIsSet(true);
        }
      }
    }

  }

  public static class getCart_result implements org.apache.thrift.TBase<getCart_result, getCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCart_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.shopingcart.ShoppingCartVoRes.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCart_result.class, metaDataMap);
    }

    public getCart_result() {
    }

    public getCart_result(
      List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCart_result(getCart_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> __this__success = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>(other.success.size());
        for (com.froad.thrift.vo.shopingcart.ShoppingCartVoRes other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCart_result deepCopy() {
      return new getCart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.shopingcart.ShoppingCartVoRes elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> getSuccess() {
      return this.success;
    }

    public getCart_result setSuccess(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCart_result)
        return this.equals((getCart_result)that);
      return false;
    }

    public boolean equals(getCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCart_resultStandardSchemeFactory implements SchemeFactory {
      public getCart_resultStandardScheme getScheme() {
        return new getCart_resultStandardScheme();
      }
    }

    private static class getCart_resultStandardScheme extends StandardScheme<getCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>(_list0.size);
                  com.froad.thrift.vo.shopingcart.ShoppingCartVoRes _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.shopingcart.ShoppingCartVoRes _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCart_resultTupleSchemeFactory implements SchemeFactory {
      public getCart_resultTupleScheme getScheme() {
        return new getCart_resultTupleScheme();
      }
    }

    private static class getCart_resultTupleScheme extends TupleScheme<getCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.shopingcart.ShoppingCartVoRes _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoRes>(_list5.size);
            com.froad.thrift.vo.shopingcart.ShoppingCartVoRes _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.shopingcart.ShoppingCartVoRes();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteCart_args implements org.apache.thrift.TBase<deleteCart_args, deleteCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCart_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCart_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCart_args.class, metaDataMap);
    }

    public deleteCart_args() {
    }

    public deleteCart_args(
      long memberCode,
      String clientId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCart_args(deleteCart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public deleteCart_args deepCopy() {
      return new deleteCart_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public deleteCart_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public deleteCart_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCart_args)
        return this.equals((deleteCart_args)that);
      return false;
    }

    public boolean equals(deleteCart_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCart_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCart_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCart_argsStandardScheme getScheme() {
        return new deleteCart_argsStandardScheme();
      }
    }

    private static class deleteCart_argsStandardScheme extends StandardScheme<deleteCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCart_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCart_argsTupleScheme getScheme() {
        return new deleteCart_argsTupleScheme();
      }
    }

    private static class deleteCart_argsTupleScheme extends TupleScheme<deleteCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class deleteCart_result implements org.apache.thrift.TBase<deleteCart_result, deleteCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCart_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCart_result.class, metaDataMap);
    }

    public deleteCart_result() {
    }

    public deleteCart_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCart_result(deleteCart_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteCart_result deepCopy() {
      return new deleteCart_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteCart_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCart_result)
        return this.equals((deleteCart_result)that);
      return false;
    }

    public boolean equals(deleteCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCart_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCart_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCart_resultStandardScheme getScheme() {
        return new deleteCart_resultStandardScheme();
      }
    }

    private static class deleteCart_resultStandardScheme extends StandardScheme<deleteCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCart_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCart_resultTupleScheme getScheme() {
        return new deleteCart_resultTupleScheme();
      }
    }

    private static class deleteCart_resultTupleScheme extends TupleScheme<deleteCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCartByProductNum_args implements org.apache.thrift.TBase<updateCartByProductNum_args, updateCartByProductNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCartByProductNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCartByProductNum_args");

    private static final org.apache.thrift.protocol.TField SHOPPING_CART_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingCartVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCartByProductNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCartByProductNum_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOPPING_CART_VO_REQ((short)1, "shoppingCartVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOPPING_CART_VO_REQ
            return SHOPPING_CART_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOPPING_CART_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("shoppingCartVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.shopingcart.ShoppingCartVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCartByProductNum_args.class, metaDataMap);
    }

    public updateCartByProductNum_args() {
    }

    public updateCartByProductNum_args(
      com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq)
    {
      this();
      this.shoppingCartVoReq = shoppingCartVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCartByProductNum_args(updateCartByProductNum_args other) {
      if (other.isSetShoppingCartVoReq()) {
        this.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq(other.shoppingCartVoReq);
      }
    }

    public updateCartByProductNum_args deepCopy() {
      return new updateCartByProductNum_args(this);
    }

    @Override
    public void clear() {
      this.shoppingCartVoReq = null;
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoReq getShoppingCartVoReq() {
      return this.shoppingCartVoReq;
    }

    public updateCartByProductNum_args setShoppingCartVoReq(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) {
      this.shoppingCartVoReq = shoppingCartVoReq;
      return this;
    }

    public void unsetShoppingCartVoReq() {
      this.shoppingCartVoReq = null;
    }

    /** Returns true if field shoppingCartVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetShoppingCartVoReq() {
      return this.shoppingCartVoReq != null;
    }

    public void setShoppingCartVoReqIsSet(boolean value) {
      if (!value) {
        this.shoppingCartVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        if (value == null) {
          unsetShoppingCartVoReq();
        } else {
          setShoppingCartVoReq((com.froad.thrift.vo.shopingcart.ShoppingCartVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return getShoppingCartVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return isSetShoppingCartVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCartByProductNum_args)
        return this.equals((updateCartByProductNum_args)that);
      return false;
    }

    public boolean equals(updateCartByProductNum_args that) {
      if (that == null)
        return false;

      boolean this_present_shoppingCartVoReq = true && this.isSetShoppingCartVoReq();
      boolean that_present_shoppingCartVoReq = true && that.isSetShoppingCartVoReq();
      if (this_present_shoppingCartVoReq || that_present_shoppingCartVoReq) {
        if (!(this_present_shoppingCartVoReq && that_present_shoppingCartVoReq))
          return false;
        if (!this.shoppingCartVoReq.equals(that.shoppingCartVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shoppingCartVoReq = true && (isSetShoppingCartVoReq());
      list.add(present_shoppingCartVoReq);
      if (present_shoppingCartVoReq)
        list.add(shoppingCartVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCartByProductNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShoppingCartVoReq()).compareTo(other.isSetShoppingCartVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShoppingCartVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingCartVoReq, other.shoppingCartVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCartByProductNum_args(");
      boolean first = true;

      sb.append("shoppingCartVoReq:");
      if (this.shoppingCartVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.shoppingCartVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shoppingCartVoReq != null) {
        shoppingCartVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCartByProductNum_argsStandardSchemeFactory implements SchemeFactory {
      public updateCartByProductNum_argsStandardScheme getScheme() {
        return new updateCartByProductNum_argsStandardScheme();
      }
    }

    private static class updateCartByProductNum_argsStandardScheme extends StandardScheme<updateCartByProductNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCartByProductNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOPPING_CART_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
                struct.shoppingCartVoReq.read(iprot);
                struct.setShoppingCartVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCartByProductNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shoppingCartVoReq != null) {
          oprot.writeFieldBegin(SHOPPING_CART_VO_REQ_FIELD_DESC);
          struct.shoppingCartVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCartByProductNum_argsTupleSchemeFactory implements SchemeFactory {
      public updateCartByProductNum_argsTupleScheme getScheme() {
        return new updateCartByProductNum_argsTupleScheme();
      }
    }

    private static class updateCartByProductNum_argsTupleScheme extends TupleScheme<updateCartByProductNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCartByProductNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShoppingCartVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShoppingCartVoReq()) {
          struct.shoppingCartVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCartByProductNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
          struct.shoppingCartVoReq.read(iprot);
          struct.setShoppingCartVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateCartByProductNum_result implements org.apache.thrift.TBase<updateCartByProductNum_result, updateCartByProductNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCartByProductNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCartByProductNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCartByProductNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCartByProductNum_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCartByProductNum_result.class, metaDataMap);
    }

    public updateCartByProductNum_result() {
    }

    public updateCartByProductNum_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCartByProductNum_result(updateCartByProductNum_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateCartByProductNum_result deepCopy() {
      return new updateCartByProductNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateCartByProductNum_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCartByProductNum_result)
        return this.equals((updateCartByProductNum_result)that);
      return false;
    }

    public boolean equals(updateCartByProductNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCartByProductNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCartByProductNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCartByProductNum_resultStandardSchemeFactory implements SchemeFactory {
      public updateCartByProductNum_resultStandardScheme getScheme() {
        return new updateCartByProductNum_resultStandardScheme();
      }
    }

    private static class updateCartByProductNum_resultStandardScheme extends StandardScheme<updateCartByProductNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCartByProductNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCartByProductNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCartByProductNum_resultTupleSchemeFactory implements SchemeFactory {
      public updateCartByProductNum_resultTupleScheme getScheme() {
        return new updateCartByProductNum_resultTupleScheme();
      }
    }

    private static class updateCartByProductNum_resultTupleScheme extends TupleScheme<updateCartByProductNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCartByProductNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCartByProductNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBatchCart_args implements org.apache.thrift.TBase<deleteBatchCart_args, deleteBatchCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBatchCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBatchCart_args");

    private static final org.apache.thrift.protocol.TField SHOPPING_CART_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingCartVoReq", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBatchCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBatchCart_argsTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOPPING_CART_VO_REQ((short)1, "shoppingCartVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOPPING_CART_VO_REQ
            return SHOPPING_CART_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOPPING_CART_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("shoppingCartVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.shopingcart.ShoppingCartVoReq.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBatchCart_args.class, metaDataMap);
    }

    public deleteBatchCart_args() {
    }

    public deleteBatchCart_args(
      List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq)
    {
      this();
      this.shoppingCartVoReq = shoppingCartVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBatchCart_args(deleteBatchCart_args other) {
      if (other.isSetShoppingCartVoReq()) {
        List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> __this__shoppingCartVoReq = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq>(other.shoppingCartVoReq.size());
        for (com.froad.thrift.vo.shopingcart.ShoppingCartVoReq other_element : other.shoppingCartVoReq) {
          __this__shoppingCartVoReq.add(new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq(other_element));
        }
        this.shoppingCartVoReq = __this__shoppingCartVoReq;
      }
    }

    public deleteBatchCart_args deepCopy() {
      return new deleteBatchCart_args(this);
    }

    @Override
    public void clear() {
      this.shoppingCartVoReq = null;
    }

    public int getShoppingCartVoReqSize() {
      return (this.shoppingCartVoReq == null) ? 0 : this.shoppingCartVoReq.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> getShoppingCartVoReqIterator() {
      return (this.shoppingCartVoReq == null) ? null : this.shoppingCartVoReq.iterator();
    }

    public void addToShoppingCartVoReq(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq elem) {
      if (this.shoppingCartVoReq == null) {
        this.shoppingCartVoReq = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq>();
      }
      this.shoppingCartVoReq.add(elem);
    }

    public List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> getShoppingCartVoReq() {
      return this.shoppingCartVoReq;
    }

    public deleteBatchCart_args setShoppingCartVoReq(List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq> shoppingCartVoReq) {
      this.shoppingCartVoReq = shoppingCartVoReq;
      return this;
    }

    public void unsetShoppingCartVoReq() {
      this.shoppingCartVoReq = null;
    }

    /** Returns true if field shoppingCartVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetShoppingCartVoReq() {
      return this.shoppingCartVoReq != null;
    }

    public void setShoppingCartVoReqIsSet(boolean value) {
      if (!value) {
        this.shoppingCartVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        if (value == null) {
          unsetShoppingCartVoReq();
        } else {
          setShoppingCartVoReq((List<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return getShoppingCartVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return isSetShoppingCartVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBatchCart_args)
        return this.equals((deleteBatchCart_args)that);
      return false;
    }

    public boolean equals(deleteBatchCart_args that) {
      if (that == null)
        return false;

      boolean this_present_shoppingCartVoReq = true && this.isSetShoppingCartVoReq();
      boolean that_present_shoppingCartVoReq = true && that.isSetShoppingCartVoReq();
      if (this_present_shoppingCartVoReq || that_present_shoppingCartVoReq) {
        if (!(this_present_shoppingCartVoReq && that_present_shoppingCartVoReq))
          return false;
        if (!this.shoppingCartVoReq.equals(that.shoppingCartVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shoppingCartVoReq = true && (isSetShoppingCartVoReq());
      list.add(present_shoppingCartVoReq);
      if (present_shoppingCartVoReq)
        list.add(shoppingCartVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBatchCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShoppingCartVoReq()).compareTo(other.isSetShoppingCartVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShoppingCartVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingCartVoReq, other.shoppingCartVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBatchCart_args(");
      boolean first = true;

      sb.append("shoppingCartVoReq:");
      if (this.shoppingCartVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.shoppingCartVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBatchCart_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBatchCart_argsStandardScheme getScheme() {
        return new deleteBatchCart_argsStandardScheme();
      }
    }

    private static class deleteBatchCart_argsStandardScheme extends StandardScheme<deleteBatchCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBatchCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOPPING_CART_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.shoppingCartVoReq = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq>(_list8.size);
                  com.froad.thrift.vo.shopingcart.ShoppingCartVoReq _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
                    _elem9.read(iprot);
                    struct.shoppingCartVoReq.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setShoppingCartVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBatchCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shoppingCartVoReq != null) {
          oprot.writeFieldBegin(SHOPPING_CART_VO_REQ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.shoppingCartVoReq.size()));
            for (com.froad.thrift.vo.shopingcart.ShoppingCartVoReq _iter11 : struct.shoppingCartVoReq)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBatchCart_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBatchCart_argsTupleScheme getScheme() {
        return new deleteBatchCart_argsTupleScheme();
      }
    }

    private static class deleteBatchCart_argsTupleScheme extends TupleScheme<deleteBatchCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBatchCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShoppingCartVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShoppingCartVoReq()) {
          {
            oprot.writeI32(struct.shoppingCartVoReq.size());
            for (com.froad.thrift.vo.shopingcart.ShoppingCartVoReq _iter12 : struct.shoppingCartVoReq)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBatchCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.shoppingCartVoReq = new ArrayList<com.froad.thrift.vo.shopingcart.ShoppingCartVoReq>(_list13.size);
            com.froad.thrift.vo.shopingcart.ShoppingCartVoReq _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
              _elem14.read(iprot);
              struct.shoppingCartVoReq.add(_elem14);
            }
          }
          struct.setShoppingCartVoReqIsSet(true);
        }
      }
    }

  }

  public static class deleteBatchCart_result implements org.apache.thrift.TBase<deleteBatchCart_result, deleteBatchCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBatchCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBatchCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBatchCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBatchCart_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBatchCart_result.class, metaDataMap);
    }

    public deleteBatchCart_result() {
    }

    public deleteBatchCart_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBatchCart_result(deleteBatchCart_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteBatchCart_result deepCopy() {
      return new deleteBatchCart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteBatchCart_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBatchCart_result)
        return this.equals((deleteBatchCart_result)that);
      return false;
    }

    public boolean equals(deleteBatchCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBatchCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBatchCart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBatchCart_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBatchCart_resultStandardScheme getScheme() {
        return new deleteBatchCart_resultStandardScheme();
      }
    }

    private static class deleteBatchCart_resultStandardScheme extends StandardScheme<deleteBatchCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBatchCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBatchCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBatchCart_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBatchCart_resultTupleScheme getScheme() {
        return new deleteBatchCart_resultTupleScheme();
      }
    }

    private static class deleteBatchCart_resultTupleScheme extends TupleScheme<deleteBatchCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBatchCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBatchCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addCart_args implements org.apache.thrift.TBase<addCart_args, addCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCart_args");

    private static final org.apache.thrift.protocol.TField SHOPPING_CART_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingCartVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCart_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOPPING_CART_VO_REQ((short)1, "shoppingCartVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOPPING_CART_VO_REQ
            return SHOPPING_CART_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOPPING_CART_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("shoppingCartVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.shopingcart.ShoppingCartVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCart_args.class, metaDataMap);
    }

    public addCart_args() {
    }

    public addCart_args(
      com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq)
    {
      this();
      this.shoppingCartVoReq = shoppingCartVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCart_args(addCart_args other) {
      if (other.isSetShoppingCartVoReq()) {
        this.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq(other.shoppingCartVoReq);
      }
    }

    public addCart_args deepCopy() {
      return new addCart_args(this);
    }

    @Override
    public void clear() {
      this.shoppingCartVoReq = null;
    }

    public com.froad.thrift.vo.shopingcart.ShoppingCartVoReq getShoppingCartVoReq() {
      return this.shoppingCartVoReq;
    }

    public addCart_args setShoppingCartVoReq(com.froad.thrift.vo.shopingcart.ShoppingCartVoReq shoppingCartVoReq) {
      this.shoppingCartVoReq = shoppingCartVoReq;
      return this;
    }

    public void unsetShoppingCartVoReq() {
      this.shoppingCartVoReq = null;
    }

    /** Returns true if field shoppingCartVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetShoppingCartVoReq() {
      return this.shoppingCartVoReq != null;
    }

    public void setShoppingCartVoReqIsSet(boolean value) {
      if (!value) {
        this.shoppingCartVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        if (value == null) {
          unsetShoppingCartVoReq();
        } else {
          setShoppingCartVoReq((com.froad.thrift.vo.shopingcart.ShoppingCartVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return getShoppingCartVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOPPING_CART_VO_REQ:
        return isSetShoppingCartVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCart_args)
        return this.equals((addCart_args)that);
      return false;
    }

    public boolean equals(addCart_args that) {
      if (that == null)
        return false;

      boolean this_present_shoppingCartVoReq = true && this.isSetShoppingCartVoReq();
      boolean that_present_shoppingCartVoReq = true && that.isSetShoppingCartVoReq();
      if (this_present_shoppingCartVoReq || that_present_shoppingCartVoReq) {
        if (!(this_present_shoppingCartVoReq && that_present_shoppingCartVoReq))
          return false;
        if (!this.shoppingCartVoReq.equals(that.shoppingCartVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shoppingCartVoReq = true && (isSetShoppingCartVoReq());
      list.add(present_shoppingCartVoReq);
      if (present_shoppingCartVoReq)
        list.add(shoppingCartVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShoppingCartVoReq()).compareTo(other.isSetShoppingCartVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShoppingCartVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingCartVoReq, other.shoppingCartVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCart_args(");
      boolean first = true;

      sb.append("shoppingCartVoReq:");
      if (this.shoppingCartVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.shoppingCartVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shoppingCartVoReq != null) {
        shoppingCartVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCart_argsStandardSchemeFactory implements SchemeFactory {
      public addCart_argsStandardScheme getScheme() {
        return new addCart_argsStandardScheme();
      }
    }

    private static class addCart_argsStandardScheme extends StandardScheme<addCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOPPING_CART_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
                struct.shoppingCartVoReq.read(iprot);
                struct.setShoppingCartVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shoppingCartVoReq != null) {
          oprot.writeFieldBegin(SHOPPING_CART_VO_REQ_FIELD_DESC);
          struct.shoppingCartVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCart_argsTupleSchemeFactory implements SchemeFactory {
      public addCart_argsTupleScheme getScheme() {
        return new addCart_argsTupleScheme();
      }
    }

    private static class addCart_argsTupleScheme extends TupleScheme<addCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShoppingCartVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShoppingCartVoReq()) {
          struct.shoppingCartVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shoppingCartVoReq = new com.froad.thrift.vo.shopingcart.ShoppingCartVoReq();
          struct.shoppingCartVoReq.read(iprot);
          struct.setShoppingCartVoReqIsSet(true);
        }
      }
    }

  }

  public static class addCart_result implements org.apache.thrift.TBase<addCart_result, addCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCart_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCart_result.class, metaDataMap);
    }

    public addCart_result() {
    }

    public addCart_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCart_result(addCart_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addCart_result deepCopy() {
      return new addCart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addCart_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCart_result)
        return this.equals((addCart_result)that);
      return false;
    }

    public boolean equals(addCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCart_resultStandardSchemeFactory implements SchemeFactory {
      public addCart_resultStandardScheme getScheme() {
        return new addCart_resultStandardScheme();
      }
    }

    private static class addCart_resultStandardScheme extends StandardScheme<addCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCart_resultTupleSchemeFactory implements SchemeFactory {
      public addCart_resultTupleScheme getScheme() {
        return new addCart_resultTupleScheme();
      }
    }

    private static class addCart_resultTupleScheme extends TupleScheme<addCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCartCount_args implements org.apache.thrift.TBase<getCartCount_args, getCartCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCartCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartCount_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartCount_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartCount_args.class, metaDataMap);
    }

    public getCartCount_args() {
    }

    public getCartCount_args(
      long memberCode,
      String clientId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartCount_args(getCartCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getCartCount_args deepCopy() {
      return new getCartCount_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getCartCount_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getCartCount_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartCount_args)
        return this.equals((getCartCount_args)that);
      return false;
    }

    public boolean equals(getCartCount_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartCount_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartCount_argsStandardSchemeFactory implements SchemeFactory {
      public getCartCount_argsStandardScheme getScheme() {
        return new getCartCount_argsStandardScheme();
      }
    }

    private static class getCartCount_argsStandardScheme extends StandardScheme<getCartCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartCount_argsTupleSchemeFactory implements SchemeFactory {
      public getCartCount_argsTupleScheme getScheme() {
        return new getCartCount_argsTupleScheme();
      }
    }

    private static class getCartCount_argsTupleScheme extends TupleScheme<getCartCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getCartCount_result implements org.apache.thrift.TBase<getCartCount_result, getCartCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCartCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartCount_result.class, metaDataMap);
    }

    public getCartCount_result() {
    }

    public getCartCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartCount_result(getCartCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCartCount_result deepCopy() {
      return new getCartCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCartCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartCount_result)
        return this.equals((getCartCount_result)that);
      return false;
    }

    public boolean equals(getCartCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartCount_resultStandardSchemeFactory implements SchemeFactory {
      public getCartCount_resultStandardScheme getScheme() {
        return new getCartCount_resultStandardScheme();
      }
    }

    private static class getCartCount_resultStandardScheme extends StandardScheme<getCartCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartCount_resultTupleSchemeFactory implements SchemeFactory {
      public getCartCount_resultTupleScheme getScheme() {
        return new getCartCount_resultTupleScheme();
      }
    }

    private static class getCartCount_resultTupleScheme extends TupleScheme<getCartCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDelivery_args implements org.apache.thrift.TBase<updateDelivery_args, updateDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDelivery_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDelivery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDelivery_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required
    public String merchantId; // required
    public String productId; // required
    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId"),
      MERCHANT_ID((short)3, "merchantId"),
      PRODUCT_ID((short)4, "productId"),
      OUTLET_ID((short)5, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // MERCHANT_ID
            return MERCHANT_ID;
          case 4: // PRODUCT_ID
            return PRODUCT_ID;
          case 5: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDelivery_args.class, metaDataMap);
    }

    public updateDelivery_args() {
    }

    public updateDelivery_args(
      long memberCode,
      String clientId,
      String merchantId,
      String productId,
      String outletId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
      this.merchantId = merchantId;
      this.productId = productId;
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDelivery_args(updateDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public updateDelivery_args deepCopy() {
      return new updateDelivery_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
      this.merchantId = null;
      this.productId = null;
      this.outletId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public updateDelivery_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public updateDelivery_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public updateDelivery_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public updateDelivery_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public String getOutletId() {
      return this.outletId;
    }

    public updateDelivery_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_ID:
        return getProductId();

      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_ID:
        return isSetProductId();
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDelivery_args)
        return this.equals((updateDelivery_args)that);
      return false;
    }

    public boolean equals(updateDelivery_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDelivery_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDelivery_argsStandardSchemeFactory implements SchemeFactory {
      public updateDelivery_argsStandardScheme getScheme() {
        return new updateDelivery_argsStandardScheme();
      }
    }

    private static class updateDelivery_argsStandardScheme extends StandardScheme<updateDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDelivery_argsTupleSchemeFactory implements SchemeFactory {
      public updateDelivery_argsTupleScheme getScheme() {
        return new updateDelivery_argsTupleScheme();
      }
    }

    private static class updateDelivery_argsTupleScheme extends TupleScheme<updateDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(2);
        }
        if (struct.isSetProductId()) {
          optionals.set(3);
        }
        if (struct.isSetOutletId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class updateDelivery_result implements org.apache.thrift.TBase<updateDelivery_result, updateDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDelivery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDelivery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDelivery_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDelivery_result.class, metaDataMap);
    }

    public updateDelivery_result() {
    }

    public updateDelivery_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDelivery_result(updateDelivery_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateDelivery_result deepCopy() {
      return new updateDelivery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateDelivery_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDelivery_result)
        return this.equals((updateDelivery_result)that);
      return false;
    }

    public boolean equals(updateDelivery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDelivery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDelivery_resultStandardSchemeFactory implements SchemeFactory {
      public updateDelivery_resultStandardScheme getScheme() {
        return new updateDelivery_resultStandardScheme();
      }
    }

    private static class updateDelivery_resultStandardScheme extends StandardScheme<updateDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDelivery_resultTupleSchemeFactory implements SchemeFactory {
      public updateDelivery_resultTupleScheme getScheme() {
        return new updateDelivery_resultTupleScheme();
      }
    }

    private static class updateDelivery_resultTupleScheme extends TupleScheme<updateDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCartProductCount_args implements org.apache.thrift.TBase<getCartProductCount_args, getCartProductCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCartProductCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartProductCount_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartProductCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartProductCount_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartProductCount_args.class, metaDataMap);
    }

    public getCartProductCount_args() {
    }

    public getCartProductCount_args(
      long memberCode,
      String clientId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartProductCount_args(getCartProductCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getCartProductCount_args deepCopy() {
      return new getCartProductCount_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getCartProductCount_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getCartProductCount_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartProductCount_args)
        return this.equals((getCartProductCount_args)that);
      return false;
    }

    public boolean equals(getCartProductCount_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartProductCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartProductCount_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartProductCount_argsStandardSchemeFactory implements SchemeFactory {
      public getCartProductCount_argsStandardScheme getScheme() {
        return new getCartProductCount_argsStandardScheme();
      }
    }

    private static class getCartProductCount_argsStandardScheme extends StandardScheme<getCartProductCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartProductCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartProductCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartProductCount_argsTupleSchemeFactory implements SchemeFactory {
      public getCartProductCount_argsTupleScheme getScheme() {
        return new getCartProductCount_argsTupleScheme();
      }
    }

    private static class getCartProductCount_argsTupleScheme extends TupleScheme<getCartProductCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartProductCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartProductCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getCartProductCount_result implements org.apache.thrift.TBase<getCartProductCount_result, getCartProductCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCartProductCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCartProductCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCartProductCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCartProductCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCartProductCount_result.class, metaDataMap);
    }

    public getCartProductCount_result() {
    }

    public getCartProductCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCartProductCount_result(getCartProductCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCartProductCount_result deepCopy() {
      return new getCartProductCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCartProductCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCartProductCount_result)
        return this.equals((getCartProductCount_result)that);
      return false;
    }

    public boolean equals(getCartProductCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCartProductCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCartProductCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCartProductCount_resultStandardSchemeFactory implements SchemeFactory {
      public getCartProductCount_resultStandardScheme getScheme() {
        return new getCartProductCount_resultStandardScheme();
      }
    }

    private static class getCartProductCount_resultStandardScheme extends StandardScheme<getCartProductCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCartProductCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCartProductCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCartProductCount_resultTupleSchemeFactory implements SchemeFactory {
      public getCartProductCount_resultTupleScheme getScheme() {
        return new getCartProductCount_resultTupleScheme();
      }
    }

    private static class getCartProductCount_resultTupleScheme extends TupleScheme<getCartProductCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCartProductCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCartProductCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
